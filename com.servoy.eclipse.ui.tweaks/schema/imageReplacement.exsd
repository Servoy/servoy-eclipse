<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="com.servoy.eclipse.ui.tweaks" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="com.servoy.eclipse.ui.tweaks" id="com.servoy.eclipse.ui.tweaks.imageReplacement" name="Can replace (almost) any image that is used in Eclipse with custom ones"/>
      </appInfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
         <documentation>
            The idea behind this extension is to be able to replace images anywhere in the workbench, not only in your own plugins.
Using this extension you can provide a set of mappings between original image locations and desired alternate image locations.

When an image gets loaded, it will be intercepted by this plugin and if the location being loaded is marked for replacement, the alternate image location is used instead.

In order to know what you can intercept/replace you can modify the &quot;init.properties&quot; file from the &quot;com.servoy.eclipse.ui.tweaks&quot; bundle and change &quot;listInterceptableImageDescriptorsInConsole&quot; to true. Developer will then spam in console output all original image locations being loaded. (so you need to start it from command line to see console output)
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <choice>
               <element ref="urlBasedImageReplacement"/>
               <element ref="classAndFileBasedImageReplacement"/>
            </choice>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="urlBasedImageReplacement">
      <annotation>
         <documentation>
            Replaces an ImageDescriptor that is created via URL (ImageDescriptor.createFromURL(...)) via an alternative URL based or class+fileName based image.
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="alternateClassAndFileNameImageLocation"/>
            <element ref="alternateURLImageLocation"/>
         </choice>
         <attribute name="originalImageURL" type="string" use="required">
            <annotation>
               <documentation>
                  For example:

platform:/plugin/org.eclipse.ui.navigator.resources/icons/full/eview16/resource_persp.gif
or
platform:/plugin/org.eclipse.ui.navigator.resources/$nl$/icons/full/eview16/resource_persp.gif
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="classAndFileBasedImageReplacement">
      <annotation>
         <documentation>
            Replaces an ImageDescriptor that is created via class+fileName (ImageDescriptor.createFromFile(...)) via an alternative URL based or class+fileName based image.
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="alternateClassAndFileNameImageLocation"/>
            <element ref="alternateURLImageLocation"/>
         </choice>
         <attribute name="originalRelativeToFullClassName" type="string" use="required">
            <annotation>
               <documentation>
                  The originalImageFileName will be relative to the location of this class file.
The class file is specified via it&apos;s fully qualified class name, so not by giving an actual class, to avoid adding a dependency to the original image&apos;s bundle - for convenience.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="originalImageFileName" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the image file that is located relative to given &quot;originalRelativeToClass&quot; that should be replaced with an alternate image defined in this node&apos;s child.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="alternateClassAndFileNameImageLocation">
      <annotation>
         <documentation>
            Specifies the alternate location to load the image from - by giving it a Class and a fileName.
Generally I think it is easier to use the alternateURLImageLocation instead (you can target icons from different locations in plugins with that as well and you don&apos;t need a dependency to that bundle - to get the Class).
         </documentation>
      </annotation>
      <complexType>
         <attribute name="relativeToClass" type="string" use="required">
            <annotation>
               <documentation>
                  The imageFileName will be relative to the location of this class file.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="imageFileName" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the image file that is located relative to given &quot;relativeToClass&quot;.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="alternateURLImageLocation">
      <annotation>
         <documentation>
            Specifies the alternate location to load the image from - by giving it URL (can be a platform based URL to target contents of any plugin).
         </documentation>
      </annotation>
      <complexType>
         <attribute name="imageURL" type="string" use="required">
            <annotation>
               <documentation>
                  For example:

platform:/plugin/org.eclipse.ui.navigator.resources/icons/full/eview16/resource_persp.gif
or
platform:/plugin/org.eclipse.ui.navigator.resources/$nl$/icons/full/eview16/resource_persp.gif
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiinfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
