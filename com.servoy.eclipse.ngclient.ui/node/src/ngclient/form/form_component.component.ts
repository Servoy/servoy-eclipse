import { Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, ViewChild, ViewChildren,
        TemplateRef,  Directive, ElementRef, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, SimpleChange } from '@angular/core';

import { FormCache, StructureCache, FormComponentCache, ComponentCache, instanceOfApiExecutor, PartCache } from '../types';

import { ServoyService } from '../servoy.service';

import { SabloService } from '../../sablo/sablo.service';
import { LoggerService, LoggerFactory } from '../../sablo/logger.service';

import { ServoyApi } from '../servoy_api';
import { FormService } from '../form.service';
import { ServoyBaseComponent } from '../basecomponent';

@Component({
    // eslint-disable-next-line
    selector: 'svy-form',
    changeDetection: ChangeDetectionStrategy.OnPush,
    /* eslint-disable max-len */
    template: `
      <div *ngIf="formCache.absolute" [ngStyle]="getAbsoluteFormStyle()" class="svy-form" [ngClass]="formClasses" svyAutosave> <!-- main div -->
           <div *ngFor="let part of formCache.parts" [svyContainerStyle]="part"> <!-- part div -->
               <div *ngFor="let item of part.items" [svyContainerStyle]="item" class="svy-wrapper" [ngStyle]="item.model.visible === false && {'display': 'none'}" style="position:absolute"> <!-- wrapper div -->
                   <ng-template [ngTemplateOutlet]="getTemplate(item)" [ngTemplateOutletContext]="{ state:item, callback:this }"></ng-template>  <!-- component or formcomponent -->
                </div>
          </div>
      </div>
      <div *ngIf="!formCache.absolute" class="svy-form svy-respform svy-overflow-auto" [ngClass]="formClasses"> <!-- main container div -->
            <ng-template *ngFor="let item of formCache.mainStructure.items" [ngTemplateOutlet]="getTemplate(item)" [ngTemplateOutletContext]="{ state:item, callback:this}"></ng-template>  <!-- component or responsive div  -->
      </div>

      <ng-template  #svyResponsiveDiv  let-state="state" >
          <div [svyContainerStyle]="state" class="svy-layoutcontainer">
               <ng-template *ngFor="let item of state.items" [ngTemplateOutlet]="getTemplate(item)" [ngTemplateOutletContext]="{ state:item, callback:this}"></ng-template>
          </div>
      </ng-template>
      <ng-template  #formComponentAbsoluteDiv  let-state="state" >
          <div [svyContainerStyle]="state.formComponentProperties" style="position:relative" class="svy-formcomponent">
               <div *ngFor="let item of state.items" [svyContainerStyle]="item" class="svy-wrapper" [ngStyle]="item.model.visible === false && {'display': 'none'}" style="position:absolute"> <!-- wrapper div -->
                   <ng-template [ngTemplateOutlet]="getTemplate(item)" [ngTemplateOutletContext]="{ state:item, callback:this }"></ng-template>  <!-- component  -->
               </div>
          </div>
      </ng-template>
      <ng-template  #formComponentResponsiveDiv  let-state="state" >
          <ng-template *ngFor="let item of state.items" [ngTemplateOutlet]="getTemplate(item)" [ngTemplateOutletContext]="{ state:item, callback:this }"></ng-template>  <!-- component  -->
      </ng-template>
      <!-- component template generate start -->
<ng-template #aggridDatasettable let-callback="callback" let-state="state"><aggrid-datasettable  [_internalColumnState]="state.model._internalColumnState" (_internalColumnStateChange)="callback.datachange(state,'_internalColumnState',$event)" [_internalExpandedState]="state.model._internalExpandedState" (_internalExpandedStateChange)="callback.datachange(state,'_internalExpandedState',$event)" [_internalFormEditorValue]="state.model._internalFormEditorValue" (_internalFormEditorValueChange)="callback.datachange(state,'_internalFormEditorValue',$event)" [arrowsUpDownMoveWhenEditing]="state.model.arrowsUpDownMoveWhenEditing" [servoyAttributes]="state.model.servoyAttributes" [columns]="state.model.columns" [columnState]="state.model.columnState" (columnStateChange)="callback.datachange(state,'columnState',$event)" [cssPosition]="state.model.cssPosition" [data]="state.model.data" [enableColumnResize]="state.model.enableColumnResize" [enableSorting]="state.model.enableSorting" [gridOptions]="state.model.gridOptions" [groupRowRendererFunc]="state.model.groupRowRendererFunc" [groupStyleClass]="state.model.groupStyleClass" [headerHeight]="state.model.headerHeight" [iconConfig]="state.model.iconConfig" [lastRowIndex]="state.model.lastRowIndex" [localeText]="state.model.localeText" [location]="state.model.location" [mainMenuItemsConfig]="state.model.mainMenuItemsConfig" [multiSelect]="state.model.multiSelect" [pivotMode]="state.model.pivotMode" [responsiveHeight]="state.model.responsiveHeight" [rowHeight]="state.model.rowHeight" [rowStyleClassFunc]="state.model.rowStyleClassFunc" [showColumnsMenuTab]="state.model.showColumnsMenuTab" [size]="state.model.size" [styleClass]="state.model.styleClass" [toolPanelConfig]="state.model.toolPanelConfig" [useLazyLoading]="state.model.useLazyLoading" *ngIf="state.model.visible" [onCellClick]="callback.getHandler(state,'onCellClick')" [onCellDoubleClick]="callback.getHandler(state,'onCellDoubleClick')" [onColumnDataChange]="callback.getHandler(state,'onColumnDataChange')" [onColumnFormEditStarted]="callback.getHandler(state,'onColumnFormEditStarted')" [onColumnStateChanged]="callback.getHandler(state,'onColumnStateChanged')" [onLazyLoadingGetRows]="callback.getHandler(state,'onLazyLoadingGetRows')" [onReady]="callback.getHandler(state,'onReady')" [onRowGroupOpened]="callback.getHandler(state,'onRowGroupOpened')" [onRowSelected]="callback.getHandler(state,'onRowSelected')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></aggrid-datasettable></ng-template>
<ng-template #aggridGroupingtable let-callback="callback" let-state="state"><aggrid-groupingtable  [_internalAutoSizeState]="state.model._internalAutoSizeState" (_internalAutoSizeStateChange)="callback.datachange(state,'_internalAutoSizeState',$event)" [_internalColumnState]="state.model._internalColumnState" (_internalColumnStateChange)="callback.datachange(state,'_internalColumnState',$event)" [_internalExpandedState]="state.model._internalExpandedState" (_internalExpandedStateChange)="callback.datachange(state,'_internalExpandedState',$event)" [_internalFormEditorValue]="state.model._internalFormEditorValue" (_internalFormEditorValueChange)="callback.datachange(state,'_internalFormEditorValue',$event)" [arrowsUpDownMoveWhenEditing]="state.model.arrowsUpDownMoveWhenEditing" [servoyAttributes]="state.model.servoyAttributes" [columns]="state.model.columns" (columnsChange)="callback.datachange(state,'columns',$event)" [columnState]="state.model.columnState" (columnStateChange)="callback.datachange(state,'columnState',$event)" [columnStateOnError]="state.model.columnStateOnError" [cssPosition]="state.model.cssPosition" [enableColumnMove]="state.model.enableColumnMove" [enableColumnResize]="state.model.enableColumnResize" [enableSorting]="state.model.enableSorting" [filterModel]="state.model.filterModel" [gridOptions]="state.model.gridOptions" [groupUseEntireRow]="state.model.groupUseEntireRow" [hashedColumns]="state.model.hashedColumns" [hashedFoundsets]="state.model.hashedFoundsets" (hashedFoundsetsChange)="callback.datachange(state,'hashedFoundsets',$event)" [iconConfig]="state.model.iconConfig" [localeText]="state.model.localeText" [location]="state.model.location" [mainMenuItemsConfig]="state.model.mainMenuItemsConfig" [myFoundset]="state.model.myFoundset" [readOnly]="state.model.readOnly" [readOnlyColumnIds]="state.model.readOnlyColumnIds" [responsiveHeight]="state.model.responsiveHeight" [restoreStates]="state.model.restoreStates" [rowHeight]="state.model.rowHeight" [rowStyleClassDataprovider]="state.model.rowStyleClassDataprovider" [showColumnsMenuTab]="state.model.showColumnsMenuTab" [showGroupCount]="state.model.showGroupCount" [size]="state.model.size" [styleClass]="state.model.styleClass" [toolPanelConfig]="state.model.toolPanelConfig" [tooltipTextRefreshData]="state.model.tooltipTextRefreshData" *ngIf="state.model.visible" [onCellClick]="callback.getHandler(state,'onCellClick')" [onCellDoubleClick]="callback.getHandler(state,'onCellDoubleClick')" [onCellRightClick]="callback.getHandler(state,'onCellRightClick')" [onColumnDataChange]="callback.getHandler(state,'onColumnDataChange')" [onColumnFormEditStarted]="callback.getHandler(state,'onColumnFormEditStarted')" [onColumnStateChanged]="callback.getHandler(state,'onColumnStateChanged')" [onFooterClick]="callback.getHandler(state,'onFooterClick')" [onReady]="callback.getHandler(state,'onReady')" [onRowGroupOpened]="callback.getHandler(state,'onRowGroupOpened')" [onSelectedRowsChanged]="callback.getHandler(state,'onSelectedRowsChanged')" [onSort]="callback.getHandler(state,'onSort')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></aggrid-groupingtable></ng-template>
<ng-template #bootstrapcomponentsAccordion let-callback="callback" let-state="state"><bootstrapcomponents-accordion  [activeTabIndex]="state.model.activeTabIndex" (activeTabIndexChange)="callback.datachange(state,'activeTabIndex',$event)" [servoyAttributes]="state.model.servoyAttributes" [containerStyleClass]="state.model.containerStyleClass" [cssPosition]="state.model.cssPosition" [height]="state.model.height" [location]="state.model.location" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabIndex]="state.model.tabIndex" (tabIndexChange)="callback.datachange(state,'tabIndex',$event)" [tabs]="state.model.tabs" (tabsChange)="callback.datachange(state,'tabs',$event)" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></bootstrapcomponents-accordion></ng-template>
<ng-template #bootstrapcomponentsButton let-callback="callback" let-state="state"><bootstrapcomponents-button  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [imageStyleClass]="state.model.imageStyleClass" [location]="state.model.location" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDoubleClickMethodID]="callback.getHandler(state,'onDoubleClickMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-button></ng-template>
<ng-template #bootstrapcomponentsCalendar let-callback="callback" let-state="state"><bootstrapcomponents-calendar  [servoyAttributes]="state.model.servoyAttributes" [calendarWeeks]="state.model.calendarWeeks" (calendarWeeksChange)="callback.datachange(state,'calendarWeeks',$event)" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [disabledDates]="state.model.disabledDates" (disabledDatesChange)="callback.datachange(state,'disabledDates',$event)" [disabledDays]="state.model.disabledDays" (disabledDaysChange)="callback.datachange(state,'disabledDays',$event)" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [format]="state.model.format" [keepInvalid]="state.model.keepInvalid" (keepInvalidChange)="callback.datachange(state,'keepInvalid',$event)" [location]="state.model.location" [maxDate]="state.model.maxDate" (maxDateChange)="callback.datachange(state,'maxDate',$event)" [minDate]="state.model.minDate" (minDateChange)="callback.datachange(state,'minDate',$event)" [pickerOnly]="state.model.pickerOnly" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-calendar></ng-template>
<ng-template #bootstrapcomponentsCalendarinline let-callback="callback" let-state="state"><bootstrapcomponents-calendarinline  [servoyAttributes]="state.model.servoyAttributes" [calendarWeeks]="state.model.calendarWeeks" (calendarWeeksChange)="callback.datachange(state,'calendarWeeks',$event)" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [disabledDates]="state.model.disabledDates" (disabledDatesChange)="callback.datachange(state,'disabledDates',$event)" [disabledDays]="state.model.disabledDays" (disabledDaysChange)="callback.datachange(state,'disabledDays',$event)" [enabled]="state.model.enabled" [location]="state.model.location" [maxDate]="state.model.maxDate" (maxDateChange)="callback.datachange(state,'maxDate',$event)" [minDate]="state.model.minDate" (minDateChange)="callback.datachange(state,'minDate',$event)" [size]="state.model.size" [styleClass]="state.model.styleClass" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-calendarinline></ng-template>
<ng-template #bootstrapcomponentsCheckbox let-callback="callback" let-state="state"><bootstrapcomponents-checkbox  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [location]="state.model.location" [readOnly]="state.model.readOnly" [selectedValue]="state.model.selectedValue" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-checkbox></ng-template>
<ng-template #bootstrapcomponentsChoicegroup let-callback="callback" let-state="state"><bootstrapcomponents-choicegroup  [alignment]="state.model.alignment" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [inputType]="state.model.inputType" [location]="state.model.location" [readOnly]="state.model.readOnly" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-choicegroup></ng-template>
<ng-template #bootstrapcomponentsCombobox let-callback="callback" let-state="state"><bootstrapcomponents-combobox  [appendToBody]="state.model.appendToBody" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [format]="state.model.format" [location]="state.model.location" [readOnly]="state.model.readOnly" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-combobox></ng-template>
<ng-template #bootstrapcomponentsDatalabel let-callback="callback" let-state="state"><bootstrapcomponents-datalabel  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [enabled]="state.model.enabled" [format]="state.model.format" [imageStyleClass]="state.model.imageStyleClass" [location]="state.model.location" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [styleClassExpression]="state.model.styleClassExpression" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDoubleClickMethodID]="callback.getHandler(state,'onDoubleClickMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-datalabel></ng-template>
<ng-template #bootstrapcomponentsImagemedia let-callback="callback" let-state="state"><bootstrapcomponents-imagemedia  [alternate]="state.model.alternate" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [enabled]="state.model.enabled" [location]="state.model.location" [media]="state.model.media" [readOnly]="state.model.readOnly" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-imagemedia></ng-template>
<ng-template #bootstrapcomponentsLabel let-callback="callback" let-state="state"><bootstrapcomponents-label  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [imageStyleClass]="state.model.imageStyleClass" [labelFor]="state.model.labelFor" [location]="state.model.location" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [styleClassExpression]="state.model.styleClassExpression" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDoubleClickMethodID]="callback.getHandler(state,'onDoubleClickMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-label></ng-template>
<ng-template #bootstrapcomponentsList let-callback="callback" let-state="state"><bootstrapcomponents-list  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [editable]="state.model.editable" [enabled]="state.model.enabled" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-list></ng-template>
<ng-template #bootstrapcomponentsSelect let-callback="callback" let-state="state"><bootstrapcomponents-select  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [location]="state.model.location" [multiselect]="state.model.multiselect" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectSize]="state.model.selectSize" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-select></ng-template>
<ng-template #bootstrapcomponentsTablesspanel let-callback="callback" let-state="state"><bootstrapcomponents-tablesspanel  [servoyAttributes]="state.model.servoyAttributes" [containedForm]="state.model.containedForm" [cssPosition]="state.model.cssPosition" [height]="state.model.height" [location]="state.model.location" [relationName]="state.model.relationName" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [waitForData]="state.model.waitForData" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></bootstrapcomponents-tablesspanel></ng-template>
<ng-template #bootstrapcomponentsTabpanel let-callback="callback" let-state="state"><bootstrapcomponents-tabpanel  [activeTabIndex]="state.model.activeTabIndex" (activeTabIndexChange)="callback.datachange(state,'activeTabIndex',$event)" [servoyAttributes]="state.model.servoyAttributes" [closeIconStyleClass]="state.model.closeIconStyleClass" [containerStyleClass]="state.model.containerStyleClass" [cssPosition]="state.model.cssPosition" [height]="state.model.height" [location]="state.model.location" [showTabCloseIcon]="state.model.showTabCloseIcon" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabIndex]="state.model.tabIndex" (tabIndexChange)="callback.datachange(state,'tabIndex',$event)" [tabs]="state.model.tabs" (tabsChange)="callback.datachange(state,'tabs',$event)" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [onTabClickedMethodID]="callback.getHandler(state,'onTabClickedMethodID')" [onTabCloseMethodID]="callback.getHandler(state,'onTabCloseMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></bootstrapcomponents-tabpanel></ng-template>
<ng-template #bootstrapcomponentsTextarea let-callback="callback" let-state="state"><bootstrapcomponents-textarea  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [editable]="state.model.editable" [enabled]="state.model.enabled" [location]="state.model.location" [maxLength]="state.model.maxLength" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-textarea></ng-template>
<ng-template #bootstrapcomponentsTextbox let-callback="callback" let-state="state"><bootstrapcomponents-textbox  [servoyAttributes]="state.model.servoyAttributes" [autocomplete]="state.model.autocomplete" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [editable]="state.model.editable" [enabled]="state.model.enabled" [format]="state.model.format" [inputType]="state.model.inputType" (inputTypeChange)="callback.datachange(state,'inputType',$event)" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-textbox></ng-template>
<ng-template #bootstrapcomponentsTypeahead let-callback="callback" let-state="state"><bootstrapcomponents-typeahead  [appendToBody]="state.model.appendToBody" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [editable]="state.model.editable" [enabled]="state.model.enabled" [format]="state.model.format" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [showAs]="state.model.showAs" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapcomponents-typeahead></ng-template>
<ng-template #bootstrapextracomponentsBadge let-callback="callback" let-state="state"><bootstrapextracomponents-badge  [servoyAttributes]="state.model.servoyAttributes" [badgeText]="state.model.badgeText" [cssPosition]="state.model.cssPosition" [displayType]="state.model.displayType" [enabled]="state.model.enabled" [imageStyleClass]="state.model.imageStyleClass" [location]="state.model.location" [size]="state.model.size" [styleClass]="state.model.styleClass" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onAction]="callback.getHandler(state,'onAction')" [onDoubleClick]="callback.getHandler(state,'onDoubleClick')" [onRightClick]="callback.getHandler(state,'onRightClick')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-badge></ng-template>
<ng-template #bootstrapextracomponentsBreadcrumbs let-callback="callback" let-state="state"><bootstrapextracomponents-breadcrumbs  [servoyAttributes]="state.model.servoyAttributes" [autoRemoveWhenClicked]="state.model.autoRemoveWhenClicked" [breadcrumbs]="state.model.breadcrumbs" (breadcrumbsChange)="callback.datachange(state,'breadcrumbs',$event)" [crumbStyleClass]="state.model.crumbStyleClass" [cssPosition]="state.model.cssPosition" [lastCrumbStyleClass]="state.model.lastCrumbStyleClass" [location]="state.model.location" [size]="state.model.size" [styleClass]="state.model.styleClass" *ngIf="state.model.visible" [onCrumbClicked]="callback.getHandler(state,'onCrumbClicked')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-breadcrumbs></ng-template>
<ng-template #bootstrapextracomponentsButtonsGroup let-callback="callback" let-state="state"><bootstrapextracomponents-buttons-group  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [format]="state.model.format" [inputType]="state.model.inputType" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [showAs]="state.model.showAs" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-buttons-group></ng-template>
<ng-template #bootstrapextracomponentsCarousel let-callback="callback" let-state="state"><bootstrapextracomponents-carousel  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [cycleInterval]="state.model.cycleInterval" [imageCss]="state.model.imageCss" [imageCssInternal]="state.model.imageCssInternal" [imageOptions]="state.model.imageOptions" [lazyLoading]="state.model.lazyLoading" [location]="state.model.location" [noPause]="state.model.noPause" [noTransition]="state.model.noTransition" [responsiveHeight]="state.model.responsiveHeight" [size]="state.model.size" [slides]="state.model.slides" (slidesChange)="callback.datachange(state,'slides',$event)" [slidesFoundset]="state.model.slidesFoundset" [styleClass]="state.model.styleClass" *ngIf="state.model.visible" [onSlideClicked]="callback.getHandler(state,'onSlideClicked')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-carousel></ng-template>
<ng-template #bootstrapextracomponentsDropdown let-callback="callback" let-state="state"><bootstrapextracomponents-dropdown  [servoyAttributes]="state.model.servoyAttributes" [buttonStyleClass]="state.model.buttonStyleClass" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [imageStyleClass]="state.model.imageStyleClass" [isButton]="state.model.isButton" [isSplitButton]="state.model.isSplitButton" [location]="state.model.location" [menuItems]="state.model.menuItems" [size]="state.model.size" [styleClass]="state.model.styleClass" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onAction]="callback.getHandler(state,'onAction')" [onMenuItemSelected]="callback.getHandler(state,'onMenuItemSelected')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-dropdown></ng-template>
<ng-template #bootstrapextracomponentsInputGroup let-callback="callback" let-state="state"><bootstrapextracomponents-input-group  [addOnButtons]="state.model.addOnButtons" [addOns]="state.model.addOns" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProvider]="state.model.dataProvider" (dataProviderChange)="callback.datachange(state,'dataProvider',$event, true)" [editable]="state.model.editable" [enabled]="state.model.enabled" [format]="state.model.format" [inputType]="state.model.inputType" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onAction]="callback.getHandler(state,'onAction')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClick]="callback.getHandler(state,'onRightClick')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-input-group></ng-template>
<ng-template #bootstrapextracomponentsNavbar let-callback="callback" let-state="state"><bootstrapextracomponents-navbar  [servoyAttributes]="state.model.servoyAttributes" [brandLogo]="state.model.brandLogo" [brandLogoStyleClass]="state.model.brandLogoStyleClass" [brandLogoTabindex]="state.model.brandLogoTabindex" [brandText]="state.model.brandText" [brandTextTabindex]="state.model.brandTextTabindex" [collapseOnClick]="state.model.collapseOnClick" [collapsing]="state.model.collapsing" [cssPosition]="state.model.cssPosition" [fixed]="state.model.fixed" [inverse]="state.model.inverse" [location]="state.model.location" [markClickedItemActive]="state.model.markClickedItemActive" [menuItems]="state.model.menuItems" (menuItemsChange)="callback.datachange(state,'menuItems',$event)" [size]="state.model.size" [styleClass]="state.model.styleClass" *ngIf="state.model.visible" [onBrandClicked]="callback.getHandler(state,'onBrandClicked')" [onMenuItemClicked]="callback.getHandler(state,'onMenuItemClicked')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-navbar></ng-template>
<ng-template #bootstrapextracomponentsProgressbar let-callback="callback" let-state="state"><bootstrapextracomponents-progressbar  [animate]="state.model.animate" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [location]="state.model.location" [max]="state.model.max" [showValue]="state.model.showValue" [showValueAsPercentage]="state.model.showValueAsPercentage" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [type]="state.model.type" [value]="state.model.value" [valueText]="state.model.valueText" *ngIf="state.model.visible" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-progressbar></ng-template>
<ng-template #bootstrapextracomponentsRating let-callback="callback" let-state="state"><bootstrapextracomponents-rating  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [max]="state.model.max" [showPercentageOnHover]="state.model.showPercentageOnHover" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [stateOff]="state.model.stateOff" [stateOn]="state.model.stateOn" *ngIf="state.model.visible" [onHover]="callback.getHandler(state,'onHover')" [onLeave]="callback.getHandler(state,'onLeave')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-rating></ng-template>
<ng-template #bootstrapextracomponentsSwitch let-callback="callback" let-state="state"><bootstrapextracomponents-switch  [animate]="state.model.animate" [servoyAttributes]="state.model.servoyAttributes" [componentSize]="state.model.componentSize" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [handleWidth]="state.model.handleWidth" [label]="state.model.label" [labelWidth]="state.model.labelWidth" [location]="state.model.location" [offColor]="state.model.offColor" [offText]="state.model.offText" [onColor]="state.model.onColor" [onText]="state.model.onText" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></bootstrapextracomponents-switch></ng-template>
<ng-template #servoycoreDefaultLoadingIndicator let-callback="callback" let-state="state"><servoycore-defaultLoadingIndicator  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [location]="state.model.location" [size]="state.model.size" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-defaultLoadingIndicator></ng-template>
<ng-template #servoycoreErrorbean let-callback="callback" let-state="state"><servoycore-errorbean  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [error]="state.model.error" [location]="state.model.location" [size]="state.model.size" [toolTipText]="state.model.toolTipText" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-errorbean></ng-template>
<ng-template #servoycoreFormcomponent let-callback="callback" let-state="state"><servoycore-formcomponent  [servoyAttributes]="state.model.servoyAttributes" [containedForm]="state.model.containedForm" [cssPosition]="state.model.cssPosition" [height]="state.model.height" [location]="state.model.location" [size]="state.model.size" [styleClass]="state.model.styleClass" *ngIf="state.model.visible" [width]="state.model.width" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-formcomponent></ng-template>
<ng-template #servoycoreListformcomponent let-callback="callback" let-state="state"><servoycore-listformcomponent  [servoyAttributes]="state.model.servoyAttributes" [containedForm]="state.model.containedForm" [cssPosition]="state.model.cssPosition" [foundset]="state.model.foundset" [location]="state.model.location" [pageLayout]="state.model.pageLayout" [paginationStyleClass]="state.model.paginationStyleClass" [readOnly]="state.model.readOnly" [responsivePageSize]="state.model.responsivePageSize" [rowStyleClass]="state.model.rowStyleClass" [rowStyleClassDataprovider]="state.model.rowStyleClassDataprovider" [selectionClass]="state.model.selectionClass" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onSelectionChanged]="callback.getHandler(state,'onSelectionChanged')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-listformcomponent></ng-template>
<ng-template #servoycoreNavigator let-callback="callback" let-state="state"><servoycore-navigator  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [currentIndex]="state.model.currentIndex" [hasMore]="state.model.hasMore" [location]="state.model.location" [maxIndex]="state.model.maxIndex" [minIndex]="state.model.minIndex" [size]="state.model.size" [setSelectedIndex]="callback.getHandler(state,'setSelectedIndex')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-navigator></ng-template>
<ng-template #servoycorePortal let-callback="callback" let-state="state"><servoycore-portal  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [childElements]="state.model.childElements" (childElementsChange)="callback.datachange(state,'childElements',$event)" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [foreground]="state.model.foreground" [headerHeight]="state.model.headerHeight" [headers]="state.model.headers" (headersChange)="callback.datachange(state,'headers',$event)" [initialSort]="state.model.initialSort" [intercellSpacing]="state.model.intercellSpacing" [location]="state.model.location" [multiLine]="state.model.multiLine" [readOnly]="state.model.readOnly" [readOnlyMode]="state.model.readOnlyMode" [relatedFoundset]="state.model.relatedFoundset" [reorderable]="state.model.reorderable" [resizable]="state.model.resizable" [resizeble]="state.model.resizeble" [rowBGColorCalculation]="state.model.rowBGColorCalculation" [rowHeight]="state.model.rowHeight" [scrollbars]="state.model.scrollbars" [showHorizontalLines]="state.model.showHorizontalLines" [showVerticalLines]="state.model.showVerticalLines" [size]="state.model.size" [sortable]="state.model.sortable" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onDragEndMethodID]="callback.getHandler(state,'onDragEndMethodID')" [onDragMethodID]="callback.getHandler(state,'onDragMethodID')" [onDragOverMethodID]="callback.getHandler(state,'onDragOverMethodID')" [onDropMethodID]="callback.getHandler(state,'onDropMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-portal></ng-template>
<ng-template #servoycoreSlider let-callback="callback" let-state="state"><servoycore-slider  [animate]="state.model.animate" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [location]="state.model.location" [max]="state.model.max" [min]="state.model.min" [orientation]="state.model.orientation" [range]="state.model.range" [size]="state.model.size" [step]="state.model.step" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [onCreateMethodID]="callback.getHandler(state,'onCreateMethodID')" [onSlideMethodID]="callback.getHandler(state,'onSlideMethodID')" [onStartMethodID]="callback.getHandler(state,'onStartMethodID')" [onStopMethodID]="callback.getHandler(state,'onStopMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoycore-slider></ng-template>
<ng-template #servoydefaultButton let-callback="callback" let-state="state"><servoydefault-button  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [displaysTags]="state.model.displaysTags" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [hideText]="state.model.hideText" [horizontalAlignment]="state.model.horizontalAlignment" [imageMediaID]="state.model.imageMediaID" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [mediaOptions]="state.model.mediaOptions" [mnemonic]="state.model.mnemonic" [rolloverCursor]="state.model.rolloverCursor" [rolloverImageMediaID]="state.model.rolloverImageMediaID" [showFocus]="state.model.showFocus" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [textRotation]="state.model.textRotation" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [verticalAlignment]="state.model.verticalAlignment" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDoubleClickMethodID]="callback.getHandler(state,'onDoubleClickMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-button></ng-template>
<ng-template #servoydefaultCalendar let-callback="callback" let-state="state"><servoydefault-calendar  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-calendar></ng-template>
<ng-template #servoydefaultCheck let-callback="callback" let-state="state"><servoydefault-check  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-check></ng-template>
<ng-template #servoydefaultCheckgroup let-callback="callback" let-state="state"><servoydefault-checkgroup  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-checkgroup></ng-template>
<ng-template #servoydefaultCombobox let-callback="callback" let-state="state"><servoydefault-combobox  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-combobox></ng-template>
<ng-template #servoydefaultHtmlarea let-callback="callback" let-state="state"><servoydefault-htmlarea  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-htmlarea></ng-template>
<ng-template #servoydefaultHtmlview let-callback="callback" let-state="state"><servoydefault-htmlview  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [displaysTags]="state.model.displaysTags" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-htmlview></ng-template>
<ng-template #servoydefaultImagemedia let-callback="callback" let-state="state"><servoydefault-imagemedia  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-imagemedia></ng-template>
<ng-template #servoydefaultLabel let-callback="callback" let-state="state"><servoydefault-label  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [displaysTags]="state.model.displaysTags" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [hideText]="state.model.hideText" [horizontalAlignment]="state.model.horizontalAlignment" [imageMediaID]="state.model.imageMediaID" [labelFor]="state.model.labelFor" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [mediaOptions]="state.model.mediaOptions" [mnemonic]="state.model.mnemonic" [rolloverCursor]="state.model.rolloverCursor" [rolloverImageMediaID]="state.model.rolloverImageMediaID" [showFocus]="state.model.showFocus" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [textRotation]="state.model.textRotation" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [verticalAlignment]="state.model.verticalAlignment" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDoubleClickMethodID]="callback.getHandler(state,'onDoubleClickMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-label></ng-template>
<ng-template #servoydefaultListbox let-callback="callback" let-state="state"><servoydefault-listbox  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [multiselectListbox]="state.model.multiselectListbox" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-listbox></ng-template>
<ng-template #servoydefaultPassword let-callback="callback" let-state="state"><servoydefault-password  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-password></ng-template>
<ng-template #servoydefaultRadio let-callback="callback" let-state="state"><servoydefault-radio  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-radio></ng-template>
<ng-template #servoydefaultRadiogroup let-callback="callback" let-state="state"><servoydefault-radiogroup  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-radiogroup></ng-template>
<ng-template #servoydefaultRectangle let-callback="callback" let-state="state"><servoydefault-rectangle  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [containsFormID]="state.model.containsFormID" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [foreground]="state.model.foreground" [lineSize]="state.model.lineSize" [location]="state.model.location" [roundedRadius]="state.model.roundedRadius" [shapeType]="state.model.shapeType" [size]="state.model.size" [transparent]="state.model.transparent" *ngIf="state.model.visible" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoydefault-rectangle></ng-template>
<ng-template #servoydefaultSpinner let-callback="callback" let-state="state"><servoydefault-spinner  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-spinner></ng-template>
<ng-template #servoydefaultSplitpane let-callback="callback" let-state="state"><servoydefault-splitpane  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [divLocation]="state.model.divLocation" (divLocationChange)="callback.datachange(state,'divLocation',$event)" [divSize]="state.model.divSize" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" [pane1MinSize]="state.model.pane1MinSize" [pane2MinSize]="state.model.pane2MinSize" [readOnly]="state.model.readOnly" [resizeWeight]="state.model.resizeWeight" [selectedTabColor]="state.model.selectedTabColor" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabOrientation]="state.model.tabOrientation" [tabs]="state.model.tabs" (tabsChange)="callback.datachange(state,'tabs',$event)" [tabSeq]="state.model.tabSeq" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoydefault-splitpane></ng-template>
<ng-template #servoydefaultTabpanel let-callback="callback" let-state="state"><servoydefault-tabpanel  [activeTabIndex]="state.model.activeTabIndex" (activeTabIndexChange)="callback.datachange(state,'activeTabIndex',$event)" [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" [readOnly]="state.model.readOnly" [selectedTabColor]="state.model.selectedTabColor" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabIndex]="state.model.tabIndex" (tabIndexChange)="callback.datachange(state,'tabIndex',$event)" [tabOrientation]="state.model.tabOrientation" [tabs]="state.model.tabs" (tabsChange)="callback.datachange(state,'tabs',$event)" [tabSeq]="state.model.tabSeq" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoydefault-tabpanel></ng-template>
<ng-template #servoydefaultTablesspanel let-callback="callback" let-state="state"><servoydefault-tablesspanel  [activeTabIndex]="state.model.activeTabIndex" (activeTabIndexChange)="callback.datachange(state,'activeTabIndex',$event)" [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" [readOnly]="state.model.readOnly" [selectedTabColor]="state.model.selectedTabColor" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabIndex]="state.model.tabIndex" (tabIndexChange)="callback.datachange(state,'tabIndex',$event)" [tabOrientation]="state.model.tabOrientation" [tabs]="state.model.tabs" (tabsChange)="callback.datachange(state,'tabs',$event)" [tabSeq]="state.model.tabSeq" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoydefault-tablesspanel></ng-template>
<ng-template #servoydefaultTextarea let-callback="callback" let-state="state"><servoydefault-textarea  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [scrollbars]="state.model.scrollbars" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-textarea></ng-template>
<ng-template #servoydefaultTextfield let-callback="callback" let-state="state"><servoydefault-textfield  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-textfield></ng-template>
<ng-template #servoydefaultTypeahead let-callback="callback" let-state="state"><servoydefault-typeahead  [servoyAttributes]="state.model.servoyAttributes" [background]="state.model.background" [borderType]="state.model.borderType" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [fontType]="state.model.fontType" [foreground]="state.model.foreground" [format]="state.model.format" [horizontalAlignment]="state.model.horizontalAlignment" [location]="state.model.location" (locationChange)="callback.datachange(state,'location',$event)" [margin]="state.model.margin" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnEnter]="state.model.selectOnEnter" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [transparent]="state.model.transparent" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoydefault-typeahead></ng-template>
<ng-template #servoyextraCollapse let-callback="callback" let-state="state"><servoyextra-collapse  [accordionMode]="state.model.accordionMode" [servoyAttributes]="state.model.servoyAttributes" [collapsibles]="state.model.collapsibles" (collapsiblesChange)="callback.datachange(state,'collapsibles',$event)" [cssPosition]="state.model.cssPosition" [expandedIndices]="state.model.expandedIndices" [location]="state.model.location" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [onCardClicked]="callback.getHandler(state,'onCardClicked')" [onCollapsibleHidden]="callback.getHandler(state,'onCollapsibleHidden')" [onCollapsibleShown]="callback.getHandler(state,'onCollapsibleShown')" [onHeaderClicked]="callback.getHandler(state,'onHeaderClicked')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoyextra-collapse></ng-template>
<ng-template #servoyextraDbtreeview let-callback="callback" let-state="state"><servoyextra-dbtreeview  [servoyAttributes]="state.model.servoyAttributes" [autoRefresh]="state.model.autoRefresh" [bindings]="state.model.bindings" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [levelVisibility]="state.model.levelVisibility" (levelVisibilityChange)="callback.datachange(state,'levelVisibility',$event)" [location]="state.model.location" [responsiveHeight]="state.model.responsiveHeight" [roots]="state.model.roots" [selection]="state.model.selection" [size]="state.model.size" *ngIf="state.model.visible" [onReady]="callback.getHandler(state,'onReady')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-dbtreeview></ng-template>
<ng-template #servoyextraFileupload let-callback="callback" let-state="state"><servoyextra-fileupload  [accept]="state.model.accept" [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [enabled]="state.model.enabled" [iconStyleClass]="state.model.iconStyleClass" [location]="state.model.location" [multiFileUpload]="state.model.multiFileUpload" [resultDisplayTimeout]="state.model.resultDisplayTimeout" [showFileName]="state.model.showFileName" [showProgress]="state.model.showProgress" [size]="state.model.size" [styleClass]="state.model.styleClass" [styleClassExpression]="state.model.styleClassExpression" [successIconStyleClass]="state.model.successIconStyleClass" [toolTipText]="state.model.toolTipText" [uploadCancelText]="state.model.uploadCancelText" [uploadNotSupportedFileText]="state.model.uploadNotSupportedFileText" [uploadNotSupportedText]="state.model.uploadNotSupportedText" [uploadProgressText]="state.model.uploadProgressText" [uploadSuccessText]="state.model.uploadSuccessText" [uploadText]="state.model.uploadText" *ngIf="state.model.visible" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFileTransferFinishedMethodID]="callback.getHandler(state,'onFileTransferFinishedMethodID')" [onFileUploadedMethodID]="callback.getHandler(state,'onFileUploadedMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-fileupload></ng-template>
<ng-template #servoyextraHtmlarea let-callback="callback" let-state="state"><servoyextra-htmlarea  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [responsiveHeight]="state.model.responsiveHeight" [scrollbars]="state.model.scrollbars" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-htmlarea></ng-template>
<ng-template #servoyextraImagelabel let-callback="callback" let-state="state"><servoyextra-imagelabel  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [location]="state.model.location" [media]="state.model.media" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-imagelabel></ng-template>
<ng-template #servoyextraLightboxgallery let-callback="callback" let-state="state"><servoyextra-lightboxgallery  [albumLabel]="state.model.albumLabel" [servoyAttributes]="state.model.servoyAttributes" [buttonStyleClass]="state.model.buttonStyleClass" [buttonText]="state.model.buttonText" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [fadeDuration]="state.model.fadeDuration" [fitImagesInViewport]="state.model.fitImagesInViewport" [galleryVisible]="state.model.galleryVisible" [hoverButtonIcon]="state.model.hoverButtonIcon" [imageFadeDuration]="state.model.imageFadeDuration" [imagesFoundset]="state.model.imagesFoundset" [location]="state.model.location" [maxImageHeight]="state.model.maxImageHeight" [maxImageWidth]="state.model.maxImageWidth" [positionFromTop]="state.model.positionFromTop" [resizeDuration]="state.model.resizeDuration" [showCaptionInGallery]="state.model.showCaptionInGallery" [showImageNumberLabel]="state.model.showImageNumberLabel" [size]="state.model.size" [wrapAround]="state.model.wrapAround" [onHoverButtonClicked]="callback.getHandler(state,'onHoverButtonClicked')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-lightboxgallery></ng-template>
<ng-template #servoyextraMultifileupload let-callback="callback" let-state="state"><servoyextra-multifileupload  [allowMultipleUploads]="state.model.allowMultipleUploads" [servoyAttributes]="state.model.servoyAttributes" [autoProceed]="state.model.autoProceed" [closeAfterFinish]="state.model.closeAfterFinish" [cssPosition]="state.model.cssPosition" [disableStatusBar]="state.model.disableStatusBar" [hideUploadButton]="state.model.hideUploadButton" [inline]="state.model.inline" [language]="state.model.language" [localeStrings]="state.model.localeStrings" [location]="state.model.location" [metaFields]="state.model.metaFields" [note]="state.model.note" [options]="state.model.options" [restrictions]="state.model.restrictions" [size]="state.model.size" [sources]="state.model.sources" *ngIf="state.model.visible" [onBeforeFileAdded]="callback.getHandler(state,'onBeforeFileAdded')" [onFileAdded]="callback.getHandler(state,'onFileAdded')" [onFileRemoved]="callback.getHandler(state,'onFileRemoved')" [onFileUploaded]="callback.getHandler(state,'onFileUploaded')" [onModalClosed]="callback.getHandler(state,'onModalClosed')" [onModalOpened]="callback.getHandler(state,'onModalOpened')" [onRestrictionFailed]="callback.getHandler(state,'onRestrictionFailed')" [onUploadComplete]="callback.getHandler(state,'onUploadComplete')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-multifileupload></ng-template>
<ng-template #servoyextraSelect2tokenizer let-callback="callback" let-state="state"><servoyextra-select2tokenizer  [allowNewEntries]="state.model.allowNewEntries" [servoyAttributes]="state.model.servoyAttributes" [clearSearchTextOnSelect]="state.model.clearSearchTextOnSelect" [closeOnSelect]="state.model.closeOnSelect" [containSearchText]="state.model.containSearchText" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [location]="state.model.location" [maximumSelectionSize]="state.model.maximumSelectionSize" [noMatchesFoundText]="state.model.noMatchesFoundText" [openOnUnselect]="state.model.openOnUnselect" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [selectOnClose]="state.model.selectOnClose" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" [valueSeparator]="state.model.valueSeparator" *ngIf="state.model.visible" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-select2tokenizer></ng-template>
<ng-template #servoyextraSidenav let-callback="callback" let-state="state"><servoyextra-sidenav  [animate]="state.model.animate" [servoyAttributes]="state.model.servoyAttributes" [containedForm]="state.model.containedForm" [cssPosition]="state.model.cssPosition" [enabled]="state.model.enabled" [expandedIndex]="state.model.expandedIndex" (expandedIndexChange)="callback.datachange(state,'expandedIndex',$event)" [iconCloseStyleClass]="state.model.iconCloseStyleClass" [iconCollapseStyleClass]="state.model.iconCollapseStyleClass" [iconExpandStyleClass]="state.model.iconExpandStyleClass" [iconOpenStyleClass]="state.model.iconOpenStyleClass" [location]="state.model.location" [menu]="state.model.menu" (menuChange)="callback.datachange(state,'menu',$event)" [open]="state.model.open" (openChange)="callback.datachange(state,'open',$event)" [relationName]="state.model.relationName" [responsiveHeight]="state.model.responsiveHeight" [scrollbarPosition]="state.model.scrollbarPosition" [selectedIndex]="state.model.selectedIndex" (selectedIndexChange)="callback.datachange(state,'selectedIndex',$event)" [sidenavWidth]="state.model.sidenavWidth" [size]="state.model.size" [slideAnimation]="state.model.slideAnimation" [slidePosition]="state.model.slidePosition" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [togglePosition]="state.model.togglePosition" *ngIf="state.model.visible" [onMenuItemCollapsed]="callback.getHandler(state,'onMenuItemCollapsed')" [onMenuItemExpanded]="callback.getHandler(state,'onMenuItemExpanded')" [onMenuItemSelected]="callback.getHandler(state,'onMenuItemSelected')" [onOpenToggled]="callback.getHandler(state,'onOpenToggled')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoyextra-sidenav></ng-template>
<ng-template #servoyextraSlider let-callback="callback" let-state="state"><servoyextra-slider  [servoyAttributes]="state.model.servoyAttributes" [autoHideLimitLabels]="state.model.autoHideLimitLabels" [ceil]="state.model.ceil" [cssPosition]="state.model.cssPosition" [dataChangeOnSlideEnd]="state.model.dataChangeOnSlideEnd" [dataProvider]="state.model.dataProvider" (dataProviderChange)="callback.datachange(state,'dataProvider',$event, true)" [dataProviderHigh]="state.model.dataProviderHigh" (dataProviderHighChange)="callback.datachange(state,'dataProviderHigh',$event, true)" [draggableRange]="state.model.draggableRange" [draggableRangeOnly]="state.model.draggableRangeOnly" [enabled]="state.model.enabled" [enforceRange]="state.model.enforceRange" [enforceStep]="state.model.enforceStep" [floor]="state.model.floor" [formattingFunction]="state.model.formattingFunction" [getLegendFunction]="state.model.getLegendFunction" [hideLimitLabels]="state.model.hideLimitLabels" [hidePointerLabels]="state.model.hidePointerLabels" [location]="state.model.location" [logScale]="state.model.logScale" [maxLimit]="state.model.maxLimit" [maxRange]="state.model.maxRange" [minLimit]="state.model.minLimit" [minRange]="state.model.minRange" [noSwitching]="state.model.noSwitching" [numberFormat]="state.model.numberFormat" [pointerColorFunction]="state.model.pointerColorFunction" [precision]="state.model.precision" [pushRange]="state.model.pushRange" [readOnly]="state.model.readOnly" [rightToLeft]="state.model.rightToLeft" [selectionBarColorFunction]="state.model.selectionBarColorFunction" [selectionBarGradient]="state.model.selectionBarGradient" [showOuterSelectionBars]="state.model.showOuterSelectionBars" [showSelectionBar]="state.model.showSelectionBar" [showSelectionBarEnd]="state.model.showSelectionBarEnd" [showTicks]="state.model.showTicks" [showTicksValues]="state.model.showTicksValues" [size]="state.model.size" [step]="state.model.step" [stepsArray]="state.model.stepsArray" [stepsValueList]="state.model.stepsValueList" [styleClass]="state.model.styleClass" [tickColorFunction]="state.model.tickColorFunction" [ticksArray]="state.model.ticksArray" [ticksInterval]="state.model.ticksInterval" [ticksTooltipFunction]="state.model.ticksTooltipFunction" [ticksValuesInterval]="state.model.ticksValuesInterval" [ticksValuesTooltipFunction]="state.model.ticksValuesTooltipFunction" [vertical]="state.model.vertical" *ngIf="state.model.visible" [onDataChangeHigh]="callback.getHandler(state,'onDataChangeHigh')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onSlideEnd]="callback.getHandler(state,'onSlideEnd')" [onSlideStart]="callback.getHandler(state,'onSlideStart')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-slider></ng-template>
<ng-template #servoyextraSpinner let-callback="callback" let-state="state"><servoyextra-spinner  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [displaysTags]="state.model.displaysTags" [editable]="state.model.editable" [enabled]="state.model.enabled" [findmode]="state.model.findmode" [format]="state.model.format" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [responsiveHeight]="state.model.responsiveHeight" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [text]="state.model.text" [toolTipText]="state.model.toolTipText" [valuelistID]="state.model.valuelistID" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-spinner></ng-template>
<ng-template #servoyextraSplitpane let-callback="callback" let-state="state"><servoyextra-splitpane  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [divLocation]="state.model.divLocation" (divLocationChange)="callback.datachange(state,'divLocation',$event)" [divSize]="state.model.divSize" [enabled]="state.model.enabled" [location]="state.model.location" [pane1MinSize]="state.model.pane1MinSize" [pane2MinSize]="state.model.pane2MinSize" [panes]="state.model.panes" (panesChange)="callback.datachange(state,'panes',$event)" [readOnly]="state.model.readOnly" [resizeWeight]="state.model.resizeWeight" [responsiveHeight]="state.model.responsiveHeight" [size]="state.model.size" [splitType]="state.model.splitType" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onChangeMethodID]="callback.getHandler(state,'onChangeMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp><ng-template let-name='name'><svy-form *ngIf="isFormAvailable(name)" [name]="name"></svy-form></ng-template></servoyextra-splitpane></ng-template>
<ng-template #servoyextraTable let-callback="callback" let-state="state"><servoyextra-table  [servoyAttributes]="state.model.servoyAttributes" [columns]="state.model.columns" (columnsChange)="callback.datachange(state,'columns',$event)" [cssPosition]="state.model.cssPosition" [currentPage]="state.model.currentPage" (currentPageChange)="callback.datachange(state,'currentPage',$event)" [enableColumnResize]="state.model.enableColumnResize" [enableSort]="state.model.enableSort" [foundset]="state.model.foundset" [horizontalScrollbar]="state.model.horizontalScrollbar" [keyCodeSettings]="state.model.keyCodeSettings" [lastSelectionFirstElement]="state.model.lastSelectionFirstElement" (lastSelectionFirstElementChange)="callback.datachange(state,'lastSelectionFirstElement',$event)" [location]="state.model.location" [minRowHeight]="state.model.minRowHeight" [pageSize]="state.model.pageSize" [performanceSettings]="state.model.performanceSettings" [responsiveDynamicHeight]="state.model.responsiveDynamicHeight" [responsiveHeight]="state.model.responsiveHeight" [rowStyleClassDataprovider]="state.model.rowStyleClassDataprovider" [selectionClass]="state.model.selectionClass" [size]="state.model.size" [sortColumnIndex]="state.model.sortColumnIndex" (sortColumnIndexChange)="callback.datachange(state,'sortColumnIndex',$event)" [sortDirection]="state.model.sortDirection" (sortDirectionChange)="callback.datachange(state,'sortDirection',$event)" [sortdownClass]="state.model.sortdownClass" [sortStyleClass]="state.model.sortStyleClass" [sortupClass]="state.model.sortupClass" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onCellClick]="callback.getHandler(state,'onCellClick')" [onCellDoubleClick]="callback.getHandler(state,'onCellDoubleClick')" [onCellRightClick]="callback.getHandler(state,'onCellRightClick')" [onColumnResize]="callback.getHandler(state,'onColumnResize')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onHeaderClick]="callback.getHandler(state,'onHeaderClick')" [onHeaderRightClick]="callback.getHandler(state,'onHeaderRightClick')" [onViewPortChanged]="callback.getHandler(state,'onViewPortChanged')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-table></ng-template>
<ng-template #servoyextraTextfieldgroup let-callback="callback" let-state="state"><servoyextra-textfieldgroup  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" (dataProviderIDChange)="callback.datachange(state,'dataProviderID',$event, true)" [enabled]="state.model.enabled" [faclass]="state.model.faclass" [format]="state.model.format" [inputType]="state.model.inputType" [inputValidation]="state.model.inputValidation" [invalidEmailMessage]="state.model.invalidEmailMessage" [location]="state.model.location" [placeholderText]="state.model.placeholderText" [readOnly]="state.model.readOnly" [size]="state.model.size" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" *ngIf="state.model.visible" [onActionMethodID]="callback.getHandler(state,'onActionMethodID')" [onDataChangeMethodID]="callback.getHandler(state,'onDataChangeMethodID')" [onFocusGainedMethodID]="callback.getHandler(state,'onFocusGainedMethodID')" [onFocusLostMethodID]="callback.getHandler(state,'onFocusLostMethodID')" [onRightClickMethodID]="callback.getHandler(state,'onRightClickMethodID')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-textfieldgroup></ng-template>
<ng-template #servoyextraTreeview let-callback="callback" let-state="state"><servoyextra-treeview  [servoyAttributes]="state.model.servoyAttributes" [cssPosition]="state.model.cssPosition" [jsDataSet]="state.model.jsDataSet" [location]="state.model.location" [size]="state.model.size" [onNodeClicked]="callback.getHandler(state,'onNodeClicked')" [onNodeCollapsed]="callback.getHandler(state,'onNodeCollapsed')" [onNodeDoubleClicked]="callback.getHandler(state,'onNodeDoubleClicked')" [onNodeExpanded]="callback.getHandler(state,'onNodeExpanded')" [onNodeRightClicked]="callback.getHandler(state,'onNodeRightClicked')" [onNodeSelected]="callback.getHandler(state,'onNodeSelected')" [onReady]="callback.getHandler(state,'onReady')" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-treeview></ng-template>
<ng-template #servoyextraYoutubevideoembedder let-callback="callback" let-state="state"><servoyextra-youtubevideoembedder  [allowFullScreen]="state.model.allowFullScreen" [servoyAttributes]="state.model.servoyAttributes" [autoPlay]="state.model.autoPlay" [cssPosition]="state.model.cssPosition" [dataProviderID]="state.model.dataProviderID" [embeddedVideoURL]="state.model.embeddedVideoURL" [location]="state.model.location" [modestBranding]="state.model.modestBranding" [showControls]="state.model.showControls" [showRelatedVideosAtEnd]="state.model.showRelatedVideosAtEnd" [size]="state.model.size" (sizeChange)="callback.datachange(state,'size',$event)" [styleClass]="state.model.styleClass" [tabSeq]="state.model.tabSeq" [videoHeight]="state.model.videoHeight" [videoWidth]="state.model.videoWidth" *ngIf="state.model.visible" [servoyApi]="callback.getServoyApi(state)" [name]="state.name" #cmp></servoyextra-youtubevideoembedder></ng-template>
     <!-- component template generate end -->
   `
   /* eslint-enable max-len */
})

export class FormComponent implements OnDestroy, OnChanges {
    @ViewChild('svyResponsiveDiv', { static: true }) readonly svyResponsiveDiv: TemplateRef<any>;
    @ViewChild('formComponentAbsoluteDiv', { static: true }) readonly formComponentAbsoluteDiv: TemplateRef<any>;
    @ViewChild('formComponentResponsiveDiv', { static: true }) readonly formComponentResponsiveDiv: TemplateRef<any>;

    // component template generate start
    @ViewChild('aggridGroupingtable', { static: true }) readonly aggridGroupingtable: TemplateRef<any>;
    @ViewChild('aggridDatasettable', { static: true }) readonly aggridDatasettable: TemplateRef<any>;

    @ViewChild('servoydefaultTextfield', { static: true }) readonly servoydefaultTextfield: TemplateRef<any>;
    @ViewChild('servoydefaultTextarea', { static: true }) readonly servoydefaultTextarea: TemplateRef<any>;
    @ViewChild('servoydefaultButton', { static: true }) readonly servoydefaultButton: TemplateRef<any>;
    @ViewChild('servoydefaultLabel', { static: true }) readonly servoydefaultLabel: TemplateRef<any>;
    @ViewChild('servoydefaultRectangle', { static: true }) readonly servoydefaultRectangle: TemplateRef<any>;
    @ViewChild('servoydefaultTabpanel', { static: true }) readonly servoydefaultTabpanel: TemplateRef<any>;
    @ViewChild('servoydefaultTablesspanel', { static: true }) readonly servoydefaultTablesspanel: TemplateRef<any>;
    @ViewChild('servoydefaultSplitpane', { static: true }) readonly servoydefaultSplitpane: TemplateRef<any>;
    @ViewChild('servoydefaultCalendar', { static: true }) readonly servoydefaultCalendar: TemplateRef<any>;
    @ViewChild('servoydefaultCombobox', { static: true }) readonly servoydefaultCombobox: TemplateRef<any>;
    @ViewChild('servoydefaultTypeahead', { static: true }) readonly servoydefaultTypeahead: TemplateRef<any>;
    @ViewChild('servoydefaultCheck', { static: true }) readonly servoydefaultCheck: TemplateRef<any>;
    @ViewChild('servoydefaultCheckgroup', { static: true }) readonly servoydefaultCheckgroup: TemplateRef<any>;
    @ViewChild('servoydefaultRadio', { static: true }) readonly servoydefaultRadio: TemplateRef<any>;
    @ViewChild('servoydefaultRadiogroup', { static: true }) readonly servoydefaultRadiogroup: TemplateRef<any>;
    @ViewChild('servoydefaultPassword', { static: true }) readonly servoydefaultPassword: TemplateRef<any>;
    @ViewChild('servoydefaultHtmlarea', { static: true }) readonly servoydefaultHtmlarea: TemplateRef<any>;
    @ViewChild('servoydefaultSpinner', { static: true }) readonly servoydefaultSpinner: TemplateRef<any>;
    @ViewChild('servoydefaultHtmlview', { static: true }) readonly servoydefaultHtmlview: TemplateRef<any>;
    @ViewChild('servoydefaultListbox', { static: true }) readonly servoydefaultListbox: TemplateRef<any>;
    @ViewChild('servoydefaultImagemedia', { static: true }) readonly servoydefaultImagemedia: TemplateRef<any>;

    @ViewChild('servoycoreSlider', { static: true }) readonly servoycoreSlider: TemplateRef<any>;
    @ViewChild('servoycoreErrorbean', { static: true }) readonly servoycoreErrorbean: TemplateRef<any>;
    @ViewChild('servoycoreListformcomponent', { static: true }) readonly servoycoreListformcomponent: TemplateRef<any>;

    @ViewChild('servoyextraTable', { static: true }) readonly servoyextraTable: TemplateRef<any>;
    @ViewChild('servoyextraHtmlarea', { static: true }) readonly servoyextraHtmlarea: TemplateRef<any>;
    @ViewChild('servoyextraImagelabel', { static: true }) readonly servoyextraImagelabel: TemplateRef<any>;
    @ViewChild('servoyextraFileupload', { static: true }) readonly servoyextraFileupload: TemplateRef<any>;
    @ViewChild('servoyextraTextfieldgroup', { static: true }) readonly servoyextraTextfieldgroup: TemplateRef<any>;
    @ViewChild('servoyextraLightboxgallery', { static: true }) readonly servoyextraLightboxgallery: TemplateRef<any>;
    @ViewChild('servoyextraSpinner', { static: true }) readonly servoyextraSpinner: TemplateRef<any>;
    @ViewChild('servoyextraSlider', { static: true }) readonly servoyextraSlider: TemplateRef<any>;
	@ViewChild('servoyextraSplitpane', { static: true }) readonly servoyextraSplitpane: TemplateRef<any>;
	@ViewChild('servoyextraSelect2tokenizer', { static: true }) readonly servoyextraSelect2tokenizer: TemplateRef<any>;
    @ViewChild('servoyextraMultifileupload', { static: true }) readonly servoyextraMultifileupload: TemplateRef<any>;
    @ViewChild('servoyextraYoutubevideoembedder', { static: true }) readonly servoyextraYoutubevideoembedder: TemplateRef<any>;
    @ViewChild('servoyextraSidenav', { static: true }) readonly servoyextraSidenav: TemplateRef<any>;
    @ViewChild('servoyextraCollapse', { static: true }) readonly servoyextraCollapse: TemplateRef<any>;
    

    @ViewChild('bootstrapcomponentsCalendar', { static: true }) readonly bootstrapcomponentsCalendar: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsCalendarinline', { static: true }) readonly bootstrapcomponentsCalendarinline: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsButton', { static: true }) readonly bootstrapcomponentsButton: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsCombobox', { static: true }) readonly bootstrapcomponentsCombobox: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsCheckbox', { static: true }) readonly bootstrapcomponentsCheckbox: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsChoicegroup', { static: true }) readonly bootstrapcomponentsChoicegroup: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsImagemedia', { static: true }) readonly bootstrapcomponentsImagemedia: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsList', { static: true }) readonly bootstrapcomponentsList: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsTablesspanel', { static: true }) readonly bootstrapcomponentsTablesspanel: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsLabel', { static: true }) readonly bootstrapcomponentsLabel: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsDatalabel', { static: true }) readonly bootstrapcomponentsDatalabel: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsTextarea', { static: true }) readonly bootstrapcomponentsTextarea: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsTextbox', { static: true }) readonly bootstrapcomponentsTextbox: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsSelect', { static: true }) readonly bootstrapcomponentsSelect: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsTabpanel', { static: true }) readonly bootstrapcomponentsTabpanel: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsAccordion', { static: true }) readonly bootstrapcomponentsAccordion: TemplateRef<any>;
    @ViewChild('bootstrapcomponentsTypeahead', { static: true }) readonly bootstrapcomponentsTypeahead: TemplateRef<any>;

    @ViewChild('bootstrapextracomponentsBreadcrumbs', { static: true }) readonly bootstrapextracomponentsBreadcrumbs: TemplateRef<any>;
    @ViewChild('bootstrapextracomponentsNavbar', { static: true }) readonly bootstrapextracomponentsNavbar: TemplateRef<any>;
    // component template generate end



    @Input() readonly name: string;

    formClasses: string[];

    formCache: FormCache;

    private handlerCache: { [property: string]: { [property: string]: () => void } } = {};
    private servoyApiCache: { [property: string]: ServoyApi } = {};
    private componentCache: { [property: string]: ServoyBaseComponent<any> } = {};
    private log: LoggerService;

    constructor(private formservice: FormService, private sabloService: SabloService,
                private servoyService: ServoyService, logFactory: LoggerFactory,
                private changeHandler: ChangeDetectorRef) {
        this.log = logFactory.getLogger('FormComponent');
    }

    public detectChanges() {
        this.changeHandler.markForCheck();
    }

    public formCacheChanged(cache: FormCache): void {
        this.formCache = cache;
        this.detectChanges();
    }

    public getFormCache(): FormCache {
        return this.formCache;
    }

    propertyChanged(componentName: string, property: string, value: any): void {
        const comp = this.componentCache[componentName];
        if (comp) {
            const change = {};
            change[property] = new SimpleChange(value,value,false);
            comp.ngOnChanges(change);
            // this is kind of like a push so we should trigger this.
            comp.detectChanges();
        }
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes.name) {
            // really make sure all form state is reverted to default
            // Form Instances are reused for tabpanels that have a template reference to this.
            this.formCache = this.formservice.getFormCache(this);
            const styleClasses: string = this.formCache.getComponent('').model.styleClass;
            if (styleClasses)
                this.formClasses =styleClasses.split(' ');
            else
                this.formClasses = null;;

            this.handlerCache = {};
            this.servoyApiCache = {};
            this.componentCache = {};

            this.sabloService.callService('formService', 'formLoaded', { formname: this.name }, true);
        }
    }

    ngOnDestroy() {
        this.formservice.destroy(this);
    }

    getTemplate(item: StructureCache | ComponentCache | FormComponentCache): TemplateRef<any> {
        if (item instanceof StructureCache) {
            return this.svyResponsiveDiv;
        } else if (item instanceof FormComponentCache ) {
            if (item.hasFoundset) return this.servoycoreListformcomponent;
            return item.responsive ? this.formComponentResponsiveDiv : this.formComponentAbsoluteDiv;
        } else {
            if (this[item.type] === undefined && item.type !== undefined) {
                this.log.error(this.log.buildMessage(() => ('Template for ' + item.type + ' was not found, please check form_component template.')));
            }
            return this[item.type];
        }
    }

    getTemplateForLFC(state: ComponentCache ): TemplateRef<any> {
        if (state.type.includes('formcomponent')) {
            return state.model.containedForm.absoluteLayout ? this.formComponentAbsoluteDiv : this.formComponentResponsiveDiv;
        } else {
            // TODO: this has to be replaced with a type property on the state object
            let compDirectiveName = state.type;
            const index = compDirectiveName.indexOf('-');
            compDirectiveName =  compDirectiveName.replace('-','');
            return this[compDirectiveName.substring(0, index) + compDirectiveName.charAt(index).toUpperCase() + compDirectiveName.substring(index + 1)];
        }
    }

    public getAbsoluteFormStyle() {
        const formData = this.formCache.getComponent('');
        const position = {
            left: '0px',
            top: '0px',
            right: '0px',
            bottom: '0px',
            position: 'absolute',
            minWidth: undefined,
            minHeight: undefined,
            backgroundColor: undefined
        };
        if (formData.model.borderType) {
            const borderStyle = formData.model.borderType;
            for (const key of Object.keys(borderStyle)) {
                position[key] = position[key];
            }
        }
        if (formData.model.transparent) {
            position.backgroundColor = 'transparent';
        }

        if (formData.model.addMinSize) {
            position.minWidth = formData.model.size.width + 'px';
            position.minHeight = formData.model.size.height + 'px';
        }
        return position;
    }

    public isFormAvailable(name: string): boolean {
        // console.log("isFormAvailable: " + name + " " +  this.formservice.hasFormCacheEntry( name));
        return this.formservice.hasFormCacheEntry(name);
    }

    datachange(component: ComponentCache, property: string, value, dataprovider: boolean) {
        const model = this.formCache.getComponent(component.name).model;
        const oldValue = model[property];
        this.formCache.getComponent(component.name).model[property] = value;
        this.formservice.sendChanges(this.name, component.name, property, value, oldValue, dataprovider);
    }

    getHandler(item: ComponentCache, handler: string) {
        let itemCache = this.handlerCache[item.name];
        if (itemCache == null) {
            itemCache = {};
            this.handlerCache[item.name] = itemCache;
        }
        let func = itemCache[handler];
        if (func == null && item.handlers && item.handlers.indexOf(handler) >= 0) {
            const me = this;
            // eslint-disable-next-line
            func = function() {
                return me.formservice.executeEvent(me.name, item.name, handler, arguments);
            };
            itemCache[handler] = func;
        }
        return func;
    }

    registerComponent(component: ServoyBaseComponent<any> ): void {
        this.componentCache[component.name] = component;
    }

    unRegisterComponent(component: ServoyBaseComponent<any> ): void {
        delete this.componentCache[component.name];
    }

    getServoyApi(item: ComponentCache) {
        let api = this.servoyApiCache[item.name];
        if (api == null) {
            api = new FormComponentServoyApi(item, this.name, this.formCache.absolute, this.formservice, this.servoyService, this);
            this.servoyApiCache[item.name] = api;
        }
        return api;
    }

    public callApi(componentName: string, apiName: string, args: any, path?: string[]): any {
        if (path && path.length > 0) {
            const comp = this.componentCache[path[0]];
            if (instanceOfApiExecutor(comp)) {
                comp.callApi(path[1], apiName, args, path.slice(2));
            } else {
                this.log.error('trying to call api: ' + apiName + ' on component: ' + componentName + ' with path: ' + path +
                 ', but comp: ' + (comp == null?' is not found':comp.name + ' doesnt implement IApiExecutor') );
            }

        } else {
            const comp = this.componentCache[componentName];
            const proto = Object.getPrototypeOf(comp);
            if (proto[apiName]) {
                return proto[apiName].apply(comp, args);
            } else {
                this.log.error(this.log.buildMessage(() => ('Api ' + apiName + ' for component ' + componentName + ' was not found, please check component implementation.')));
                return null;
            }
        }
    }
}

class FormComponentServoyApi extends ServoyApi {
    constructor(item: ComponentCache,
                formname: string,
                absolute: boolean,
                formservice: FormService,
                servoyService: ServoyService,
                private fc: FormComponent) {
        super(item,formname,absolute,formservice,servoyService);
    }

    registerComponent(comp: ServoyBaseComponent<any> ) {
     this.fc.registerComponent(comp);
    }

    unRegisterComponent(comp: ServoyBaseComponent<any> ) {
     this.fc.unRegisterComponent(comp);
    }
}

@Directive({ selector: '[svyContainerStyle]' })
export class AddAttributeDirective implements OnInit {
    @Input() svyContainerStyle: StructureCache | ComponentCache | FormComponentCache | PartCache;

    constructor(private el: ElementRef, private renderer: Renderer2) { }

    ngOnInit() {
        if ('classes' in this.svyContainerStyle) {
            this.svyContainerStyle.classes.forEach(cls => this.renderer.addClass(this.el.nativeElement, cls));
        }

        if ('styles' in this.svyContainerStyle && this.svyContainerStyle.styles) {
            for (const key of Object.keys(this.svyContainerStyle.styles)) {
                this.renderer.setStyle(this.el.nativeElement, key, this.svyContainerStyle.styles[key]);
            }
        }
        if ('layout' in this.svyContainerStyle) {
            for (const key of Object.keys(this.svyContainerStyle.layout)) {
                this.renderer.setStyle(this.el.nativeElement, key, this.svyContainerStyle.layout[key]);
            }
        }
        if ('attributes' in this.svyContainerStyle) {
              for (const key of Object.keys(this.svyContainerStyle.attributes)) {
                this.renderer.setAttribute(this.el.nativeElement, key, this.svyContainerStyle.attributes[key]);
            }
        }
    }
}



