<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoydoc>
  <runtime>
    <object clientSupport="ng,wc,sc" publicName="ALIGNMENT" qualifiedName="com.servoy.j2db.scripting.solutionmodel.ALIGNMENT">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="ACCORDION_PANEL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating accordion panel from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating accordion panel from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <deprecated><![CDATA[please use JSTabPanel#ACCORDION_PANEL instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var accordion = myForm.newTabPanel('accordion', 10, 10, 620, 460);
accordion.tabOrientation = SM_ALIGNMENT.ACCORDION_PANEL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BOTTOM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting vertical alignment for components.
It makes the text inside the component be bottom aligned vertically.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting vertical alignment for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="CENTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal and vertical alignment
for components. If used for horizontal alignment,
then the text of the component will be horizontally centered.
Similarly, if used for vertical alignment, then the text
of the component will be vertically centered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal and vertical alignment
for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal and vertical alignment. DEFAULT value makes the alignment behave as if it was not changed before.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal and vertical alignment.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hLabel = myJSForm.getLabel('label_name');
if (hLabel.horizontalAlignment == SM_ALIGNMENT.LEFT) hLabel.horizontalAlignment = SM_ALIGNMENT.DEFAULT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal alignment for components.
It makes the text inside the component be left aligned horizontally.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal alignment for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal alignment for components.
It makes the text inside the component be right aligned vertically.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting horizontal alignment for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="SPLIT_HORIZONTAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <deprecated><![CDATA[please use JSTabPanel#SPLIT_HORIZONTAL instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = SM_ALIGNMENT.SPLIT_HORIZONTAL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="SPLIT_VERTICAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <deprecated><![CDATA[please use JSTabPanel#SPLIT_VERTICAL instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = SM_ALIGNMENT.SPLIT_VERTICAL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TOP">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting vertical alignment for components.
It makes the text inside the component be top aligned vertically.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting vertical alignment for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="ANCHOR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.ANCHOR">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ALL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored on all sides. This means that
the component will keep a constant distance from all sides
of the window and will grow/shrink as the window is resized.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
It is equivalent to a combination of NORTH and WEST anchoring.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.DEFAULT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EAST">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the right side of the window,
which means that the component will keep a constant distance
from the right side of the window. If WEST anchoring is also 
enabled, then the component will grow/shrink as the window 
is horizontally resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NORTH">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the top side of the window,
which means that the component will keep a constant distance
from the top side of the window. If SOUTH anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SOUTH">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the bottom side of the window,
which means that the component will keep a constant distance
from the bottom side of the window. If NORTH anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="WEST">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the left side of the window,
which means that the component will keep a constant distance
from the left side of the window. If EAST anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST;]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="APPLICATION_TYPES" qualifiedName="com.servoy.j2db.scripting.info.APPLICATION_TYPES">
      <constants>
        <constant clientSupport="ng,mc,wc,sc" name="HEADLESS_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type headless_client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type headless_client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.HEADLESS_CLIENT)
{
	//we are in headless_client
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MOBILE_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type mobile client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type mobile client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.MOBILE_CLIENT)
{
	//we are in mobile client
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="NG_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type ng client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type ng client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.NG_CLIENT)
{
	//we are in mobile client
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="RUNTIME_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type runtime_client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type runtime_client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.RUNTIME_CLIENT)
{
	//we are in runtime_client
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="SMART_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type smart_client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type smart_client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.SMART_CLIENT)
{
	//we are in smart_client
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="WEB_CLIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type web_client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for application type web_client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.WEB_CLIENT)
{
	//we are in web_client
}]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Application" qualifiedName="com.servoy.j2db.scripting.JSApplication" scriptingName="application">
      <functions>
        <function clientSupport="ng,wc,sc" name="addClientInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a string of client information which gets stored on the server, 
and can be viewed on the Clients page of Servoy Server Administration Console.

The new piece of client information is added on behalf of the running 
Servoy client.

This function can be called more than once, if you want to add multiple
lines of client information.

NOTE: 
This function can also be used with the function <em>getClientCountForInfo</em>
to count the number of clients with matching addditional client information.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a string of client information which gets stored on the server, 
and can be viewed on the Clients page of Servoy Server Administration Console.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.addClientInfo('SaaS company name');
application.addClientInfo('For any issues call +31-SA-AS');]]></sample>
          </samples>
          <parameters>
            <parameter name="info" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A line of text to be added as additional client information
            on behalf of the running Servoy client.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="beep">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Produces a "beep" sound; commonly used to indicate an error or warning dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Produces a "beep" sound; commonly used to indicate an error or warning dialog.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.beep();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="closeAllWindows">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean true if all windows were closed and false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Close all visible windows (except main application window). Returns true if operation was successful.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Close all visible windows (except main application window).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win = application.createWindow("aWindowName", JSWindow.WINDOW, null);
win.setInitialBounds(10, 10, 300, 300);
win.title = "This is a window";
controller.show(win);

var win2 = application.createWindow("anotherWindowName", JSWindow.WINDOW, null);
win2.setInitialBounds(100, 100, 300, 300);
win2.title = "This is another window";
controller.show(win2);

var qdialog = plugins.dialogs.showQuestionDialog("QuestionDialog","Do you want to close the windows?","Yes","No");
if (qdialog == "Yes") {
	application.closeAllWindows();
	controller.show(null);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="closeForm">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the dialog(s)/window(s) were closed, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Close the dialog/window with the given name (call this method to hide the form shown with 'showFormInDialog' or 'showFormInWindow'). If (true) is passed, then all the windows/dialogs will be closed. If the name is missing or null, the default dialog/window will be closed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Close the dialog/window with the given name (call this method to hide the form shown with 'showFormInDialog' or 'showFormInWindow').]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.closeForm(); // closes the current dialog/window
//application.closeForm('windowOrDialogName'); //closes the dialog/window with this specific name]]></sample>
          </samples>
          <parameters>
            <parameter name="windowOrDialogName/closeAll" optional="true">
              <description><![CDATA[Name of the dialog/window to close, or (true) to close all open dialogs/windows.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="closeFormDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the dialog(s) were closed, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Close the dialog with the given name (call this method to hide the form shown with 'showFormInDialog'). If (true) is passed, then all the windows will be closed. If the name is missing or null, the default dialog will be closed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Close the dialog with the given name (call this method to hide the form shown with 'showFormInDialog').]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.closeFormDialog(); // closes the current dialog
//application.closeFormDialog('dialogname'); //closes the dialog with the specific name]]></sample>
          </samples>
          <parameters>
            <parameter name="dialogName/closeAll" optional="true">
              <description><![CDATA[Name of the dialog to close, or (true) to close all open dialogs.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="closeSolution">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.
If the user has been logged in, this function keeps the user logged in and in the newly open solution, the login is skipped and the solution goes straight to the first form.
If you want to go to a different url, you need to call application.showURL(url) before calling application.closeSolution() (this is only applicable for Web Client). 
An alternative option is security.logout() which also does a log out for the user (for solutions that require authentication).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//application.showURL('http://www.servoy.com', '_self');  //Web Client only
application.closeSolution();
//close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'.
//if the user has been logged in, he will stay logged in
//application.closeSolution('solution_name','global_method_name','my_argument');
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="closeSolution">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.
If the user has been logged in, this function keeps the user logged in and in the newly open solution, the login is skipped and the solution goes straight to the first form.
If you want to go to a different url, you need to call application.showURL(url) before calling application.closeSolution() (this is only applicable for Web Client). 
An alternative option is security.logout() which also does a log out for the user (for solutions that require authentication).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//application.showURL('http://www.servoy.com', '_self');  //Web Client only
application.closeSolution();
//close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'.
//if the user has been logged in, he will stay logged in
//application.closeSolution('solution_name','global_method_name','my_argument');
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the solution to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="closeSolution">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.
If the user has been logged in, this function keeps the user logged in and in the newly open solution, the login is skipped and the solution goes straight to the first form.
If you want to go to a different url, you need to call application.showURL(url) before calling application.closeSolution() (this is only applicable for Web Client). 
An alternative option is security.logout() which also does a log out for the user (for solutions that require authentication).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//application.showURL('http://www.servoy.com', '_self');  //Web Client only
application.closeSolution();
//close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'.
//if the user has been logged in, he will stay logged in
//application.closeSolution('solution_name','global_method_name','my_argument');
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the solution to load]]></description>
            </parameter>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the global method to call]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="closeSolution">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.
If the user has been logged in, this function keeps the user logged in and in the newly open solution, the login is skipped and the solution goes straight to the first form.
If you want to go to a different url, you need to call application.showURL(url) before calling application.closeSolution() (this is only applicable for Web Client). 
An alternative option is security.logout() which also does a log out for the user (for solutions that require authentication).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Closes the currently open solution and optionally opens another solution, calling a specified global method with the specified arguments.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//application.showURL('http://www.servoy.com', '_self');  //Web Client only
application.closeSolution();
//close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'.
//if the user has been logged in, he will stay logged in
//application.closeSolution('solution_name','global_method_name','my_argument');
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the solution to load]]></description>
            </parameter>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the global method to call]]></description>
            </parameter>
            <parameter name="methodArgument" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Argument passed to the global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="createJPGImage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <deprecated><![CDATA[As of release 3.0, replaced by plugins.images#getImage(Object).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="createNewFormInstance">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the instance was created succesfully, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new form instance.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new form instance.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ok = application.createNewFormInstance('orders','orders_view');
if (ok)
{
	var dialog = application.createWindow("myDialog", JSWindow.DIALOG);
 dialog.show('orders_view')
	//forms['orders_view'].controller.show()
	//forms.xyz.elements.myTabPanel.addTab(forms['orders_view'])
	//forms['orders_view'].elements.mylabel.setLocation(10,20)
}]]></sample>
          </samples>
          <parameters>
            <parameter name="designFormName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the design form]]></description>
            </parameter>
            <parameter name="newInstanceScriptName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the new form instance]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="createTempFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#createTempFile(String,String).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="createThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <deprecated><![CDATA[As of release 3.0, replaced by plugins.images#getImage(Object).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="createWindow">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the newly created window.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new window that can be used for displaying forms. Initially the window is not visible.
If there is already a window with the given name, it will be closed and destroyed prior to creating the new window.
Use the form controller show() and showRecords() methods in order to show a form in this window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new window that can be used for displaying forms.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create and show a window, with specified title, initial location and size
// type of the window can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW
// If parentWindow is not specified, the current window will be used as parent; parentWindow parameter is only used by dialogs
var win = application.createWindow("windowName", JSWindow.WINDOW);
win.setInitialBounds(10, 10, 300, 300);
win.title = "This is a window";
controller.show(win);
// create and show a non-modal dialog with default initial bounds/title
var nmd = application.createWindow("nonModalDialogName", JSWindow.DIALOG);
controller.showRecords(15, nmd); // 15 is a single-number pk in this case]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the window. Should not be null.]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the type of the window. Can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createWindow">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the newly created window.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new window that can be used for displaying forms. Initially the window is not visible.
If there is already a window with the given name, it will be closed and destroyed prior to creating the new window.
Use the form controller show() and showRecords() methods in order to show a form in this window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new window that can be used for displaying forms.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create and show a window, with specified title, initial location and size
var win = application.createWindow("windowName", JSWindow.WINDOW);
win.setInitialBounds(10, 10, 300, 300);
win.title = "This is a window";
controller.show(win);
// create and show a non-modal dialog with default initial bounds/title
var nmd = application.createWindow("nonModalDialogName", JSWindow.DIALOG);
controller.showRecords(15, nmd); // 15 is a single-number pk in this case]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the window. Should not be null.]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the type of the window. Can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW.]]></description>
            </parameter>
            <parameter name="parentWindow" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the parent JSWindow object. If it is not specified, the current window will be used as parent. This parameter is only used by dialogs.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgram">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The output generated by the program execution.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgram("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgram("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgram("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgram">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The output generated by the program execution.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgram("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgram("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgram("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgram">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The output generated by the program execution.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgram("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgram("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgram("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
            <parameter name="environmentVars" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgram">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The output generated by the program execution.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program and returns output.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgram("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgram("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgram("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgram("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
            <parameter name="environmentVars" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.]]></description>
            </parameter>
            <parameter name="startDir" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="executeProgram" varargs="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The output generated by the program execution.]]></return>
          <deprecated><![CDATA[As of release 6.1.4. Use overload with array arguments, for ex: executeProgram("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
Execute a program and returns output. Specify the cmd as you would do in a console.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// "#" is divider between program args, environment vars and startdir
// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgram("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3");
// The same as above, but run the application in the user's home directory. 
application.executeProgram("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3", "#", "#", "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgram("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3", "#", "MY_ENV_VAR=something", "#", "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgram("/home/myself/myapp", "arg1", "arg2", "arg3");
application.executeProgram("/home/myself/myapp", "arg1", "arg2", "arg3", "#", "#", "/home/myself/");	
application.executeProgram("/home/myself/myapp", "arg1", "arg2", "arg3", "#", "MY_ENV_VAR=something", "#", "/home/myself/myapp");
// Open a file with the default application associated with it. (on Windows)
application.executeProgram("rundll32.exe", "url.dll,FileProtocolHandler", "filename");	
// Open a file with the default application associated with it. (on Linux)
application.executeProgram("xdg-open", "filename");
// Open a file with the default application associated with it. (on MacOS)
application.executeProgram("open", "filename");
// Open a file with a specific application (on MacOS).
application.executeProgram("open", "-a", "OpenOffice.org.app", "filename.doc");]]></sample>
          </samples>
          <parameters>
            <parameter name="programName">
              <description><![CDATA[Name (fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="arg1" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="arg2" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="argN" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program args and environment vars]]></description>
            </parameter>
            <parameter name="environmentvar1" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="environmentvarN" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program environment vars and startdir]]></description>
            </parameter>
            <parameter name="startdirectory" optional="true">
              <description><![CDATA[Program start directory]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgramInBackground">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgramInBackground("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgramInBackground("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgramInBackground("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgramInBackground">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgramInBackground("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgramInBackground("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgramInBackground("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgramInBackground">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgramInBackground("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgramInBackground("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgramInBackground("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
            <parameter name="environmentVars" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="executeProgramInBackground">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background. Specify the cmd as you would do in a console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Execute a program in the background.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"]);
// The same as above, but run the application in the user's home directory. 
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], null, "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"]);
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], null, "/home/myself/");	
application.executeProgramInBackground("/home/myself/myapp", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
// Open a file with the default application associated with it. (on Windows)
application.executeProgramInBackground("rundll32.exe", ["url.dll,FileProtocolHandler", "filename"]);	
// Open a file with the default application associated with it. (on Linux)
application.executeProgramInBackground("xdg-open", ["filename"]);
// Open a file with the default application associated with it. (on MacOS)
application.executeProgramInBackground("open", ["filename"]);
// Open a file with a specific application (on MacOS).
application.executeProgram("open", ["-a", "OpenOffice.org.app", "filename.doc"]);]]></sample>
          </samples>
          <parameters>
            <parameter name="program" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[(fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="params" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of strings as program arguments]]></description>
            </parameter>
            <parameter name="environmentVars" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.]]></description>
            </parameter>
            <parameter name="startDir" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="executeProgramInBackground" varargs="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 6.1.4. Use overload with array arguments for ex: executeProgramInBackground("c:\\Users\\myself\\myapp.exe", ["arg1", "arg2", "arg3"], ["MY_ENV_VAR=something"], "/home/myself/");
Execute a program in the background. Specify the cmd as you would do in a console.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// "#" is divider between program args, environment vars and startdir
// For Windows systems:
// Runs a binary located in the user's home directory. The application will run in the current working
// directory, which in general is the one where Servoy was started from.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3");
// The same as above, but run the application in the user's home directory. 
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3", "#", "#", "c:\\Users\\myself\\");	
// The same as above, but also set an environment variable for the called program.
application.executeProgramInBackground("c:\\Users\\myself\\myapp.exe", "arg1", "arg2", "arg3", "#", "MY_ENV_VAR=something", "#", "c:\\Users\\myself\\");
// For non-Windows systems:
application.executeProgramInBackground("/home/myself/myapp", "arg1", "arg2", "arg3");
application.executeProgramInBackground("/home/myself/myapp", "arg1", "arg2", "arg3", "#", "#", "/home/myself/");	
application.executeProgramInBackground("/home/myself/myapp", "arg1", "arg2", "arg3", "#", "MY_ENV_VAR=something", "#", "/home/myself/myapp");	
// Open a file with the default application associated with it. (on Windows)
application.executeProgramInBackground("rundll32.exe", "url.dll,FileProtocolHandler", "filename");	
// Open a file with the default application associated with it. (on Linux)
application.executeProgramInBackground("xdg-open", "filename");
// Open a file with the default application associated with it. (on MacOS)
application.executeProgramInBackground("open", "filename");
// Open a file with a specific application (on MacOS).
application.executeProgramInBackground("open", "-a", "OpenOffice.org.app", "filename.doc");]]></sample>
          </samples>
          <parameters>
            <parameter name="programName">
              <description><![CDATA[Name (fullpath) of the program to execute]]></description>
            </parameter>
            <parameter name="arg1" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="arg2" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="argN" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program args and environment vars]]></description>
            </parameter>
            <parameter name="environmentvar1" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="environmentvarN" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program environment vars and startdir]]></description>
            </parameter>
            <parameter name="startdirectory" optional="true">
              <description><![CDATA[Program start directory]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="exit">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Stop and exit application.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Stop and exit application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// exit application
application.exit();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getActiveClientCount">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Active user count on the server]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the active user count on the server (can be limited to current solution).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the active user count on the server (can be limited to current solution).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var count = application.getActiveClientCount(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="currentSolutionOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean (true) to get the active user count on server only to the current solution]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getActiveUserCount">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the active user count on the server (can be limited to current solution).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the active user count on the server (can be limited to current solution).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 2.x, replaced by #getActiveClientCount(boolean).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getActiveWindow">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the current active/focussed window.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[This gets the currently focused active window; this can be the main application window or a modal dialog.
For a webclient getWindow() can return the main window that is not really the main for the current tab in the browser
that can return the previous tab that a user could have opened. For this method is better suited because this 
will give you the actual tab in the browser. Another call would be form.controller.getWindow() of a form that you know in which window it resides.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[This gets the currently focused active window; this can be the main application window or a modal dialog.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get the currently active/focused window or dialog
var activeWindow = application.getActiveWindow();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getApplicationType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Constant application type]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the application type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the application type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var type = application.getApplicationType();
//see application type contstant]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientCountForInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Number of clients]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the count for all clients displaying the same additional information 
in the Clients page of Servoy Server Administration Console.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the count for all clients displaying the same additional information 
in the Clients page of Servoy Server Administration Console.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var count = application.getClientCountForInfo('SaaS company name');
application.output('Including yourself, there are ' + count + ' client(s) running on behalf of the company.');]]></sample>
          </samples>
          <parameters>
            <parameter name="info" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The additional client info string to search for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the property value for the given name/key, null of nothing was found]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets a UI property.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets a UI property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Only use this function from the solution on open method!
//In smart client, use this to set javax.swing.UIDefaults properties.
application.putClientProperty('ToolTip.hideAccelerator', true)
//To change the comboboxes selection background color, do this:
application.putClientProperty('ComboBox.selectionBackground', new Packages.javax.swing.plaf.ColorUIResource(java.awt.Color.RED)) 

//In web client, use this to change the template directory.
//To change the default dir of templates/default to templates/green_skin, do this:
application.putClientProperty('templates.dir','green_skin');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Name of the client property]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="getClipboardString">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The string from the clipboard]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Gets a string from the clipboard, null if not a string or empty.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Gets a string from the clipboard, null if not a string or empty.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var fromClipboard = application.getClipboardString();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getCurrentLookAndFeelName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Current Look And Feel]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the name of the current Look And Feel specified in Application Preferences.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the name of the current Look And Feel specified in Application Preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var laf = application.getCurrentLookAndFeelName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getDateStamp">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current date (with hour/minutes/seconds set to zero).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current date (with hour/minutes/seconds set to zero).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by utils#timestampToDate(Object).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getHostName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Name of the localhost]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the localhost.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the localhost.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hostName = application.getHostName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getIPAddress">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[IP address of the client]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the clients' IP address.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the clients' IP address.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ip = application.getIPAddress();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getLastErrorCode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the last error code or 0 if no error has happend, calling also clears errorCode]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the last error code or 0 if no error has happend, calling also clears errorCode]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by onError solution event.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var error = application.getLastErrorCode();
//if (error != 0) showErrorDialog();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getLastKeyModifiers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the last key modifiers of last action (shift = 1,ctrl = 2,meta = 4,alt = 8)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the last key modifiers of last action (shift = 1,ctrl = 2,meta = 4,alt = 8)]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by JSEvent functionality; event object is received as parameter to event method.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get the last key modifiers of last user action (shift = 1,ctrl = 2,meta = 4,alt = 8)
var m = application.getLastKeyModifiers();
if ( (m & 1) == 1)
{
	//do shift action
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLicenseNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[Client licenses names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the names of the used client licenses (as strings in array).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the names of the used client licenses (as strings in array).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = application.getLicenseNames();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="getMethodTriggerElementName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 5.0, replaced by JSEvent functionality; event object is received as parameter to event method.]]></deprecated>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="getMethodTriggerFormName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 5.0, replaced by JSEvent functionality; event object is received as parameter to event method.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getNewUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a new UUID (also known as GUID)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a new UUID (also known as GUID)]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getUUID().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var new_uuid = application.getNewUUID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getOSName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Name of the operating system]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of the operating system.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of the operating system.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var osname = application.getOSName();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getPrinters">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[All printer names]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Get all the printer names in an array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Get all the printer names in an array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var printersArray = application.getPrinters();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScreenHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Screen height]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the screen height in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the screen height in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var height = application.getScreenHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScreenWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Screen width]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the screen width in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the screen width in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var width = application.getScreenWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getServerTimeStamp">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Server time]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a date object initialized on server with current date and time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a date object initialized on server with current date and time.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var servertime = application.getServerTimeStamp();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getServerURL">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[HTTP server URL]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Gets the application server URL for mobile client to connect to.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the HTTP server url.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Gets the application server URL for mobile client to connect to.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the HTTP server url.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var url = application.getServerURL();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSolutionName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Current solution name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of the current solution.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of the current solution.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var solutionName = application.getSolutionName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSolutionRelease">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Current solution release number]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the solution release number.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the solution release number.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var release = application.getSolutionRelease();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getStartupArguments">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[Array with 2 elements, a string that is the startup argument and a map containing all named startup arguments,
or null if there is no argument passed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the parameters which are provided by startup.
It returns an array with 2 elements, a string that is the startup argument and a map containing all named startup arguments, or
null if there is no argument passed]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the parameters which are provided by startup.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, method was deprecated because startup arguments are received as arguments to solution onOpen event.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var args_array = application.getStartupArguments();
// the first element in the array is the 'argument' value from the startup
var argument = args_array[0];
// the second element is a map  containing all the named startup arguments
var startupArgumentObj = args_array[1];
var arg1 = startupArgumentObj['arg1_name'];
var arg2 = startupArgumentObj['arg2_name'];]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTimeStamp">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Current time at the client]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a date object initialized in client with current date and time.
This should be used instead of new Date() for webclients when the clients are in different times zones then the server.
Then this call will really return a time that is the locals webclients time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a date object initialized in client with current date and time.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var clienttime = application.getTimeStamp();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"><![CDATA[The new UUID object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object. A table column marked as UUID will work with such objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var new_uuid_object = application.getUUID(); // generate new uuid object
var uuid_object1 = application.getUUID(new_uuid_object.toString()); // convert a string representing an uuid to an uuid object
var uuid_object2 = application.getUUID(new_uuid_object.toBytes());  // convert a byte array representing an uuid to an uuid object]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"><![CDATA[The new UUID object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object. A table column marked as UUID will work with such objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var new_uuid_object = application.getUUID(); // generate new uuid object
var uuid_object1 = application.getUUID(new_uuid_object.toString()); // convert a string representing an uuid to an uuid object
var uuid_object2 = application.getUUID(new_uuid_object.toBytes());  // convert a byte array representing an uuid to an uuid object]]></sample>
          </samples>
          <parameters>
            <parameter name="byteArray" type="byte[]" typecode="[B">
              <description><![CDATA[Byte array representing an uuid]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"><![CDATA[The new UUID object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object. A table column marked as UUID will work with such objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var new_uuid_object = application.getUUID(); // generate new uuid object
var uuid_object1 = application.getUUID(new_uuid_object.toString()); // convert a string representing an uuid to an uuid object
var uuid_object2 = application.getUUID(new_uuid_object.toBytes());  // convert a byte array representing an uuid to an uuid object]]></sample>
          </samples>
          <parameters>
            <parameter name="uuidString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String representing an uuid]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getUserName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the user name when logged in ('unknown' when not logged in)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the user name when logged in ('unknown' when not logged in)]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 2.0, replaced by security#getUserName(Object[]).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var uname = application.getUserName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getUserProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Property value]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get a persistent user property.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get a persistent user property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var value = application.getUserProperty('showOrders');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the property]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserPropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[Array of all user property names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all persistent user property names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all persistent user property names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// display all user properties
allPropertyNames = application.getUserPropertyNames();
for(var i = 0; i < allPropertyNames.length; i++)
{
	application.output(allPropertyNames[i] + " = " + application.getUserProperty(allPropertyNames[i]));
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListArray">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Array" typecode="org.mozilla.javascript.NativeArray"><![CDATA[Named array for the valuelist]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieve a valuelist as array, to get real-values for display-values.
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieve a valuelist as array, to get real-values for display-values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var packet_types = application.getValueListArray('packet_types');
if (a_realValue == packet_types['displayValue'])
{
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListDisplayValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[Display value of the real value from the valuelist]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieve a valuelist display-value for a real-value.
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieve a valuelist display-value for a real-value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var displayable_status = application.getValueListDisplayValue('case_status',status);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="realValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Real value of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[DataSet with valuelist's display values and real values]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all values from a custom or database type value list as dataset (with columns displayValue,realValue).
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all values from a custom or database type value list as dataset (with columns displayValue,realValue).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Note:see databaseManager.JSDataSet for full details of dataset
var dataset = application.getValueListItems('my_en_types');
//example to calc a strange total
global_total = 0;
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	global_total = global_total + dataset.getValue(i,1);
}
//example to assign to dataprovider
//employee_salary = dataset.getValue(1,1)]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[Array with all valuelist names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the valuelist names as array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the valuelist names as array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = application.getValueListNames();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getValuelistDisplayValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <deprecated><![CDATA[As of release 3.0, replaced by #getValueListDisplayValue(String,Object).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getVersion">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[Application version]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the application version.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the application version.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.getVersion();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWindow">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the main application JSWindow.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the main application window. This is the window that is created first for this client. 

In a smart client this is always just the first started window where the solution is loaded in.
In a webclient the user may open the same solution in a new tab in the same browser. In that case the main solution
window will always be the first opened tab, even if that one was already closed.
application.getActiveWindow() will always return the currently active/focused window or dialog.
If you need the window of the current top-level form, controller.getWindow() of that form will
always return the correct window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the main application window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// close and dispose window resources
var mainAppWindow = application.getWindow();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWindow">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the JSWindow with the specified name, or null if no such window exists.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a window by window name. When not supplying a name, the main application window is grabbed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a window by window name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// close and dispose window resources
var win = application.getWindow("someWindowName");
if (win != null) {
	win.destroy();
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the window. If not specified, the main application JSWindow will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getWindowHeight">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Window height]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the window height in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the window height in pixels.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var height = application.getWindowHeight('customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getWindowWidth">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Window width]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the window width in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the window width in pixels.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var width = application.getWindowWidth('customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getWindowX">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Window X location]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the window X location in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the window X location in pixels.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = application.getWindowX('customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Window name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getWindowY">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[Window Y location]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the window Y location in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the window Y location in pixels.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = application.getWindowY('customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isFormInDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isFormInWindow">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the form is showing in a window, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Test if the form is currently showing in a window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Test if the form is currently showing in a window.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if(application.isFormInWindow(forms.formname))
{
	//close window
}]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Form object or name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="isInDeveloper">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the solution is running in the developer, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the solution is running in the developer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the solution is running in the developer.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var flag = application.isInDeveloper();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="isLastPrintPreviewPrinted">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) is the last print preview did print, (false) otherwise]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Check if the last printpreview did print.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Check if the last printpreview did print.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//attached this method to onShow on the form being shown after printpreview
//set a global called scopes.globals.showPrintPreview to 1 in the onPrintPreview method
if (scopes.globals.showPrintPreview == 1)
{
	scopes.globals.showPrintPreview = 0;//clear for next time
	if (application.isLastPrintPreviewPrinted())
	{
		plugins.dialogs.showInfoDialog('Alert',  'There is printed in printpreview',  'OK')
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isRunningInDeveloper">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the solution is running in the developer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the solution is running in the developer.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by #isInDeveloper().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="logout">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 3.0, replaced by security#logout(Object[]).]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="output">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Output something on the out stream. (if running in debugger view output console tab)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Output something on the out stream.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// log level is used to determine how/if to log in servoy_log.txt; for smart client java out and err streams are used
application.output('my very important trace msg');// default log level: info]]></sample>
          </samples>
          <parameters>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object to send to output stream]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="output">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Output something on the out stream. (if running in debugger view output console tab)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Output something on the out stream.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// log level is used to determine how/if to log in servoy_log.txt; for smart client java out and err streams are used
application.output('my very important msg',LOGGINGLEVEL.ERROR);// log level: error]]></sample>
          </samples>
          <parameters>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object to send to output stream]]></description>
            </parameter>
            <parameter name="level" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the log level where it should log to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="overrideStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Overrides one style (defined in in a form) with another.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Overrides one style (defined in in a form) with another.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//This function will only have effect on  forms not yet created, so solution onLoad is the best place to override'
//For example overriding the use of default/designed style anywhere in the solution from 'mystyle' to 'mystyle_mac'
application.overrideStyle('mystyle','mystyle_mace')//in this case both styles should have about the same classes]]></sample>
          </samples>
          <parameters>
            <parameter name="originalStyleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the style to override]]></description>
            </parameter>
            <parameter name="newStyleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the new style]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="playSound">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Play a sound (AU file, an AIFF file, a WAV file, and a MIDI file).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Play a sound (AU file, an AIFF file, a WAV file, and a MIDI file).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[application.playSound('media:///click.wav');]]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL of the sound file]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the client property was set with the new value]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets a UI property.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets a UI property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Only use this function from the solution on open method!
//In smart client, use this to set javax.swing.UIDefaults properties.
application.putClientProperty('ToolTip.hideAccelerator', true)
//To change the comboboxes selection background color, do this:
application.putClientProperty('ComboBox.selectionBackground', new Packages.javax.swing.plaf.ColorUIResource(java.awt.Color.RED)) 

//In web client, use this to change the template directory.
//To change the default dir of templates/default to templates/green_skin, do this:
application.putClientProperty('templates.dir','green_skin');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Name of the client property]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[New value of the client property]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="readFile">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#readFile(Object[]).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="readTXTFile">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#readTXTFile(Object[]).]]></deprecated>
        </function>
        <function clientSupport="sc" name="redo">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Redo last action (if possible).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Redo last action (if possible).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.redo();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeAllClientInfo">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes all names given to the client via the admin page.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes all names given to the client via the admin page.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.removeAllClientInfo();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeClientInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean indicator if info was removed successfully]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a string of client information which is stored on the server and
previously was added using the application.addClientInfo('client info')

This function can be called more than once, if you want to delete multiple
lines of client information.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a string of client information which is stored on the server and
previously was added using the application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removed = application.removeClientInfo('SaaS company name');]]></sample>
          </samples>
          <parameters>
            <parameter name="info" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A line of text to be removed from the client information
            on behalf of the running Servoy client.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="sendMail">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.mail#sendMail(Object[]).]]></deprecated>
        </function>
        <function clientSupport="sc" name="setClipboardContent">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Sets a string object in the clipboard.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Sets a string object in the clipboard.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.setClipboardContent('test');]]></sample>
          </samples>
          <parameters>
            <parameter name="string" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[New content of the clipboard]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="setErrorCapture">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enable or disable the error capture, if enabled you can use getLastErrorCode()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enable or disable the error capture, if enabled you can use getLastErrorCode()]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by onError solution event.]]></deprecated>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//turn on error capture
application.setErrorCapture(true);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setFocusLostSaveEnabled">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enable/disable the auto save when clicking anywhere on a form and the focus get lost.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enable/disable the auto save when clicking anywhere on a form and the focus get lost.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by databaseManager#setAutoSave(boolean).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.setFocusLostSaveEnabled(false);]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="setNumpadEnterAsFocusNextEnabled">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Set if numpad enter should behave like focus next.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Set if numpad enter should behave like focus next.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.setNumpadEnterAsFocusNextEnabled(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean (true) if numpad enter should behave like focus next]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="setServerURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Sets the application server URL for mobile client to connect to.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Sets the application server URL for mobile client to connect to.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[// if server URL is not set at mobile solution export, setServerURL should be called from custom login form, before authentication is done
application.setServerURL('http://localhost:8080');]]></sample>
          </samples>
          <parameters>
            <parameter name="applicationServerURL" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The URL to connect.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setStatusText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the status area value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the status area value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[application.setStatusText('Your status text');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[New status text]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setStatusText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the status area value.

NOTE: Most modern browsers do not support status bar and status text anymore. This method sets status property of the window using javascript.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the status area value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[application.setStatusText('Your status text','Your status tooltip text');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[New status text]]></description>
            </parameter>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Status tooltip text]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="setToolbarVisible">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Make a toolbar visible or invisible.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Make a toolbar visible or invisible.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[//example: hide the text toolbar
application.setToolbarVisible('text',false);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the toolbar]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Visibility of the toolbar]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setUIProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if the UI property was set with the new value]]></return>
          <deprecated><![CDATA[use putClientProperty(Object,Object)]]></deprecated>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Name of the UI property]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[New value of the UI property]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setUserProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Sets a user property for this client: <br>
For headless clients(including Batch Processors and Authentication clients) the user property is stored in memory and will be lost upon client restart.
<br>
For Web Client the user property will be stored in a persistent cookie
<br>
For Smart Client it will be stored in a properties file on the client machine.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Sets a user property for this client: <br>
For headless clients(including Batch Processors and Authentication clients) the user property is stored in memory and will be lost upon client restart.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[application.setUserProperty('showOrders','1');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the user property]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[New value of the user property]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="dataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet">
              <description><![CDATA[Dataset with display/real values]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="dataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet">
              <description><![CDATA[Dataset with display/real values]]></description>
            </parameter>
            <parameter name="autoconvert" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[Boolean (true) if display values and return values should be converted to numbers]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Display values array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Display values array]]></description>
            </parameter>
            <parameter name="autoconvert" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[Boolean (true) if display values and return values should be converted to numbers]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Display values array]]></description>
            </parameter>
            <parameter name="realValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Real values array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Display values array]]></description>
            </parameter>
            <parameter name="realValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Real values array]]></description>
            </parameter>
            <parameter name="autoconvert" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[Boolean (true) if display values and return values should be converted to numbers]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setWindowLocation">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the window location. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the window location.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.setWindowLocation(10,10,'customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="x">
              <description><![CDATA[Window new X location]]></description>
            </parameter>
            <parameter name="y">
              <description><![CDATA[Window new Y location]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setWindowSize">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the window size. If windowName is not specified or null, it will resize either the default dialog (if it is shown) or the main application window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the window size.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.setWindowSize(400,400,'customerDialog');]]></sample>
          </samples>
          <parameters>
            <parameter name="width">
              <description><![CDATA[Window new width]]></description>
            </parameter>
            <parameter name="height">
              <description><![CDATA[Window new height]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showCalendar">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Selected date or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled. Initial value and date format can be also specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedDate = application.showCalendar();]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="showCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Selected date or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled. Initial value and date format can be also specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedDate = application.showCalendar();]]></sample>
          </samples>
          <parameters>
            <parameter name="dateFormat" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Date format]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showCalendar">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Selected date or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled. Initial value and date format can be also specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedDate = application.showCalendar();]]></sample>
          </samples>
          <parameters>
            <parameter name="selectedDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date">
              <description><![CDATA[Default selected date]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showCalendar">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[Selected date or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled. Initial value and date format can be also specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the calendar, returns selected date or null if canceled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedDate = application.showCalendar();]]></sample>
          </samples>
          <parameters>
            <parameter name="selectedDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date">
              <description><![CDATA[Default selected date]]></description>
            </parameter>
            <parameter name="dateFormat" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Date format]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showColorChooser">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected color or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the colorChooser. Returned value is in format #RRGGBB or null if canceled.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the colorChooser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedColor = application.showColorChooser();]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="showColorChooser">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected color or null if canceled]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the colorChooser. Returned value is in format #RRGGBB or null if canceled.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the colorChooser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedColor = application.showColorChooser();]]></sample>
          </samples>
          <parameters>
            <parameter name="colorString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default color]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showDirectorySelectDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#showDirectorySelectDialog(Object[]).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showFileOpenDialog">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#showFileOpenDialog(Object[]).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showFileSaveDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#showFileSaveDialog(Object[]).]]></deprecated>
        </function>
        <function clientSupport="sc" name="showFontChooser">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected font]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the font chooser dialog. Returns the selected font. Can specify a default font.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the font chooser dialog.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedFont = application.showFontChooser();
elements.myfield.font = selectedFont]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="showFontChooser">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected font]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Show the font chooser dialog. Returns the selected font. Can specify a default font.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Show the font chooser dialog.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[var selectedFont = application.showFontChooser();
elements.myfield.font = selectedFont]]></sample>
          </samples>
          <parameters>
            <parameter name="defaultFont" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default font]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Show the form specified by the parameter, that can be a name (is case sensitive!) or a form object.
This will show the form in the active/currently focused window. So when called from a form in a dialog the dialog will show the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Show the form specified by the parameter, that can be a name (is case sensitive!) or a form object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showForm('MyForm');]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Form object or name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showFormInDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Show the specified form in a dialog. (NOTE: x, y, width, height are initial bounds - applied only the fist time a dialog is shown)

NOTE:
In the Smart Client, no code is executed after the function showFormInDialog <em>if the dialog is modal</em>.

NOTE:
x, y, width and height coordinates are only applied the first time the specified dialog is shown.
Use APP_UI_PROPERTY.DIALOG_FULL_SCREEN for these values when the dialog should be full-screen.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Show the specified form in a dialog.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Show the specified form in a modal dialog, on default initial location and size (x,y,w,h)
//application.showFormInDialog(forms.contacts);
//Note: No code is executed after the showFormInDialog until the dialog is closed if it is created as a modal dialog.
//Show the specified form in a non-modal dialog with a specified name, on default initial location and size (x,y,w,h)
//application.showFormInDialog(forms.contacts,'contactsdialog',false);
//Show the specified form in a modal dialog, at a specified initial location and size with custom title, not resizable but with text toolbar
application.showFormInDialog(forms.contacts,100,80,500,300,'my own dialog title',false,true,'mydialog',true);]]></sample>
          </samples>
          <parameters>
            <parameter name="form">
              <description><![CDATA[The form to be shown in the dialog.]]></description>
            </parameter>
            <parameter name="x" optional="true">
              <description><![CDATA[The "x" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="y" optional="true">
              <description><![CDATA[The "y" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="width" optional="true">
              <description><![CDATA[The width of the dialog.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The height of the dialog.]]></description>
            </parameter>
            <parameter name="dialogTitle" optional="true">
              <description><![CDATA[The title of the dialog.]]></description>
            </parameter>
            <parameter name="resizable" optional="true">
              <description><![CDATA[<em>true</em> if the dialog size should be modifiable; <em>false</em> if not.]]></description>
            </parameter>
            <parameter name="showTextToolbar" optional="true">
              <description><![CDATA[<em>true</em> to add a text toolbar; <em>false</em> to not add a text toolbar.]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[The name of the window; defaults to "dialog" if nothing is specified. Window and dialog names share the same namespace.]]></description>
            </parameter>
            <parameter name="modal" optional="true">
              <description><![CDATA[<em>true</em> if the dialog should be modal; <em>false</em> if not. Defaults to <em>true</em>.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showFormInWindow">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Show the specified form in a window. (NOTE: x, y, width, height are initial bounds - applied only the fist time a window is shown)

NOTE:
Forms in windows cannot be modal. They are more independent then dialogs, even non-modal ones. For example in SC, a non-modal dialog will always
be shown on top of the parent window and it will not have a separate entry in the OS window manager (for example Windows taskbar). 

NOTE:
x, y, width and height coordinates are only applied the first time the specified window is shown.
Use APP_UI_PROPERTY.FULL_SCREEN for these values when the window should be full-screen.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Show the specified form in a window.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Show the specified form in a window, on default initial location and size
//application.showFormInWindow(forms.contacts);
//Show the specified form in a window with a specified name, on default initial location and size
//application.showFormInWindow(forms.contacts,'contactsWindow');
//Show the specified form in a window, at a specified initial location and size with custom title, not resizable but with text toolbar
application.showFormInWindow(forms.contacts,100,80,500,300,'my own window title',false,true,'mywindow');]]></sample>
          </samples>
          <parameters>
            <parameter name="form">
              <description><![CDATA[The form to be shown in the dialog.]]></description>
            </parameter>
            <parameter name="x" optional="true">
              <description><![CDATA[The "x" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="y" optional="true">
              <description><![CDATA[The "y" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="width" optional="true">
              <description><![CDATA[The width of the dialog.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The height of the dialog.]]></description>
            </parameter>
            <parameter name="dialogTitle" optional="true">
              <description><![CDATA[The title of the dialog.]]></description>
            </parameter>
            <parameter name="resizable" optional="true">
              <description><![CDATA[<em>true</em> if the dialog size should be modifiable; <em>false</em> if not.]]></description>
            </parameter>
            <parameter name="showTextToolbar" optional="true">
              <description><![CDATA[<em>true</em> to add a text toolbar; <em>false</em> to not add a text toolbar.]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[The name of the window; defaults to "dialog" if nothing is specified. Window and dialog names share the same namespace.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showI18NDialog">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected I18N key or null if cancel is pressed]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations. Returns the key selected by the user (not it's translation)  or null if cancel is pressed. Optional parameters specify the initial selections in the dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.showI18NDialog("servoy.button.close", "en");]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="showI18NDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected I18N key or null if cancel is pressed]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations. Returns the key selected by the user (not it's translation)  or null if cancel is pressed. Optional parameters specify the initial selections in the dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.showI18NDialog("servoy.button.close", "en");]]></sample>
          </samples>
          <parameters>
            <parameter name="keyToSelect" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default selected key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="showI18NDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[selected I18N key or null if cancel is pressed]]></return>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations. Returns the key selected by the user (not it's translation)  or null if cancel is pressed. Optional parameters specify the initial selections in the dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Opens the i18n dialog so users can change translations.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.showI18NDialog("servoy.button.close", "en");]]></sample>
          </samples>
          <parameters>
            <parameter name="keyToSelect" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default selected key]]></description>
            </parameter>
            <parameter name="languageToSelect" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default selected language]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3rd or 4th parameter: a timeout in seconds when the url should be shown, immediately/0 is default']]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL to show]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3rd or 4th parameter: a timeout in seconds when the url should be shown, immediately/0 is default']]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL to show]]></description>
            </parameter>
            <parameter name="webclientTarget" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Target frame or named dialog/window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3rd or 4th parameter: a timeout in seconds when the url should be shown, immediately/0 is default']]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL to show]]></description>
            </parameter>
            <parameter name="webclientTarget" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Target frame or named dialog/window]]></description>
            </parameter>
            <parameter name="timeout" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[A timeout in seconds when the url should be shown]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3rd or 4th parameter: a timeout in seconds when the url should be shown, immediately/0 is default']]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL to show]]></description>
            </parameter>
            <parameter name="webclientTarget" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Target frame or named dialog/window]]></description>
            </parameter>
            <parameter name="webclientTargetOptions" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog options used when a dialog is specified / a timeout in seconds when the url should be shown]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows an URL in a browser.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3rd or 4th parameter: a timeout in seconds when the url should be shown, immediately/0 is default']]></sample>
          </samples>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL to show]]></description>
            </parameter>
            <parameter name="webclientTarget" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Target frame or named dialog/window]]></description>
            </parameter>
            <parameter name="webclientTargetOptions" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog options used when a dialog is specified / a timeout in seconds when the url should be shown]]></description>
            </parameter>
            <parameter name="timeout" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[A timeout in seconds when the url should be shown]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sleep">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sleep for specified time (in milliseconds).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sleep for specified time (in milliseconds).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Sleep for 3 seconds
application.sleep(3000);]]></sample>
          </samples>
          <parameters>
            <parameter name="ms" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[Sleep time in milliseconds]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="sc" name="undo">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Undo last action (if possible).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Undo last action (if possible).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.undo();]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="updateUI">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Updates the UI (painting). If in a script an element changed and the script continues doing 
things, you can give an number in ms how long this can take.
Warning: this gives the UI time to paint, but this also means that it will give the ui time to respond to all other events,
so if a user keeps clicking on other stuff this will also be handled right away inside this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Updates the UI (painting).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.updateUI(500);
//continue doing things]]></sample>
          </samples>
        </function>
        <function clientSupport="sc" name="updateUI">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="sc"><![CDATA[Updates the UI (painting). If in a script an element changed and the script continues doing 
things, you can give an number in ms how long this can take.
Warning: this gives the UI time to paint, but this also means that it will give the ui time to respond to all other events,
so if a user keeps clicking on other stuff this will also be handled right away inside this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="sc"><![CDATA[Updates the UI (painting).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="sc"><![CDATA[application.updateUI(500);
//continue doing things]]></sample>
          </samples>
          <parameters>
            <parameter name="milliseconds" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[How long the update should take in milliseconds]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="writeFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#writeFile(Object,byte[]).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#writeTXTFile(Object[]).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="writeXMLFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 2.x, replaced by plugins.file#writeXMLFile(Object,String).]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="BEVELTYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.BEVELTYPE">
      <constants>
        <constant clientSupport="ng,wc,sc" name="LOWERED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Lowered bevel border type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Lowered bevel border type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createBevelBorder(SM_BEVELTYPE.LOWERED, '#ff0000', '#00ff00','#f0000f', '#0000ff');]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RAISED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Raised bevel border type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Raised bevel border type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createBevelBorder(SM_BEVELTYPE.RAISED, '#ff0000', '#00ff00','#f0000f', '#0000ff');]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="wc,sc" publicName="CLIENTDESIGN" qualifiedName="com.servoy.j2db.scripting.info.CLIENTDESIGN">
      <constants>
        <constant clientSupport="wc,sc" name="HANDLES">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Property that can be set using elements['element_1'].putClientProperty(...), it sets the available handles in clientdesign]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Property that can be set using elements['element_1'].]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//by default all are present. ('l' stands for left, 't' stands for top, etc.)
elements['element_1'].putClientProperty(CLIENTDESIGN.HANDLES, new Array('r', 'l')); // other options are 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr']]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="SELECTABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Property that can be set using elements['element_1'].putClientProperty(...), it sets the selectable flag in clientdesign]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Property that can be set using elements['element_1'].]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//by default an element with an name is selectable in client design
elements['element_1'].putClientProperty(CLIENTDESIGN.SELECTABLE, false);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="COLUMNTYPE" qualifiedName="com.servoy.j2db.scripting.info.COLUMNTYPE">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DATETIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.DATETIME]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.INTEGER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.MEDIA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="NUMBER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.NUMBER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.TEXT]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="CURSOR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.CURSOR">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DEFAULT_CURSOR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting the roll over cursor for components.
Use this for setting the roll over cursor to the default (dependent
on the OS and the L&F).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting the roll over cursor for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.DEFAULT_CURSOR;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HAND_CURSOR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting the roll over cursor for components.
Use this for setting the roll over cursor to a hand.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting the roll over cursor for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="DBDataSource" qualifiedName="com.servoy.j2db.dataprocessing.datasource.DBDataSource"/>
    <object clientSupport="ng,wc,sc" publicName="DBDataSourceServer" qualifiedName="com.servoy.j2db.dataprocessing.datasource.DBDataSourceServer">
      <functions>
        <function clientSupport="ng,wc,sc" name="getDataModelCloneFrom">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.datasource.DBDataSourceServer" typecode="com.servoy.j2db.dataprocessing.datasource.DBDataSourceServer"><![CDATA[DBDataSourceServer server]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the server where this server is a data model clone from.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the server where this server is a data model clone from.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[datasources.db.example_data99.getDataModelCloneFrom().getServerName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getServerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String server name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the server name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the server name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[datasources.db.example_data.getServerName() // returns 'example_data']]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="DEFAULTS" qualifiedName="com.servoy.j2db.scripting.solutionmodel.DEFAULTS">
      <constants>
        <constant clientSupport="ng,wc,sc" name="COMMAND_DEFAULT">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.solutionmodel.ISMMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constants used for setting commands to "default".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constants used for setting commands to "default".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 1200, 800);
form.onFindCmd = SM_DEFAULTS.COMMAND_DEFAULT; // This makes the find work like it does by default.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="COMMAND_NONE">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.solutionmodel.ISMMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for setting commands to "none".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for setting commands to "none".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 1200, 800);
form.onFindCmd = SM_DEFAULTS.COMMAND_NONE; // This disables the find on the form.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used in various places to set properties to their default value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used in various places to set properties to their default value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 1200, 800);
form.navigator = SM_DEFAULTS.DEFAULT; // Show the default navigator on the form.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="IGNORE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant used for form navigator, will reuse the current form navigator.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used to remove a component from the tab sequence or set form navigator to IGNORE value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant used for form navigator, will reuse the current form navigator.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used to remove a component from the tab sequence or set form navigator to IGNORE value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table');
form.navigator = SM_DEFAULTS.IGNORE; // reuse the navigator from current form.]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant used in various places to set properties to "none".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant used in various places to set properties to "none".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table');
form.navigator = SM_DEFAULTS.NONE; // Hide the navigator on the form.]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 1200, 800);
form.navigator = SM_DEFAULTS.NONE; // Hide the navigator on the form.]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="DISPLAYTYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.DISPLAYTYPE">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="CALENDAR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.CALENDAR]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="CHECKS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.CHECKS]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="COMBOBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.COMBOBOX]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HTML_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.HTML_AREA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="IMAGE_MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.IMAGE_MEDIA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="PASSWORD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.PASSWORD]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="RADIOS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.RADIOS]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="RTF_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.RTF_AREA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TEXT_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.TEXT_AREA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TEXT_FIELD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.TEXT_FIELD]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TYPE_AHEAD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSField.TYPE_AHEAD]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="wc,sc" publicName="DRAGNDROP" qualifiedName="com.servoy.j2db.dnd.DRAGNDROP">
      <constants>
        <constant clientSupport="wc,sc" name="COPY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for copy drag operation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for copy drag operation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MIME_TYPE_SERVOY">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant used as mime type for servoy objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant used as mime type for servoy objects.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.dataMimeType == DRAGNDROP.MIME_TYPE_SERVOY || event.dataMimeType == DRAGNDROP.MIME_TYPE_SERVOY_RECORD) {
	application.output("Dropping is allowed" );
	return true;
} else { 
	application.output("Dropping is not allowed" );
	return false;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MIME_TYPE_SERVOY_RECORD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant used as mime type for servoy record objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant used as mime type for servoy record objects.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.dataMimeType == DRAGNDROP.MIME_TYPE_SERVOY || event.dataMimeType == DRAGNDROP.MIME_TYPE_SERVOY_RECORD) {
	application.output("Dropping is allowed" );
	return true;
} else { 
	application.output("Dropping is not allowed" );
	return false;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MOVE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for move drag operation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for move drag operation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for no drag operation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for no drag operation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="DataException" qualifiedName="com.servoy.j2db.dataprocessing.DataException">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ABSTRACT_FORM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for ABSTRACT_FORM.

This code is used when a form, that cannot be created, is shown (for example, a form without parts).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for ABSTRACT_FORM.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ACQUIRE_LOCK_FAILURE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.

This code is used when a database failed to lock a row or table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BAD_SQL_SYNTAX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for BAD_SQL_SYNTAX.

This code is used when a database exception is recognized as an sql syntax error.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for BAD_SQL_SYNTAX.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="CLIENT_NOT_AUTHORIZED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.

This code is used when an client performs an action that requires the user to be logged in and the user has not logged in yet.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATA_ACCESS_RESOURCE_FAILURE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.

This code is used when a database exception received an error accessing storage devices.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATA_INTEGRITY_VIOLATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.

This code is used when a database exception is recognized as an integrity exception (like constraint violation).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEADLOCK">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DEADLOCK.

This code is used when a deadlock is detected by the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DEADLOCK.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DELETE_NOT_GRANTED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DELETE_NOT_GRANTED.

This code is used when a record deletion was rejected by a pre-delete Servoy trigger.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DELETE_NOT_GRANTED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EXECUTE_PROGRAM_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.

This code is used when an external program was not executed correctly.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INCORRECT_LOGIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INCORRECT_LOGIN.

This code is used when the user enters invalid credentials.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INCORRECT_LOGIN.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INVALID_INPUT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT.

This code is used when the user enters data that could not be validated.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INVALID_INPUT_FORMAT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT_FORMAT.

This code is not used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT_FORMAT.]]></summary>
          </summaries>
          <deprecated><![CDATA[This code is not used]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INVALID_RESULTSET_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.

This code is used when a data is requested that is not selected in the sql.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MAINTENANCE_MODE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for MAINTENANCE_MODE.

This code is used when a client could not be registered with the server because the server is in maintenance mode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for MAINTENANCE_MODE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_ACCESS.

This code is used when a user wants to view data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_CREATE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_CREATE_ACCESS.

This code is used when a user wants to create new records and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_CREATE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_DELETE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_DELETE_ACCESS.

This code is used when a user wants to delete data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_DELETE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_LICENSE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_LICENSE.

This code is used when a client could not be registered with the server because of license limitations.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_LICENSE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_MODIFY_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_MODIFY_ACCESS.

This code is used when a user wants to update data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_MODIFY_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_PARENT_DELETE_WITH_RELATED_RECORDS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.

This code is used when a record could not be deleted because a non-empty relation exists for the record that does not allow parent delete when having related records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_RELATED_CREATE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.

This code is used when a user wants to create new related records and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PERMISSION_DENIED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for PERMISSION_DENIED.

This code is used when a database exception is recognized as a authorization error.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for PERMISSION_DENIED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECORD_LOCKED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_LOCKED.

This code is used when a record could not be updated or deleted because it is locked by another client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_LOCKED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECORD_VALIDATION_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_VALIDATION_FAILED.

This code is used when a record update/insert was rejected by a pre-update/insert Servoy trigger.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_VALIDATION_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SAVE_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for SAVE_FAILED.

This code is used when a javascript exception occurred during saving data to the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for SAVE_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UNEXPECTED_UPDATE_COUNT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.

This code is used when a data could not be deleted or updated when expected (for example 
when a record was deleted outside Servoy and a Servoy client wants to update the record).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UNKNOWN_DATABASE_EXCEPTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.

This code is used when an unrecognized database exception has occurred.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
      </constants>
      <functions>
        <function clientSupport="ng,wc,sc" name="getErrorCode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the error code for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMessage">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string message for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the string message for this ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the string message for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getParameters">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[the parameters of the SQL query that caused this DataException in an array.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the parameters of the SQL query that caused this DataException in an array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the parameters of the SQL query that caused this DataException in an array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{   
	var param = record.exception.getParameters();
	for (j = 0; j < param.length; j++)
	{      
		application.output("SQL Parameter [" + j + "]: " + param[j]);  
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQL">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the SQL query that caused this DataException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the SQL query that caused this DataException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the SQL query that caused this DataException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("SQL: " + record.exception.getSQL());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLState">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the SQLState for this DataException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the SQLState for this DataException.
This is a "SQLstate" string, which follows either the XOPEN SQLstate conventions or the SQL 99 conventions.
The values of the SQLState string are described in the appropriate spec.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the SQLState for this DataException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("SQLState: " + record.exception.getSQLState());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScriptStackTrace">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the script stack trace for this ServoyException if this could be created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the script stack trace for this ServoyException if this could be created.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getStackTrace">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the stack trace for this ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the stack trace for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValue">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value for this DataException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the value for this DataException.
The value is the object thrown in table pre-insert, pre-update or pre-delete triggers.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the value for this DataException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("VALUE: " + record.exception.getValue());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getVendorErrorCode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the error code of the error thrown by the back-end database server.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the error code of the error thrown by the back-end database server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the error code of the error thrown by the back-end database server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("VendorErrorCode: " + record.exception.getVendorErrorCode());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isDataException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[This method will always return true; it makes the distinction between DataException and ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[This method will always return true; it makes the distinction between DataException and ServoyException.]]></summary>
          </summaries>
          <deprecated><![CDATA[Use "typeof" operator instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception.isDataException)
{
	application.output("SQL: " + record.exception.getSQL());
	application.output("SQLState: " + record.exception.getSQLState());
	application.output("VendorErrorCode: " + record.exception.getVendorErrorCode());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isServoyException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></summary>
          </summaries>
          <deprecated><![CDATA[Use "typeof" operator instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Database Manager" qualifiedName="com.servoy.j2db.dataprocessing.JSDatabaseManager" scriptingName="databaseManager">
      <properties>
        <property clientSupport="ng,wc,sc" name="nullColumnValidatorEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enable/disable the default null validator for non null columns, makes it possible todo the checks later on when saving, when for example autosave is disabled.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enable/disable the default null validator for non null columns, makes it possible todo the checks later on when saving, when for example autosave is disabled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.nullColumnValidatorEnabled = false;//disable

//test if enabled
if(databaseManager.nullColumnValidatorEnabled) application.output('null validation enabled')]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="acquireLock">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the lock could be acquired.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.
The record_index can be -1 to lock all rows, 0 to lock the current row, or a specific row of > 0
Optionally name the lock(s) so that it can be referenced it in releaseAllLocks()

returns true if the lock could be acquired.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//locks the complete foundset
databaseManager.acquireLock(foundset,-1);

//locks the current row
databaseManager.acquireLock(foundset,0);

//locks all related orders for the current Customer
var success = databaseManager.acquireLock(Cust_to_Orders,-1);
if(!success)
{
	plugins.dialogs.showWarningDialog('Alert','Failed to get a lock','OK');
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to get the lock for]]></description>
            </parameter>
            <parameter name="recordIndex" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The record index which should be locked.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="acquireLock">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the lock could be acquired.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.
The record_index can be -1 to lock all rows, 0 to lock the current row, or a specific row of > 0
Optionally name the lock(s) so that it can be referenced it in releaseAllLocks()

returns true if the lock could be acquired.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//locks the complete foundset
databaseManager.acquireLock(foundset,-1);

//locks the current row
databaseManager.acquireLock(foundset,0);

//locks all related orders for the current Customer
var success = databaseManager.acquireLock(Cust_to_Orders,-1);
if(!success)
{
	plugins.dialogs.showWarningDialog('Alert','Failed to get a lock','OK');
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to get the lock for]]></description>
            </parameter>
            <parameter name="recordIndex" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The record index which should be locked.]]></description>
            </parameter>
            <parameter name="lockName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the lock.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the tablefilter could be applied.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.
Note: if null is provided as the tablename the filter will be applied on all tables with the dataprovider name.
A dataprovider can have multiple filters defined, they will all be applied.
returns true if the tablefilter could be applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Best way to call this in a global solution startup method, but filters may be added/removed at any time.
// Note that multiple filters can be added to the same dataprovider, they will all be applied.

// filter on messages table where messagesid>10, the filter has a name so it can be removed using databaseManager.removeTableFilterParam()
var success = databaseManager.addTableFilterParam('admin', 'messages', 'messagesid', '>', 10, 'higNumberedMessagesRule')

// all tables that have the companyid column should be filtered
var success = databaseManager.addTableFilterParam('crm', null, 'companyidid', '=', currentcompanyid)

// some filters with in-conditions
var success = databaseManager.addTableFilterParam('crm', 'products', 'productcode', 'in', [120, 144, 200])
var success = databaseManager.addTableFilterParam('crm', 'orders', 'countrycode', 'in', 'select country code from countries where region = "Europe"')

// you can use modifiers in the operator as well, filter on companies where companyname is null or equals-ignore-case 'servoy'
var success = databaseManager.addTableFilterParam('crm', 'companies', 'companyname', '#^||=', 'servoy')

// the value may be null, this will result in 'column is null' sql condition.
var success = databaseManager.addTableFilterParam('crm', 'companies', 'verified', '=', null)

//if you want to add a filter for a column (created by you) in the i18n table
databaseManager.addTableFilterParam('database', 'your_i18n_table', 'message_variant', 'in', [1, 2])]]></sample>
          </samples>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A specified dataprovider column name.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One of "=, <, >, >=, <=, !=, LIKE, or IN" optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The specified filter value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the tablefilter could be applied.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.
Note: if null is provided as the tablename the filter will be applied on all tables with the dataprovider name.
A dataprovider can have multiple filters defined, they will all be applied.
returns true if the tablefilter could be applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Best way to call this in a global solution startup method, but filters may be added/removed at any time.
// Note that multiple filters can be added to the same dataprovider, they will all be applied.

// filter on messages table where messagesid>10, the filter has a name so it can be removed using databaseManager.removeTableFilterParam()
var success = databaseManager.addTableFilterParam('admin', 'messages', 'messagesid', '>', 10, 'higNumberedMessagesRule')

// all tables that have the companyid column should be filtered
var success = databaseManager.addTableFilterParam('crm', null, 'companyidid', '=', currentcompanyid)

// some filters with in-conditions
var success = databaseManager.addTableFilterParam('crm', 'products', 'productcode', 'in', [120, 144, 200])
var success = databaseManager.addTableFilterParam('crm', 'orders', 'countrycode', 'in', 'select country code from countries where region = "Europe"')

// you can use modifiers in the operator as well, filter on companies where companyname is null or equals-ignore-case 'servoy'
var success = databaseManager.addTableFilterParam('crm', 'companies', 'companyname', '#^||=', 'servoy')

// the value may be null, this will result in 'column is null' sql condition.
var success = databaseManager.addTableFilterParam('crm', 'companies', 'verified', '=', null)

//if you want to add a filter for a column (created by you) in the i18n table
databaseManager.addTableFilterParam('database', 'your_i18n_table', 'message_variant', 'in', [1, 2])]]></sample>
          </samples>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A specified dataprovider column name.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One of "=, <, >, >=, <=, !=, LIKE, or IN" optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The specified filter value.]]></description>
            </parameter>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The specified name of the database table filter.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the tablefilter could be applied.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.
Note: if null is provided as the tablename the filter will be applied on all tables with the dataprovider name.
A dataprovider can have multiple filters defined, they will all be applied.
returns true if the tablefilter could be applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Best way to call this in a global solution startup method, but filters may be added/removed at any time.
// Note that multiple filters can be added to the same dataprovider, they will all be applied.

// filter on messages table where messagesid>10, the filter has a name so it can be removed using databaseManager.removeTableFilterParam()
var success = databaseManager.addTableFilterParam('admin', 'messages', 'messagesid', '>', 10, 'higNumberedMessagesRule')

// all tables that have the companyid column should be filtered
var success = databaseManager.addTableFilterParam('crm', null, 'companyidid', '=', currentcompanyid)

// some filters with in-conditions
var success = databaseManager.addTableFilterParam('crm', 'products', 'productcode', 'in', [120, 144, 200])
var success = databaseManager.addTableFilterParam('crm', 'orders', 'countrycode', 'in', 'select country code from countries where region = "Europe"')

// you can use modifiers in the operator as well, filter on companies where companyname is null or equals-ignore-case 'servoy'
var success = databaseManager.addTableFilterParam('crm', 'companies', 'companyname', '#^||=', 'servoy')

// the value may be null, this will result in 'column is null' sql condition.
var success = databaseManager.addTableFilterParam('crm', 'companies', 'verified', '=', null)

//if you want to add a filter for a column (created by you) in the i18n table
databaseManager.addTableFilterParam('database', 'your_i18n_table', 'message_variant', 'in', [1, 2])]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection for the specified table name.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the specified table.]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A specified dataprovider column name.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One of "=, <, >, >=, <=, !=, LIKE, or IN" optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The specified filter value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the tablefilter could be applied.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.
Note: if null is provided as the tablename the filter will be applied on all tables with the dataprovider name.
A dataprovider can have multiple filters defined, they will all be applied.
returns true if the tablefilter could be applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a filter to all the foundsets based on a table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Best way to call this in a global solution startup method, but filters may be added/removed at any time.
// Note that multiple filters can be added to the same dataprovider, they will all be applied.

// filter on messages table where messagesid>10, the filter has a name so it can be removed using databaseManager.removeTableFilterParam()
var success = databaseManager.addTableFilterParam('admin', 'messages', 'messagesid', '>', 10, 'higNumberedMessagesRule')

// all tables that have the companyid column should be filtered
var success = databaseManager.addTableFilterParam('crm', null, 'companyidid', '=', currentcompanyid)

// some filters with in-conditions
var success = databaseManager.addTableFilterParam('crm', 'products', 'productcode', 'in', [120, 144, 200])
var success = databaseManager.addTableFilterParam('crm', 'orders', 'countrycode', 'in', 'select country code from countries where region = "Europe"')

// you can use modifiers in the operator as well, filter on companies where companyname is null or equals-ignore-case 'servoy'
var success = databaseManager.addTableFilterParam('crm', 'companies', 'companyname', '#^||=', 'servoy')

// the value may be null, this will result in 'column is null' sql condition.
var success = databaseManager.addTableFilterParam('crm', 'companies', 'verified', '=', null)

//if you want to add a filter for a column (created by you) in the i18n table
databaseManager.addTableFilterParam('database', 'your_i18n_table', 'message_variant', 'in', [1, 2])]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection for the specified table name.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the specified table.]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A specified dataprovider column name.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One of "=, <, >, >=, <=, !=, LIKE, or IN" optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The specified filter value.]]></description>
            </parameter>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The specified name of the database table filter.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addTrackingInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add tracking info used in the log table.
When tracking is enabled and a new row is inserted in the log table,
if it has a column named 'columnName', its value will be set with 'value']]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add tracking info used in the log table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.addTrackingInfo('log_column_name', 'trackingInfo')]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column in the log table, used for tracking info]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The value to be set when inserting a new row in the log table, for the 'columnName' column]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="commitTransaction">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[if the transaction could be committed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.
Saves all edited records and commits the data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="commitTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[if the transaction could be committed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
          <parameters>
            <parameter name="saveFirst" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[save edited records to the database first (default true)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="commitTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[if the transaction could be committed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
          <parameters>
            <parameter name="saveFirst" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[save edited records to the database first (default true)]]></description>
            </parameter>
            <parameter name="revertSavedRecords" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if a commit fails and a rollback is done, the when given false the records are not reverted to the database state (and are in edited records again)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertFoundSet">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[The converted JSFoundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.
The created foundset will not contain records that have not been saved in the database, because the records in the foundset will be the
result of a select query to the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Convert in the order form a orders foundset into a orderdetails foundset,
// that has all the orderdetails from all the orders in the foundset.
var convertedFoundSet = databaseManager.convertFoundSet(foundset,order_to_orderdetails);
// or var convertedFoundSet = databaseManager.convertFoundSet(foundset,"order_to_orderdetails");
forms.orderdetails.controller.showRecords(convertedFoundSet);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The JSFoundset to convert.]]></description>
            </parameter>
            <parameter name="related" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[can be a one-to-many relation object or the name of a one-to-many relation]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertFoundSet">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[The converted JSFoundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.
The created foundset will not contain records that have not been saved in the database, because the records in the foundset will be the
result of a select query to the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Convert in the order form a orders foundset into a orderdetails foundset,
// that has all the orderdetails from all the orders in the foundset.
var convertedFoundSet = databaseManager.convertFoundSet(foundset,order_to_orderdetails);
// or var convertedFoundSet = databaseManager.convertFoundSet(foundset,"order_to_orderdetails");
forms.orderdetails.controller.showRecords(convertedFoundSet);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The JSFoundset to convert.]]></description>
            </parameter>
            <parameter name="related" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of a one-to-many relation]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset).
The optional array of dataprovider names is used (only) to add the specified dataprovider names as columns to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The foundset to be converted.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset).
The optional array of dataprovider names is used (only) to add the specified dataprovider names as columns to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The foundset to be converted.]]></description>
            </parameter>
            <parameter name="dataproviderNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array with column names.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset).
The optional array of dataprovider names is used (only) to add the specified dataprovider names as columns to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          </samples>
          <parameters>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[The values array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset).
The optional array of dataprovider names is used (only) to add the specified dataprovider names as columns to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          </samples>
          <parameters>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[The values array.]]></description>
            </parameter>
            <parameter name="dataproviderNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[The property names array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset).
The optional array of dataprovider names is used (only) to add the specified dataprovider names as columns to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          </samples>
          <parameters>
            <parameter name="ids" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Concatenated values to be put into dataset.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="copyMatchingColumns">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if no errors happend.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).
returns true if no error did happen.

NOTE: This function could be used to store a copy of records in an archive table. Use the getRecord() function to get the record as an object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #copyMatchingFields(Object,IRecordInternal,boolean,Object[])]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for( var i = 1 ; i <= foundset.getSize() ; i++ )
{
	var srcRecord = foundset.getRecord(i);
	var destRecord = otherfoundset.getRecord(i);
	if (srcRecord == null || destRecord == null) break;
	databaseManager.copyMatchingColumns(srcRecord,destRecord,true)
}
//saves any outstanding changes to the dest foundset
databaseManager.saveData();]]></sample>
          </samples>
          <parameters>
            <parameter name="src">
              <description><![CDATA[The source record or object to be copied.]]></description>
            </parameter>
            <parameter name="dest_record">
              <description><![CDATA[The destination record to copy to.]]></description>
            </parameter>
            <parameter name="overwrite/array_of_names_not_overwritten" optional="true">
              <description><![CDATA[true (default false) if everything can be overwritten or an array of names that shouldnt be overwritten.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="copyMatchingFields">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if no errors happened.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).
The matching requires the properties and getter functions of the source to match those of the destination; for the getter functions,
the 'get' will be removed and the remaining name will be converted to lowercase before attempting to match.
Returns true if no error occurred.

NOTE: This function could be used to store a copy of records in an archive table. Use the getRecord() function to get the record as an object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for( var i = 1 ; i <= foundset.getSize() ; i++ )
{
	var srcRecord = foundset.getRecord(i);
	var destRecord = otherfoundset.getRecord(i);
	if (srcRecord == null || destRecord == null) break;
	databaseManager.copyMatchingFields(srcRecord,destRecord,true)
}
//saves any outstanding changes to the dest foundset
databaseManager.saveData();

//copying from a MailMessage JavaScript object
//var _msg = plugins.mail.receiveMail(login, password, true, 0, null, properties);
//if (_msg != null)
//{
//	controller.newRecord();
//	var srcObject = _msg[0];
//	var destRecord = foundset.getSelectedRecord();
//	databaseManager.copyMatchingFields(srcObject, destRecord, true);
//	databaseManager.saveData();
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The source record or (java/javascript)object to be copied.]]></description>
            </parameter>
            <parameter name="destination" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The destination record to copy to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="copyMatchingFields">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if no errors happened.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).
The matching requires the properties and getter functions of the source to match those of the destination; for the getter functions,
the 'get' will be removed and the remaining name will be converted to lowercase before attempting to match.
Returns true if no error occurred.

NOTE: This function could be used to store a copy of records in an archive table. Use the getRecord() function to get the record as an object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for( var i = 1 ; i <= foundset.getSize() ; i++ )
{
	var srcRecord = foundset.getRecord(i);
	var destRecord = otherfoundset.getRecord(i);
	if (srcRecord == null || destRecord == null) break;
	databaseManager.copyMatchingFields(srcRecord,destRecord,true)
}
//saves any outstanding changes to the dest foundset
databaseManager.saveData();

//copying from a MailMessage JavaScript object
//var _msg = plugins.mail.receiveMail(login, password, true, 0, null, properties);
//if (_msg != null)
//{
//	controller.newRecord();
//	var srcObject = _msg[0];
//	var destRecord = foundset.getSelectedRecord();
//	databaseManager.copyMatchingFields(srcObject, destRecord, true);
//	databaseManager.saveData();
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The source record or (java/javascript)object to be copied.]]></description>
            </parameter>
            <parameter name="destination" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The destination record to copy to.]]></description>
            </parameter>
            <parameter name="overwrite" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[Boolean values to overwrite all values.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="copyMatchingFields">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if no errors happened.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).
The matching requires the properties and getter functions of the source to match those of the destination; for the getter functions,
the 'get' will be removed and the remaining name will be converted to lowercase before attempting to match.
Returns true if no error occurred.

NOTE: This function could be used to store a copy of records in an archive table. Use the getRecord() function to get the record as an object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for( var i = 1 ; i <= foundset.getSize() ; i++ )
{
	var srcRecord = foundset.getRecord(i);
	var destRecord = otherfoundset.getRecord(i);
	if (srcRecord == null || destRecord == null) break;
	databaseManager.copyMatchingFields(srcRecord,destRecord,true)
}
//saves any outstanding changes to the dest foundset
databaseManager.saveData();

//copying from a MailMessage JavaScript object
//var _msg = plugins.mail.receiveMail(login, password, true, 0, null, properties);
//if (_msg != null)
//{
//	controller.newRecord();
//	var srcObject = _msg[0];
//	var destRecord = foundset.getSelectedRecord();
//	databaseManager.copyMatchingFields(srcObject, destRecord, true);
//	databaseManager.saveData();
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The source record or (java/javascript)object to be copied.]]></description>
            </parameter>
            <parameter name="destination" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The destination record to copy to.]]></description>
            </parameter>
            <parameter name="names" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[The property names that shouldn't be overriden.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="createDataSource">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 5.0, replaced by JSDataSet#createDataSource(String,Object)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// select customer data for order 1234
/** @type {QBSelect<db:/example_data/customers>} */
var q = databaseManager.createSelect("db:/example_data/customers");
q.result.add(q.columns.customer_id).add(q.columns.city).add(q.columns.country);
q.where.add(q.joins.customers_to_orders.columns.orderid.eq(1234));
var uri = databaseManager.createDataSourceByQuery('mydata', q, true, 999, null, ['customer_id']);
//var uri = databaseManager.createDataSourceByQuery('mydata', q, true, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT], ['customer_id']);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600);
myForm.newTextField('city', 140, 20, 140,20);

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri);
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Data source name]]></description>
            </parameter>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[The query builder to be executed.]]></description>
            </parameter>
            <parameter name="useTableFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[use table filters (default true).]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I">
              <description><![CDATA[The column types, when null the types are inferred from the query.]]></description>
            </parameter>
            <parameter name="pkNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of pk names, when null a hidden pk-column will be added]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// select customer data for order 1234
/** @type {QBSelect<db:/example_data/customers>} */
var q = databaseManager.createSelect("db:/example_data/customers");
q.result.add(q.columns.customer_id).add(q.columns.city).add(q.columns.country);
q.where.add(q.joins.customers_to_orders.columns.orderid.eq(1234));
var uri = databaseManager.createDataSourceByQuery('mydata', q, true, 999, null, ['customer_id']);
//var uri = databaseManager.createDataSourceByQuery('mydata', q, true, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT], ['customer_id']);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600);
myForm.newTextField('city', 140, 20, 140,20);

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri);
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source name]]></description>
            </parameter>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[The query builder to be executed.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="[I"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

Using this variation of createDataSourceByQuery any Tablefilter on the involved tables will be taken into account.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// select customer data for order 1234
/** @type {QBSelect<db:/example_data/customers>} */
var q = databaseManager.createSelect("db:/example_data/customers");
q.result.add(q.columns.address).add(q.columns.city).add(q.columns.country);
q.where.add(q.joins.customers_to_orders.columns.orderid.eq(1234));
var uri = databaseManager.createDataSourceByQuery('mydata', q, 999);
//var uri = databaseManager.createDataSourceByQuery('mydata', q, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT]);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600);
myForm.newTextField('city', 140, 20, 140,20);

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri);
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Data source name]]></description>
            </parameter>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[The query builder to be executed.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I">
              <description><![CDATA[The column types]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

Using this variation of createDataSourceByQuery any Tablefilter on the involved tables will be taken into account.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a query and saves the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// select customer data for order 1234
/** @type {QBSelect<db:/example_data/customers>} */
var q = databaseManager.createSelect("db:/example_data/customers");
q.result.add(q.columns.customer_id).add(q.columns.city).add(q.columns.country);
q.where.add(q.joins.customers_to_orders.columns.orderid.eq(1234));
var uri = databaseManager.createDataSourceByQuery('mydata', q, 999, null, ['customer_id']);
//var uri = databaseManager.createDataSourceByQuery('mydata', q, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT], ['customer_id']);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600);
myForm.newTextField('city', 140, 20, 140,20);

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri);
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Data source name]]></description>
            </parameter>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[The query builder to be executed.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I">
              <description><![CDATA[The column types]]></description>
            </parameter>
            <parameter name="pkNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of pk names, when null a hidden pk-column will be added]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

Using this variation of createDataSourceByQuery any Tablefilter on the involved tables will be disregarded.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = 'select address, city, country  from customers';
var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999);
//var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT]);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600)
myForm.newTextField('city', 140, 20, 140,20)

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri)
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source name]]></description>
            </parameter>
            <parameter name="server_name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the server where the query should be executed.]]></description>
            </parameter>
            <parameter name="sql_query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The custom sql.]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Specified arguments or null if there are no arguments.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[I"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

Using this variation of createDataSourceByQuery any Tablefilter on the involved tables will be disregarded.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = 'select address, city, country  from customers';
var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999);
//var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT]);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600)
myForm.newTextField('city', 140, 20, 140,20)

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri)
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source name]]></description>
            </parameter>
            <parameter name="server_name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the server where the query should be executed.]]></description>
            </parameter>
            <parameter name="sql_query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The custom sql.]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Specified arguments or null if there are no arguments.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I">
              <description><![CDATA[The column types]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSourceByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[datasource containing the results of the query or null if the parameters are wrong.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.
Will throw an exception if anything went wrong when executing the query.
Column types in the datasource are inferred from the query result or can be explicitly specified.

Using this variation of createDataSourceByQuery any Tablefilter on the involved tables will be disregarded.

A datasource can be reused if the data has the same signature (column names and types).
A new createDataSourceByQuery() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, saves the the result in a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = 'select customer_id, address, city, country  from customers';
var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999);
//var uri = databaseManager.createDataSourceByQuery('mydata', 'example_data', query, null, 999, [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT], ['customer_id']);

// the uri can be used to create a form using solution model
var myForm = solutionModel.newForm('newForm', uri, 'myStyleName', false, 800, 600)
myForm.newTextField('city', 140, 20, 140,20)

// the uri can be used to acces a foundset directly
var fs = databaseManager.getFoundSet(uri)
fs.loadAllRecords();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source name]]></description>
            </parameter>
            <parameter name="server_name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the server where the query should be executed.]]></description>
            </parameter>
            <parameter name="sql_query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The custom sql.]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Specified arguments or null if there are no arguments.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I">
              <description><![CDATA[The column types]]></description>
            </parameter>
            <parameter name="pkNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of pk names, when null a hidden pk-column will be added]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createEmptyDataSet">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[An empty JSDataSet with the initial sizes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// gets an empty dataset with a specifed row and column count
var dataset = databaseManager.createEmptyDataSet(10,10)
// gets an empty dataset with a specifed row count and column array
var dataset2 = databaseManager.createEmptyDataSet(10,new Array ('a','b','c','d'))]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="createEmptyDataSet">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[An empty JSDataSet with the initial sizes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// gets an empty dataset with a specifed row and column count
var dataset = databaseManager.createEmptyDataSet(10,10)
// gets an empty dataset with a specifed row count and column array
var dataset2 = databaseManager.createEmptyDataSet(10,new Array ('a','b','c','d'))]]></sample>
          </samples>
          <parameters>
            <parameter name="rowCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of rows in the DataSet object.]]></description>
            </parameter>
            <parameter name="columnCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[Number of columns.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createEmptyDataSet">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[An empty JSDataSet with the initial sizes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an empty dataset object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// gets an empty dataset with a specifed row and column count
var dataset = databaseManager.createEmptyDataSet(10,10)
// gets an empty dataset with a specifed row count and column array
var dataset2 = databaseManager.createEmptyDataSet(10,new Array ('a','b','c','d'))]]></sample>
          </samples>
          <parameters>
            <parameter name="rowCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="columnNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createSelect">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"><![CDATA[query builder]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a QueryBuilder object for a datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a QueryBuilder object for a datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/book_nodes>} */
var q = databaseManager.createSelect('db:/example_data/book_nodes')
q.result.addPk()
q.where.add(q.columns.label_text.not.isin(null))
databaseManager.getFoundSet('db:/example_data/book_nodes').loadRecords(q)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The data source to build a query for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="dataSourceExists">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean exists]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check wether a data source exists. This function can be used for any type of data source (db-based, in-memory).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check wether a data source exists.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (!databaseManager.dataSourceExists(dataSource))
{
   // does not exist
}]]></sample>
          </samples>
          <parameters>
            <parameter name="datasource"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="executeStoredProcedure">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <deprecated><![CDATA[As of release 3.5, replaced by plugins.rawSQL#executeStoredProcedure(String,String,Object[],int[],int).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getAutoSave">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if autosave if enabled.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true or false if autosave is enabled or disabled.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true or false if autosave is enabled or disabled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
databaseManager.setAutoSave(true)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getChangedRecordData">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with outstanding (not saved) changed data on a record

NOTE: To return an array of records with oustanding changed data, see the function databaseManager.getEditedRecords().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with outstanding (not saved) changed data on a record

NOTE: To return an array of records with oustanding changed data, see the function databaseManager.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by Record#getChangedData().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.getChangedRecordData(record)
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	application.output(dataset.getValue(i,1) +' '+ dataset.getValue(i,2) +' '+ dataset.getValue(i,3));
}]]></sample>
          </samples>
          <parameters>
            <parameter name="r" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The specified record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataModelClonesFrom">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves a list with names of all database servers that have property DataModelCloneFrom equal to the server name parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves a list with names of all database servers that have property DataModelCloneFrom equal to the server name parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var serverNames = databaseManager.getDataModelClonesFrom('myServerName');]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSetByQuery">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[The JSDataSet containing the results of the query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query with a query builder object.
Will throw an exception if anything did go wrong when executing the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query with a query builder object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// use the query froma foundset and add a condition
/** @type {QBSelect<db:/example_data/orders>} */
var q = foundset.getQuery()
q.where.add(q.joins.orders_to_order_details.columns.discount.eq(2))
var maxReturnedRows = 10;//useful to limit number of rows
var ds = databaseManager.getDataSetByQuery(q, true, maxReturnedRows);

// query: select PK from example.book_nodes where parent = 111 and(note_date is null or note_date > now)
/** @type {QBSelect<db:/example_data/book_nodes>} */
var query = databaseManager.createSelect('db:/example_data/book_nodes').result.addPk().root
query.where.add(query.columns.parent_id.eq(111))
	.add(query.or
	.add(query.columns.note_date.isNull)
	.add(query.columns.note_date.gt(new Date())))
databaseManager.getDataSetByQuery(q, true, max_returned_rows)]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[QBSelect query.]]></description>
            </parameter>
            <parameter name="useTableFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[use table filters (default true).]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSetByQuery">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[The JSDataSet containing the results of the query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query with a query builder object.
Will throw an exception if anything did go wrong when executing the query.

Using this variation of getDataSetByQuery any Tablefilter on the involved tables will be taken into account.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query with a query builder object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// use the query froma foundset and add a condition
/** @type {QBSelect<db:/example_data/orders>} */
var q = foundset.getQuery()
q.where.add(q.joins.orders_to_order_details.columns.discount.eq(2))
var maxReturnedRows = 10;//useful to limit number of rows
var ds = databaseManager.getDataSetByQuery(q, maxReturnedRows);

// query: select PK from example.book_nodes where parent = 111 and(note_date is null or note_date > now)
/** @type {QBSelect<db:/example_data/book_nodes>} */
var query = databaseManager.createSelect('db:/example_data/book_nodes').result.addPk().root
query.where.add(query.columns.parent_id.eq(111))
	.add(query.or
	.add(query.columns.note_date.isNull)
	.add(query.columns.note_date.gt(new Date())))
databaseManager.getDataSetByQuery(q, max_returned_rows)]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[QBSelect query.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSetByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[The JSDataSet containing the results of the query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, returns the result in a dataset.
Will throw an exception if anything did go wrong when executing the query.

Using this variation of getDataSetByQuery any Tablefilter on the involved tables will be disregarded.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a sql query on the specified server, returns the result in a dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//finds duplicate records in a specified foundset
var vQuery =" SELECT companiesid from companies where company_name IN (SELECT company_name from companies group bycompany_name having count(company_name)>1 )";
var vDataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), vQuery, null, 1000);
controller.loadRecords(vDataset);

var maxReturnedRows = 10;//useful to limit number of rows
var query = 'select c1,c2,c3 from test_table where start_date = ?';//do not use '.' or special chars in names or aliases if you want to access data by name
var args = new Array();
args[0] = order_date //or  new Date()
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, args, maxReturnedRows);

// place in label:
// elements.myLabel.text = '<html>'+dataset.getAsHTML()+'</html>';

//example to calc a strange total
global_total = 0;
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	dataset.rowIndex = i;
	global_total = global_total + dataset.c1 + dataset.getValue(i,3);
}
//example to assign to dataprovider
//employee_salary = dataset.getValue(row,column)]]></sample>
          </samples>
          <parameters>
            <parameter name="server_name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the server where the query should be executed.]]></description>
            </parameter>
            <parameter name="sql_query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The custom sql.]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Specified arguments or null if there are no arguments.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The datasource of the given table/server.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the datasource corresponding to the given server/table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the datasource corresponding to the given server/table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var datasource = databaseManager.getDataSource('example_data', 'categories');]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table's server.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The table's name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getDataSourceServerName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The servername of the datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the server name from the datasource, or null if not a database datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the server name from the datasource, or null if not a database datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var servername = databaseManager.getDataSourceServerName(datasource);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource string to get the server name from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getDataSourceTableName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The tablename of the datasource.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns the table name from the datasource, or null if the specified argument is not a database datasource.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table name from the datasource, or null if not a database datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns the table name from the datasource, or null if the specified argument is not a database datasource.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table name from the datasource, or null if not a database datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var theTableName = databaseManager.getDataSourceTableName(datasource);]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tablename = databaseManager.getDataSourceTableName(datasource);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource string to get the tablename from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDatabaseProductName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[A database product name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the database product name as supplied by the driver for a server.

NOTE: For more detail on named server connections, see the chapter on Database Connections, beginning with the Introduction to database connections in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the database product name as supplied by the driver for a server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var databaseProductName = databaseManager.getDatabaseProductName(servername)]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The specified name of the database server connection.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getEditedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record[]" typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;"><![CDATA[Array of outstanding/unsaved JSRecords.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of edited records with outstanding (unsaved) data.

NOTE: To return a dataset of outstanding (unsaved) edited data for each record, see JSRecord.getChangedData();
NOTE2: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of edited records with outstanding (unsaved) data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//This method can be used to loop through all outstanding changes,
//the application.output line contains all the changed data, their tablename and primary key
var editr = databaseManager.getEditedRecords()
for (x=0;x<editr.length;x++)
{
	var ds = editr[x].getChangedData();
	var jstable = databaseManager.getTable(editr[x]);
	var tableSQLName = jstable.getSQLName();
	var pkrec = jstable.getRowIdentifierColumnNames().join(',');
	var pkvals = new Array();
	for (var j = 0; j < jstable.getRowIdentifierColumnNames().length; j++)
	{
		pkvals[j] = editr[x][jstable.getRowIdentifierColumnNames()[j]];
	}
	application.output('Table: '+tableSQLName +', PKs: '+ pkvals.join(',') +' ('+pkrec +')');
	// Get a dataset with outstanding changes on a record
	for( var i = 1 ; i <= ds.getMaxRowIndex() ; i++ )
	{
		application.output('Column: '+ ds.getValue(i,1) +', oldValue: '+ ds.getValue(i,2) +', newValue: '+ ds.getValue(i,3));
	}
}
//in most cases you will want to set autoSave back on now
databaseManager.setAutoSave(true);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getEditedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.Record[]" typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;"><![CDATA[Array of outstanding/unsaved JSRecords.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of edited records with outstanding (unsaved) data.

NOTE: To return a dataset of outstanding (unsaved) edited data for each record, see JSRecord.getChangedData();
NOTE2: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of edited records with outstanding (unsaved) data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//This method can be used to loop through all outstanding changes in a foundset,
//the application.output line contains all the changed data, their tablename and primary key
var editr = databaseManager.getEditedRecords(foundset)
for (x=0;x<editr.length;x++)
{
	var ds = editr[x].getChangedData();
	var jstable = databaseManager.getTable(editr[x]);
	var tableSQLName = jstable.getSQLName();
	var pkrec = jstable.getRowIdentifierColumnNames().join(',');
	var pkvals = new Array();
	for (var j = 0; j < jstable.getRowIdentifierColumnNames().length; j++)
	{
		pkvals[j] = editr[x][jstable.getRowIdentifierColumnNames()[j]];
	}
	application.output('Table: '+tableSQLName +', PKs: '+ pkvals.join(',') +' ('+pkrec +')');
	// Get a dataset with outstanding changes on a record
	for( var i = 1 ; i <= ds.getMaxRowIndex() ; i++ )
	{
		application.output('Column: '+ ds.getValue(i,1) +', oldValue: '+ ds.getValue(i,2) +', newValue: '+ ds.getValue(i,3));
	}
}
databaseManager.saveData(foundset);//save all records from foundset]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[return edited records in the foundset only.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getFailedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record[]" typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;"><![CDATA[Array of failed JSRecords]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of records that fail after a save.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of records that fail after a save.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = databaseManager.getFailedRecords()
for( var i = 0 ; i < array.length ; i++ )
{
	var record = array[i];
	application.output(record.exception);
	if (record.exception.getErrorCode() == ServoyException.RECORD_VALIDATION_FAILED)
	{
		// exception thrown in pre-insert/update/delete event method
		var thrown = record.exception.getValue()
		application.output("Record validation failed: "+thrown)
	}
	// find out the table of the record (similar to getEditedRecords)
	var jstable = databaseManager.getTable(record);
	var tableSQLName = jstable.getSQLName();
	application.output('Table:'+tableSQLName+' in server:'+jstable.getServerName()+' failed to save.')
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFailedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.Record[]" typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;"><![CDATA[Array of failed JSRecords]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of records that fail after a save.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of records that fail after a save.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = databaseManager.getFailedRecords(foundset)
for( var i = 0 ; i < array.length ; i++ )
{
	var record = array[i];
	application.output(record.exception);
	if (record.exception.getErrorCode() == ServoyException.RECORD_VALIDATION_FAILED)
	{
		// exception thrown in pre-insert/update/delete event method
		var thrown = record.exception.getValue()
		application.output("Record validation failed: "+thrown)
	}
	// find out the table of the record (similar to getEditedRecords)
	var jstable = databaseManager.getTable(record);
	var tableSQLName = jstable.getSQLName();
	application.output('Table:'+tableSQLName+' in server:'+jstable.getServerName()+' failed to save.')
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[return failed records in the foundset only.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSet">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[A new JSFoundset for that query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified pk query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified pk query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// type the foundset returned from the call with JSDoc, fill in the right server/tablename
/** @type {JSFoundset<db:/servername/tablename>} */
var fs = databaseManager.getFoundSet(controller.getDataSource())
// same as datasources.db.example_data.orders.getFoundSet() or datasources.mem['myds'].getFoundSet()
var ridx = fs.newRecord()
var record = fs.getRecord(ridx)
record.emp_name = 'John'
databaseManager.saveData()]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[The query to get the JSFoundset for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getFoundSet">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet"><![CDATA[A new JSFoundset for that datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.
Alternative method: datasources.db.server_name.table_name.getFoundSet() or datasources.mem['ds'].getFoundSet()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// type the foundset returned from the call with JSDoc, fill in the right server/tablename
/** @type {JSFoundset<db:/servername/tablename>} */
var fs = databaseManager.getFoundSet(controller.getDataSource())
// same as datasources.db.example_data.orders.getFoundSet() or datasources.mem['myds'].getFoundSet()
var ridx = fs.newRecord()
var record = fs.getRecord(ridx)
record.emp_name = 'John'
databaseManager.saveData()]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource to get a JSFoundset for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSet">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet"><![CDATA[A new JSFoundset for that datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// type the foundset returned from the call with JSDoc, fill in the right server/tablename
/** @type {JSFoundset<db:/servername/tablename>} */
var fs = databaseManager.getFoundSet(controller.getDataSource())
// same as datasources.db.example_data.orders.getFoundSet() or datasources.mem['myds'].getFoundSet()
var ridx = fs.newRecord()
var record = fs.getRecord(ridx)
record.emp_name = 'John'
databaseManager.saveData()]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The servername to get a JSFoundset for.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The tablename for that server]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSetCount">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the foundset count]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the total number of records in a foundset.

NOTE: This can be an expensive operation (time-wise) if your resultset is large.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the total number of records in a foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//return the total number of records in a foundset.
databaseManager.getFoundSetCount(foundset);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The JSFoundset to get the count for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFoundSetDataProviderAsArray">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[An Array with the column values.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[This method is deprecated, use databaseManager.convertToDataSet(foundset, pkNames) instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[This method is deprecated, use databaseManager.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #convertToDataSet(Object[]).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSet = databaseManager.convertToDataSet(foundset,['order_id']);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The foundset]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The dataprovider for the values of the array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSetUpdater">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSFoundSetUpdater" typecode="com.servoy.j2db.dataprocessing.JSFoundSetUpdater"><![CDATA[The JSFoundsetUpdater for the specified JSFoundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSFoundsetUpdater object that can be used to update all or a specific number of rows in the specified foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSFoundsetUpdater object that can be used to update all or a specific number of rows in the specified foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The foundset to update.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getLastDatabaseMessage">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[No longer supported.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getNextSequence">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The next sequence for the column, null if there was no sequence for that column
        or if there is no column with the given name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the next sequence for a column which has a sequence defined in its column dataprovider properties.

NOTE: For more infomation on configuring the sequence for a column, see the section Auto enter options for a column from the Dataproviders chapter in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the next sequence for a column which has a sequence defined in its column dataprovider properties.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var seqDataSource = forms.seq_table.controller.getDataSource();
var nextValue = databaseManager.getNextSequence(seqDataSource, 'seq_table_value');
application.output(nextValue);

nextValue = databaseManager.getNextSequence(databaseManager.getDataSourceServerName(seqDataSource), databaseManager.getDataSourceTableName(seqDataSource), 'seq_table_value')
application.output(nextValue);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource that points to the table which has the column with the sequence,
								or the name of the server where the table can be found. If the name of the server
								is specified, then a second optional parameter specifying the name of the table
								must be used. If the datasource is specified, then the name of the table is not needed
								as the second argument.]]></description>
            </parameter>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column that has a sequence defined in its properties.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getNextSequence">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The next sequence for the column, null if there was no sequence for that column
        or if there is no column with the given name.]]></return>
          <deprecated><![CDATA[Use getNextSequence(datasource,column)]]></deprecated>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource that points to the table which has the column with the sequence,
								or the name of the server where the table can be found. If the name of the server
								is specified, then a second optional parameter specifying the name of the table
								must be used. If the datasource is specified, then the name of the table is not needed
								as the second argument.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table that has the column with the sequence. Use this parameter
							only if you specified the name of the server as the first parameter.]]></description>
            </parameter>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column that has a sequence defined in its properties.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQL">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String representing the sql of the JSFoundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL which defines the specified (related)foundset.
Table filters are on by default.
Make sure to set the applicable filters when the sql is used in a loadRecords() call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL which defines the specified (related)foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var sql = databaseManager.getSQL(foundset)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundsetOrQBSelect" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset or QBSelect to get the sql for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQL">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String representing the sql of the JSFoundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL which defines the specified (related)foundset.
Optionally, the foundset and table filter params can be excluded in the sql (includeFilters=false).
Make sure to set the applicable filters when the sql is used in a loadRecords() call.
When the founset is in find mode, the find conditions are included in the resulting query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL which defines the specified (related)foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var sql = databaseManager.getSQL(foundset)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundsetOrQBSelect" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset or QBSelect to get the sql for.]]></description>
            </parameter>
            <parameter name="includeFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[include the foundset and table filters.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLParameters">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[An Array with the sql parameter values.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.
Parameters for the filters are included.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var sqlParameterArray = databaseManager.getSQLParameters(foundset,false)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundsetOrQBSelect" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset or QBSelect to get the sql parameters for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLParameters">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[An Array with the sql parameter values.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.
When the founset is in find mode, the arguments for the find conditions are included in the result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var sqlParameterArray = databaseManager.getSQLParameters(foundset,false)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundsetOrQBSelect" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset or QBSelect to get the sql parameters for.]]></description>
            </parameter>
            <parameter name="includeFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[include the parameters for the filters.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getServerNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An Array of servernames.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array with all the server names used in the solution.

NOTE: For more detail on named server connections, see the chapter on Database Connections, beginning with the Introduction to database connections in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array with all the server names used in the solution.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = databaseManager.getServerNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTable">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTable" typecode="com.servoy.j2db.dataprocessing.JSTable"><![CDATA[the JSTable get from the input.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).
The parameter can be a JSFoundset,JSRecord,datasource string or server/tablename combination.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jstable = databaseManager.getTable(controller.getDataSource());
//var jstable = databaseManager.getTable(foundset);
//var jstable = databaseManager.getTable(record);
//var jstable = databaseManager.getTable(datasource);
var tableSQLName = jstable.getSQLName();
var columnNamesArray = jstable.getColumnNames();
var firstColumnName = columnNamesArray[0];
var jscolumn = jstable.getColumn(firstColumnName);
var columnLength = jscolumn.getLength();
var columnType = jscolumn.getTypeAsString();
var columnSQLName = jscolumn.getSQLName();
var isPrimaryKey = jscolumn.isRowIdentifier();]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The foundset where the JSTable can be get from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTable">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTable" typecode="com.servoy.j2db.dataprocessing.JSTable"><![CDATA[the JSTable get from the input.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).
The parameter can be a JSFoundset,JSRecord,datasource string or server/tablename combination.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jstable = databaseManager.getTable(controller.getDataSource());
//var jstable = databaseManager.getTable(foundset);
//var jstable = databaseManager.getTable(record);
//var jstable = databaseManager.getTable(datasource);
var tableSQLName = jstable.getSQLName();
var columnNamesArray = jstable.getColumnNames();
var firstColumnName = columnNamesArray[0];
var jscolumn = jstable.getColumn(firstColumnName);
var columnLength = jscolumn.getLength();
var columnType = jscolumn.getTypeAsString();
var columnSQLName = jscolumn.getSQLName();
var isPrimaryKey = jscolumn.isRowIdentifier();]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The record where the table can be get from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTable" typecode="com.servoy.j2db.dataprocessing.JSTable"><![CDATA[the JSTable get from the input.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).
The parameter can be a JSFoundset,JSRecord,datasource string or server/tablename combination.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jstable = databaseManager.getTable(controller.getDataSource());
//var jstable = databaseManager.getTable(foundset);
//var jstable = databaseManager.getTable(record);
//var jstable = databaseManager.getTable(datasource);
var tableSQLName = jstable.getSQLName();
var columnNamesArray = jstable.getColumnNames();
var firstColumnName = columnNamesArray[0];
var jscolumn = jstable.getColumn(firstColumnName);
var columnLength = jscolumn.getLength();
var columnType = jscolumn.getTypeAsString();
var columnSQLName = jscolumn.getSQLName();
var isPrimaryKey = jscolumn.isRowIdentifier();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource where the table can be get from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTable" typecode="com.servoy.j2db.dataprocessing.JSTable"><![CDATA[the JSTable get from the input.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).
The parameter can be a JSFoundset,JSRecord,datasource string or server/tablename combination.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jstable = databaseManager.getTable(controller.getDataSource());
//var jstable = databaseManager.getTable(foundset);
//var jstable = databaseManager.getTable(record);
//var jstable = databaseManager.getTable(datasource);
var tableSQLName = jstable.getSQLName();
var columnNamesArray = jstable.getColumnNames();
var firstColumnName = columnNamesArray[0];
var jscolumn = jstable.getColumn(firstColumnName);
var columnLength = jscolumn.getLength();
var columnType = jscolumn.getTypeAsString();
var columnSQLName = jscolumn.getSQLName();
var isPrimaryKey = jscolumn.isRowIdentifier();]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Server name.]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Table name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the total table count.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the total number of records(rows) in a table.

NOTE: This can be an expensive operation (time-wise) if your resultset is large]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the total number of records(rows) in a table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//return the total number of rows in a table.
var count = databaseManager.getTableCount(foundset);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Data where a server table can be get from. Can be a foundset, a datasource name or a JSTable.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableFilterParams">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[][]" typecode="[[Ljava.lang.Object;"><![CDATA[Two dimensional array.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.
The "columns" of a row from this array are: tablename,dataprovider,operator,value,tablefilername]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var params = databaseManager.getTableFilterParams(databaseManager.getDataSourceServerName(controller.getDataSource()))
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('Table filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableFilterParams">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[][]" typecode="[[Ljava.lang.Object;"><![CDATA[Two dimensional array.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.
The "columns" of a row from this array are: tablename,dataprovider,operator,value,tablefilername]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var params = databaseManager.getTableFilterParams(databaseManager.getDataSourceServerName(controller.getDataSource()))
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('Table filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection.]]></description>
            </parameter>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The filter name for which to get the array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An Array with the tables names of that server.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of all table names for a specified server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of all table names for a specified server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//return all the table names as array
var tableNamesArray = databaseManager.getTableNames('user_data');
var firstTableName = tableNamesArray[0];]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The server name to get the table names from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getViewNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An Array with the view names of that server.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of all view names for a specified server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of all view names for a specified server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//return all the view names as array
var viewNamesArray = databaseManager.getViewNames('user_data');
var firstViewName = viewNamesArray[0];]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The server name to get the view names from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasLocks">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the current client has locks or the lock.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hasLocks = databaseManager.hasLocks('mylock')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasLocks">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the current client has locks or the lock.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hasLocks = databaseManager.hasLocks('mylock')]]></sample>
          </samples>
          <parameters>
            <parameter name="lockName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The lock name to check.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasNewRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSFoundset has new records or JSRecord is a new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var fs = databaseManager.getFoundSet(databaseManager.getDataSourceServerName(controller.getDataSource()),'employees');
databaseManager.startTransaction();
var ridx = fs.newRecord();
var record = fs.getRecord(ridx);
record.emp_name = 'John';
if (databaseManager.hasNewRecords(fs)) {
	application.output("new records");
} else {
	application.output("no new records");
}
databaseManager.saveData();
databaseManager.commitTransaction();]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to test.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasNewRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSFoundset has new records or JSRecord is a new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var fs = databaseManager.getFoundSet(databaseManager.getDataSourceServerName(controller.getDataSource()),'employees');
databaseManager.startTransaction();
var ridx = fs.newRecord();
var record = fs.getRecord(ridx);
record.emp_name = 'John';
if (databaseManager.hasNewRecords(fs)) {
	application.output("new records");
} else {
	application.output("no new records");
}
databaseManager.saveData();
databaseManager.commitTransaction();]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to test.]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The record index in the foundset to test (not specified means has the foundset any new records)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="hasNewRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSFoundset has new records or JSRecord is a new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></summary>
          </summaries>
          <deprecated><![CDATA[use JSRecord#isNew() instead]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var fs = databaseManager.getFoundSet(databaseManager.getDataSourceServerName(controller.getDataSource()),'employees');
databaseManager.startTransaction();
var ridx = fs.newRecord();
var record = fs.getRecord(ridx);
record.emp_name = 'John';
if (databaseManager.hasNewRecords(fs)) {
	application.output("new records");
} else {
	application.output("no new records");
}
databaseManager.saveData();
databaseManager.commitTransaction();]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The JSRecord to test.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasRecordChanges">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if there are changes in the JSFoundset or JSRecord.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.

NOTE: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (databaseManager.hasRecordChanges(foundset,2))
{
	//do save or something else
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to test if it has changes.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasRecordChanges">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if there are changes in the JSFoundset or JSRecord.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.

NOTE: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (databaseManager.hasRecordChanges(foundset,2))
{
	//do save or something else
}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[The JSFoundset to test if it has changes.]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The record index in the foundset to test (not specified means has the foundset any changed records)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="hasRecordChanges">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if there are changes in the JSFoundset or JSRecord.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.

NOTE: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.]]></summary>
          </summaries>
          <deprecated><![CDATA[use JSRecord#hasChangedData() instead]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (databaseManager.hasRecordChanges(foundset,2))
{
	//do save or something else
}]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The JSRecord to test if it has changes.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSFoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the foundset/relation has records.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet">
              <description><![CDATA[A JSFoundset to test.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSRecord"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the foundset/relation has records.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord">
              <description><![CDATA[A JSRecord to test.]]></description>
            </parameter>
            <parameter name="relationString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The relation name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hasTransaction">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the client has a transaction.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if there is an transaction active for this client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if there is an transaction active for this client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hasTransaction = databaseManager.hasTransaction()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="mergeRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the records could me merged.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination
record pk, deletes source record. Do use a transaction!

This function is very handy in situations where duplicate data exists. It allows you to merge the two records
and move all related records in one go. Say the source_record is "Ikea" and the combined_destination_record is "IKEA", the
"Ikea" record is deleted and all records related to it (think of contacts and orders, for instance) will be related
to the "IKEA" record.

The function takes an optional array of column names. If provided, the data in the named columns will be copied
from source_record to combined_destination_record.

Note that it is essential for both records to originate from the same foundset, as shown in the sample code.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination
record pk, deletes source record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.mergeRecords(foundset.getRecord(1),foundset.getRecord(2));]]></sample>
          </samples>
          <parameters>
            <parameter name="sourceRecord" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The source JSRecord to copy from.]]></description>
            </parameter>
            <parameter name="combinedDestinationRecord" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The target/destination JSRecord to copy into.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="mergeRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the records could me merged.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination
record pk, deletes source record. Do use a transaction!

This function is very handy in situations where duplicate data exists. It allows you to merge the two records
and move all related records in one go. Say the source_record is "Ikea" and the combined_destination_record is "IKEA", the
"Ikea" record is deleted and all records related to it (think of contacts and orders, for instance) will be related
to the "IKEA" record.

The function takes an optional array of column names. If provided, the data in the named columns will be copied
from source_record to combined_destination_record.

Note that it is essential for both records to originate from the same foundset, as shown in the sample code.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination
record pk, deletes source record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.mergeRecords(foundset.getRecord(1),foundset.getRecord(2));]]></sample>
          </samples>
          <parameters>
            <parameter name="sourceRecord" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The source JSRecord to copy from.]]></description>
            </parameter>
            <parameter name="combinedDestinationRecord" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[The target/destination JSRecord to copy into.]]></description>
            </parameter>
            <parameter name="columnNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[The column names array that should be copied.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="recalculate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Can be used to recalculate a specified record or all rows in the specified foundset.
May be necessary when data is changed from outside of servoy, or when there is data changed inside servoy
but records with calculations depending on that data where not loaded so not updated and you need to update
the stored calculation values because you are depending on that with queries or aggregates.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Can be used to recalculate a specified record or all rows in the specified foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// recalculate one record from a foundset.
databaseManager.recalculate(foundset.getRecord(1));
// recalculate all records from the foundset.
// please use with care, this can be expensive!
//databaseManager.recalculate(foundset);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundsetOrRecord" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[JSFoundset or JSRecord to recalculate.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="refreshRecordFromDatabase">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the refresh was done.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flushes the client data cache and requeries the data for a record (based on the record index) in a foundset or all records in the foundset.
Used where a program external to Servoy has modified the database record.
Record index of -1 will refresh all records in the foundset and 0 the selected record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flushes the client data cache and requeries the data for a record (based on the record index) in a foundset or all records in the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//refresh the second record from the foundset.
databaseManager.refreshRecordFromDatabase(foundset,2)
//flushes all records in the related foundset  (-1 is or can be an expensive operation)
databaseManager.refreshRecordFromDatabase(order_to_orderdetails,-1);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to refresh]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The index of the JSRecord that must be refreshed (or -1 for all).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="releaseAllLocks">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if all locks or the lock is released.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Release all current locks the client has (optionally limited to named locks).
return true if the locks are released.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Release all current locks the client has (optionally limited to named locks).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.releaseAllLocks('mylock')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="releaseAllLocks">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if all locks or the lock is released.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Release all current locks the client has (optionally limited to named locks).
return true if the locks are released.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Release all current locks the client has (optionally limited to named locks).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.releaseAllLocks('mylock')]]></sample>
          </samples>
          <parameters>
            <parameter name="lockName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The lock name to release.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Free resources allocated for a previously created data source]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Free resources allocated for a previously created data source]]></summary>
          </summaries>
          <deprecated><![CDATA[Deprecated as of release 5.0, not needed anymore.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.removeDataSource(uri);]]></sample>
          </samples>
          <parameters>
            <parameter name="uri" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the filter could be removed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a previously defined table filter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a previously defined table filter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = databaseManager.removeTableFilterParam('admin', 'higNumberedMessagesRule')]]></sample>
          </samples>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection.]]></description>
            </parameter>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the filter that should be removed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="revertEditedRecords">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//reverts in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.revertEditedRecords()
//databaseManager.revertEditedRecords(foundset); // rollback all records from foundset
//databaseManager.revertEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="revertEditedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//reverts in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.revertEditedRecords()
//databaseManager.revertEditedRecords(foundset); // rollback all records from foundset
//databaseManager.revertEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[A JSFoundset to revert.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="revertEditedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Reverts outstanding (not saved) in memory changes from edited records.]]></summary>
          </summaries>
          <deprecated><![CDATA[see JSRecord#revertChanges()]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//reverts in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.revertEditedRecords()
//databaseManager.revertEditedRecords(foundset); // rollback all records from foundset
//databaseManager.revertEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[A JSRecord to rollback.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="rollbackEditedRecords">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.1, renamed to #revertEditedRecords().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
//databaseManager.rollbackEditedRecords(foundset); // rollback all records from foundset
//databaseManager.rollbackEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="rollbackEditedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.1, renamed to #revertEditedRecords().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
//databaseManager.rollbackEditedRecords(foundset); // rollback all records from foundset
//databaseManager.rollbackEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[A JSFoundset to rollback.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="rollbackEditedRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rolls back in memory edited records that are outstanding (not saved).]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.1, renamed to #revertEditedRecords().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
//databaseManager.rollbackEditedRecords(foundset); // rollback all records from foundset
//databaseManager.rollbackEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[A JSRecord to rollback.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="rollbackTransaction">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.startTransaction().
Note that when autosave is false, rollbackEditedRecords() will not handle deleted records, while rollbackTransaction() does.
Also, rollbackEditedRecords() is called before rolling back the transaction see rollbackTransaction(boolean) to controll that behavior
and saved records within the transactions are restored to the database values, so user input is lost, to controll this see rollbackTransaction(boolean,boolean)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="rollbackTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.startTransaction().
Note that when autosave is false, rollbackEditedRecords() will not handle deleted records, while rollbackTransaction() does.
Also, saved records within the transactions are restored to the database values, so user input is lost, to controll this see rollbackTransaction(boolean,boolean)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
          <parameters>
            <parameter name="rollbackEdited" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[call rollbackEditedRecords() before rolling back the transaction]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="rollbackTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.startTransaction().
Note that when autosave is false, rollbackEditedRecords() will not handle deleted records, while rollbackTransaction() does.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Rollback a transaction started by databaseManager.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
          <parameters>
            <parameter name="rollbackEdited" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[call rollbackEditedRecords() before rolling back the transaction]]></description>
            </parameter>
            <parameter name="revertSavedRecords" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if false then all records in the transaction do keep the user input and are back in the edited records list]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="saveData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the save was done without an error.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.
Optionally, by specifying a record or foundset, can save a single record or all records from foundset instead of all the data.

NOTE: The fields focus may be lost in user interface in order to determine the edits.
		 SaveData called from table events (like afterRecordInsert) is only partially supported depeding on how first saveData (that triggers the event) is called.
		 If first saveData is called with no arguments, all saveData from table events are returning immediatelly with true value and records will be saved as part of first save.
      If first saveData is called with record(s) as arguments, saveData from table event will try to save record(s) from arguments that are different than those in first call.
      SaveData with no arguments inside table events will always return true without saving anything.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[databaseManager.saveData();
//databaseManager.saveData(foundset.getRecord(1));//save specific record
//databaseManager.saveData(foundset);//save all records from foundset

// when creating many records in a loop do a batch save on an interval as every 10 records (to save on memory and roundtrips)
// for (var recordIndex = 1; recordIndex <= 5000; recordIndex++)
// {
//		foundset.newRecord();
//		someColumn = recordIndex;
//		anotherColumn = "Index is: " + recordIndex;
//		if (recordIndex % 10 == 0) databaseManager.saveData();
// }]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="saveData">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSFoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the save was done without an error.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.
Optionally, by specifying a record or foundset, can save a single record or all records from foundset instead of all the data.

NOTE: The fields focus may be lost in user interface in order to determine the edits.
		 SaveData called from table events (like afterRecordInsert) is only partially supported depeding on how first saveData (that triggers the event) is called.
		 If first saveData is called with no arguments, all saveData from table events are returning immediatelly with true value and records will be saved as part of first save.
      If first saveData is called with record(s) as arguments, saveData from table event will try to save record(s) from arguments that are different than those in first call.
      SaveData with no arguments inside table events will always return true without saving anything.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.saveData();
//databaseManager.saveData(foundset.getRecord(1));//save specific record
//databaseManager.saveData(foundset);//save all records from foundset

// when creating many records in a loop do a batch save on an interval as every 10 records (to save on memory and roundtrips)
// for (var recordIndex = 1; recordIndex <= 5000; recordIndex++)
// {
//		foundset.newRecord();
//		someColumn = recordIndex;
//		anotherColumn = "Index is: " + recordIndex;
//		if (recordIndex % 10 == 0) databaseManager.saveData();
// }]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet">
              <description><![CDATA[The JSFoundset to save.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="saveData">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSRecord"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the save was done without an error.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.
Optionally, by specifying a record or foundset, can save a single record or all records from foundset instead of all the data.

NOTE: The fields focus may be lost in user interface in order to determine the edits.
		 SaveData called from table events (like afterRecordInsert) is only partially supported depeding on how first saveData (that triggers the event) is called.
		 If first saveData is called with no arguments, all saveData from table events are returning immediatelly with true value and records will be saved as part of first save.
      If first saveData is called with record(s) as arguments, saveData from table event will try to save record(s) from arguments that are different than those in first call.
      SaveData with no arguments inside table events will always return true without saving anything.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Saves all outstanding (unsaved) data and exits the current record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[databaseManager.saveData();
//databaseManager.saveData(foundset.getRecord(1));//save specific record
//databaseManager.saveData(foundset);//save all records from foundset

// when creating many records in a loop do a batch save on an interval as every 10 records (to save on memory and roundtrips)
// for (var recordIndex = 1; recordIndex <= 5000; recordIndex++)
// {
//		foundset.newRecord();
//		someColumn = recordIndex;
//		anotherColumn = "Index is: " + recordIndex;
//		if (recordIndex % 10 == 0) databaseManager.saveData();
// }]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord">
              <description><![CDATA[The JSRecord to save.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setAutoSave">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[false if the current edited record could not be saved.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set autosave, if false then no saves will happen by the ui (not including deletes!).
Until you call databaseManager.saveData() or setAutoSave(true)

If you also want to be able to rollback deletes then you have to use databaseManager.startTransaction().
Because even if autosave is false deletes of records will be done.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set autosave, if false then no saves will happen by the ui (not including deletes!).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
databaseManager.setAutoSave(true)]]></sample>
          </samples>
          <parameters>
            <parameter name="autoSave" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean to enable or disable autosave.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setCreateEmptyFormFoundsets">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Turnoff the initial form foundset record loading, set this in the solution open method.
Simular to calling foundset.clear() in the form's onload event.

NOTE: When the foundset record loading is turned off, controller.find or controller.loadAllRecords must be called to display the records]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Turnoff the initial form foundset record loading, set this in the solution open method.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this has to be called in the solution open method
databaseManager.setCreateEmptyFormFoundsets()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="startTransaction">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start a database transaction.
If you want to avoid round trips to the server or avoid the posibility of blocking other clients
because of your pending changes, you can use databaseManager.setAutoSave(false/true) and databaseManager.rollbackEditedRecords().

startTransaction, commit/rollbackTransacton() does support rollbacking of record deletes which autoSave = false doesnt support.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start a database transaction.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.
if (cancel || !databaseManager.commitTransaction())
{
	databaseManager.rollbackTransaction();
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="switchServer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the switch could be done.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Switches a named server to another named server with the same datamodel (recommended to be used in an onOpen method for a solution).
return true if successful.
Note that this only works if source and destination server are of the same database type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Switches a named server to another named server with the same datamodel (recommended to be used in an onOpen method for a solution).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically changes a server for the entire solution, destination database server must contain the same tables/columns!
//will fail if there is a lock, transaction , if repository_server is used or if destination server is invalid
//in the solution keep using the sourceName every where to reference the server!
var success = databaseManager.switchServer('crm', 'crm1')]]></sample>
          </samples>
          <parameters>
            <parameter name="sourceName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the source database server connection]]></description>
            </parameter>
            <parameter name="destinationName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the destination database server connection.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="Datasources" qualifiedName="com.servoy.j2db.dataprocessing.datasource.JSDataSources" scriptingName="datasources">
      <properties>
        <property clientSupport="ng,wc,sc" name="db">
          <return type="com.servoy.j2db.dataprocessing.datasource.DBDataSource" typecode="com.servoy.j2db.dataprocessing.datasource.DBDataSource"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Scope property for server/table based data sources.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Scope property for server/table based data sources.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[datasources.db.example_data.orders]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mem">
          <return type="com.servoy.j2db.dataprocessing.datasource.MemDataSource" typecode="com.servoy.j2db.dataprocessing.datasource.MemDataSource"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Scope property for in-memory data sources.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Scope property for in-memory data sources.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[datasources.mem['myds']]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" publicName="ELEMENT_TYPES" qualifiedName="com.servoy.j2db.scripting.info.ELEMENT_TYPES">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ACCORDIONPANEL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a accordionpanel element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a accordionpanel element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.ACCORDIONPANEL)
{
     // element is a accordion panel element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BUTTON">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Button type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Button type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Button type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.BUTTON)
{
     // element is a Button component
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="CALENDAR">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Calendar type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Calendar type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Calendar type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.CALENDAR)
{
     // element is a Calendar field
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="CHECK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Check type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Check type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Check type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.CHECK)
{
     // element is a Check(box) field
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="COMBOBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a combobox element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a combobox element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.COMBOBOX)
{
     // element is a COMBOBOX element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FORM">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a form element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a form element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Form type, as returned by the following code
var renderElementType = event.getRenderable().getElementType();
if (renderElementType == ELEMENT_TYPES.FORM)
{
     // element is a type form element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="GROUP">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a Group of elements.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a Group of elements.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.GROUP)
{
     // element is a group element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HTML_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a html area element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a html area element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.HTML_AREA)
{
     // element is a HTML textarea
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="IMAGE_MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the ImageMedia type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the ImageMedia type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the ImageMedia type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.IMAGE_MEDIA)
{
     // element is a Image Media field
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LABEL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Label type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Label type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Label type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.LABEL)
{
     // element is a Label component
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LISTBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a listbox element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a listbox element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the ListBox type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.LISTBOX)
{
     // element is a LISTBOX element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LIST_BOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a listbox element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a listbox element.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced by ELEMENT_TYPES.LISTBOX]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the ListBox type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.LIST_BOX)
{
     // element is a LIST_BOX element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MULTISELECT_LISTBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a multi selection listbox element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a multi selection listbox element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.MULTISELECT_LISTBOX)
{
     // element is a MULTISELECT_LISTBOX element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PASSWORD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Password type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Password type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Password type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.PASSWORD)
{
     // element is a Password component
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PORTAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Portal type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Portal type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Portal type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.PORTAL)
{
     // element is a Portal component
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RADIOS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Radios type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Radios type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Radios type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.RADIOS)
{
     // element is a Radios field.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECTANGLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a rectangle element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a rectangle element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.RECTANGLE)
{
     // element is a rectangle element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RTF_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a rtf area of element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a rtf area of element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.RTF_AREA)
{
     // element is a RTF textarea.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SPINNER">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a spinner element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a spinner element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Spinner type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.SPINNER)
{
     // element is a SPINNER element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SPLITPANE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a splitpane element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a splitpane element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.SPLITPANE)
{
     // element is a splitpane element
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TABPANEL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Tabpanel type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the Tabpanel type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the Tabpanel type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TABPANEL)
{
     // element is a Tabpanel component
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TEXT_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the TextArea type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the TextArea type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextArea type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TEXT_AREA)
{
     // element is a TextArea field
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TEXT_FIELD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the TextField type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing an element of the TextField type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TEXT_FIELD)
{
     // element is a text field
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_AHEAD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing a typeahead element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing a typeahead element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TYPE_AHEAD)
{
     // element is a type ahead element
}]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="FONTSTYLE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.FONTSTYLE">
      <constants>
        <constant clientSupport="ng,wc,sc" name="BOLD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Bold font style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Bold font style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
var component = form.getComponent("someComponent")
component.fontType = solutionModel.createFont('Arial',SM_FONTSTYLE.BOLD,12);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BOLD_ITALIC">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Bold and italic font style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Bold and italic font style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
var component = form.getComponent("someComponent")
component.fontType = solutionModel.createFont('Arial',SM_FONTSTYLE.BOLD_ITALIC,20);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ITALIC">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Italic font style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Italic font style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
var component = form.getComponent("someComponent")
component.fontType = solutionModel.createFont('Arial',SM_FONTSTYLE.ITALIC,14);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PLAIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Plain(normal) font style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Plain(normal) font style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
var component = form.getComponent("someComponent")
component.fontType = solutionModel.createFont('Arial',SM_FONTSTYLE.PLAIN,10);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="FORMSECURITY" qualifiedName="com.servoy.j2db.scripting.info.FORMSECURITY">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="ACCESSIBLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.ACCESSIBLE]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="VIEWABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.VIEWABLE]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Forms" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Forms" scriptingName="forms">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="[name]">
          <return type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.scripting.FormScope"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get a form by name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get a form by name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var allForms = solutionModel.getForms();
application.output("There are " + allForms.length + " forms.");
for (var i=0; i<allForms.length; i++) 
{
	var f = forms[allForms[i].name];
	application.output("Form " + allForms[i].name + " has selected index " + f.controller.getSelectedIndex());
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allnames" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all form names of the current solution.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all form names of the current solution.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel.getForms() instead;
an exact replacement, if you need it would be 'solutionModel.getForms().map(function (jsForm) { return jsForm.name } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var allFormNames = forms.allnames;
application.output("There are " + allFormNames.length + " forms.");
for (var i=0; i<allFormNames.length; i++) 
{
	var f = forms[allFormNames[i]];
	application.output("Form " + allFormNames[i] + " has selected index " + f.controller.getSelectedIndex());
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="length">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of forms loaded into memory.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of forms loaded into memory.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[application.output("Number of forms loaded into memory: " + forms.length);]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Globals" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Globals" scriptingName="globals">
      <properties>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allmethods" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all script names of this global scope.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all script names of this global scope.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel.getGlobalMethods("scopeName") instead;
an exact replacement, if you need it would be 'solutionModel.getGlobalMethods("scopeName").map(function (jsMethod) { return jsMethod.getName() } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var allMethodNames = scopes.globals.allmethods;
application.output("There are " + allMethodNames.length + " global methods.");
for (var i=0; i<allMethodNames.length; i++)
	application.output(allMethodNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allrelations" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all global relation names of the current solution.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all global relation names of the current solution.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel.getRelations(null) instead;
an exact replacement, if you need it would be 'solutionModel.getRelations(null).map(function (jsRelation) { return jsRelation.name } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var allRelationNames = scopes.globals.allrelations;
application.output("There are " + allRelationNames.length + " global relations.");
for (var i=0; i<allRelationNames.length; i++)
	application.output(allRelationNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allvariables" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all variable names of this global scope.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all variable names of this global scope.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel.getGlobalVariables("scopeName") instead;
an exact replacement, if you need it would be 'solutionModel.getGlobalVariables("scopeName").map(function (jsVariable) { return jsVariable.name } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var allVarNames = scopes.globals.allvariables;
application.output("There are " + allVarNames.length + " global variables.");
for (var i=0; i<allVarNames.length; i++)
	application.output(allVarNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="currentcontroller">
          <return type="com.servoy.j2db.BasicFormController$JSForm" typecode="com.servoy.j2db.BasicFormController$JSForm"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the controller of the top level form in the currently active dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the controller of the top level form in the currently active dialog.]]></summary>
          </summaries>
          <deprecated><![CDATA[use forms.myform.controller instead, currentcontroller usage can be confusing when using multiple windows]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[application.output("Current controller is: " + currentcontroller.getName());]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="History" qualifiedName="com.servoy.j2db.FormManager$HistoryProvider" scriptingName="history">
      <properties>
        <property clientSupport="ng,wc,sc" name="buttonsEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set/Get the history buttons enabled.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set/Get the history buttons enabled.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[history.buttonsEnabled = true;
var status = history.buttonsEnabled;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc,wc,sc" name="back">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Navigates back in the history stack; shows the previous form (if present).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Navigates back in the history stack; shows the previous form (if present).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[history.back();]]></sample>
          </samples>
        </function>
        <function clientSupport="mc,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Clear the entire history stack.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Clear the entire history stack.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[history.clear();]]></sample>
          </samples>
        </function>
        <function clientSupport="mc,wc,sc" name="forward">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Navigates forward in the history stack; shows the next form (if present).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Navigates forward in the history stack; shows the next form (if present).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[history.forward();]]></sample>
          </samples>
        </function>
        <function clientSupport="mc,wc,sc" name="getCurrentIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the current absolute index]]></return>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Get the current absolute index in the history stack.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Get the current absolute index in the history stack.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[var abs_index = history.getCurrentIndex();]]></sample>
          </samples>
        </function>
        <function clientSupport="mc,wc,sc" name="getFormName">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the formName]]></return>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Get the form name based on the specified absolute index in the history stack location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Get the form name based on the specified absolute index in the history stack location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[var name = history.getFormName(history.getCurrentIndex());]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the absolute index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc,wc,sc" name="go">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Navigates to the relative index based on current position in the history.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Navigates to the relative index based on current position in the history.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[history.go(-3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the relative index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes the named form item from the history stack (and from memory) if not currently shown.
Will return false when the form can't be removed, this can happen in certain situations: 
1> The form is visible, 
2> The form is executing a function (is actively used),
3> There are references to this form by a global variable/array, 
4> If the form has a separate foundset with edited records that can't be saved (for example autosave is false)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes the named form item from the history stack (and from memory) if not currently shown.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var done = history.removeForm('mypreviousform');]]></sample>
          </samples>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the form to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc,wc,sc" name="removeIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Removes an absolute index based history stack form item.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Removes an absolute index based history stack form item.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[var done = history.removeIndex(history.getCurrentIndex()+1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index of the form to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc,wc,sc" name="size">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the size]]></return>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Returns the total size of the history stack.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Returns the total size of the history stack.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[var size = history.size();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="JOINTYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JOINTYPE">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INNER_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSRelation.INNER_JOIN]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LEFT_OUTER_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSRelation.LEFT_OUTER_JOIN]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSBean" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSBean">
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <deprecated><![CDATA[the background is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <deprecated><![CDATA[the border type is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="className">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The bean class name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The bean class name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bean = form.getBean('mybean');
application.output(bean.className);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <deprecated><![CDATA[the font type is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <deprecated><![CDATA[the foreground is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="innerHTML">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String object containing the mobile bean innerHTML]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The mobile bean innerHTML.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The mobile bean innerHTML.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[solutionModel.getForm('orders').getBean('signatureBean').innerHTML = '<div><span>My Bean</span></div>';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" deprecated="true" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <deprecated><![CDATA[print sliding is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <deprecated><![CDATA[the stlye class is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <deprecated><![CDATA[transparency is handled by the bean class implementation; this solution model property is ignored]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSButton" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSButton" scriptingName="JSButton">
      <constants>
        <constant clientSupport="mc" name="ICON_ALERT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_BACK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_BARS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_CHECK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_DELETE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_DOWN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_EDIT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_FORWARD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_GEAR">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_GRID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_HOME">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_INFO">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_LEFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_MINUS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_PLUS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_REFRESH">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_RIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_SEARCH">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_STAR">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="mc" name="ICON_UP">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[myButton.iconType = JSButton.ICON_...;]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displaysTags">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %% on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by %%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var label = form.newLabel('You are viewing record no. %%parent_table_id%%. You are running on server %%serverURL%%.', 
					10, 10, 600, 100);
label.displaysTags = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying data(using dataProviderID) in the label/button.
Some examples are "#%", "dd-MM-yyyy", "MM-dd-yyyy", etc.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying data(using dataProviderID) in the label/button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var label = form.newLabel('', 10, 10, 100, 100);
label.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="horizontalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="iconType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Icon shown on a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Icon shown on a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var btn = form.newButton('I am a button', 1, null);
btn.iconType = JSButton.ICON_STAR]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageMedia">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The image Media object that should be displayed inside the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The image Media object that should be displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var label = form.newLabel('', 10, 10, 100, 100);
label.imageMedia = ballImage;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="labelFor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Some components can be set to be labels of other components. This is useful in
two situations. In table view mode it is used for constructing the header of the
table. In record view mode, by setting mnemonics on the label, keyboard shortcuts
can be used to set the focus to fields.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Some components can be set to be labels of other components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="margin">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, left, bottom, right.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The margins of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mediaOptions">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Options to scale the image Media object that is displayed inside the component.
Can be set to one or a combination of CROP, REDUCE, ENLARGE and KEEPASPECT.

REDUCE will scale down the image if the component is smaller than the image.
REDUCE combined with KEEPASPECT will reduce the image, but keep its aspect ratio.
This is useful when the component has other proportions than the image.

ENLARGE will scale up the image if the component is larger than the image.
ENLARGE combined with KEEPASPECT will scale up the image while keeping its aspect ratio.

CROP will leave the image at its original size. If the component is smaller than
the image this will result in only a part of the image showing up.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Options to scale the image Media object that is displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load two images, a big one and a small one.
var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
// Put the big image in several small labels, with different media options.
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
// Put the small image in several big labels, with different media options.
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The keyboard shortcut that activates this component. A letter must be specified,
and the actual shortcut will be combination of ALT + the specified letter.

This property can be used in two ways. Normally the keyboard shortcut activates
the onClick event of the component. But if the "labelFor" property is set for the
component, then the keyboard shortcut will move the focus to the component whose
label this component is.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The keyboard shortcut that activates this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var btn = form.newButton('I am a button', 10, 40, 200, 20, m);
btn.mnemonic = 'B'; // When ALT-B is pressed the mouse will respond as if clicked.
var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O'; // When ALT-O is pressed the focus will move to fieldOne.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onDoubleClick">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is double clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is double clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRender">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[label.onRender = form.newMethod('function onRender(event) { event.getElement().bgcolor = \'#00ff00\' }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRightClick">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverCursor">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The cursor that is shown as the mouse is rolled over the component.
Possible options are DEFAULT and HAND. Note that roll over cursor is not supported in Smart client for list view and tableview forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The cursor that is shown as the mouse is rolled over the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageMedia">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The roll over image Media object used. It will only work if a property image is also used.
When the mouse is moved over the component, this image Media will be displayed.
When the mouse is moved out of the component, whatever text or image was being initially
displayed will be restored. Note that roll over image is not supported in Smart client for list view and tableview forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The roll over image Media object used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var mapBytes = plugins.file.readFile('d:/map.jpg');
var mapImage = solutionModel.newMedia('map.jpg', mapBytes);
var label = form.newLabel('', 10, 10, 200, 200);
label.imageMedia = mapImage;
label.rolloverImageMedia = ballImage;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rotation">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The rotation of the element. You can choose 0, 90, 180, or 270 and the label is rotated accordingly.
This property also applies to buttons and images.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The rotation of the element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 200, m);
label.rotation = 90;
var btn = form.newButton('And I am a button', 10, 220, 200, 20, m);
btn.rotation = 180;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showClick">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set, the element will show the clicked state when selected.
Applies to labels and buttons and images only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set, the element will show the clicked state when selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create a form method.
var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
// Create a label with the method attached to its onClick event.
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
// By default the label does not visually react to clicks, but we can enable this.
// Basically the label will now behave as a button does.
label.showClick = true;
// Create a button with the same method attached to its onClick event.
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
// By default the button visually reacts to onClick, but we can disable this.
// Then the button will behave like a label does.
btn.showClick = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showFocus">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set the text of an element will showfocus when selected.
Applies to labels and buttons only.
The text property for the element MUST be filled in first.

NOTE: The TAB key may also be used to select the element, depending
on the operating system being used and the selected LAF.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set the text of an element will showfocus when selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
label.showFocus = false;
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
btn.showFocus = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabSeq">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The text that is displayed inside the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The text that is displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// In general the text is specified when creating the component.
var label = form.newLabel('Initial text', 10, 10, 100, 20);
// But it can be changed later if needed.
label.text = 'Changed text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example:
<html>This includes<b>bolded text</b> and
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="verticalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnActionMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnAction(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnDoubleClickMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDoubleClick(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnRightClickMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnRightClick(JSMethod).]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSCalculation" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSCalculation">
      <properties>
        <property clientSupport="ng,wc,sc" name="code">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The full source code of this method (including doc and function declaration).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The full source code of this method (including doc and function declaration).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
calc.code = "function myCalculation() { return 123; }";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="variableType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the sql type of this variable.
Type should be one of JSVariable.DATETIME, JSVariable.TEXT, JSVariable.NUMBER , JSVariable.INTEGER or JSVariable.MEDIA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the sql type of this variable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
calc.variableType = JSVariable.DATETIME;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the name of the stored calculation]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[This method returns the name of the stored calculation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[This method returns the name of the stored calculation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER, "db:/example_data/customers");
application.output(calc.getName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the calculation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the calculation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
application.output(calc.getUUID().toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasFlag">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean whether flag is set.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check a flag of the calculation.
The flags are a bit pattern consisting of 1 or more of the following bits:
 - JSColumn.UUID_COLUMN]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check a flag of the calculation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var datasourceNode = solutionModel.getDataSourceNode('db:/example_data/orders')
var calculation = datasourceNode.getCalculation('mycalculation')
if (calculation.hasFlag(JSColumn.UUID_COLUMN))
{
	 // calculation was typed as UUID 
}]]></sample>
          </samples>
          <parameters>
            <parameter name="flag" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isStored">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the calculation is stored, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns whether this calculation is a stored one or not.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns whether this calculation is a stored one or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
if (calc.isStored()) application.output("The calculation is stored");
else application.output("The calculation is not stored");]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSCalendar" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSCalendar">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSChecks" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSChecks">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="valuelist">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The valuelist that is used by this field when displaying data. Can be used
with fields of type CHECKS, COMBOBOX, RADIOS and TYPE_AHEAD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The valuelist that is used by this field when displaying data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSColumn" qualifiedName="com.servoy.j2db.dataprocessing.JSColumn">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DATABASE_IDENTITY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATABASE_SEQUENCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATETIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EXCLUDED_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.
This flag identifies columns that are skipped in the sql.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for column information indicating unset values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for column information indicating unset values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NUMBER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PK_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.
This value identifies columns that are defined as primary key in the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getRowIdentifierType())
{
case JSColumn.NONE:
	// handle normal column
break;

case JSColumn.PK_COLUMN:
	// handle database pk column
break;

case JSColumn.ROWID_COLUMN:
	// handle developer defined pk column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ROWID_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.
This value identifies columns that are defined as primary key by the developer (but not in the database).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getRowIdentifierType())
{
case JSColumn.NONE:
	// handle normal column
break;

case JSColumn.PK_COLUMN:
	// handle database pk column
break;

case JSColumn.ROWID_COLUMN:
	// handle developer defined pk column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SERVOY_SEQUENCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UUID_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.
This flag identifies columns whose values are treated as UUID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UUID_GENERATOR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
      </constants>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAllowNull">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean allow-null flag.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the allow-null flag of the column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the allow-null flag of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (!column.getAllowNull())
{
	 // column cannot be null
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String dataprovider id.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider id for this column (which is the same as name if not explicitly defined otherwise).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider id for this column (which is the same as name if not explicitly defined otherwise).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var dataProviderId = column.getDataProviderID()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDescription">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String column description.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the description property of the column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the description property of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var desc = column.getDescription()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getForeignType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String foreign type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the foreign type of the column.
The foreign type can be defined design time as a foreign key reference to another table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the foreign type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var foreignType = column.getForeignType()
if (foreignType != null)
{
	var fkTable = databaseManager.getTable('example_data', foreignType)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLength">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int column length.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the length of the column as reported by the JDBC driver.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the length of the column as reported by the JDBC driver.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
if (column.getLength() < 10)
{
	 // handle short column
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQualifiedName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String qualified column name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the qualified name (including table name) of the column as known by the database.
The name is quoted, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the qualified name (including table name) of the column as known by the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var qualifiedSqlName = column.getQualifiedName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQuotedSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[column name, quoted if needed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
var jsColumn = jsTable.getColumn('active')
var quotedColumnName = jsColumn.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where ' + quotedColumnName + ' = ?', [1])]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRowIdentifierType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int row identifier type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the row identifier type of the column.
The sequence type is one of:
 - JSColumn.PK_COLUMN
 - JSColumn.ROWID_COLUMN
 - JSColumn.NONE]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the row identifier type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getRowIdentifierType())
{
case JSColumn.NONE:
	// handle normal column
break;

case JSColumn.PK_COLUMN:
	// handle database pk column
break;

case JSColumn.ROWID_COLUMN:
	// handle developer defined pk column
break;
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String sql name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the column as known by the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the column as known by the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var sqlName = column.getSQLName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScale">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int column scale.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var scale = column.getScale()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSequenceType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int sequence type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the sequence type of the column.
The sequence type is one of:
 - JSColumn.NONE
 - JSColumn.SERVOY_SEQUENCE
 - JSColumn.DATABASE_SEQUENCE
 - JSColumn.DATABASE_IDENTITY
 - JSColumn.UUID_GENERATOR;]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the sequence type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String column title.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the title property of the column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the title property of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var title = column.getTitle()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int sql type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the JDBC type of the column.
The type reported by the JDBC driver will be mapped to one of:
 - JSColumn.DATETIME
 - JSColumn.TEXT
 - JSColumn.NUMBER
 - JSColumn.INTEGER
 - JSColumn.MEDIA]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the JDBC type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTypeAsString">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String sql name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name JDBC type of the column.
The same mapping as defined in JSColumn.getType() is applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name JDBC type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var typeName = column.getTypeAsString()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasFlag">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean whether flag is set.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check a flag of the column.
The flags are a bit pattern consisting of 1 or more of the following bits:
 - JSColumn.UUID_COLUMN
 - JSColumn.EXCLUDED_COLUMN]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check a flag of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
          <parameters>
            <parameter name="flag" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isRowIdentifier">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Use column.getRowIdentifierType() != JSColumn.NONE instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Use column.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #getRowIdentifierType().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Use column.hasFlag(JSColumn.UUID_COLUMN) instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Use column.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #hasFlag().]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSColumnObject" qualifiedName="com.servoy.j2db.dataprocessing.JSColumnObject">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DATABASE_IDENTITY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATABASE_SEQUENCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATETIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EXCLUDED_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.
This flag identifies columns that are skipped in the sql.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for column information indicating unset values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for column information indicating unset values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NUMBER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PK_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.
This value identifies columns that are defined as primary key in the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getRowIdentifierType())
{
case JSColumn.NONE:
	// handle normal column
break;

case JSColumn.PK_COLUMN:
	// handle database pk column
break;

case JSColumn.ROWID_COLUMN:
	// handle developer defined pk column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ROWID_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.
This value identifies columns that are defined as primary key by the developer (but not in the database).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the row identifier type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getRowIdentifierType())
{
case JSColumn.NONE:
	// handle normal column
break;

case JSColumn.PK_COLUMN:
	// handle database pk column
break;

case JSColumn.ROWID_COLUMN:
	// handle developer defined pk column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SERVOY_SEQUENCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UUID_COLUMN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.
This flag identifies columns whose values are treated as UUID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the flags of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UUID_GENERATOR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting or getting the sequence type of columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getSequenceType())
{
case JSColumn.NONE:
	// handle column with no sequence
break;

case JSColumn.UUID_GENERATOR:
	// handle uuid generated column
break;
}]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="allowNull">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the allow-null flag of a new column.
Note that when a column is added to an existing table, allowNull will always be set.
For a primary key column, the allowNull flag will be always off, for other columns the flag is set by default.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the allow-null flag of a new column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use (JSColumn.TEXT, 36) for UUIDs
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		var c = table.createNewColumn("name", JSColumn.TEXT, 100);
		c.allowNull = false
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rowIdentifierType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the row identifier type of the column.
The sequence type is one of:
 - JSColumn.PK_COLUMN
 - JSColumn.ROWID_COLUMN
 - JSColumn.NONE]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the row identifier type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	// users has uuid pk
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use <JSColumn.TEXT, 36> for UUIDs)
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		table.createNewColumn("name", JSColumn.TEXT, 100);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table users successfully created.");
		else application.output("Table users not created.");
	}

	// groups has database sequence pk
	table = server.createNewTable("groups");
	if (table)
	{
		pk = table.createNewColumn("id", JSColumn.INTEGER, 0);
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.sequenceType = JSColumn.DATABASE_SEQUENCE
		pk.setDatabaseSequenceName('mygroupsequence')
		table.createNewColumn("name", JSColumn.TEXT, 100);
		result = server.synchronizeWithDB(table);
		if (result) application.output("Table groups successfully created.");
		else application.output("Table groups not created.");
	}
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sequenceType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the sequence type of the column.
The sequence type is one of:
 - JSColumn.NONE
 - JSColumn.SERVOY_SEQUENCE
 - JSColumn.DATABASE_SEQUENCE
 - JSColumn.DATABASE_IDENTITY
 - JSColumn.UUID_GENERATOR;]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the sequence type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	// users has uuid pk
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use <JSColumn.TEXT, 36> for UUIDs)
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		table.createNewColumn("name", JSColumn.TEXT, 100);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table users successfully created.");
		else application.output("Table users not created.");
	}

	// groups has database sequence pk
	table = server.createNewTable("groups");
	if (table)
	{
		pk = table.createNewColumn("id", JSColumn.INTEGER, 0);
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.sequenceType = JSColumn.DATABASE_SEQUENCE
		pk.setDatabaseSequenceName('mygroupsequence')
		table.createNewColumn("name", JSColumn.TEXT, 100);
		result = server.synchronizeWithDB(table);
		if (result) application.output("Table groups successfully created.");
		else application.output("Table groups not created.");
	}
}]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String dataprovider id.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider id for this column (which is the same as name if not explicitly defined otherwise).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider id for this column (which is the same as name if not explicitly defined otherwise).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var dataProviderId = column.getDataProviderID()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDescription">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String column description.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the description property of the column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the description property of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var desc = column.getDescription()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getForeignType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String foreign type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the foreign type of the column.
The foreign type can be defined design time as a foreign key reference to another table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the foreign type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var foreignType = column.getForeignType()
if (foreignType != null)
{
	var fkTable = databaseManager.getTable('example_data', foreignType)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLength">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int column length.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the length of the column as reported by the JDBC driver.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the length of the column as reported by the JDBC driver.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
if (column.getLength() < 10)
{
	 // handle short column
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQualifiedName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String qualified column name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the qualified name (including table name) of the column as known by the database.
The name is quoted, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the qualified name (including table name) of the column as known by the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var qualifiedSqlName = column.getQualifiedName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQuotedSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[column name, quoted if needed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
var jsColumn = jsTable.getColumn('active')
var quotedColumnName = jsColumn.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where ' + quotedColumnName + ' = ?', [1])]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String sql name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the column as known by the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the column as known by the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var sqlName = column.getSQLName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScale">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int column scale.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var scale = column.getScale()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String column title.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the title property of the column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the title property of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customername')
var title = column.getTitle()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int sql type.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the JDBC type of the column.
The type reported by the JDBC driver will be mapped to one of:
 - JSColumn.DATETIME
 - JSColumn.TEXT
 - JSColumn.NUMBER
 - JSColumn.INTEGER
 - JSColumn.MEDIA]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the JDBC type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTypeAsString">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String sql name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name JDBC type of the column.
The same mapping as defined in JSColumn.getType() is applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name JDBC type of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
var typeName = column.getTypeAsString()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasFlag">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean whether flag is set.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check a flag of the column.
The flags are a bit pattern consisting of 1 or more of the following bits:
 - JSColumn.UUID_COLUMN
 - JSColumn.EXCLUDED_COLUMN]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check a flag of the column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var table = databaseManager.getTable('db:/example_data/orders')
var column = table.getColumn('customerid')
if (column.hasFlag(JSColumn.UUID_COLUMN))
{
	// handle uuid column
}]]></sample>
          </samples>
          <parameters>
            <parameter name="flag" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isRowIdentifier">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Use column.getRowIdentifierType() != JSColumn.NONE instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Use column.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #getRowIdentifierType().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Use column.hasFlag(JSColumn.UUID_COLUMN) instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Use column.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #hasFlag().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="setDatabaseSequenceName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the database sequence name of the column, used for columns with sequence type JSColumn.DATABASE_SEQUENCE.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the database sequence name of the column, used for columns with sequence type JSColumn.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	// users has uuid pk
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use <JSColumn.TEXT, 36> for UUIDs)
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		table.createNewColumn("name", JSColumn.TEXT, 100);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table users successfully created.");
		else application.output("Table users not created.");
	}

	// groups has database sequence pk
	table = server.createNewTable("groups");
	if (table)
	{
		pk = table.createNewColumn("id", JSColumn.INTEGER, 0);
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.sequenceType = JSColumn.DATABASE_SEQUENCE
		pk.setDatabaseSequenceName('mygroupsequence')
		table.createNewColumn("name", JSColumn.TEXT, 100);
		result = server.synchronizeWithDB(table);
		if (result) application.output("Table groups successfully created.");
		else application.output("Table groups not created.");
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setFlag">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set or clear a flag of a new column.
The flags are a bit pattern consisting of 1 or more of the following bits:
 - JSColumn.UUID_COLUMN;
 - JSColumn.EXCLUDED_COLUMN;]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set or clear a flag of a new column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use (JSColumn.TEXT, 36) for UUIDs
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		var c = table.createNewColumn("name", JSColumn.TEXT, 100);
		c.allowNull = false
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="flag" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the flag to set]]></description>
            </parameter>
            <parameter name="set" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for set flag, false for clear flag]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSCombobox" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSCombobox">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="valuelist">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The valuelist that is used by this field when displaying data. Can be used
with fields of type CHECKS, COMBOBOX, RADIOS and TYPE_AHEAD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The valuelist that is used by this field when displaying data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSComponent" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSComponent" scriptingName="JSComponent">
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="wc,sc" publicName="JSDNDEvent" qualifiedName="com.servoy.j2db.dnd.JSDNDEvent" scriptingName="JSDNDEvent">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onAction event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
	// its an action event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATACHANGE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDataChange event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.DATACHANGE) 
{
	// its a data change event
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DOUBLECLICK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDoubleClick event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.DOUBLECLICK) 
{
	// its a double click event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FOCUSGAINED">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusGained or the forms onElementFocusGained event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.FOCUSGAINED) 
{
	// its a focus gained event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FOCUSLOST">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusLost or the forms onElementFocusLost event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.FOCUSLOST) 
{
	// its a focus lost event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FORM">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to a form event (like onShow) or command (like onDeleteRecord)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.FORM) 
{
	// its a form event or command
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MODIFIER_ALT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for the ALT modifier that can be returned by JSDNDEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for the ALT modifier that can be returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSDNDEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MODIFIER_CTRL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for the CTRL modifier that can be returned by JSDNDEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for the CTRL modifier that can be returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSDNDEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MODIFIER_META">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for the META modifier that can be returned by JSDNDEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for the META modifier that can be returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSDNDEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="MODIFIER_SHIFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant for the SHIFT modifier that can be returned by JSDNDEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant for the SHIFT modifier that can be returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSDNDEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() if the event is not used in a known event or command.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.NONE) 
{
	// type is not set.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="ONDRAG">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.getType() in a method that is attached to an onDrag event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.getType() == JSDNDEvent.ONDRAG) 
{
	// its an ondrag event
	if (event.getElementName() == 'todragelement')
		return DRAGNDROP.COPY
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="ONDRAGEND">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.getType() in a method that is attached to an onDragEnd event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.getType() == JSDNDEvent.ONDRAGEND) 
{
	// its an on drag end event.
	// return true if the drop has been completed successfully
	return event.isDropSuccess(); 
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="ONDRAGOVER">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.getType() in a method that is attached to an onDragOver event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.getType() == JSDNDEvent.ONDRAGOVER) 
{
	// its an on drag over event.
	// return true if it over the right element.
	return event.getElementName() == 'candroponelement';
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="ONDROP">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.getType() in a method that is attached to an onDrop event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant returned by JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.getType() == JSDNDEvent.ONDROP) 
{
	// its a on drop event.
	var element = elements[event.getElementName()];
	// do drop on element
	return true;
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RIGHTCLICK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onRightClick event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getType() == JSEvent.RIGHTCLICK) 
{
	// its a right click event.
}]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="data">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// A client design method that handles ondrag
if (event.getType() == JSEvent.ONDRAG)
{
     // the data is the selected elements array
     var elements = event.data;
     // only start a client design drag when there is 1 element
     if (elements.length == 1)
     {
     	return true;
     }
}

// code for a data drag method
event.data = "drag me!";
return DRAGNDROP.COPY;

// code for a data drop method
var data = event.data;
elemements[event.getElementName()].setText(data);
return true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="dataMimeType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The event data mime type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The event data mime type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[// only accept drag if data is a servoy record 
function onDragOver(event)
{
	if(event.dataMimeType.indexOf("application/x-servoy-record-object") == 0) return true;
	else return false;
}]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="wc,sc" name="getDragResult">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[a DRAGNDROP constant, representing the result of the drag action]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Returns the result of the drag action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Returns the result of the drag action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[function onDragEnd(event)
{
	var dragResult = event.getDragResult();
	if(dragResult == DRAGNDROP.NONE)
	{
		// the drag was canceled
	}
	else if(dragResult == DRAGNDROP.COPY)
	{
		// the drag ended with a copy action
	}
	else if(dragResult == DRAGNDROP.MOVE)
	{
		// the drag ended with a move action
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the element name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (event.getElementName() == 'myElement')
{
    elements[event.getElementName()].bgcolor = '#ff0000';
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFormName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the form name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[returns the name of the form the element was placed on.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[returns the name of the form the element was placed on.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[forms[event.getFormName()].myFormMethod();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getModifiers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int which holds the modifiers as a bitset.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Returns the modifiers of the event, see JSDNDEvent.MODIFIER_XXXX for the modifiers that can be returned.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Returns the modifiers of the event, see JSDNDEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSDNDEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record of the event]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Returns the record of the event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Returns the record of the event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[event.Record();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[an Object representing the source of this event.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[returns the source component/element of the event.
If it has a name the getElementName() is the name of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[returns the source component/element of the event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// cast to runtime text field (change to anoter kind of type if you know the type)
/** @type {RuntimeTextField} */
var source = event.getSource();
var sourceDataProvider = source.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTimestamp">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[a Date when this event happened.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the time the event occurred.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the time the event occurred.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[event.getTimestamp();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the type of this event.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[returns the dnd event type see the JSDNDEvents constants what it can return.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[returns the dnd event type see the JSDNDEvents constants what it can return.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[if (event.getType() == JSDNDEvent.ONDROP) 
{
	// it's a drop
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the X position.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = event.getX();
var xPrevious = previousEvent.getX();
var movedXPixels = x -xPrevious;]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the Y position.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = event.getY();
var yPrevious = previousEvent.getY();
var movedYPixels = y -yPrevious;]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSDataSet" qualifiedName="com.servoy.j2db.dataprocessing.JSDataSet" scriptingName="JSDataSet">
      <properties>
        <property clientSupport="ng,wc,sc" name="rowIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the record index of the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the record index of the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
//to set the rowIndex:
dataset.rowIndex = 1 //sets the rowIndex to the first row (dataset is 1-based)
//to retrieve the rowIndex of the currently selected row
var currRow = dataset.rowIndex]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="addColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, else false.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.addColumn('columnName',1);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[column name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, else false.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.addColumn('columnName',1);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[column name.]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[column index number between 1 and getMaxColumnIndex().]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, else false.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[adds a column with the specified name to the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.addColumn('columnName',1);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[column name.]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[column index number between 1 and getMaxColumnIndex().]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the type of column, see JSColumn constants.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addHTMLProperty">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add an HTML property to an HTML tag produced in getAsHTML().

For row and col parameters use:
1 = applies to the container
0 = applies to all
>0 = applies to specific cell]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add an HTML property to an HTML tag produced in getAsHTML().]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//adds a container property (to TABLE tag)
dataset.addHTMLProperty(-1,-1,'cellspacing','3');
dataset.addHTMLProperty(-1,-1,'style','border-collapse:collapse;'); //to have a single line border

//adds a row property to all rows (to TR tag)
dataset.addHTMLProperty(0,0,'class','text');

//adds a row property to second row (to TR tag)
dataset.addHTMLProperty(2,0,'class','text');

//adds a column property to all 3rd columns (to TD tag)
dataset.addHTMLProperty(0,3,'class','redcolumn') ;

//adds a specific cell property (to TD tag)
dataset.addHTMLProperty(2,4,'color','blue');

scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';]]></sample>
          </samples>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String property name]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String property value]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addRow">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a row to the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a row to the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
dataset.addRow(new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns
dataset.addRow(2, new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns at row 2]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index to add row (1-based)]]></description>
            </parameter>
            <parameter name="array" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[row data]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addRow">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a row to the dataset. The row will be added as the last row.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a row to the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
dataset.addRow(new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns
dataset.addRow(2, new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns at row 2]]></sample>
          </samples>
          <parameters>
            <parameter name="array" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[row data]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String uri reference to the created datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.
The types are inferred from the data if possible.

A temporary datasource cannot be removed because once created there may always be forms or relations that refer to it.
When the client exits, all datasources used by that client are removed automatically.

Most resources used by the datasource can be released by deleting all records:
  dataset.removeRow(-1) or databaseManager.getFoundSet(datasource).deleteAllRecords()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[ds.addColumn('my_id'); // note: use regular javascript identifiers so they can be used in scripting
ds.addColumn('my_label');
var uri = ds.createDataSource('mydata', [JSColumn.INTEGER, JSColumn.TEXT]);
var jsform = solutionModel.newForm(fname, uri, null, true, 300, 300);

var query = 'select customerid, address, city, country  from customers';
var ds2 = databaseManager.getDataSetByQuery('example_data', query, null, 999);
var uri2 = ds2.createDataSource('mydata2'); // types are inferred from query result]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[datasource name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String uri reference to the created datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.

A temporary datasource cannot be removed because once created there may always be forms or relations that refer to it.
When the client exits, all datasources used by that client are removed automatically.

Most resources used by the datasource can be released by deleting all records:
  dataset.removeRow(-1) or databaseManager.getFoundSet(datasource).deleteAllRecords()
  
A datasource can be reused if the data has the same signature (column names and types).
A new createDataSource() call will clear the datasource contents from a previous call and insert the current data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[ds.addColumn('my_id'); // note: use regular javascript identifiers so they can be used in scripting
ds.addColumn('my_label');
var uri = ds.createDataSource('mydata', [JSColumn.INTEGER, JSColumn.TEXT]);
var jsform = solutionModel.newForm(fname, uri, null, true, 300, 300);

var query = 'select customerid, address, city, country  from customers';
var ds2 = databaseManager.getDataSetByQuery('example_data', query, null, 999);
var uri2 = ds2.createDataSource('mydata2'); // types are inferred from query result]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[datasource name]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[array of types as defined in JSColumn]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String uri reference to the created datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.

A temporary datasource cannot be removed because once created there may always be forms or relations that refer to it.
When the client exits, all datasources used by that client are removed automatically.

Most resources used by the datasource can be released by deleting all records:
  dataset.removeRow(-1) or databaseManager.getFoundSet(datasource).deleteAllRecords()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a datasource from the data set with specified name and using specified types.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[ds.addColumn('my_id'); // note: use regular javascript identifiers so they can be used in scripting
ds.addColumn('my_label');
var uri = ds.createDataSource('mydata', [JSColumn.INTEGER, JSColumn.TEXT], ['my_id']);
var jsform = solutionModel.newForm(fname, uri, null, true, 300, 300);

var query = 'select customerid, address, city, country  from customers';
var ds2 = databaseManager.getDataSetByQuery('example_data', query, null, 999);
var uri2 = ds2.createDataSource('mydata2', null, ['customerid']); // types are inferred from query result, use customerid as pk]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[datasource name]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[array of types as defined in JSColumn, when null types are inferred from the query result]]></description>
            </parameter>
            <parameter name="pkNames" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[array of pk names, when null a hidden pk-column will be added]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not escape values or spaces, no multi_line_markup, do not add indentation, add column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not escape values or spaces, no multi_line_markup, do not add indentation, add column names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not escape spaces, no multi_line_markup, do not add indentation, add column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not escape spaces, no multi_line_markup, do not add indentation, add column names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
          <parameters>
            <parameter name="escape_values" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, no multi_line_markup, do not add indentation, add column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, no multi_line_markup, do not add indentation, add column names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
          <parameters>
            <parameter name="escape_values" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
            <parameter name="escape_spaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not add indentation, add column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, do not add indentation, add column names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
          <parameters>
            <parameter name="escape_values" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
            <parameter name="escape_spaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.]]></description>
            </parameter>
            <parameter name="multi_line_markup" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, multiLineMarkup will enforce new lines that are in the text; single new lines will be replaced by <br>, multiple new lines will be replaced by <p>]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, add column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table, add column names.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
          <parameters>
            <parameter name="escape_values" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
            <parameter name="escape_spaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.]]></description>
            </parameter>
            <parameter name="multi_line_markup" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, multiLineMarkup will enforce new lines that are in the text; single new lines will be replaced by <br>, multiple new lines will be replaced by <p>]]></description>
            </parameter>
            <parameter name="pretty_indent" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, adds indentation for more readable HTML code.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String html.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as an html table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
scopes.globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          </samples>
          <parameters>
            <parameter name="escape_values" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
            <parameter name="escape_spaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.]]></description>
            </parameter>
            <parameter name="multi_line_markup" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, multiLineMarkup will enforce new lines that are in the text; single new lines will be replaced by <br>, multiple new lines will be replaced by <p>]]></description>
            </parameter>
            <parameter name="pretty_indent" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if true, adds indentation for more readable HTML code.]]></description>
            </parameter>
            <parameter name="add_column_names" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[if false, column headers will not be added to the table.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getAsTableModel">
          <argumentsTypes/>
          <return type="javax.swing.table.TableModel" typecode="javax.swing.table.TableModel"><![CDATA[TableModel]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the dataset as a Swing tablemodel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the dataset as a Swing tablemodel.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #createDataSource(String,Object)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var model = dataset.getAsTableModel() //gets a Java/Swing tablemodel to be used in beans
elements.inmemDatagridBean.setModel(model)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String formatted text.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the dataset as formatted text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the dataset as formatted text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
//you can create csv or tab delimited results
var csv = dataset.getAsText(',','\n','"',true)
var tab = dataset.getAsText('\t','\n','"',true)]]></sample>
          </samples>
          <parameters>
            <parameter name="column_separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[any specified column separator; examples: tab '\t'; comma ','; semicolon ';'; space ' ' .]]></description>
            </parameter>
            <parameter name="row_separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified row separator; examples: new line '\n'.]]></description>
            </parameter>
            <parameter name="value_delimiter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified value delimiter; null means empty string; example: double quote '"'.]]></description>
            </parameter>
            <parameter name="add_column_names" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if true column names will be added as a first row.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnAsArray">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[Object array of data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the column data of a dataset as an Array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the column data of a dataset as an Array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var dataArray = dataset.getColumnAsArray(1); //puts the contents from the first column of the dataset into an array
//once you have it as an array you can loop through it or feed it to a custom valuelist for example]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnName">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String column name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column name based on index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column name based on index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var firstColumName = dataset.getColumnName(1) //retrieves the first columnname into the variable firstColumName
//using a loop you can get all columnames in an array:
var query = 'select * from customers';
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 100);
var colArray = new Array()
for (var i = 1; i <= dataset.getMaxColumnIndex(); i++)
{
	colArray[i-1] = dataset.getColumnName(i)
	//note the -1, because an array is zero based and dataset is 1 based.
}]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String[] column names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the column names of a dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the column names of a dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = 'select * from customers';
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 100);
var columnNames = dataset.getColumnNames();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnType" since="6.1.4">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"><![CDATA[Number the column type (JSColumn constant)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column type based on index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column type based on index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var firstColumnType = dataset.getColumnType(1) //retrieves the first column's type into the variable firstColumnType
if (firstColumnType == JSColumn.NUMBER) { }]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.ServoyException" typecode="com.servoy.j2db.util.ServoyException"><![CDATA[ServoyException exception or null when not available.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the database exception if an error occurred.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the database exception if an error occurred.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var dbException = dataset.getException();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getExceptionMsg">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[returns the contents of the database error message if an error occurred]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[returns the contents of the database error message if an error occurred]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getException()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getMaxColumnIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int number of columns.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the number of columns in the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the number of columns in the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
for (var i = 1; i <= dataset.getMaxColumnIndex(); i++)
{
	colArray[i-1] = dataset.getColumnName(i)
	//have to subtract 1, because an array is zero based and a dataset is 1 based.
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMaxRowIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int number of rows.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the number of rows in the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the number of rows in the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var totalRows = dataset.getMaxRowIndex();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRowAsArray">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[Object array of data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the row data of a dataset as an Array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the row data of a dataset as an Array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var dataArray = dataset.getRowAsArray(1); //puts the contents from the first row of the dataset into an array
//once you have it as an array you can loop through it]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of row (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getValue">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[Object value]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the value specified by row and column position from the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the value specified by row and column position from the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var dataAtRow2Col1 = dataset.getValue(2, 1);]]></sample>
          </samples>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number, 1-based]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hadMoreData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean more data available]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Return true if there is more data in the resultset then specified by maxReturnedRows at query time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Return true if there is more data in the resultset then specified by maxReturnedRows at query time.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ds = databaseManager.getDataSetByQuery('example_data', 'select order_id from orders', null, 10000)
if (ds.hadMoreData())
{
	// handle large result
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeColumn">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, else false.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Remove a column by index from the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Remove a column by index from the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.removeColumn(1); // removes first column]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column to remove (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeRow">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Remove a row from the dataset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Remove a row from the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
dataset.removeRow(1); //removes the first row
dataset.removeRow(-1); //removes all rows]]></sample>
          </samples>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row index to remove, -1 for all rows]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setColumnName">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a column name based on index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a column name based on index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = 'select customerid, customername from customers';
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, -1);
dataset.setColumnName(2, 'name_of_customer') // change the column name for second column.]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[new column name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValue">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the value specified by row and column position from the dataset.
Use row = -1, to set columnnames.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the value specified by row and column position from the dataset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//assuming the variable dataset contains a dataset
dataset.getValue(2, 1,'data');]]></sample>
          </samples>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number, 1-based]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
            <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to be stored at the given row and column.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sort the dataset on the given column (1-based) in ascending or descending.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sort the dataset on the given column (1-based) in ascending or descending.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// sort using column number
//assuming the variable dataset contains a dataset
dataset.sort(1, false)]]></sample>
          </samples>
          <parameters>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
            <parameter name="sort_direction" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[ascending (true) or descending (false)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sort the dataset using the function as comparator.
The comparator function is called to compare two rows, that are passed as arguments, and
it will return -1/0/1 if the first row is less/equal/greater then the second row.

NOTE: starting with 7.2 release, when called on datasource(foundset) dataset, this function doesn't save the data anymore]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sort the dataset using the function as comparator.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sort using comparator
dataset.sort(mySortFunction);

function mySortFunction(r1, r2)
{
	var o = 0;
	if(r1[0] < r2[0])
	{
		o = -1;
	}
	else if(r1[0] > r2[0])
	{
		o = 1;
	}
	return o;
}]]></sample>
          </samples>
          <parameters>
            <parameter name="comparator" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[comparator function]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSDataSource" qualifiedName="com.servoy.j2db.dataprocessing.datasource.JSDataSource">
      <functions>
        <function clientSupport="ng,wc,sc" name="createSelect">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"><![CDATA[query builder]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a query builder for a data source.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a query builder for a data source.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/book_nodes>} */
 var q = datasources.db.example_data.book_nodes.createSelect()
 q.result.addPk()
 q.where.add(q.columns.label_text.not.isin(null))
 datasources.db.example_data.book_nodes.getFoundSet().loadRecords(q)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String[] column names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the column names of a datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the column names of a datasource.]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="getDatasource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String datasource]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the datasource string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the datasource string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[datasources.db.example_data.orders.getDatasource() // returns 'db:/example_data/orders']]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSet">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet"><![CDATA[A new JSFoundset for the datasource.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var fs = datasources.db.example_data.orders.getFoundSet()
var ridx = fs.newRecord()
var record = fs.getRecord(ridx)
record.emp_name = 'John'
databaseManager.saveData()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSDataSourceNode" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSDataSourceNode">
      <functions>
        <function clientSupport="ng,wc,sc" name="getCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get an existing calculation for the datasource node.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get an existing calculation for the datasource node.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
var calc2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation2() { return '20'; }");
var calc3 = solutionModel.getDataSourceNode("db:/example_data/employees").newCalculation("function myCalculation3() { return 'Hello World!'; }",	JSVariable.TEXT);

var c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

var allCalcs = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculations();
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the calculation]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getCalculations">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSCalculation;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets all the calculations for the datasource node.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets all the calculations for the datasource node.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
var calc2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation2() { return '20'; }");
var calc3 = solutionModel.getDataSourceNode("db:/example_data/employees").newCalculation("function myCalculation3() { return 'Hello World!'; }",	JSVariable.TEXT);

var c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

var allCalcs = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculations();
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the dataSource]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data source for this node.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data source for this node.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var nodeDataSource = solutionModel.getDataSourceNode("db:/example_data/customers").getDataSource();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get an existing foundset method for the datasource node.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get an existing foundset method for the datasource node.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method = solutionModel.getDataSourceNode("db:/example_data/orders").newMethod("function doubleSize() { return 2*getSize(); }");

application.output('Doubled orders for this customer: '+customers_to_orders.doubleSize())]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getMethods">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets all the foundset methods for the datasource node.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets all the foundset methods for the datasource node.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method = solutionModel.getDataSourceNode("db:/example_data/orders").newMethod("function doubleSize() { return 2*getSize(); }");

application.output('Doubled orders for this customer: '+customers_to_orders.doubleSize())]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.TEXT;]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
var calc2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation2() { return '20'; }");
var calc3 = solutionModel.getDataSourceNode("db:/example_data/employees").newCalculation("function myCalculation3() { return 'Hello World!'; }",	JSVariable.TEXT);

var c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

var allCalcs = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculations();
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER);
var calc2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation2() { return '20'; }");
var calc3 = solutionModel.getDataSourceNode("db:/example_data/employees").newCalculation("function myCalculation3() { return 'Hello World!'; }",	JSVariable.TEXT);

var c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

var allCalcs = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculations();
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the calculation, one of the JSVariable types.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new foundset method with the specified code.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new foundset method with the specified code.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method = solutionModel.getDataSourceNode("db:/example_data/orders").newMethod("function doubleSize() { return 2*getSize(); }");

application.output('Doubled orders for this customer: '+customers_to_orders.doubleSize())]]></sample>
          </samples>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified code for the foundset method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the calculation specified by name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the calculation specified by name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc1 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation1() { return 123; }", JSVariable.INTEGER);
var calc2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myCalculation2() { return '20'; }");

var c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation1");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

solutionModel.getDataSourceNode("db:/example_data/customers").removeCalculation("myCalculation1");
c = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myCalculation1");
if (c != null) {
	application.output("myCalculation could not be removed.");
}

var allCalcs = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculations();
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the calculation to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the foundset method specified by name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the foundset method specified by name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method1 = solutionModel.getDataSourceNode("db:/example_data/customers").newMethod("function myFoundsetMethod1() { return 123; }");
var method2 = solutionModel.getDataSourceNode("db:/example_data/customers").newCalculation("function myFoundsetMethod2() { return '20'; }");

var m = solutionModel.getDataSourceNode("db:/example_data/customers").getMethod("myFoundsetMethod1");
application.output("Name: " + m.getName());

solutionModel.getDataSourceNode("db:/example_data/customers").removeMethod("myFoundsetMethod1");
m = solutionModel.getDataSourceNode("db:/example_data/customers").getCalculation("myFoundsetMethod1");
if (m != null) { application.output("myFoundsetMethod1 could not be removed."); }

var allMethods = solutionModel.getDataSourceNode("db:/example_data/customers").getMethod();
for (var i = 0; i < allMethods; i++)
{
	application.output(allMethods[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the method to be removed]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSEvent" qualifiedName="com.servoy.j2db.scripting.JSEvent" scriptingName="JSEvent">
      <constants>
        <constant clientSupport="ng,mc,wc,sc" name="ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onAction event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
	// its an action event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="DATACHANGE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDataChange event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.DATACHANGE) 
{
	// its a data change event
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="DOUBLECLICK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDoubleClick event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.DOUBLECLICK) 
{
	// its a double click event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="FOCUSGAINED">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusGained or the forms onElementFocusGained event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.FOCUSGAINED) 
{
	// its a focus gained event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="FOCUSLOST">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusLost or the forms onElementFocusLost event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.FOCUSLOST) 
{
	// its a focus lost event.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="FORM">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to a form event (like onShow) or command (like onDeleteRecord)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.FORM) 
{
	// its a form event or command
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MODIFIER_ALT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MODIFIER_CTRL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MODIFIER_META">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the META modifier that can be returned by JSEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the META modifier that can be returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MODIFIER_SHIFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.getModifiers();]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() if the event is not used in a known event or command.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.NONE) 
{
	// type is not set.
}]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="RIGHTCLICK">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onRightClick event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant returned by JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.RIGHTCLICK) 
{
	// its a right click event.
}]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="data">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// A client design method that handles ondrag
if (event.getType() == JSEvent.ONDRAG)
{
     // the data is the selected elements array
     var elements = event.data;
     // only start a client design drag when there is 1 element
     if (elements.length == 1)
     {
     	return true;
     }
}

// code for a data drag method
event.data = "drag me!";
return DRAGNDROP.COPY;

// code for a data drop method
var data = event.data;
elemements[event.getElementName()].setText(data);
return true;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="getElementName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the element name.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getElementName() == 'myElement')
{
    elements[event.getElementName()].bgcolor = '#ff0000';
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getFormName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the form name.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[returns the name of the form the element was placed on.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[returns the name of the form the element was placed on.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[forms[event.getFormName()].myFormMethod();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getModifiers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int which holds the modifiers as a bitset.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the modifiers of the event, see JSEvent.MODIFIER_XXXX for the modifiers that can be returned.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the modifiers of the event, see JSEvent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[an Object representing the source of this event.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[returns the source component/element of the event.
If it has a name the getElementName() is the name of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[returns the source component/element of the event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// cast to runtime text field (change to anoter kind of type if you know the type)
/** @type {RuntimeTextField} */
var source = event.getSource();
var sourceDataProvider = source.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getTimestamp">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[a Date when this event happened.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the time the event occurred.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the time the event occurred.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[event.getTimestamp();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the type of this event.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[returns the event type see the JSEvents constants what it can return.
Plugins can create events with there own types.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[returns the event type see the JSEvents constants what it can return.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
	// its an action event.
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the X position.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var x = event.getX();
var xPrevious = previousEvent.getX();
var movedXPixels = x -xPrevious;]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the Y position.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var y = event.getY();
var yPrevious = previousEvent.getY();
var movedYPixels = y -yPrevious;]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSField" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" scriptingName="JSField">
      <constants>
        <constant clientSupport="ng,mc,wc,sc" name="CALENDAR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the 
field to calendar. The field will show a formatted date and will have a button which
pops up a calendar for date selection.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="CHECKS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to checkbox. The field will show a checkbox, or a list of checkboxes if the valuelist
property is also set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var chk = form.newField('my_table_options', JSField.CHECKS, 10, 40, 100, 50);
chk.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="COMBOBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to combobox.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HTML_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to HTML area. The field will display formatted HTML content.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var html = form.newField('my_table_html', JSField.HTML_AREA, 10, 130, 100, 50);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="IMAGE_MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to image. The field will display images.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var img = form.newField('my_table_image', JSField.IMAGE_MEDIA, 10, 190, 100, 50);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LISTBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to list box. The field will show a selection list with single choice selection.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var list = form.newField('my_table_list', JSField.LISTBOX, 10, 280, 100, 50);
list.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" deprecated="true" name="LIST_BOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to list box. The field will show a selection list with single choice selection.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced by JSField.LISTBOX]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var list = form.newField('my_table_list', JSField.LIST_BOX, 10, 280, 100, 50);
list.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MULTISELECT_LISTBOX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to list box. The field will show a selection list with multiple choice selection.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var list = form.newField('my_table_options', JSField.MULTISELECT_LISTBOX, 10, 280, 100, 50);
list.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="PASSWORD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
fiels to password. The field will allow the user to enter passwords, masking the typed
characters.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var pwd = form.newField('my_table_text', JSField.PASSWORD, 10, 250, 100, 20);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="RADIOS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to radio buttons. The field will show a radio button, or a list of them if 
the valuelist property is also set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var radio = form.newField('my_table_options', JSField.RADIOS, 10, 280, 100, 50);
radio.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RTF_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the 
field to RTF area. The field will display formatted RTF content.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rtf = form.newField('my_table_rtf', JSField.RTF_AREA, 10, 340, 100, 50);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SPINNER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to spinner. The field will show a spinner.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var spinner = form.newField('my_spinner', JSField.SPINNER, 10, 460, 100, 20);
spinner.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="TEXT_AREA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to text area. The field will show text on multiple lines.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var tarea = form.newField('my_table_text', JSField.TEXT_AREA, 10, 400, 100, 50);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="TEXT_FIELD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to text field. The field will show regular text on a single line.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var tfield = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 460, 100, 20);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_AHEAD">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to type ahead. The field will show regular text, but will have type ahead 
capabilities.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var tahead = form.newField('my_table_text', JSField.TYPE_AHEAD, 10, 490, 100, 20);
tahead.valuelist = vlist;]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="displaysTags">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %% on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by %%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
field.displaysTags = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the content of the field can be edited or not. 
The default value of this flag is "true", that is the content can be edited.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the content of the field can be edited or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.editable = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="horizontalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="margin">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, left, bottom, right.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The margins of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onFocusGained">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component gains focus.
NOTE: Do not call methods that will influence the focus itself.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component gains focus.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onFocusLostMethod = form.newMethod('function onFocusLost(event) { application.output("Focus lost at " + event.getTimestamp()); }');
var onFocusGainedMethod = form.newMethod('function onFocusGained(event) { application.output("Focus gained at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onFocusGained = onFocusGainedMethod;
field.onFocusLost = onFocusLostMethod;
forms['someForm'].controller.show()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onFocusLost">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component looses focus.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component looses focus.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onFocusLostMethod = form.newMethod('function onFocusLost(event) { application.output("Focus lost at " + event.getTimestamp()); }');
var onFocusGainedMethod = form.newMethod('function onFocusGained(event) { application.output("Focus gained at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onFocusGained = onFocusGainedMethod;
field.onFocusLost = onFocusLostMethod;
forms['someForm'].controller.show()]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onRender">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[field.onRender = form.newMethod('function onRender(event) { event.getElement().bgcolor = \'#00ff00\' }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRightClick">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[field.placeholderText = 'Search';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="scrollbars">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;
var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;
var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="selectOnEnter">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the content of the field should be automatically selected
when the field receives focus. The default value of this field is "false".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the content of the field should be automatically selected
when the field receives focus.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create two fields and set one of them to have "selectOnEnter" true. As you tab
// through the fields you can notice how the text inside the second field gets
// automatically selected when the field receives focus.
var fieldNoSelect = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldSelect = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
fieldSelect.selectOnEnter = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabSeq">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 4.1, replaced by getTitleText()]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text that is displayed in the column header associated with the component when the form
is in table view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text that is displayed in the column header associated with the component when the form
is in table view.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/my_table', null, false, 640, 480);
var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.titleText = 'Column Title';
form.view = JSForm.LOCKED_TABLE_VIEW;
forms['someForm'].controller.show()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example:
<html>This includes<b>bolded text</b> and
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="valuelist">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The valuelist that is used by this field when displaying data. Can be used
with fields of type CHECKS, COMBOBOX, RADIOS and TYPE_AHEAD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The valuelist that is used by this field when displaying data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="verticalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          </summaries>
          <deprecated><![CDATA[not used (is ignored) on fields]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnActionMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnAction(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnDataChangeMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDataChange(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnFocusGainedMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnFocusGained(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnFocusLostMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnFocusLost(JSMethod).]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSFooter" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSFooter">
      <properties>
        <property clientSupport="mc" name="sticky">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Flag to set a set the footer sticky so it will not scroll out of view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Flag to set a set the footer sticky so it will not scroll out of view.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var footer = form.newFooter()
footer.sticky = false // default: true]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.styleClass = 'myBody';]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getComponents">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;"><![CDATA[an array of all the JSComponents on the footer.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns a array of all the IBaseSMComponents that a footer has.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns a array of all the IBaseSMComponents that a footer has.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm("myForm");
var footer = form.getFooter();
var components = footer.getComponents();
for (var i in components)
	application.output("Component type and name: " + components[i]);]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSCalendar element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new button on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new button on the footer.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newButton('myvar', form.getMethod('doit'));
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
            <parameter name="jsmethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalendar" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalendar"><![CDATA[a new JSCalendar element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCalendar object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCalendar object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCalendar('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalendar" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalendar"><![CDATA[a new JSCalendar element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCalendar object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCalendar object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCalendar('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSChecks" typecode="com.servoy.j2db.scripting.solutionmodel.JSChecks"><![CDATA[a new JSChecks element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSChecks object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSChecks object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCheck('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSChecks" typecode="com.servoy.j2db.scripting.solutionmodel.JSChecks"><![CDATA[a new JSChecks element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSChecks object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSChecks object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCheck('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCombobox">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCombobox" typecode="com.servoy.j2db.scripting.solutionmodel.JSCombobox"><![CDATA[a new JSCombobox element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCombobox object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCombobox object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCombobox('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newCombobox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCombobox" typecode="com.servoy.j2db.scripting.solutionmodel.JSCombobox"><![CDATA[a new JSCombobox element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCombobox object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCombobox object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newCombobox('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newField">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object (of the specified display type)]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSField object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSField object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newField('myvar', JSField.TEXT_FIELD, 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object (of the specified display type)]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSField object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSField object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newField('myvar', JSField.TEXT_FIELD, 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a new JSCalendar element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new label on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new label on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newButton('myvar', form.getMethod('doit'));
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the label]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPassword" typecode="com.servoy.j2db.scripting.solutionmodel.JSPassword"><![CDATA[a new JSPassword element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSPassword object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSPassword object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newPassword('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPassword" typecode="com.servoy.j2db.scripting.solutionmodel.JSPassword"><![CDATA[a new JSPassword element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSPassword object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSPassword object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newPassword('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRadios" typecode="com.servoy.j2db.scripting.solutionmodel.JSRadios"><![CDATA[a new JSRadios element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSRadios object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSRadios object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newRadios('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRadios" typecode="com.servoy.j2db.scripting.solutionmodel.JSRadios"><![CDATA[a new JSRadios element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSRadios object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSRadios object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newRadios('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTextArea" typecode="com.servoy.j2db.scripting.solutionmodel.JSTextArea"><![CDATA[a new JSTextArea element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSTextArea object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSTextArea object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newTextArea('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTextArea" typecode="com.servoy.j2db.scripting.solutionmodel.JSTextArea"><![CDATA[a new JSTextArea element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSTextArea object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSTextArea object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newTextArea('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSText" typecode="com.servoy.j2db.scripting.solutionmodel.JSText"><![CDATA[a new JSText element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSText object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSText object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newTextField('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" deprecated="true" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSText" typecode="com.servoy.j2db.scripting.solutionmodel.JSText"><![CDATA[a new JSText element]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSText object on the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSText object on the footer.]]></summary>
          </summaries>
          <deprecated><![CDATA[Possible future api]]></deprecated>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform')
var footer = form.getForm('myform').newFooter()
footer.newTextField('myvar', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the new element, defines the order of elements on the footer]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="removeComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is the component has been successfully removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Removes a named component from the footer.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Removes a named component from the footer.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm("myForm");
var footer = form.getFooter();
footer.removeComponent('myfield1')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component to remove]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSForm" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSForm" scriptingName="JSForm">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DEFAULT_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EMPTY_FOUNDSET">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for form namedFoundset property. The form that uses empty namedFoundset will initially have an empty (cleared) foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for form namedFoundset property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// form with empty foundset
var frmEmpty = solutionModel.newForm('products_empty', 'example_data', 'products', null, true, 640, 480);
frmEmpty.newLabel("Empty FoundSet",10,10,200,20);
frmEmpty.newField('categoryid',JSField.TEXT_FIELD,10,40,200,20);
frmEmpty.newField('productname',JSField.TEXT_FIELD,10,70,200,20);
frmEmpty.namedFoundSet = JSForm.EMPTY_FOUNDSET;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HIDE_CONTROLLER_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HIDE_DATAPROVIDERS_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HIDE_ELEMENTS_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HIDE_FOUNDSET_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LIST_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myListViewForm.view = JSForm.LIST_VIEW;

var myLockedListViewForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);	
myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;

var myLockedRecordViewForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

var myLockedTableViewForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;

var myRecordViewForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LOCKED_LIST_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myListViewForm.view = JSForm.LIST_VIEW;

var myLockedListViewForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);	
myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;

var myLockedRecordViewForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

var myLockedTableViewForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;

var myRecordViewForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LOCKED_RECORD_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myListViewForm.view = JSForm.LIST_VIEW;

var myLockedListViewForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);	
myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;

var myLockedRecordViewForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

var myLockedTableViewForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;

var myRecordViewForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LOCKED_TABLE_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myListViewForm.view = JSForm.LIST_VIEW;

var myLockedListViewForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);	
myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;

var myLockedRecordViewForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

var myLockedTableViewForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;

var myRecordViewForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="MODULE_PRIVATE_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="PRIVATE_ENCAPSULATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm. 
They are as follows: JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION, JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION, JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the encapsulation property of a JSForm.]]></summary>
          </summaries>
          <deprecated><![CDATA[really only useful in developer - when working with the solution. Not so much at runtime, maybe just
if developer save form solution model api is used...]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myDefaultForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myDefaultForm.encapsulation = JSForm.DEFAULT_ENCAPSULATION;

var myPrivateForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);
myPrivateForm.encapsulation = JSForm.PRIVATE_ENCAPSULATION;

var myModulePrivateForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myModulePrivateForm.encapsulation = JSForm.MODULE_PRIVATE_ENCAPSULATION;

var myHideDataprovidersForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myHideDataprovidersForm.encapsulation = JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION;

var myHideFoundsetForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myHideFoundsetForm.encapsulation = JSForm.HIDE_FOUNDSET_ENCAPSULATION;

var myHideControllerForm = solutionModel.newForm('newForm6', myDatasource, myStyleName, false, 800, 600);
myHideControllerForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;

var myHideElementsForm = solutionModel.newForm('newForm7', myDatasource, myStyleName, false, 800, 600);
myHideElementsForm.encapsulation = JSForm.HIDE_ELEMENTS_ENCAPSULATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECORD_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', myDatasource, myStyleName, false, 800, 600);
myListViewForm.view = JSForm.LIST_VIEW;

var myLockedListViewForm = solutionModel.newForm('newForm2', myDatasource, myStyleName, false, 800, 600);	
myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;

var myLockedRecordViewForm = solutionModel.newForm('newForm3', myDatasource, myStyleName, false, 800, 600);
myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

var myLockedTableViewForm = solutionModel.newForm('newForm4', myDatasource, myStyleName, false, 800, 600);
myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;

var myRecordViewForm = solutionModel.newForm('newForm5', myDatasource, myStyleName, false, 800, 600);
myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SELECTION_MODE_DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property. It means that the foundset's multiSelect property is used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.getForm('my_form_name');
myForm.selectionMode = JSForm.SELECTION_MODE_DEFAULT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SELECTION_MODE_MULTI">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property. It means that the form will force multiSelect to true on the foundset it uses.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.getForm('my_form_name');
myForm.selectionMode = JSForm.SELECTION_MODE_MULTI;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SELECTION_MODE_SINGLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property. It means that the form will force multiSelect to false on the foundset it uses.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for form selectionMode property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.getForm('my_form_name');
myForm.selectionMode = JSForm.SELECTION_MODE_SINGLE;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SEPARATE_FOUNDSET">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for form namedFoundset property. The form that uses a separate namedFoundset will initially have an separate (not shared with other forms) foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for form namedFoundset property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// form with separate foundset
var frmSeparate = solutionModel.newForm('products_separate', 'example_data', 'products', null, true, 640, 480);
frmSeparate.newLabel("Separate FoundSet",10,10,200,20);
frmSeparate.newField('categoryid',JSField.TEXT_FIELD,10,40,200,20);
frmSeparate.newField('productname',JSField.TEXT_FIELD,10,70,200,20);
frmSeparate.namedFoundSet = JSForm.SEPARATE_FOUNDSET;
forms['products_separate'].controller.find();
forms['products_separate'].categoryid = '=2';
forms['products_separate'].controller.search();]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="dataSource">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The names of the database server and table that this form is linked to.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The names of the database server and table that this form is linked to.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm', 'db:/a_server/a_table', 'aStyleName', false, 800, 600)
myForm.dataSource = 'db:/anotherServerName/anotherTableName']]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="defaultPageFormat">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The default page format for the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The default page format for the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
application.output(form.defaultPageFormat);
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="encapsulation">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the encapsulation level for the form.

Encapsulation is one of constants JSForm.DEFAULT_ENCAPSULATION, JSForm.PRIVATE_ENCAPSULATION, JSForm.MODULE_PRIVATE_ENCAPSULATION,
JSForm.HIDE_DATAPROVIDERS_ENCAPSULATION, JSForm.HIDE_FOUNDSET_ENCAPSULATION, JSForm.HIDE_CONTROLLER_ENCAPSULATION or JSForm.HIDE_ELEMENTS_ENCAPSULATION]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the encapsulation level for the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
myForm.encapsulation = JSForm.HIDE_CONTROLLER_ENCAPSULATION;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="extendsForm">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A JSForm instance representing the super form of this form, if this form has a super form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A JSForm instance representing the super form of this form, if this form has a super form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var subForm = solutionModel.newForm('childForm',myDatasource,null,true,800,600);
var superForm = solutionModel.newForm('childForm',myDatasource,null,true,800,600);
subForm.extendsForm = superForm;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[As of release 4.1, replaced by JSPart#getHeight().]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="initialSort">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The default sort order only when the form loads.
This is applied each time an internal SQL query is being executed (find, find-all, open form); and is only executed when no other manual sort has been performed on the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The default sort order only when the form loads.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,800,600);
form.initialSort = "column1 desc, column2 asc, column3 asc";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,800,600);
var formName = form.name;
application.output(formName);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="namedFoundSet">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that tells the form to use a named foundset instead of the default foundset.
When JSForm.SEPARATE_FOUNDSET is specified the form will always create a copy of assigned foundset and therefore become separated from other foundsets.
When JSForm.EMPTY_FOUNDSET, the form will have an initially empty foundset.

The namedFoundset can be based on a global relation; in this case namedFoundset is the relation's name.
You can also set the namedFoundset to a JSRelation object directly.
It will tell this form to initially load a global relation based foundset.
The global relation's foreign datasource must match the form's datasource.
Do not use relations named "empty" or "separate" to avoid confusions.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that tells the form to use a named foundset instead of the default foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// form with separate foundset
var frmSeparate = solutionModel.newForm('products_separate', 'db:/example_data/products', null, true, 640, 480);
frmSeparate.newLabel("Separate FoundSet",10,10,200,20);
frmSeparate.newField('categoryid',JSField.TEXT_FIELD,10,40,200,20);
frmSeparate.newField('productname',JSField.TEXT_FIELD,10,70,200,20);
frmSeparate.namedFoundSet = JSForm.SEPARATE_FOUNDSET;
forms['products_separate'].controller.find();
forms['products_separate'].categoryid = '=2';
forms['products_separate'].controller.search();

// form with empty foundset
var frmEmpty = solutionModel.newForm('products_empty', 'db:/example_data/products', null, true, 640, 480);
frmEmpty.newLabel("Empty FoundSet",10,10,200,20);
frmEmpty.newField('categoryid',JSField.TEXT_FIELD,10,40,200,20);
frmEmpty.newField('productname',JSField.TEXT_FIELD,10,70,200,20);
frmEmpty.namedFoundSet = JSForm.EMPTY_FOUNDSET;

// form with an initial foundset based on a global relation
var frmGlobalRel = solutionModel.newForm("categories_related", solutionModel.getForm("categories"));
frmGlobalRel.namedFoundSet = "g2_to_category_name";
 
// form with an initial foundset based on a global relation
var frmGlobalRel = solutionModel.newForm("categories_related", solutionModel.getForm("categories"));
frmGlobalRel.namedFoundSet = solutionModel.getRelation("g1_to_categories");]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="navigator">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The navigator is a form that usually handles navigation in application. It is displayed on left side of the screen. Can also have value SM_DEFAULTS.NONE (no navigator) or SM_DEFAULTS.IGNORE (reuse current form navigator).]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[The navigator (previously named "controller")
that is used to control/navigate to the form. The navigator is shown at
the left or at the right side of the form, depending on the page orientation.

The following options are available:
-none- - no navigator is assigned.
DEFAULT - the Servoy default navigator is assigned.
IGNORE - the navigator last assigned to a previous form.
Custom - a custom navigator based on a selected form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The navigator is a form that usually handles navigation in application.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[The navigator (previously named "controller")
that is used to control/navigate to the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource);
// you can also use SM_DEFAULTS.INGORE to just reuse the navigator that is already set.
// here we assign an other new form as the navigator.
var aNavigator = solutionModel.newForm('navForm', myDatasource);
aForm.navigator = aNavigator;]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
// you can also use SM_DEFAULTS.INGORE to just reuse the navigator that is already set, or SM_DEFAULTS.DEFAULT to have the default servoy navigator.
// here we assign an other new form as the navigator.
var aNavigator = solutionModel.newForm('navForm', myDatasource, null, false, 800, 600);
// set the navigators navigator to NONE
aNavigator.navigator = SM_DEFAULTS.NONE; // Hide the navigator on the form. 
myListViewForm.navigator = aNavigator;
application.output(myListViewForm.navigator.name);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onDeleteAllRecordsCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Delete All.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Delete All.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onNewRecordCmd = form.newMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onDeleteRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Delete Record (or keyboard shortcut).
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Delete Record (or keyboard shortcut).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onNewRecordCmd = form.newMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDrag">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDragEnd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDragOver">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDrop">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onDuplicateRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Duplicate Record (or keyboard shortcut).
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Duplicate Record (or keyboard shortcut).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onNewRecordCmd = form.newMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onElementFocusGained">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when focus is gained by a component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when focus is gained by a component inside the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onElementFocusGained = form.newMethod('function onElementFocusGained(event) { application.output("onElementFocusGained intercepted from " + event.getSource()); }');
form.onElementFocusLost = form.newMethod('function onElementFocusLost(event) { application.output("onElementFocusLost intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onElementFocusLost">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that gets triggered when focus is lost by a component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that gets triggered when focus is lost by a component inside the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onElementFocusGained = form.newMethod('function onElementFocusGained(event) { application.output("onElementFocusGained intercepted from " + event.getSource()); }');
form.onElementFocusLost = form.newMethod('function onElementFocusLost(event) { application.output("onElementFocusLost intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onFindCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Find (or keyboard shortcut) in Data (ready) mode.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Find (or keyboard shortcut) in Data (ready) mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onFindCmd = form.newMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onHide">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered when another form is being activated.
NOTE: If the onHide method returns false, the form can be prevented from hiding.
For example, when using onHide with showFormInDialog, the form will not close by clicking the dialog close box (X).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered when another form is being activated.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[form.onShow = form.newMethod('function onShow(firstShow, event) { application.output("onShow intercepted on " + event.getFormName() + ". first show? " + firstShow); return false; }');
form.onHide = form.newMethod('function onHide(event) { application.output("onHide blocked on " + event.getFormName()); return false; }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onInvertRecordsCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Invert Records.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Invert Records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onOmitRecordCmd = form.newMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onLoad">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered when a form is loaded/reloaded from the repository; used to alter elements, set globals, hide toolbars,
etc; onShow method can also be assigned.
NOTE: onShow should be used to access current foundset dataproviders; onLoad cannot be used because the foundset data is not loaded until after the form is loaded.
Also calls to loadRecords() should be done in the onShow method and not in the onLoad method
If you call loadRecords() in the onShow method, you may want to set the namedFoundSet property of the form to 'empty' to prevent the first default form query.
NOTE: the onLoad event bubbles down, meaning that the onLoad is first fired on the parent then on a tab in a tabpanel (and in tab of that tab panels if you are 3 deep)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered when a form is loaded/reloaded from the repository; used to alter elements, set globals, hide toolbars,
etc; onShow method can also be assigned.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[form.onLoad = form.newMethod('function onLoad(event) { application.output("onLoad intercepted on " + event.getFormName()); }');
form.onUnLoad = form.newMethod('function onUnLoad(event) { application.output("onUnLoad intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onNewRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > New Record (or keyboard shortcut).
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > New Record (or keyboard shortcut).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onNewRecordCmd = form.newMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onNextRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Next Record.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Next Record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onPreviousRecordCmd = form.newMethod('function onPreviousRecordCmd(event) { application.output("onPreviousRecordCmd intercepted on " + event.getFormName()); }');
form.onNextRecordCmd = form.newMethod('function onNextRecordCmd(event) { application.output("onNextRecordCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onOmitRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Omit Record.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Omit Record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onOmitRecordCmd = form.newMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onPreviousRecordCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Previous Record.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Previous Record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onPreviousRecordCmd = form.newMethod('function onPreviousRecordCmd(event) { application.output("onPreviousRecordCmd intercepted on " + event.getFormName()); }');
form.onNextRecordCmd = form.newMethod('function onNextRecordCmd(event) { application.output("onNextRecordCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onPrintPreviewCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that overrides the Servoy menu item File > Print Preview.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that overrides the Servoy menu item File > Print Preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onPrintPreviewCmd = form.newMethod('function onPrintPreviewCmd(event) { application.output("onPrintPreviewCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRecordEditStart">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a user clicks into a column on the form.
NOTE: There is a small "e" displayed in the lower left side of the Servoy Client screen in the status area at the bottom of the window when the record is being edited.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a user clicks into a column on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onRecordEditStart = form.newMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRecordEditStop">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a record is being saved.
A record is saved when a user clicks out of it (for example on an empty part of the layout or to another form).
When the method returns false (for example as part of a validation), the user cannot leave the record, for example in
a table view a user cannot move to another record when the callback returns false.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a record is being saved.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onRecordEditStart = form.newMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onRecordSelection">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered each time a record is selected.
If a form is in List view or Special table view - when the user clicks on it.
In Record view - after the user navigates to another record using the slider or clicks up or down for next/previous record.
NOTE: Data and Servoy tag values are returned when the onRecordSelection method is executed.
NOTE: this will also fire if the selection goes to -1 because the foundset is cleared. So foundset.getSelectedRecord() can return null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered each time a record is selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[form.onRecordEditStart = form.newMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onRender">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onRender = form.newMethod('function onRender(event) { event.getElement().bgcolor = \'#00ff00\' }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onResize">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that gets triggered when resize occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that gets triggered when resize occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onResize = form.newMethod('function onResize(event) { application.output("onResize intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onSearchCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Search (or keyboard shortcut) in Find mode.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Search (or keyboard shortcut) in Find mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onFindCmd = form.newMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onShow">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered EVERY TIME the form is displayed; an argument must be passed to the method if this is the first time the form is displayed.

NOTE: onShow can be used to access current foundset dataproviders; onLoad cannot be used because the foundset data is not loaded until after the form is loaded.

NOTE: the onShow event bubbles down, meaning that the onShow event of a form displayed in a tabPanel is fired after the onShow event of the parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is triggered EVERY TIME the form is displayed; an argument must be passed to the method if this is the first time the form is displayed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[form.onShow = form.newMethod('function onShow(firstShow, event) { application.output("onShow intercepted on " + event.getFormName() + ". first show? " + firstShow); return false; }');
form.onHide = form.newMethod('function onHide(event) { application.output("onHide blocked on " + event.getFormName()); return false; }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onShowAllRecordsCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Show All (or keyboard shortcut).
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Show All (or keyboard shortcut).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onFindCmd = form.newMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onShowOmittedRecordsCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Show Omitted Records.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Show Omitted Records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onOmitRecordCmd = form.newMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onSortCmd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Sort.
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that overrides the Servoy menu item Select > Sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onSortCmd = form.newMethod('function onSortCmd(dataProviderID, asc, event) { application.output("onSortCmd intercepted on " + event.getFormName() + ". data provider: " + dataProviderID + ". asc: " + asc); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onUnLoad">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a form is unloaded from the repository.
NOTE: Forms can be prevented from being removed from memory by referencing the form object in a global variable or inside an array inside a global variable. Do take care using this technique.
Forms take up memory and if too many forms are in memory and cannot be unloaded, there is a possibility of running out of memory.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is triggered when a form is unloaded from the repository.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.onLoad = form.newMethod('function onLoad(event) { application.output("onLoad intercepted on " + event.getFormName()); }');
form.onUnLoad = form.newMethod('function onUnLoad(event) { application.output("onUnLoad intercepted on " + event.getFormName()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="paperPrintScale">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The percentage value the printed page is enlarged or reduced to; the size of the printed form
is inversely proportional. For example, if the paperPrintScale is 50, the printed form will be
enlarged 200%.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The percentage value the printed page is enlarged or reduced to; the size of the printed form
is inversely proportional.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,800,600);
if (form.paperPrintScale < 100)
	form.paperPrintScale = 100;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" deprecated="true" name="rowBGColorCalculation">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The calculation dataprovider used to add background color and highlight selected or alternate rows.
The default is -none-.

NOTE: This property has been deprecated and is kept visible for legacy purposes. Use CSS Row Styling & onRender event instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The calculation dataprovider used to add background color and highlight selected or alternate rows.]]></summary>
          </summaries>
          <deprecated><![CDATA[onRender event replaces rowBGColorCalculation functionality]]></deprecated>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,800,600);
//assign the global method as a string. Or use a calculation name as the string.
form.rowBGColorCalculation = "scopes.globals.calculationDataProvider";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="scrollbars">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,1000,600);
form.scrollbars = SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER; 
forms['newForm1'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="selectionMode" since="6.1">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Returns the value of the form's selectionMode property.
Selection mode is applied when necessary to the foundset used by the form (through it's multiSelect property), even if the foundset changes.
If two or more forms with non-default and different selectionMode values share the same foundset, the visible one decides.
If two or more non-visible forms with non-default and different selectionMode values share the same foundset, one of them (always the same from a set of forms) decides.
If two or more visible forms with non-default and different selectionMode values share the same foundset, one of them (always the same from a set of forms) decides what the
foundset's selectionMode should be.

Can be one of SELECTION_MODE_DEFAULT, SELECTION_MODE_SINGLE or SELECTION_MODE_MULTI.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Returns the value of the form's selectionMode property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var myForm = solutionModel.getForm('my_form_name');
if (myForm.selectionMode == JSForm.SELECTION_MODE_MULTI) myForm.selectionMode = JSForm.SELECTION_MODE_DEFAULT;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="serverName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the server name used by this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the server name used by this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,800,600);
form.serverName = 'anotherServerName';
var theServerName = form.serverName;
application.output(theServerName);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showInMenu">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set, the form is displayed under the Window menu.
If it is not set, the form will be 'hidden'.
NOTE: This is only applicable for Servoy Client. Servoy Developer always shows all forms so that
developers have access to all forms within a solution during development.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set, the form is displayed under the Window menu.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var anotherForm= solutionModel.newForm('newForm2', myDatasource, null, true, 800, 600);
//using 'anotherForm' as navigator for aForm
anotherForm.showInMenu = false;
anotherForm.navigator = null;
aForm.navigator = anotherForm;
application.output(aForm.navigator.name);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
if (aForm.styleClass == null)
	aForm.styleClass = someStyleClass;
else
	application.output("The Cascading Style Sheet (CSS) class name applied to this form is " + aForm.styleClass);]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="styleName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The name of the Servoy style that is being used on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The name of the Servoy style that is being used on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
if (aForm.styleName == null)
	aForm.styleName = someServoyStyleName;
else
	application.output("The name of the Servoy style that is being used on the form is " + aForm.styleName);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="tableName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The [name of the table/SQL view].[the name of the database server connection] the form is based on.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The [name of the table/SQL view].]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var aForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
aForm.tableName = 'anotherTableOfMine'
if (forms['newForm1'].controller.find())
{
	columnTextDataProvider = '=aSearchedValue'
	columnNumberDataProvider = '>10';
	forms['newForm1'].controller.search()
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text that displays in the title bar of the form window.
NOTE: Data tags and Servoy tags can be used as part of the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text that displays in the title bar of the form window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm', 'db:/a_server/a_table', 'aStyleName', false, 800, 600)
forms['newForm'].controller.show();
if (myForm.titleText == null)
{
	myForm.titleText = "My new title text should be really cool!"
	forms['newForm'].controller.recreateUI();
}
else
	application.output("My text text is already cool");]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set, the form is transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set, the form is transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm',myDatasource,null,true,1000,800);
if (form.transparent == false)
{
	var style = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
	style.text = style.text + 'field { background-color: blue; }';
	form.styleName = 'myStyle';
}
var field = form.newField('columnTextDataProvider',JSField.TEXT_FIELD,100,100,100,50);
forms['myForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="useSeparateFoundSet">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[see getNamedFoundSet()]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="view">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The default form view mode.

The view can be changed using a method at runtime. The following views are available:
- Record view
- List view
- Record view (locked)
- List view (locked)
- Table View (locked)

NOTE: Only Table View (locked) uses asynchronized related data loading.
This feature defers all related foundset data loading to the background - enhancing
the visual display of a related foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The default form view mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
myForm.view = JSForm.RECORD_VIEW;
forms['newForm1'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width of the form in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width of the form in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
forms['newForm1'].controller.show();
myForm.width = 120;
forms['newForm1'].controller.recreateUI();]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="getBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean" typecode="com.servoy.j2db.scripting.solutionmodel.JSBean"><![CDATA[a JSBean object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSBean that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSBean that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var btn = myForm.getBean("mybean");
application.output(mybean.className);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the bean]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getBeans">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSBean;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var beans = myForm.getBeans();
for (var b in beans)
{
	if (beans[b].name != null)
		application.output(beans[b].name);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getBeans">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSBean;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var beans = myForm.getBeans();
for (var b in beans)
{
	if (beans[b].name != null)
		application.output(beans[b].name);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getBodyPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Body part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Body part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Body part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getBodyPart().background = 'blue';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a JSButton object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSButton that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSButton that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var btn = myForm.getButton("hello");
application.output(btn.text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the button]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getButtons">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var buttons = myForm.getButtons();
for (var b in buttons)
{
	if (buttons[b].name != null)
		application.output(buttons[b].name);
	else
		application.output(buttons[b].text + " has no name ");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getButtons">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var buttons = myForm.getButtons();
for (var b in buttons)
{
	if (buttons[b].name != null)
		application.output(buttons[b].name);
	else
		application.output(buttons[b].text + " has no name ");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[a JSComponent object (might be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var cmp = frm.getComponent("componentName");
application.output("Component type and name: " + cmp);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getComponents">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;"><![CDATA[an array of all the JSComponents on the form.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var components = form.getComponents();
for (var i in components)
	application.output("Component type and name: " + components[i]);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getComponents">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;"><![CDATA[an array of all the JSComponents on the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var components = form.getComponents();
for (var i in components)
	application.output("Component type and name: " + components[i]);]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var prop = frm.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var propNames = frm.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The field with the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The field with the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var field = form.getField("myField");
application.output(field.dataProviderID);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the field]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getFields">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;"><![CDATA[all JSField objects of this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var fields = frm.getFields();
for (var f in fields)
{
	var fname = fields[f].name;
	if (fname != null)
		application.output(fname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFields">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;"><![CDATA[all JSField objects of this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var fields = frm.getFields();
for (var f in fields)
{
	var fname = fields[f].name;
	if (fname != null)
		application.output(fname);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="getFooter">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFooter" typecode="com.servoy.j2db.scripting.solutionmodel.JSFooter"><![CDATA[A JSFooter or null when not found.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get the Footer part on the form if it exists.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get the Footer part on the form if it exists.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var footer = form.getFooter();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFooterPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Footer part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Footer part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Footer part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getFooterPart().background = 'magenta';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <deprecated><![CDATA[replaced by getMethod(String)]]></deprecated>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormMethods">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"/>
          <deprecated><![CDATA[replaced by getMethods()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormMethods">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"/>
          <deprecated><![CDATA[replaced by getMethods(boolean)]]></deprecated>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"/>
          <deprecated><![CDATA[replaced by getVariable(String)]]></deprecated>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormVariables">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"/>
          <deprecated><![CDATA[replaced by getVariables()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getFormVariables">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"/>
          <deprecated><![CDATA[replaced by getVariables(boolean)]]></deprecated>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="getHeader">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSHeader" typecode="com.servoy.j2db.scripting.solutionmodel.JSHeader"><![CDATA[A JSHeader or null when not found.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get the Header part on the form if it exists.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get the Header part on the form if it exists.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var header = form.getHeader();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeaderPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Header part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Header part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Header part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getHeaderPart().background = 'orange';]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="getInsetList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSInsetList" typecode="com.servoy.j2db.scripting.solutionmodel.JSInsetList"><![CDATA[the existing inset list, or null if it does not exist.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns an existing inset list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns an existing inset list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm("myform");
var insetList = form.getInsetList('mylist1');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the inset list's name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="getInsetLists">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSInsetList[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSInsetList;"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Gets all insets lists on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Gets all insets lists on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('test');
var insetLists = form.getInsetLists();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object (or null if the label with the specified name does not exist)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSLabel that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSLabel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var label = frm.getLabel("myLabel");
application.output(label.text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the label]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getLabels">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;"><![CDATA[all JSLabels on this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSLabels of this form (not including its super form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSLabels of this form (not including its super form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var labels = frm.getLabels();
for (var i in labels)
{
	var lname = labels[i].name;
	if (lname != null)
		application.output(lname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabels">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;"><![CDATA[all JSLabels on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSLabels of this form (optionally including it super forms labels), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSLabels of this form (optionally including it super forms labels), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var labels = frm.getLabels();
for (var i in labels)
{
	var lname = labels[i].name;
	if (lname != null)
		application.output(lname);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getLayoutContainer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer" typecode="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer"><![CDATA[a JSLayoutContainer object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSLayoutContainer that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSLayoutContainer that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var container = myForm.getLayoutContainer("row1");
application.output(container.name);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the container]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getLayoutContainers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLayoutContainer;"><![CDATA[all JSLayoutContainers objects of this container]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSLayoutContainers objects of this container]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSLayoutContainers objects of this container]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var containers = frm.getLayoutContainers();
for (var c in containers)
{
		var fname = containers[c].name;
		application.output(fname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLeadingGrandSummaryPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Leading Grand Summary part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Leading Grand Summary part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Leading Grand Summary part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getLeadingGrandSummaryPart().background = 'yellow';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getLeadingSubSummaryPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
          <deprecated><![CDATA[see getLeadingSubSummaryParts()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getLeadingSubSummaryParts">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;"><![CDATA[An array of JSPart instances corresponding to the Leading Subsummary parts of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets an array of the Leading Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets an array of the Leading Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getLeadingSubSummaryParts()[0].background = 'green';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod object (or null if the method with the specified name does not exist)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing form method for the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing form method for the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var method = frm.getMethod("myMethod");
application.output(method.code);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getMethods">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"><![CDATA[all form methods for the form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all existing form methods for this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all existing form methods for this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var methods = frm.getMethods();
for (var m in methods)
	application.output(methods[m].getName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMethods">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"><![CDATA[all form methods for the form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all existing form methods for this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all existing form methods for this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var methods = frm.getMethods();
for (var m in methods)
	application.output(methods[m].getName());]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance representing the retrieved form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets a part of the form from the given type (see JSPart constants).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets a part of the form from the given type (see JSPart constants).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getPart(JSPart.HEADER).background = 'red';
form.getPart(JSPart.LEADING_SUBSUMMARY, 160).background = 'red';]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance representing the retrieved form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets a part of the form from the given type (see JSPart constants). 
Use the height if you want to get a specific LEADING_SUBSUMMARY or TRAILING_SUBSUMMARY.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets a part of the form from the given type (see JSPart constants).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getPart(JSPart.HEADER).background = 'red';
form.getPart(JSPart.LEADING_SUBSUMMARY, 160).background = 'red';]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part to retrieve.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the part to retrieve. Use this parameter when retrieving one of multiple
	                      Leading/Trailing Subsummary parts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPartYOffset">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[A number holding the Y offset of the specified form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part (see JSPart) of the form. This will include 
all the super forms parts if this form extends a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part (see JSPart) of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get the subform
var form = solutionModel.getForm('SubForm');
// get the start offset of the body
var height = form.getPartYOffset(JSPart.BODY);
// place a new button based on the start offset.
form.newButton('mybutton',50,50+height,80,20,solutionModel.getGlobalMethod('globals', 'test'));]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose Y offset will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPartYOffset">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[A number holding the Y offset of the specified form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part (see JSPart) of the form. This will include 
all the super forms parts if this form extends a form. Use the height parameter for 
targetting one of multiple subsummary parts.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part (see JSPart) of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get the subform
var form = solutionModel.getForm('SubForm');
// get the start offset of the body
var height = form.getPartYOffset(JSPart.BODY);
// place a new button based on the start offset.
form.newButton('mybutton',50,50+height,80,20,solutionModel.getGlobalMethod('globals', 'test'));]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose Y offset will be returned.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the part whose Y offset will be returned. This is used when
                       one of multiple Leading/Trailing Sumsummary parts is retrieved.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getParts">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;"><![CDATA[An array of JSPart instances corresponding to the parts of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets all the parts from the form (not including the parts of the parent form), ordered by there height (lowerbound) property, from top == 0 to bottom.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets all the parts from the form (not including the parts of the parent form), ordered by there height (lowerbound) property, from top == 0 to bottom.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getParts">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;"><![CDATA[An array of JSPart instances corresponding to the parts of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets all the parts from the form (optionally also from the parent form), ordered by there height (lowerbound) property, from top == 0 to bottom.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets all the parts from the form (optionally also from the parent form), ordered by there height (lowerbound) property, from top == 0 to bottom.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the parts from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal" typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSPortal that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSPortal that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portal = frm.getPortal("myPortal");
portal.initialSort = 'my_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the portal]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortals">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPortal;"><![CDATA[an array of all JSPortal objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (not including the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (not including the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portals = frm.getPortals();
for (var i in portals)
{
	var p = portals[i];
	if (p.name != null)
		application.output(p.name);
	else
		application.output("unnamed portal detected");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortals">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPortal;"><![CDATA[an array of all JSPortal objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (optionally also the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (optionally also the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portals = frm.getPortals();
for (var i in portals)
{
	var p = portals[i];
	if (p.name != null)
		application.output(p.name);
	else
		application.output("unnamed portal detected");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSTabPanel that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSTabPanel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanel = frm.getTabPanel("myTabPanel");
var tabs = tabPanel.getTabs();
for (var i=0; i<tabs.length; i++)
	application.output("Tab " + i + " has text " + tabs[i].text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the tabpanel]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanels">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTabPanel;"><![CDATA[an array of all JSTabPanel objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (not including the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (not including the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanels = frm.getTabPanels();
for (var i in tabPanels)
{
	var tp = tabPanels[i];
	if (tp.name != null)
		application.output("Tab " + tp.name + " has text " + tp.text);
	else
		application.output("Tab with text " + tp.text + " has no name");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanels">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTabPanel;"><![CDATA[an array of all JSTabPanel objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (optionally the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (optionally the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanels = frm.getTabPanels();
for (var i in tabPanels)
{
	var tp = tabPanels[i];
	if (tp.name != null)
		application.output("Tab " + tp.name + " has text " + tp.text);
	else
		application.output("Tab with text " + tp.text + " has no name");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTitleFooterPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Title Footer part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Title Footer part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Title Footer part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getTitleFooterPart().background = 'gray';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTitleHeaderPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Title Header part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Title Header part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Title Header part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getTitleHeaderPart().background = 'red';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTrailingGrandSummaryPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Trailing Grand Summary part of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the Trailing Grand Summary part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the Trailing Grand Summary part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getTrailingGrandSummaryPart().background = 'yellow';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTrailingSubSummaryPart">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
          <deprecated><![CDATA[getTrailingSubSummaryParts()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getTrailingSubSummaryParts">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;"><![CDATA[An array of JSPart instances corresponding to the Trailing Subsummary parts of the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets an array of the Trailing Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets an array of the Trailing Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.getTrailingSubSummaryParts()[0].background = 'green';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form_UUID = myForm.getUUID();
application.output(form_UUID.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing form variable for the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing form variable for the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
	var fvariable = frm.getVariable("myVarName");
	application.output(fvariable.name + " has the default value of " + fvariable.defaultValue);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getVariables">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"><![CDATA[an array of all variables on this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[An array consisting of all form variables for this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[An array consisting of all form variables for this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var variables = frm.getVariables();
for (var i in variables)
	application.output(variables[i].name);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getVariables">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"><![CDATA[an array of all variables on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[An array consisting of all form variables for this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[An array consisting of all form variables for this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var variables = frm.getVariables();
for (var i in variables)
	application.output(variables[i].name);]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean" typecode="com.servoy.j2db.scripting.solutionmodel.JSBean"><![CDATA[a JSBean object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSBean object on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSBean object on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', 'db:/server1/table1');
var bean = form.newBean('bean', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSBean object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSBean object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean" typecode="com.servoy.j2db.scripting.solutionmodel.JSBean"><![CDATA[a JSBean object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSBean object on the form - including the name of the JSBean object; the classname the JSBean object is based on, the "x" and "y" position of the JSBean object in pixels, as well as the width and height of the JSBean object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSBean object on the form - including the name of the JSBean object; the classname the JSBean object is based on, the "x" and "y" position of the JSBean object in pixels, as well as the width and height of the JSBean object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'db:/server1/table1', null, true, 800, 600);
var bean = form.newBean('bean','com.servoy.extensions.beans.dbtreeview.DBTreeView',200,200,300,300);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSBean object]]></description>
            </parameter>
            <parameter name="className" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the class name of the JSBean object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSBean object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new button on the form with the given text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new button on the form with the given text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var method = form.newMethod('function onAction(event) { application.output("onAction intercepted on " + event.getFormName()); }');
var button = form.newButton('myButton', 1, method);
application.output("The new button: " + button.name + " has the following onAction event handling method assigned " + button.onAction.getName());]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y coordinate of the button location on the form, defines the order of elements on the form]]></description>
            </parameter>
            <parameter name="jsmethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var method = form.newMethod('function onAction(event) { application.output("onAction intercepted on " + event.getFormName()); }');
var button = form.newButton('myButton', 10, 10, 100, 30, method);
application.output("The new button: " + button.name + " has the following onAction event handling method assigned " + button.onAction.getName());]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the button]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the button]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalendar" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalendar"><![CDATA[a new JSCalendar field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCalendar field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCalendar field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal', JSVariable.DATETIME);
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar', JSVariable.DATETIME);
var field = form.newCalendar(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CALENDAR]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newCalendar(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalendar" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalendar"><![CDATA[a new JSCalendar field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCalendar field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCalendar field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal', JSVariable.DATETIME);
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar', JSVariable.DATETIME);
var field = form.newCalendar(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSChecks" typecode="com.servoy.j2db.scripting.solutionmodel.JSChecks"><![CDATA[a new JSChecks field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSChecks field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSChecks field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.INTEGER);
//x.defaultValue = "'1'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.INTEGER);
//x.defaultValue = "'1'";
var field = form.newCheck(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CHECK (checkbox)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newCheck(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSChecks" typecode="com.servoy.j2db.scripting.solutionmodel.JSChecks"><![CDATA[a new JSChecks field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSChecks field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSChecks field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.INTEGER);
//x.defaultValue = "'1'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.INTEGER);
//x.defaultValue = "'1'";
var field = form.newCheck(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newComboBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of COMBOBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newComboBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCombobox">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCombobox" typecode="com.servoy.j2db.scripting.solutionmodel.JSCombobox"><![CDATA[a new JSCombobox field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCombobox field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCombobox field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newCombobox(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newCombobox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCombobox" typecode="com.servoy.j2db.scripting.solutionmodel.JSCombobox"><![CDATA[a new JSCombobox field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSCombobox field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSCombobox field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newCombobox(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newField">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSField object on the form .]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSField object on the form .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT);
variable.defaultValue = "'This is a default value (with triple quotes)!'";
var field = form.newField(variable, JSField.TEXT_FIELD, 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object (of the specified display type)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT);
variable.defaultValue = "'This is a default value (with triple quotes)!'";
var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSField object on the form .]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSField object on the form .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT);
variable.defaultValue = "'This is a default value (with triple quotes)!'";
var field = form.newField(variable, JSField.TEXT_FIELD, 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newFooter">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFooter" typecode="com.servoy.j2db.scripting.solutionmodel.JSFooter"><![CDATA[A JSFooter instance corresponding to the newly created Footer form part.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new Footer part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new Footer part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var footer = form.newFooter();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newFooterPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSFooter instance corresponding to the newly created Footer form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Footer part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Footer part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var footer = form.newFooterPart(440);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newFormMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <deprecated><![CDATA[replaced by newMethod(String)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newFormVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"/>
          <deprecated><![CDATA[replaced by newVariable(String, int)]]></deprecated>
        </function>
        <function clientSupport="mc" name="newHeader">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSHeader" typecode="com.servoy.j2db.scripting.solutionmodel.JSHeader"><![CDATA[A JSHeader instance corresponding to the newly created Header form part.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new Header part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new Header part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var header = form.newHeader();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newHeaderPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Header form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Header part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Header part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var header = form.newHeaderPart(80);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newHtmlArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object on the form with the displayType of HTML_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var textProvider = form.newVariable('myVar',JSVariable.TEXT);
textProvider.defaultValue = "'This is a triple quoted text!'";
var htmlArea = myListViewForm.newHtmlArea(textProvider,100,100,100,100);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newImageMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of IMAGE_MEDIA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var myMediaVar = form.newVariable("media", JSVariable.MEDIA);
var imageMedia = form.newImageMedia(myMediaVar,100,100,200,200)
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newInsetList">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSInsetList" typecode="com.servoy.j2db.scripting.solutionmodel.JSInsetList"><![CDATA[the newly created inset list.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new inset list mobile component in the given form. The inset list will be populated based on the given datasource and relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new inset list mobile component in the given form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var f = solutionModel.newForm("created_by_sm_1","db:/udm/contacts");
// create an inset list
var insetList = f.newInsetList(8,"accountmanager_to_companies","Companies","company_name");
insetList.subtextDataProviderID = "company_description";
insetList.onAction = f.newMethod("function buttonPressed() { plugins.dialogs.showWarningDialog('Title', 'inset list clicked','OK'); }");]]></sample>
          </samples>
          <parameters>
            <parameter name="yLocation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical location of the inset list in the form's components list.]]></description>
            </parameter>
            <parameter name="relationName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the relation used to show data, just like it would happen in a related tab-panel.]]></description>
            </parameter>
            <parameter name="headerText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the title (header text) for the inset list.]]></description>
            </parameter>
            <parameter name="textDataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the dataprovider that will be used to populate the main text area of the list's items.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSLabel object on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSLabel object on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var label = form.newLabel('The text on the label', 1);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var label = form.newLabel('The text on the label', 140, 140, 50, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the label object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the label object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and a JSMethod action such as the method for an onAction event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and a JSMethod action such as the method for an onAction event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var label = form.newLabel('The text on the label', 140, 140, 50, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the label object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the label object in pixels]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the event action JSMethod of the label object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLayoutContainer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer" typecode="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer"><![CDATA[the new layout container]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new layout container. The location is used to determine the generated order in html markup.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new layout container.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var container = form.newLayoutContainer('col-md-4',0,0);]]></sample>
          </samples>
          <parameters>
            <parameter name="cssClasses" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[css classes used for layout]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[location x]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[location y]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLeadingGrandSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Leading Grand Summary form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Leading Grand Summary part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Leading Grand Summary part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leadingGrandSummary = form.newLeadingGrandSummaryPart(120);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLeadingSubSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Leading Subsummary form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Leading Subsummary part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Leading Subsummary part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leadingSubsummary = form.newLeadingSubSummaryPart(160);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newListBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of LISTBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var list = form.newListBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a new JSMethod object for this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSMethod - based on the specified code.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSMethod - based on the specified code.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var method = form.newMethod('function aMethod(event){application.output("Hello world!");}');
var button = myListViewForm.newButton('Show message!',50,50,100,30,method);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified code for the new method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newMultiSelectListBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of MULTISELECT_LISTBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of MULTISELECT_LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of MULTISELECT_LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var calendar = form.newMultiSelectListBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new part on the form. The type of the new part (use one of the JSPart constants)
and its height must be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm', 'db:/example_data/my_table', null, false, 1200, 800);
var header = form.newPart(JSPart.HEADER, 100);
header.background = 'yellow';
var body = form.newPart(JSPart.BODY, 700);
body.background = 'green';
var footer = form.newPart(JSPart.FOOTER, 800);
footer.background = 'orange';]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the new part.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPassword" typecode="com.servoy.j2db.scripting.solutionmodel.JSPassword"><![CDATA[a new JSPassword field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSPassword field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSPassword field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
var field = form.newPassword(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of PASSWORD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var pass = form.newPassword(scopes.globals.aVariable, 100, 100, 70, 30);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPassword" typecode="com.servoy.j2db.scripting.solutionmodel.JSPassword"><![CDATA[a new JSPassword field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSPassword field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSPassword field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
var field = form.newPassword(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal" typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'db:/server1/table1', null, true, 800, 600);
var relation = solutionModel.newRelation('parentToChild','db:/server1/table1','db:/server2/table2',JSRelation.INNER_JOIN);
relation.newRelationItem('another_parent_table_id', '=', 'another_child_table_parent_id');
var portal = form.newPortal('portal',relation,200,200,300,300);
portal.newField('someColumn',JSField.TEXT_FIELD,200,200,120);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal object]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the relation of the JSPortal object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSPortal object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRadios" typecode="com.servoy.j2db.scripting.solutionmodel.JSRadios"><![CDATA[a new JSRadios field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSRadios field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSRadios field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newRadios(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RADIOS (radio buttons)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES);
vlist.customValues = "value1\nvalue2\nvalue3";
var radios = form.newRadios('columnDataProvider',100,100,200,200);
radios.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRadios" typecode="com.servoy.j2db.scripting.solutionmodel.JSRadios"><![CDATA[a new JSRadios field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSRadios field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSRadios field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newRadios(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRtfArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RTF_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var rtf_area = form.newRtfArea('columnDataProvider',100,100,100,100);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newSpinner">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of SPINNER]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of SPINNER - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of SPINNER - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var spinner = form.newSpinner(myDataProvider, 10, 460, 100, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm','db:/server1/parent_table',null,false,640,480);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20);
var parentToChild = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
var childTwo = solutionModel.newForm('childTwo','db:/server1/my_table',null,false,400,300);
childTwo.newField('my_table_image', JSField.IMAGE_MEDIA,10,10,100,100);
var tabPanel = form.newTabPanel('tabs',10,10,620,460);
tabPanel.newTab('tab1','Child One',childOne,parentToChild);
tabPanel.newTab('tab2','Child Two',childTwo);
forms['parentForm'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTextArea" typecode="com.servoy.j2db.scripting.solutionmodel.JSTextArea"><![CDATA[a new JSTextArea field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSTextArea field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSTextArea field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newTextArea(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var globalVar = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
globalVar.defaultValue = "'Type your text in here'";
var textArea = form.newTextArea(globalVar,100,100,300,150);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTextArea" typecode="com.servoy.j2db.scripting.solutionmodel.JSTextArea"><![CDATA[a new JSTextArea field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSTextArea field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSTextArea field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var field = form.newTextArea(x,1);
//or a column data provider as the dataprovider
//field.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMVariable"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSText" typecode="com.servoy.j2db.scripting.solutionmodel.JSText"><![CDATA[a new JSText field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSText field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSText field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the Text Field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var textField = form.newTextField(x,1);
//or a column data provider as the dataprovider
//textField.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.base.solutionmodel.IBaseSMVariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_FIELD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
//choose the dataprovider or jsvariable you want for the Text Field
var x = null;
//global jsvariable as the dataprovider
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form jsvariable as the dataprovider
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var textField = form.newTextField(x,100,100,200,50);
//or a column data provider as the dataprovider
//textField.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSText" typecode="com.servoy.j2db.scripting.solutionmodel.JSText"><![CDATA[a new JSText field]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSText field on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSText field on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource); 
//choose the dataprovider or JSVariable you want for the Text Field
var x = null;
//global JSVariable as the dataprovider 
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form JSVariable as the dataprovider 
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var textField = form.newTextField(x,1);
//or a column data provider as the dataprovider
//textField.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object, defines the order of elements on the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTitleFooterPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Title Footer form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Title Footer part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Title Footer part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleFooter = form.newTitleFooterPart(500);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTitleHeaderPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Title Header form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Title Header part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Title Header part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleHeader = form.newTitleHeaderPart(40);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTrailingGrandSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Trailing Grand Summary form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Trailing Grand Summary part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Trailing Grand Summary part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var trailingGrandSummary = form.newTrailingGrandSummaryPart(400);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTrailingSubSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Trailing Subsummary form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new Trailing Subsummary part on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new Trailing Subsummary part on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var trailingSubsummary = form.newTrailingSubSummaryPart(360);]]></sample>
          </samples>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTypeAhead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TYPE_AHEAD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES);
vlist.customValues = "value1\nvalue2\nvalue3";
var typeAhead = form.newTypeAhead(columnTextDataProvider,100,100,300,200);
typeAhead.valuelist = vlist;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSVariable - based on the name of the variable object and the number type, uses the SolutionModel JSVariable constants.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSVariable - based on the name of the variable object and the number type, uses the SolutionModel JSVariable constants.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT , "'This is a default value (with triple quotes)!'");
//or variable = form.newVariable('myVar', JSVariable.TEXT)
//variable.defaultValue = "'This is a default value (with triple quotes)!'" // setting the default value after the variable is created requires form recreation
//variable.defaultValue = "{a:'First letter',b:'Second letter'}"   
var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified type of the variable (see Solution Model -> JSVariable node constants)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSVariable - based on the name of the variable object , the  type  and it's default value , uses the SolutionModel JSVariable constants.

This method does not require the form to be destroyed and recreated. Use this method if you want to change the form's model without destroying the runtime form</b>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new form JSVariable - based on the name of the variable object , the  type  and it's default value , uses the SolutionModel JSVariable constants.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT , "'This is a default value (with triple quotes)!'");
//or variable = form.newVariable('myVar', JSVariable.TEXT)
//variable.defaultValue = "'This is a default value (with triple quotes)!'" // setting the default value after the variable is created requires form recreation
//variable.defaultValue = "{a:'First letter',b:'Second letter'}"   
var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified type of the variable (see Solution Model -> JSVariable node constants)]]></description>
            </parameter>
            <parameter name="defaultValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the default value as a javascript expression string]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
frm.putDesignTimeProperty('myprop', 'lemon')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSBean has been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSBean that has the specified name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSBean that has the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm('myform');
form.removeBean('mybean')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSBean to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSButton has been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSButton that has the specified name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSButton that has the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var b1 = form.newButton('This is button1',100,100,200,50,null);
b1.name = 'b1';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeButton('b1') == true) application.output('Button has been removed ok'); else application.output('Button could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var b2 = form.newButton('Click here to remove button1',100,230,200,50,jsmethod);
b2.name = 'b2';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSButton to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if component has been successfully deleted; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSBean, JSTabpanel) that has the given name. It is the same as calling "if(!removeLabel(name) &amp;&amp; !removeButton(name) ....)".
Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSBean, JSTabpanel) that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX','db:/server1/parent_table',null,true,1000,750);
var jsbutton = form.newButton('JSButton to delete',100,100,200,50,null);
jsbutton.name = 'jsb';
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsfield = form.newField('scopes.globals.myGlobalVariable',JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var relation = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
relation.newRelationItem('parent_table_id', '=', 'child_table_id');
var jsportal = form.newPortal('jsp',relation,100,400,300,300);
jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_id', JSField.TEXT_FIELD,10,10,100,20);
var childTwo = solutionModel.newForm('childTwo','server1','other_table',null,false,400,300);
childTwo.newField('some_table_id', JSField.TEXT_FIELD,10,10,100,100);
var jstabpanel = form.newTabPanel('jst',450,30,620,460);
jstabpanel.newTab('tab1','Child One',childOne,relation);
jstabpanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if ((form.removeComponent('jsb') == true) && (form.removeComponent('jsl') == true) && (form.removeComponent('jsf') == true) && (form.removeComponent('jsp') == true) & (form.removeComponent('jst') == true)) application.output('Components removed ok'); else application.output('Some component(s) could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove form components',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component to be deleted]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
frm.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is the JSField has been successfully removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSField that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSField that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var jsfield = form.newField(scopes.globals.myGlobalVariable,JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsf') == true) application.output('Field has been removed ok'); else application.output('Field could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the field',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSField to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="removeFooter">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSFooter has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Removes a JSFooter if it exists.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Removes a JSFooter if it exists.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
form.removeFooter()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="removeHeader">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSHeader has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Removes a JSHeader if it exists.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Removes a JSHeader if it exists.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
form.removeHeader()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="removeInsetList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Removes inset list from the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Removes inset list from the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('test');
form.removeInsetList('myinsetlist');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Inset List name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSLabel with the given name has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSLabel that has the given name. Returns true if removal successful, false otherwise]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSLabel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,1000,750);
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeComponent('jsl') == true) application.output('Label has been removed'); else application.output('Label could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the green label',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSLabel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if method was removed successfully , false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a  form JSMethod - based on the specified code.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a  form JSMethod - based on the specified code.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', null, null, true, 800, 600);
var hello = form.newMethod('function aMethod(event){application.output("Hello world!");}');
var removeMethod = form.newMethod('function removeMethod(event){ \
									solutionModel.getForm(event.getFormName()).removeMethod("aMethod"); \
									forms[event.getFormName()].controller.recreateUI();\
									}');
var button1 = form.newButton('Call method!',50,50,120,30,hello);
var button2 = form.newButton('Remove Mehtod!',200,50,120,30,removeMethod);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removePart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if the part is successfully removed, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSPart of the given type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSPart of the given type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.removePart(JSPart.HEADER);
form.removePart(JSPart.LEADING_SUBSUMMARY, 160);]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part that should be removed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removePart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if the part is successfully removed, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSPart of the given type. The height parameter is for removing one of multiple subsummary parts.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSPart of the given type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[form.removePart(JSPart.HEADER);
form.removePart(JSPart.LEADING_SUBSUMMARY, 160);]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part that should be removed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the part that should be removed. This parameter is for 
					removing one of multiple Leading/Trailing Subsummary parts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removePortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSPortal has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSPortal that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSPortal that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var relation = solutionModel.newRelation('parentToChild','db:/server1/myTable','db:/server1/myOtherTable',JSRelation.INNER_JOIN);
relation.newRelationItem('parent_table_id', '=', 'child_table_id');
var jsportal = form.newPortal('jsp',relation,100,400,300,300);
jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsp') == true) application.output('Portal removed ok'); else application.output('Portal could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the portal',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is the JSTabPanel has been successfully removed, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSTabPanel that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSTabPanel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX','db:/server1/parent_table',null,false,800,600);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20);
var parentToChild = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_id');
var childTwo = solutionModel.newForm('childTwo','db:/server1/another_table',null,false,400,300);
childTwo.newField('columnDataProvider', JSField.TEXT_FIELD,10,10,100,100);
var tabPanel = form.newTabPanel('jst',10,10,620,460);
tabPanel.newTab('tab1','Child One',childOne,parentToChild);
tabPanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jst') == true)\n application.output('TabPanel has been removed ok');\n else\n application.output('TabPanel could not be deleted');\n forms['newFormX'].controller.recreateUI();\n}");
var removerButton = form.newButton('Click here to remove the tab panel',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if removed, false otherwise (ex: no var with that name)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a form JSVariable - based on the name of the variable object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a form JSVariable - based on the name of the variable object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', null, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT);
variable.defaultValue = "'This is a default value (with triple quotes)!'";
//variable.defaultValue = "{a:'First letter',b:'Second letter'}"
var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
forms['newForm1'].controller.show();

variable = form.removeVariable('myVar');
application.sleep(4000);
forms['newForm1'].controller.recreateUI();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnDeleteAllRecordsCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDeleteAllRecordsCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnDeleteRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDeleteRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="setOnDuplicateRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDuplicateRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnFindCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnFindCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnHideMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnHideCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnInvertRecordsCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnInvertRecordsCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnLoadMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnLoad(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnNewRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnNewRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnNextRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnNextRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnOmitRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnOmitRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnPreviousRecordCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnPreviousRecordCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="setOnPrintPreviewCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnPrintPreviewCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="setOnRecordEditStartMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnRecordEditStart(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnRecordEditStopMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnRecordEditStop(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnRecordSelectionMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnRecordSelection(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnSearchCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnSearchCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnShowAllRecordsCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnShowAllRecordsCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnShowMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnShow(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnShowOmittedRecordsCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnShowOmittedRecordsCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnSortCmdMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnSortCmd(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnUnLoadMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnUnLoad(JSMethod).]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSFoundSet" qualifiedName="com.servoy.j2db.dataprocessing.FoundSet" scriptingName="JSFoundSet">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="alldataproviders" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all dataproviders of the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all dataproviders of the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var dataprovidersNames = %%prefix%%alldataproviders;
application.output("This foundset has " + dataprovidersNames.length + " data providers.")
for (var i=0; i<dataprovidersNames.length; i++)
	application.output(dataprovidersNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="multiSelect">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or set the multiSelect flag of the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or set the multiSelect flag of the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// allow user to select multiple rows.
%%prefix%%foundset.multiSelect = true;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="addFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if adding the filter succeeded, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.
Use clear() or loadAllRecords() to make the filter effective.
Multiple filters can be added to the same dataprovider, they will all be applied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Filter a fondset on a dataprovider value.
// Note that multiple filters can be added to the same dataprovider, they will all be applied.

var success = %%prefix%%foundset.addFoundSetFilterParam('customerid', '=', 'BLONP', 'custFilter');//possible to add multiple
%%prefix%%foundset.loadAllRecords();//to make param(s) effective
// Named filters can be removed using %%prefix%%foundset.removeFoundSetFilterParam(filterName)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String column to filter on.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String operator: =, <, >, >=, <=, !=, (NOT) LIKE, (NOT) IN, (NOT) BETWEEN and IS (NOT) NULL optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object filter value (for in array and between an array with 2 elements)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if adding the filter succeeded, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.
Use clear() or loadAllRecords() to make the filter effective.
The filter is removed again using removeFoundSetFilterParam(name).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%foundset.addFoundSetFilterParam('customerid', '=', 'BLONP', 'custFilter');//possible to add multiple
// Named filters can be removed using %%prefix%%foundset.removeFoundSetFilterParam(filterName)

// you can use modifiers in the operator as well, filter on companies where companyname is null or equals-ignore-case 'servoy'
var ok = %%prefix%%foundset.addFoundSetFilterParam('companyname', '#^||=', 'servoy')

%%prefix%%foundset.loadAllRecords();//to make param(s) effective]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String column to filter on.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String operator: =, <, >, >=, <=, !=, (NOT) LIKE, (NOT) IN, (NOT) BETWEEN and IS (NOT) NULL optionally augmented with modifiers "#" (ignore case) or "^||" (or-is-null).]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object filter value (for in array and between an array with 2 elements)]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String name, used to remove the filter again.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Clear the foundset, including searches that may be on it
%%prefix%%foundset.clear();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="clearFoundSet">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clears the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clears the foundset.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.1, replaced by #clear().]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="deleteAllRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var success = %%prefix%%foundset.deleteAllRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="deleteRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Delete currently selected record(s).
If the foundset is in multiselect mode, all selected records are deleted.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Delete currently selected record(s).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var success = %%prefix%%foundset.deleteRecord();
//can return false incase of related foundset having records and orphans records are not allowed by the relation]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="deleteRecord">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSRecord"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if record could be deleted.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Delete record from foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Delete record from foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var success = %%prefix%%foundset.deleteRecord(rec);
//can return false incase of related foundset having records and orphans records are not allowed by the relation]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord">
              <description><![CDATA[The record to delete from the foundset.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="deleteRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if record could be deleted.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Delete record with the given index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Delete record with the given index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var success = %%prefix%%foundset.deleteRecord(4);
//can return false incase of related foundset having records and orphans records are not allowed by the relation]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to delete.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateFoundSet">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[foundset duplicate.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a duplicate of the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a duplicate of the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dupFoundset = %%prefix%%foundset.duplicateFoundSet();
%%prefix%%foundset.find();
//search some fields
var count = %%prefix%%foundset.search();
if (count == 0)
{
	plugins.dialogs.showWarningDialog('Alert', 'No records found','OK');
	%%prefix%%foundset.loadRecords(dupFoundset);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate current record, change selection to new record, place on top.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate current record, change selection to new record, place on top.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate selected record, change selection to new record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate selected record, change selection to new record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate selected record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate selected record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the selection is changed to the duplicated record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record, place on top.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record, place on top.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the selection is changed to the duplicated record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset, change selection to new record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the new record is added at specified index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[0 if record was not created or the record index if it was created.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate record at index in the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the new record is added at specified index]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the selection is changed to the duplicated record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="find">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the foundset is now in find mode, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Set the foundset in find mode. (Start a find request), use the "search" function to perform/exit the find.

Before going into find mode, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), the foundset will not go into find mode.
Make sure the operator and the data (value) are part of the string passed to dataprovider (included inside a pair of quotation marks).
Note: always make sure to check the result of the find() method.

When in find mode, columns can be assigned string expressions (including operators) that are evaluated as:
General:
      c1||c2    (condition1 or condition2)
      c|format  (apply format on condition like 'x|dd-MM-yyyy')
      !c        (not condition)
      #c        (modify condition, depends on column type)
      ^         (is null)
      ^=        (is null or empty)
      &lt;x     (less than value x)
      &gt;x     (greater than value x)
      &lt;=x    (less than or equals value x)
      &gt;=x    (greater than or equals value x)
      x...y     (between values x and y, including values)
      x         (equals value x)

 Number fields:
      =x       (equals value x)
      ^=       (is null or zero)

 Date fields:
      #c       (equals value x, entire day)
      now      (equals now, date and or time)
      //       (equals today)
      today    (equals today)

 Text fields:
      #c	        (case insensitive condition)
      = x      (equals a space and 'x')
      ^=       (is null or empty)
      %x%      (contains 'x')
      %x_y%    (contains 'x' followed by any char and 'y')
      \%      (contains char '%')
      \_      (contains char '_')

Related columns can be assigned, they will result in related searches.
For example, "employees_to_department.location_id = headoffice" finds all employees in the specified location).

Searching on related aggregates is supported.
For example, "orders_to_details.total_amount = '&gt;1000'" finds all orders with total order details amount more than 1000.

Arrays can be used for searching a number of values, this will result in an 'IN' condition that will be used in the search.
The values are not restricted to strings but can be any type that matches the column type.
For example, "record.department_id = [1, 33, 99]"]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Set the foundset in find mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[if (%%prefix%%foundset.find()) //find will fail if autosave is disabled and there are unsaved records
{
	columnTextDataProvider = 'a search value'
	// for numbers you have to make sure to format it correctly so that the decimal point is in your locales notation (. or ,)
	columnNumberDataProvider = '>' + utils.numberFormat(anumber, '####.00');
	columnDateDataProvider = '31-12-2010|dd-MM-yyyy'
	%%prefix%%foundset.search()
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="forEach">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[Object the return value of the callback]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Iterates over the records of a foundset taking into account inserts and deletes that may happen at the same time.
It will dynamically load all records in the foundset (using Servoy lazy loading mechanism). If callback function returns a non null value the traversal will be stopped and that value is returned.
If no value is returned all records of the foundset will be traversed. Foundset modifications( like sort, omit...) cannot be performed in the callback function.
If foundset is modified an exception will be thrown. This exception will also happen if a refresh happens because of a rollback call for records on this datasource when iterating.
When an exception is thrown from the callback function, the iteraion over the foundset will be stopped.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Iterates over the records of a foundset taking into account inserts and deletes that may happen at the same time.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.forEach(function(record,recordIndex,foundset) {
 	//handle the record here
 });]]></sample>
          </samples>
          <parameters>
            <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[The callback function to be called for each loaded record in the foundset. Can receive three parameters: the record to be processed, the index of the record in the foundset, and the foundset that is traversed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getCurrentSort">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String sort columns]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current sort columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current sort columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//reverse the current sort

//the original sort "companyName asc, companyContact desc"
//the inversed sort "companyName desc, companyContact asc"
var foundsetSort = foundset.getCurrentSort()
var sortColumns = foundsetSort.split(',')
var newFoundsetSort = ''
for(var i=0; i<sortColumns.length; i++)
{
	var currentSort = sortColumns[i]
	var sortType = currentSort.substring(currentSort.length-3)
	if(sortType.equalsIgnoreCase('asc'))
	{
		newFoundsetSort += currentSort.replace(' asc', ' desc')
	}
	else
	{
		newFoundsetSort += currentSort.replace(' desc', ' asc')
	}
	if(i != sortColumns.length - 1)
	{
		newFoundsetSort += ','
	}
}
foundset.sort(newFoundsetSort)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[Object value]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a value based on a dataprovider name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a value based on a dataprovider name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var val = %%prefix%%foundset.getDataProviderValue('contact_name');]]></sample>
          </samples>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String data source.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the datasource used.
The datasource is an url that describes the data source.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the datasource used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSource = %%prefix%%foundset.getDataSource();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSetFilterParams">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[][]" typecode="[[Ljava.lang.Object;"><![CDATA[Array of filter definitions.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the list of previously defined foundset filters.
The result is an array of:
 [ tableName, dataprovider, operator, value, name ]]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the list of previously defined foundset filters.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var params = foundset.getFoundSetFilterParams()
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('FoundSet filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFoundSetFilterParams">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[][]" typecode="[[Ljava.lang.Object;"><![CDATA[Array of filter definitions.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a previously defined foundset filter, using its given name.
The result is an array of:
 [ tableName, dataprovider, operator, value, name ]]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a previously defined foundset filter, using its given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var params = foundset.getFoundSetFilterParams()
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('FoundSet filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          </samples>
          <parameters>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[name of the filter to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getMaxRecordIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the number of records in this foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the number of records in this foundset.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.1, replaced by #getSize().]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for ( var i = 1 ; i <= %%prefix%%foundset.getMaxRecordIndex() ; i++ )
{
	%%prefix%%foundset.setSelectedIndex(i);
	//do some action per record
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQuery">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"><![CDATA[query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the query that the foundset is currently using.
When the founset is in find mode, the find conditions are included in the resulting query.
So the query that would be used when just calling search() (or search(true,true)) is returned.
Note that foundset filters are included and table filters are not included in the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the query that the foundset is currently using.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var q = foundset.getQuery()
q.where.add(q.columns.x.eq(100))
foundset.loadRecords(q);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getRecord">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord"><![CDATA[Record record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the record object at the index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the record object at the index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var record = %%prefix%%foundset.getRecord(index);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getRecordIndex">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSRecord"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the record index. Will return -1 if the record can't be found.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the record index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var index = %%prefix%%foundset.getRecordIndex(record);]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord">
              <description><![CDATA[Record]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getRelationName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String relation name when related.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the relation name (null if not a related foundset).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the relation name (null if not a related foundset).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relName = %%prefix%%foundset.getRelationName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getSelectedIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int current index (1-based)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the current record index of the foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the current record index of the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedIndexes">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[Ljava.lang.Number;"><![CDATA[Array current indexes (1-based)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the indexes of the selected records.
When the founset is in multiSelect mode (see property multiSelect), a selection can consist of more than one index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the indexes of the selected records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// modify selection to the first selected item and the following row only
var current = %%prefix%%foundset.getSelectedIndexes();
if (current.length > 1)
{
	var newSelection = new Array();
	newSelection[0] = current[0]; // first current selection
	newSelection[1] = current[0] + 1; // and the next row
	%%prefix%%foundset.setSelectedIndexes(newSelection);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getSelectedRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord"><![CDATA[Record record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the selected record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the selected record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var selectedRecord = %%prefix%%foundset.getSelectedRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record[]" typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;"><![CDATA[Array current records.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the selected records.
When the founset is in multiSelect mode (see property multiSelect), selection can be a more than 1 record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the selected records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var selectedRecords = %%prefix%%foundset.getSelectedRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getServerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the name of the server used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the name of the server used.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getDataSource().]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getSize">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int current size.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of records in this foundset.
This is the number of records loaded, note that when looping over a foundset, size() may
increase as more records are loaded.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of records in this foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var nrRecords = %%prefix%%foundset.getSize()

// to loop over foundset, recalculate size for each record
for (var i = 1; i <= %%prefix%%foundset.getSize(); i++)
{
	var rec = %%prefix%%foundset.getRecord(i);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTableName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the name of the table used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the name of the table used.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getDataSource().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="hasConditions">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[wether the foundset has find-conditions]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check wether the foundset has any conditions from a previous find action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check wether the foundset has any conditions from a previous find action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (%%prefix%%foundset.hasConditions())
{
		// foundset had find actions
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="invertRecords">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Invert the foundset against all rows of the current table.
All records that are not in the foundset will become the current foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Invert the foundset against all rows of the current table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.invertRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="isInFind">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean is in find mode.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Check if this foundset is in find mode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Check if this foundset is in find mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//Returns true when find was called on this foundset and search has not been called yet
%%prefix%%foundset.isInFind();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="loadAllRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Loads all accessible records from the datasource into the foundset.
Filters on the foundset are applied.

Before loading the records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off),
records will not be loaded,]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Loads all accessible records from the datasource into the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[%%prefix%%foundset.loadAllRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadOmittedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads the records that are currently omitted as a foundset.

Before loading the omitted records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off),
omitted records will not be loaded,]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads the records that are currently omitted as a foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.loadOmittedRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Reloads all last (related) records again, if, for example, after search in tabpanel.
When in find mode, this will reload the records from before the find() call.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Reloads all last (related) records again, if, for example, after search in tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//to reload all last (related) records again, if for example when searched in tabpanel
 %%prefix%%foundset.loadRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copies foundset data from another foundset.
This will alter the foundset state to the state of the foundset that is given.
If you really just want to use the given foundset on the form itself, then you need to use controller.loadRecords(foundset)
that will change the instance of the foundset that is used for this form. Not just update an existing form.

If you copy over a relation into this foundset, then this foundset will not be a related foundset, it will not automatically update its state
of records are updated or added that belong to that relation. It will only be a snapshot of that related foundsets state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copies foundset data from another foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Copies foundset data from another foundset
%%prefix%%foundset.loadRecords(fs);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The foundset to load records from]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(FoundSet)]]></deprecated>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[The foundset to load record from]]></description>
            </parameter>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true for ignoring the argument array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a primary key dataset, will remove related sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a primary key dataset, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// loads a primary key dataset, will remove related sort!
//var dataset = databaseManager.getDataSetByQuery(...);
// dataset must match the table primary key columns (alphabetically ordered)
%%prefix%%foundset.loadRecords(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet">
              <description><![CDATA[pkdataset]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(JSDataSet)]]></deprecated>
          <parameters>
            <parameter name="dataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet">
              <description><![CDATA[The dataset to load records from]]></description>
            </parameter>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true for ignoring the argument array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query builder object (also known as 'Form by query').
When the founset is in find mode, the find states are discarded, the foundset will go out of find mode and the foundset will be loaded using the query.
If the foundset is related, the relation-condition will be added to the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query builder object (also known as 'Form by query').]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.loadRecords(qbselect);]]></sample>
          </samples>
          <parameters>
            <parameter name="querybuilder" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[the query builder]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.

NOTE: This function will return true if the foundset was altered/changed. It is up to the developer to check for the presence of actual data using getSize().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Loads a single record by primary key, will remove related sort!
%%prefix%%foundset.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));]]></sample>
          </samples>
          <parameters>
            <parameter name="uuidpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[single-column pk value]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(UUID)]]></deprecated>
          <parameters>
            <parameter name="uuidpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[single-column pk value]]></description>
            </parameter>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true to ignore argument array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.

NOTE: This function will return true if the foundset was altered/changed. It is up to the developer to check for the presence of actual data using getSize().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Loads a single record by primary key, will remove related sort!
%%prefix%%foundset.loadRecords(123);]]></sample>
          </samples>
          <parameters>
            <parameter name="numberpk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[single-column pk value]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(Number)]]></deprecated>
          <parameters>
            <parameter name="numberpk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[single-column pk value]]></description>
            </parameter>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true to ignore arguments array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old foundset loadRecords calls.
Deprecated method to handle pre-6.1 calls to varargs function foundset.loadRecords([1]), this was called with vargs=[1] in stead of vargs=[[1]].]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old foundset loadRecords calls.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords with single typed argument]]></deprecated>
          <parameters>
            <parameter name="vargs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query'). The query must be a valid sql select.
If the foundset is related this function is not allowed.

see foundset.loadRecords(QBSelect).

When possible, the foundset will be loaded with the given query.
This is not always possible because the foundset needs to manipulate the query when adding conditions and joins.
In that case the query will be wrapped: select pk from tab where pk = (queryString)
The result is the same, except for te ordering in the queryString which will be ignored.

The query will be wrapped when one of the following is true:
<ul>
<li>you have no order-by clause</li>
<li>you have no from keyword</li>
<li>your query is not fully qualified on the main table</li>
<li>you have a group-by, having, join or union keyword</li>
</ul>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query').]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//loads records in to the foundset based on a query (also known as 'Form by query')
%%prefix%%foundset.loadRecords(sqlstring);]]></sample>
          </samples>
          <parameters>
            <parameter name="queryString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[select statement]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query'). The query must be a valid sql select.
If the foundset is related this function is not allowed.

see foundset.loadRecords(QBSelect).

When possible, the foundset will be loaded with the given query.
This is not always possible because the foundset needs to manipulate the query when adding conditions and joins.
In that case the query will be wrapped: select pk from tab where pk = (queryString)
The result is the same, except for te ordering in the queryString which will be ignored.

The query will be wrapped when one of the following is true:
<ul>
<li>you have no order-by clause</li>
<li>you have no from keyword</li>
<li>your query is not fully qualified on the main table</li>
<li>you have a group-by, having, join or union keyword</li>
</ul>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query').]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//loads records in to the foundset based on a query (also known as 'Form by query')
%%prefix%%foundset.loadRecords(sqlstring,parameters);]]></sample>
          </samples>
          <parameters>
            <parameter name="queryString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[select statement]]></description>
            </parameter>
            <parameter name="argumentsArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[arguments to query]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index of new record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Create a new record on top of the foundset and change selection to it. Returns -1 if the record can't be made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Create a new record on top of the foundset and change selection to it.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index of new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset and change selection to it. Returns -1 if the record can't be made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset and change selection to it.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          </samples>
          <parameters>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index of new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset. Returns -1 if the record can't be made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          </samples>
          <parameters>
            <parameter name="onTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the new record is added as the topmost record.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the selection is changed to the new record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index of new record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset and change selection to it. Returns -1 if the record can't be made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the foundset and change selection to it.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the new record is added at specified index.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[int index of new record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Create a new record in the foundset. Returns -1 if the record can't be made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Create a new record in the foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the new record is added at specified index.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true the selection is changed to the new record.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="omitRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if all records could be omitted.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Omit current record, to be shown with loadOmittedRecords.
If the foundset is in multiselect mode, all selected records are omitted (when no index parameter is used).

Note: The omitted records list is discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invertRecords()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Omit current record, to be shown with loadOmittedRecords.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%foundset.omitRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="omitRecord">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean true if all records could be omitted.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Omit record under the given index, to be shown with loadOmittedRecords.
If the foundset is in multiselect mode, all selected records are omitted (when no index parameter is used).

Note: The omitted records list is discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invertRecords()]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Omit record under the given index, to be shown with loadOmittedRecords.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%foundset.omitRecord();]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[The index of the record to omit.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="relookup">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Perform a relookup for the currently selected records
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Perform a relookup for the currently selected records
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.relookup(1);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="relookup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Perform a relookup for the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Perform a relookup for the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.relookup(1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[record index (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if removing the filter succeeded, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Remove a named foundset filter.
Use clear() or loadAllRecords() to make the filter effective.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Remove a named foundset filter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%foundset.removeFoundSetFilterParam('custFilter');// removes all filters with this name
%%prefix%%foundset.loadAllRecords();//to make param(s) effective]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String filter name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="search">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.
Clear results from previous searches.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="search">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.
Reduce results from previous searches.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
          <parameters>
            <parameter name="clearLastResults" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="search">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
          <parameters>
            <parameter name="clearLastResults" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
            <parameter name="reduceSearch" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[boolean, reduce (true) or extend (false) previous search results, default true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="selectRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Select the record based on pk data.
Note that if the foundset has not loaded the record with the pk, selectrecord will fail.

In case of a table with a composite key, the pk sequence must match the alphabetical
ordering of the pk column names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Select the record based on pk data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.selectRecord(pkid1,pkid2,pkidn);//pks must be alphabetically set! It is also possible to use an array as parameter.]]></sample>
          </samples>
          <parameters>
            <parameter name="pkid1">
              <description><![CDATA[primary key]]></description>
            </parameter>
            <parameter name="pkid2" optional="true">
              <description><![CDATA[second primary key (in case of composite primary key)]]></description>
            </parameter>
            <parameter name="pkidn" optional="true">
              <description><![CDATA[nth primary key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a value based on a dataprovider name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a value based on a dataprovider name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.setDataProviderValue('contact_name','mycompany');]]></sample>
          </samples>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[value to set]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Set the current record index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Set the current record index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index to set (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSelectedIndexes">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Number;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the selected records indexes.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the selected records indexes.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// modify selection to the first selected item and the following row only
var current = %%prefix%%foundset.getSelectedIndexes();
if (current.length > 1)
{
	var newSelection = new Array();
	newSelection[0] = current[0]; // first current selection
	newSelection[1] = current[0] + 1; // and the next row
	%%prefix%%foundset.setSelectedIndexes(newSelection);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="indexes" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[Ljava.lang.Number;">
              <description><![CDATA[An array with indexes to set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Sorts the foundset based on the given record comparator function.
The comparator function is called to compare
two records, that are passed as arguments, and
it will return -1/0/1 if the first record is less/equal/greater
then the second record.

The function based sorting does not work with printing.
It is just a temporary in-memory sort.

NOTE: starting with 7.2 release this function doesn't save the data anymore]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Sorts the foundset based on the given record comparator function.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[%%prefix%%foundset.sort(mySortFunction);

function mySortFunction(r1, r2)
{
	var o = 0;
	if(r1.id < r2.id)
	{
		o = -1;
	}
	else if(r1.id > r2.id)
	{
		o = 1;
	}
	return o;
}]]></sample>
          </samples>
          <parameters>
            <parameter name="recordComparisonFunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[record comparator function]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sorts the foundset based on the given sort string.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sorts the foundset based on the given sort string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.sort('columnA desc,columnB asc');]]></sample>
          </samples>
          <parameters>
            <parameter name="sortString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sorts the foundset based on the given sort string.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sorts the foundset based on the given sort string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.sort('columnA desc,columnB asc');]]></sample>
          </samples>
          <parameters>
            <parameter name="sortString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
            <parameter name="defer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[when true, the "sortString" will be just stored, without performing a query on the database (the actual sorting will be deferred until the next data loading action).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="unrelate">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"><![CDATA[FoundSet unrelated foundset.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.
If the current foundset is not related, no copy will made.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%foundset.unrelate();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSFoundSetUpdater" qualifiedName="com.servoy.j2db.dataprocessing.JSFoundSetUpdater">
      <functions>
        <function clientSupport="ng,wc,sc" name="next">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if proceeded to next record, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Go to next record in this updater, returns true if successful.
NOTE: this method doesn't take into account deletes and inserts that may happen at same time. For more reliable iterator see foundset.forEach]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Go to next record in this updater, returns true if successful.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="performUpdate">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, false if failed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Do the actual update in the database, returns true if successful.
There are 3 types of possible use with the foundset updater
1) update entire foundset by a single sql statement; that is not possible when the table of the foundset has tracking enabled then it will loop over the whole foundset. 
   When a single sql statement is done, modification columns will not be updated and associated Table Events won't be triggered, because it does the update directly in the database, without getting the records.
  NOTE: this mode will refresh all foundsets based on same datasource
2) update part of foundset, for example the first 4 row (starts with selected row)
3) safely loop through foundset (starts with selected row)

after the perform update call there are no records in edit mode, that where not already in edit mode, because all of them are saved directly to the database, 
or in mode 1 the records are not touched at all and the database is updated directly.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Do the actual update in the database, returns true if successful.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="resetIterator">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start over with this iterator 'next' function (at the foundset selected record).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start over with this iterator 'next' function (at the foundset selected record).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',++count)
}
fsUpdater.resetIterator()
while(fsUpdater.next())
{
	fsUpdater.setColumn('max_flag',count)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succeeded, false if failed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the column value to update, returns true if successful.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the column value to update, returns true if successful.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to update.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The new value (can be an array with data for x number of rows) to be stored in the specified column.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSHeader" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSHeader">
      <properties>
        <property clientSupport="mc" name="sticky">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Flag to set a set the header sticky so it will not scroll out of view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Flag to set a set the header sticky so it will not scroll out of view.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var header = form.newHeader()
header.sticky = false // default: true]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.styleClass = 'myBody';]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getHeaderText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"><![CDATA[a JSTitle object if the header text exists, null otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns the header text label on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns the header text label on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var title = header.getHeaderText()
title.text = 'Customers']]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="getLeftButton">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a JSButton object if the left-button exists, null otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns the left-button on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns the left-button on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var button = header.getLeftButton()
button.iconType = JSButton.ICON_HOME]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="getRightButton">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a JSButton object if the right-button exists, null otherwise]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns the right-button on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns the right-button on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var button = header.getRightButton()
button.iconType = JSButton.ICON_GEARS]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="newHeaderText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"><![CDATA[a new JSTitle object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new header text label on the form header.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new header text label on the form header.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var header = form.newHeader()
var title = header.newHeaderText('Contacts')]]></sample>
          </samples>
          <parameters>
            <parameter name="text">
              <description><![CDATA[the text on the header]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newLeftButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new left-button on the form header.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new left-button on the form header.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var header = form.newHeader()
var button = header.newLeftButton('back', form.getMethod('goBack'))]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="jsmethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newRightButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new right-button on the form header.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new right-button on the form header.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource);
var header = form.newHeader()
var button = header.newRightButton('save', form.getMethod('doSave'))]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="jsmethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="removeHeaderText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if header text existed and was removed]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Remove the header text label on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Remove the header text label on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var removed = header.removeHeaderText()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="removeLeftButton">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if button existed and was removed]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Remove the left-button on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Remove the left-button on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var removed = header.removeLeftButton()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="removeRightButton">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if button existed and was removed]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Remove the right-button on the form header if present.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Remove the right-button on the form header if present.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.getForm('myform');
var header = form.getHeader()
var removed = header.removeRightButton()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSInsetList" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSInsetList">
      <properties>
        <property clientSupport="mc" name="countDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This dataprovider's value will be presented as a 'count bubble' in each item of the list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This dataprovider's value will be presented as a 'count bubble' in each item of the list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="dataIconDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The predefined icon of this data-provider will appear on items in the list; if not specified, 'dataIconType' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The predefined icon of this data-provider will appear on items in the list; if not specified, 'dataIconType' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="dataIconType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This predefined icon will appear on items in the list if 'dataIconDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This predefined icon will appear on items in the list if 'dataIconDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="headerDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The text of this data-provider will appear on top of the inset list; if not specified, 'headerText' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The text of this data-provider will appear on top of the inset list; if not specified, 'headerText' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var insetList = jsform.getInsetList('il1');

var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.name = 'il2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="headerStyleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The styleClass of the list header. Can have values from 'a' to 'e'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The styleClass of the list header.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.headerStyleClass = 'e';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="headerText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[This text will appear on top of the inset list if 'headerDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[This text will appear on top of the inset list if 'headerDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var insetList = jsform.getInsetList('il1');

var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.name = 'il2';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="listStyleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The styleClass of the list. Can have values from 'a' to 'e'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The styleClass of the list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.listStyleClass = 'e';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The name of this inset list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The name of this inset list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var insetList = jsform.getInsetList('il1');

var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.name = 'il2';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This action will be executed when an item in the list is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This action will be executed when an item in the list is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="relationName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Name of the relation to be used by the inset list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Name of the relation to be used by the inset list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var insetList = jsform.getInsetList('il1');

var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.name = 'il2';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="subtext">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This text will appear as the secondary (smaller) text of items in the list if 'subtextDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This text will appear as the secondary (smaller) text of items in the list if 'subtextDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="subtextDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text of this data-provider will appear as the secondary (smaller) text of items in the list; if not specified, 'subtext' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text of this data-provider will appear as the secondary (smaller) text of items in the list; if not specified, 'subtext' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This text will appear as the main text of items in the list if 'textDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This text will appear as the main text of items in the list if 'textDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="textDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text of this data-provider will appear as the main text of items in the list; if not specified, 'text' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text of this data-provider will appear as the main text of items in the list; if not specified, 'text' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.x = 90;
newInsetList.y = 90;
application.output('location of newInsetList: ' + newInsetList.x + ', ' + newInsetList.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var newInsetList = jsform.newInsetList(8,insetList.dataSource,insetList.relationName,insetList.headerText,insetList.textDataProviderID);
newInsetList.x = 90;
newInsetList.y = 90;
application.output('location of newInsetList: ' + newInsetList.x + ', ' + newInsetList.y);]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSLabel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSLabel" scriptingName="JSLabel">
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displaysTags">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %% on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by %%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var label = form.newLabel('You are viewing record no. %%parent_table_id%%. You are running on server %%serverURL%%.', 
					10, 10, 600, 100);
label.displaysTags = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying data(using dataProviderID) in the label/button.
Some examples are "#%", "dd-MM-yyyy", "MM-dd-yyyy", etc.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying data(using dataProviderID) in the label/button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var label = form.newLabel('', 10, 10, 100, 100);
label.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="horizontalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageMedia">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The image Media object that should be displayed inside the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The image Media object that should be displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var label = form.newLabel('', 10, 10, 100, 100);
label.imageMedia = ballImage;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="labelFor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Some components can be set to be labels of other components. This is useful in
two situations. In table view mode it is used for constructing the header of the
table. In record view mode, by setting mnemonics on the label, keyboard shortcuts
can be used to set the focus to fields.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Some components can be set to be labels of other components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="labelSize">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Size property for a label, values 1 to 60 correspond to header class h1 to h6]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Size property for a label, values 1 to 60 correspond to header class h1 to h6]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var label = form.newLabel('Hello', 1);
label.labelSize = 2 // corresponds to header class h2]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="margin">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, left, bottom, right.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The margins of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mediaOptions">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Options to scale the image Media object that is displayed inside the component.
Can be set to one or a combination of CROP, REDUCE, ENLARGE and KEEPASPECT.

REDUCE will scale down the image if the component is smaller than the image.
REDUCE combined with KEEPASPECT will reduce the image, but keep its aspect ratio.
This is useful when the component has other proportions than the image.

ENLARGE will scale up the image if the component is larger than the image.
ENLARGE combined with KEEPASPECT will scale up the image while keeping its aspect ratio.

CROP will leave the image at its original size. If the component is smaller than
the image this will result in only a part of the image showing up.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Options to scale the image Media object that is displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load two images, a big one and a small one.
var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
// Put the big image in several small labels, with different media options.
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
// Put the small image in several big labels, with different media options.
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The keyboard shortcut that activates this component. A letter must be specified,
and the actual shortcut will be combination of ALT + the specified letter.

This property can be used in two ways. Normally the keyboard shortcut activates
the onClick event of the component. But if the "labelFor" property is set for the
component, then the keyboard shortcut will move the focus to the component whose
label this component is.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The keyboard shortcut that activates this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var btn = form.newButton('I am a button', 10, 40, 200, 20, m);
btn.mnemonic = 'B'; // When ALT-B is pressed the mouse will respond as if clicked.
var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O'; // When ALT-O is pressed the focus will move to fieldOne.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onDoubleClick">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is double clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is double clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRender">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[label.onRender = form.newMethod('function onRender(event) { event.getElement().bgcolor = \'#00ff00\' }');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onRightClick">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverCursor">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The cursor that is shown as the mouse is rolled over the component.
Possible options are DEFAULT and HAND. Note that roll over cursor is not supported in Smart client for list view and tableview forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The cursor that is shown as the mouse is rolled over the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageMedia">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The roll over image Media object used. It will only work if a property image is also used.
When the mouse is moved over the component, this image Media will be displayed.
When the mouse is moved out of the component, whatever text or image was being initially
displayed will be restored. Note that roll over image is not supported in Smart client for list view and tableview forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The roll over image Media object used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var mapBytes = plugins.file.readFile('d:/map.jpg');
var mapImage = solutionModel.newMedia('map.jpg', mapBytes);
var label = form.newLabel('', 10, 10, 200, 200);
label.imageMedia = mapImage;
label.rolloverImageMedia = ballImage;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rotation">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The rotation of the element. You can choose 0, 90, 180, or 270 and the label is rotated accordingly.
This property also applies to buttons and images.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The rotation of the element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 200, m);
label.rotation = 90;
var btn = form.newButton('And I am a button', 10, 220, 200, 20, m);
btn.rotation = 180;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showClick">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set, the element will show the clicked state when selected.
Applies to labels and buttons and images only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set, the element will show the clicked state when selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create a form method.
var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
// Create a label with the method attached to its onClick event.
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
// By default the label does not visually react to clicks, but we can enable this.
// Basically the label will now behave as a button does.
label.showClick = true;
// Create a button with the same method attached to its onClick event.
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
// By default the button visually reacts to onClick, but we can disable this.
// Then the button will behave like a label does.
btn.showClick = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showFocus">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set the text of an element will showfocus when selected.
Applies to labels and buttons only.
The text property for the element MUST be filled in first.

NOTE: The TAB key may also be used to select the element, depending
on the operating system being used and the selected LAF.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set the text of an element will showfocus when selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var m = form.newMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
label.showFocus = false;
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
btn.showFocus = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabSeq">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The text that is displayed inside the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The text that is displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// In general the text is specified when creating the component.
var label = form.newLabel('Initial text', 10, 10, 100, 20);
// But it can be changed later if needed.
label.text = 'Changed text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example:
<html>This includes<b>bolded text</b> and
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="verticalAlignment">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var label = form.newLabel('Customers', 1);
label.getTitle().text = 'Some text'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnActionMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnAction(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnDoubleClickMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnDoubleClick(JSMethod).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnRightClickMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 4.1, replaced by setOnRightClick(JSMethod).]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSLayoutContainer" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer" scriptingName="JSLayoutContainer">
      <properties>
        <property clientSupport="ng,wc,sc" name="cssClasses">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The css classes to be output for html tag.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The css classes to be output for html tag.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.cssClasses = 'myContainer';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="elementId">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The id to be output for html tag.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The id to be output for html tag.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.elementId = 'rowCol';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.name = 'col1';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="style">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The style definition to be output in html tag.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The style definition to be output in html tag.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.style = "background-color:'red'";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tagType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The tag type for html output. Default value is 'div'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The tag type for html output.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.tagType = 'span';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get/set x location. Location is used for ordering in html output.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get/set x location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.x = 100;;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get/set Y location. Location is used for ordering in html output.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get/set Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[layoutContainer.y = 100;;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="getBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean" typecode="com.servoy.j2db.scripting.solutionmodel.JSBean"><![CDATA[a JSBean object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSBean that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSBean that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var btn = myForm.getBean("mybean");
application.output(mybean.className);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the bean]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getBeans">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSBean;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var beans = myForm.getBeans();
for (var b in beans)
{
	if (beans[b].name != null)
		application.output(beans[b].name);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getBeans">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSBean;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSBeans of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var beans = myForm.getBeans();
for (var b in beans)
{
	if (beans[b].name != null)
		application.output(beans[b].name);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a JSButton object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSButton that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSButton that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var btn = myForm.getButton("hello");
application.output(btn.text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the button]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getButtons">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var buttons = myForm.getButtons();
for (var b in buttons)
{
	if (buttons[b].name != null)
		application.output(buttons[b].name);
	else
		application.output(buttons[b].text + " has no name ");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getButtons">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var buttons = myForm.getButtons();
for (var b in buttons)
{
	if (buttons[b].name != null)
		application.output(buttons[b].name);
	else
		application.output(buttons[b].text + " has no name ");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[a JSComponent object (might be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal, JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var cmp = frm.getComponent("componentName");
application.output("Component type and name: " + cmp);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getComponents">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;"><![CDATA[an array of all the JSComponents on the form.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var components = form.getComponents();
for (var i in components)
	application.output("Component type and name: " + components[i]);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getComponents">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;"><![CDATA[an array of all the JSComponents on the form.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal,JSBean or JSTabPanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var components = form.getComponents();
for (var i in components)
	application.output("Component type and name: " + components[i]);]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The field with the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The field with the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm("myForm");
var field = form.getField("myField");
application.output(field.dataProviderID);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the field]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getFields">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;"><![CDATA[all JSField objects of this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var fields = frm.getFields();
for (var f in fields)
{
	var fname = fields[f].name;
	if (fname != null)
		application.output(fname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFields">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;"><![CDATA[all JSField objects of this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var fields = frm.getFields();
for (var f in fields)
{
	var fname = fields[f].name;
	if (fname != null)
		application.output(fname);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from the parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object (or null if the label with the specified name does not exist)]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSLabel that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns a JSLabel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var label = frm.getLabel("myLabel");
application.output(label.text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the label]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getLabels">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;"><![CDATA[all JSLabels on this form]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSLabels of this form (not including its super form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns all JSLabels of this form (not including its super form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var labels = frm.getLabels();
for (var i in labels)
{
	var lname = labels[i].name;
	if (lname != null)
		application.output(lname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabels">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;"><![CDATA[all JSLabels on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSLabels of this form (optionally including it super forms labels), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSLabels of this form (optionally including it super forms labels), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var labels = frm.getLabels();
for (var i in labels)
{
	var lname = labels[i].name;
	if (lname != null)
		application.output(lname);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getLayoutContainer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer" typecode="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer"><![CDATA[a JSLayoutContainer object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSLayoutContainer that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSLayoutContainer that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var container = myForm.getLayoutContainer("row1");
application.output(container.name);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the container]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getLayoutContainers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLayoutContainer;"><![CDATA[all JSLayoutContainers objects of this container]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSLayoutContainers objects of this container]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSLayoutContainers objects of this container]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var containers = frm.getLayoutContainers();
for (var c in containers)
{
		var fname = containers[c].name;
		application.output(fname);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal" typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSPortal that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSPortal that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portal = frm.getPortal("myPortal");
portal.initialSort = 'my_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the portal]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortals">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPortal;"><![CDATA[an array of all JSPortal objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (not including the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (not including the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portals = frm.getPortals();
for (var i in portals)
{
	var p = portals[i];
	if (p.name != null)
		application.output(p.name);
	else
		application.output("unnamed portal detected");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getPortals">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPortal;"><![CDATA[an array of all JSPortal objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (optionally also the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSPortal objects of this form (optionally also the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var portals = frm.getPortals();
for (var i in portals)
{
	var p = portals[i];
	if (p.name != null)
		application.output(p.name);
	else
		application.output("unnamed portal detected");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSTabPanel that has the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSTabPanel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanel = frm.getTabPanel("myTabPanel");
var tabs = tabPanel.getTabs();
for (var i=0; i<tabs.length; i++)
	application.output("Tab " + i + " has text " + tabs[i].text);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the tabpanel]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanels">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTabPanel;"><![CDATA[an array of all JSTabPanel objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (not including the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (not including the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanels = frm.getTabPanels();
for (var i in tabPanels)
{
	var tp = tabPanels[i];
	if (tp.name != null)
		application.output("Tab " + tp.name + " has text " + tp.text);
	else
		application.output("Tab with text " + tp.text + " has no name");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabPanels">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTabPanel;"><![CDATA[an array of all JSTabPanel objects on this form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (optionally the ones from the parent form), including the ones without a name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all JSTabPanels of this form (optionally the ones from the parent form), including the ones without a name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var tabPanels = frm.getTabPanels();
for (var i in tabPanels)
{
	var tp = tabPanels[i];
	if (tp.name != null)
		application.output("Tab " + tp.name + " has text " + tp.text);
	else
		application.output("Tab with text " + tp.text + " has no name");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="returnInheritedElements" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to also return the elements from parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSBean" typecode="com.servoy.j2db.scripting.solutionmodel.JSBean"><![CDATA[a JSBean object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSBean object on the form - including the name of the JSBean object; the classname the JSBean object is based on, the "x" and "y" position of the JSBean object in pixels, as well as the width and height of the JSBean object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSBean object on the form - including the name of the JSBean object; the classname the JSBean object is based on, the "x" and "y" position of the JSBean object in pixels, as well as the width and height of the JSBean object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'db:/server1/table1', null, true, 800, 600);
var bean = form.newBean('bean','com.servoy.extensions.beans.dbtreeview.DBTreeView',200,200,300,300);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSBean object]]></description>
            </parameter>
            <parameter name="className" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the class name of the JSBean object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSBean object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSBean object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var method = form.newMethod('function onAction(event) { application.output("onAction intercepted on " + event.getFormName()); }');
var button = form.newButton('myButton', 10, 10, 100, 30, method);
application.output("The new button: " + button.name + " has the following onAction event handling method assigned " + button.onAction.getName());]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the button]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the button]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CALENDAR]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newCalendar(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CHECK (checkbox)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newCheck(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newComboBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of COMBOBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var calendar = form.newComboBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object (of the specified display type)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var variable = form.newVariable('myVar', JSVariable.TEXT);
variable.defaultValue = "'This is a default value (with triple quotes)!'";
var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newHtmlArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object on the form with the displayType of HTML_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var textProvider = form.newVariable('myVar',JSVariable.TEXT);
textProvider.defaultValue = "'This is a triple quoted text!'";
var htmlArea = myListViewForm.newHtmlArea(textProvider,100,100,100,100);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newImageMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of IMAGE_MEDIA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var myMediaVar = form.newVariable("media", JSVariable.MEDIA);
var imageMedia = form.newImageMedia(myMediaVar,100,100,200,200)
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var label = form.newLabel('The text on the label', 140, 140, 50, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the label object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the label object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and a JSMethod action such as the method for an onAction event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and a JSMethod action such as the method for an onAction event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var label = form.newLabel('The text on the label', 140, 140, 50, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the label object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the label object in pixels]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the event action JSMethod of the label object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newLayoutContainer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer" typecode="com.servoy.j2db.scripting.solutionmodel.JSLayoutContainer"><![CDATA[the new layout container]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new layout container. The location is used to determine the generated order in html markup.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new layout container.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var container = form.newLayoutContainer('col-md-4',0,0);]]></sample>
          </samples>
          <parameters>
            <parameter name="cssClasses" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[css classes used for layout]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[location x]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[location y]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newListBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of LISTBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var list = form.newListBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newMultiSelectListBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of MULTISELECT_LISTBOX]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of MULTISELECT_LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of MULTISELECT_LISTBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var calendar = form.newMultiSelectListBox(myDataProvider, 100, 100, 200, 200);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of PASSWORD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var pass = form.newPassword(scopes.globals.aVariable, 100, 100, 70, 30);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSPortal" typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'db:/server1/table1', null, true, 800, 600);
var relation = solutionModel.newRelation('parentToChild','db:/server1/table1','db:/server2/table2',JSRelation.INNER_JOIN);
relation.newRelationItem('another_parent_table_id', '=', 'another_child_table_parent_id');
var portal = form.newPortal('portal',relation,200,200,300,300);
portal.newField('someColumn',JSField.TEXT_FIELD,200,200,120);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal object]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the relation of the JSPortal object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSPortal object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RADIOS (radio buttons)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', myDatasource, null, true, 800, 600);
var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES);
vlist.customValues = "value1\nvalue2\nvalue3";
var radios = form.newRadios('columnDataProvider',100,100,200,200);
radios.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRtfArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RTF_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var rtf_area = form.newRtfArea('columnDataProvider',100,100,100,100);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newSpinner">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of SPINNER]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of SPINNER - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of SPINNER - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
var spinner = form.newSpinner(myDataProvider, 10, 460, 100, 20);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('parentForm','db:/server1/parent_table',null,false,640,480);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20);
var parentToChild = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
var childTwo = solutionModel.newForm('childTwo','db:/server1/my_table',null,false,400,300);
childTwo.newField('my_table_image', JSField.IMAGE_MEDIA,10,10,100,100);
var tabPanel = form.newTabPanel('tabs',10,10,620,460);
tabPanel.newTab('tab1','Child One',childOne,parentToChild);
tabPanel.newTab('tab2','Child Two',childTwo);
forms['parentForm'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_AREA]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var globalVar = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
globalVar.defaultValue = "'Type your text in here'";
var textArea = form.newTextArea(globalVar,100,100,300,150);
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_FIELD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
//choose the dataprovider or jsvariable you want for the Text Field
var x = null;
//global jsvariable as the dataprovider
//x = solutionModel.newGlobalVariable('globals', 'myGlobal',JSVariable.TEXT);
//x.defaultValue = "'Text from a global variable'";
//or a form jsvariable as the dataprovider
//x = form.newVariable('myFormVar',JSVariable.TEXT);
//x.defaultValue = "'Text from a form variable'";
var textField = form.newTextField(x,100,100,200,50);
//or a column data provider as the dataprovider
//textField.dataProviderID = columnTextDataProvider;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTypeAhead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TYPE_AHEAD]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newForm1',myDatasource,null,true,800,600);
var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES);
vlist.customValues = "value1\nvalue2\nvalue3";
var typeAhead = form.newTypeAhead(columnTextDataProvider,100,100,300,200);
typeAhead.valuelist = vlist;
forms['newForm1'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeBean">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSBean has been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSBean that has the specified name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSBean that has the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.getForm('myform');
form.removeBean('mybean')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSBean to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSButton has been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSButton that has the specified name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSButton that has the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var b1 = form.newButton('This is button1',100,100,200,50,null);
b1.name = 'b1';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeButton('b1') == true) application.output('Button has been removed ok'); else application.output('Button could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var b2 = form.newButton('Click here to remove button1',100,230,200,50,jsmethod);
b2.name = 'b2';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSButton to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if component has been successfully deleted; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSBean, JSTabpanel) that has the given name. It is the same as calling "if(!removeLabel(name) &amp;&amp; !removeButton(name) ....)".
Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSBean, JSTabpanel) that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX','db:/server1/parent_table',null,true,1000,750);
var jsbutton = form.newButton('JSButton to delete',100,100,200,50,null);
jsbutton.name = 'jsb';
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsfield = form.newField('scopes.globals.myGlobalVariable',JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var relation = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
relation.newRelationItem('parent_table_id', '=', 'child_table_id');
var jsportal = form.newPortal('jsp',relation,100,400,300,300);
jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_id', JSField.TEXT_FIELD,10,10,100,20);
var childTwo = solutionModel.newForm('childTwo','server1','other_table',null,false,400,300);
childTwo.newField('some_table_id', JSField.TEXT_FIELD,10,10,100,100);
var jstabpanel = form.newTabPanel('jst',450,30,620,460);
jstabpanel.newTab('tab1','Child One',childOne,relation);
jstabpanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if ((form.removeComponent('jsb') == true) && (form.removeComponent('jsl') == true) && (form.removeComponent('jsf') == true) && (form.removeComponent('jsp') == true) & (form.removeComponent('jst') == true)) application.output('Components removed ok'); else application.output('Some component(s) could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove form components',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component to be deleted]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is the JSField has been successfully removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSField that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSField that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var jsfield = form.newField(scopes.globals.myGlobalVariable,JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsf') == true) application.output('Field has been removed ok'); else application.output('Field could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the field',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSField to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSLabel with the given name has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSLabel that has the given name. Returns true if removal successful, false otherwise]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes a JSLabel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,1000,750);
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeComponent('jsl') == true) application.output('Label has been removed'); else application.output('Label could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the green label',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSLabel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removePortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the JSPortal has successfully been removed; false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSPortal that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSPortal that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX',myDatasource,null,true,800,600);
var relation = solutionModel.newRelation('parentToChild','db:/server1/myTable','db:/server1/myOtherTable',JSRelation.INNER_JOIN);
relation.newRelationItem('parent_table_id', '=', 'child_table_id');
var jsportal = form.newPortal('jsp',relation,100,400,300,300);
jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsp') == true) application.output('Portal removed ok'); else application.output('Portal could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the portal',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is the JSTabPanel has been successfully removed, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a JSTabPanel that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a JSTabPanel that has the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('newFormX','db:/server1/parent_table',null,false,800,600);
var childOne = solutionModel.newForm('childOne','db:/server1/child_table',null,false,400,300);
childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20);
var parentToChild = solutionModel.newRelation('parentToChild','db:/server1/parent_table','db:/server1/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_id');
var childTwo = solutionModel.newForm('childTwo','db:/server1/another_table',null,false,400,300);
childTwo.newField('columnDataProvider', JSField.TEXT_FIELD,10,10,100,100);
var tabPanel = form.newTabPanel('jst',10,10,620,460);
tabPanel.newTab('tab1','Child One',childOne,parentToChild);
tabPanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jst') == true)\n application.output('TabPanel has been removed ok');\n else\n application.output('TabPanel could not be deleted');\n forms['newFormX'].controller.recreateUI();\n}");
var removerButton = form.newButton('Click here to remove the tab panel',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSList" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSList">
      <properties>
        <property clientSupport="mc" name="countDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This dataprovider's value will be presented as a 'count bubble' in each item of the list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This dataprovider's value will be presented as a 'count bubble' in each item of the list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="dataIconDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The predefined icon of this data-provider will appear on items in the list; if not specified, 'dataIconType' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The predefined icon of this data-provider will appear on items in the list; if not specified, 'dataIconType' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="dataIconType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This predefined icon will appear on items in the list if 'dataIconDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This predefined icon will appear on items in the list if 'dataIconDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="listStyleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The styleClass of the list. Can have values from 'a' to 'e'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The styleClass of the list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.listStyleClass = 'e';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This action will be executed when an item in the list is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This action will be executed when an item in the list is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="subtext">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This text will appear as the secondary (smaller) text of items in the list if 'subtextDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This text will appear as the secondary (smaller) text of items in the list if 'subtextDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="subtextDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text of this data-provider will appear as the secondary (smaller) text of items in the list; if not specified, 'subtext' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text of this data-provider will appear as the secondary (smaller) text of items in the list; if not specified, 'subtext' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[This text will appear as the main text of items in the list if 'textDataProviderID' is not set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[This text will appear as the main text of items in the list if 'textDataProviderID' is not set.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="textDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text of this data-provider will appear as the main text of items in the list; if not specified, 'text' will be used instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text of this data-provider will appear as the main text of items in the list; if not specified, 'text' will be used instead.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getForm('created_by_sm_1').getInsetList(solutionModel.getForm('il1');

var newList = solutionModel.newListForm('created_by_sm_3', list.dataSource, list.textDataProviderID);
newList.onAction = newList.getForm().newMethod('function aMethod(event){application.output("Hello world!");}');]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc" name="getForm">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[the list's form.]]></return>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Returns the list's form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Returns the list's form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[newFormList.getForm().dataprovider = formList.getForm().dataprovider;]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSMedia" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMedia">
      <properties>
        <property clientSupport="ng,wc,sc" name="bytes">
          <return type="byte[]" typecode="[B"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A byte array holding the content of the Media object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A byte array holding the content of the Media object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mimeType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The MIME type of the Media object.

Some examples are: 'image/jpg', 'image/png', etc.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The MIME type of the Media object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[A String holding the name of this Media object.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the Media object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the Media object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this media]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this media]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ballImg = plugins.file.readFile('d:/ball.jpg');
application.output(ballImg.getUUID().toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSMethod" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMethod" scriptingName="JSMethod">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="code">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The full source code of this method (including doc and function declaration).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The full source code of this method (including doc and function declaration).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var method = form.newMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="showInMenu">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the method appears or not in the "Methods" menu of Servoy Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the method appears or not in the "Methods" menu of Servoy Client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method = form.newMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="getArguments">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[Array of the arguments, null if not specified.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the argument array for this method if that is set for the specific action this method is taken from.
Will return null by default. This is only for reading, you can't alter the arguments through this array, 
for that you need to create a new object through solutionModel.wrapMethodWithArguments(..) and assign it again.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the argument array for this method if that is set for the specific action this method is taken from.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var frm = solutionModel.getForm("myForm");
var button = frm.getButton("button");
// get the arguments from the button.
// NOTE: string arguments will be returned with quotes (comp.onAction.getArguments()[0] == '\'foo\' evals to true)
var arguments = button.onAction.getArguments();
if (arguments && arguments.length > 1 && arguments[1] == 10) { 
	// change the value and assign it back to the onAction.
	arguments[1] = 50;
	button.onAction = solutionModel.wrapMethodWithArguments(button.onAction,arguments);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[A String holding the name of this method.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the method.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the method.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var method = form.newMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getScopeName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get scope name]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get scope name]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var methods = solutionModel.getGlobalMethods(); 
for (var x in methods) 
	application.output(methods[x].getName() + ' is defined in scope ' + methods[x].getScopeName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the method object]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the method object]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var method = form.newMethod('function original() { application.output("Original function."); }');
application.output(method.getUUID().toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSBase" publicName="JSPart" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPartWithConstants" scriptingName="JSPart">
      <constants>
        <constant clientSupport="ng,wc,sc" name="BODY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

This is the default part that is repeated for each record (being 
displayed and/or printed).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FOOTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.

A footer is displayed at the bottom of each page when printed ad can
contain summaries of the current selection of records. In List view, the 
footer is displayed at the bottom of the list of records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var footer = form.newPart(JSPart.FOOTER, 440);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HEADER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

A header is displayed at the top of each page when printed and can contain
summaries of the current selection of records. In List view the header is
displayed above the list of records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var header = form.newPart(JSPart.HEADER, 80);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEADING_GRAND_SUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

A Leading Grand Summary can be placed before the body part. It can contain
summary fields that will generate summaries for the entire foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leadingGrandSummary = form.newPart(JSPart.LEADING_GRAND_SUMMARY, 120);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEADING_SUBSUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

A Leading Subsummary can be placed before the body part. There can be multiple Leading Subsummaries
per form. Each Subsummary part has a set of Group By fields which are used to group data together.
Each Subsummary part can contain summary fields, which will be printed once for each group of data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TITLE_FOOTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

Appears once on the first page of a printed report. If a Footer is available, it is
replaced by the Title Footer on the first page.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleFooter = form.newPart(JSPart.TITLE_FOOTER, 500);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TITLE_HEADER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

Appears only once on the first page of a printed report or on top of the first screen
of a foundset. If a Header is available it is replace by the Title Header on the first
page.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleHeader = form.newPart(JSPart.TITLE_HEADER, 40);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TRAILING_GRAND_SUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

A Trailing Grand Summary can be placed after the body part. It can contain
summary fields that will generate summaries for the entire foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var trailingGrandSummary = form.newPart(JSPart.TRAILING_GRAND_SUMMARY, 400);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TRAILING_SUBSUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts. 

A Trailing Subsummary can be placed before the body part. There can be multiple Trailing Subsummaries
per form. Each Subsummary part has a set of Group By fields which are used to group data together.
Each Subsummary part can contain summary fields, which will be printed once for each group of data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var trailingSubsummary = form.newPart(JSPart.TRAILING_SUBSUMMARY, 360);]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="wc,sc" name="allowBreakAcrossPageBounds">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, the remainder of a selected part that does not fit on the page currently
being printed, will not be transported to the next page - it will break where the page
ends and continue on the next page.

NOTE: Make sure to set this option when you are printing more than one page per record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, the remainder of a selected part that does not fit on the page currently
being printed, will not be transported to the next page - it will break where the page
ends and continue on the next page.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.allowBreakAcrossPageBounds = true;
body.discardRemainderAfterBreak = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the form part.

NOTE: When no background color has been set, the default background
color will be determined by the Look and Feel (LAF) that has been selected
in Application Preferences.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the form part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.background = 'green';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="discardRemainderAfterBreak">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, the remainder of a selected part that is broken due to the page
ending will not be printed on the next page - it will be discarded.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, the remainder of a selected part that is broken due to the page
ending will not be printed on the next page - it will be discarded.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.allowBreakAcrossPageBounds = true;
body.discardRemainderAfterBreak = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupbyDataProviderIDs">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[For Leading Subsummary or Trailing Subsummary parts, one or more
dataproviders can be added as Break (GroupBy) dataproviders. The
Leading/Trailing Subsummary parts will be displayed once for each
resulted group of data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[For Leading Subsummary or Trailing Subsummary parts, one or more
dataproviders can be added as Break (GroupBy) dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);
leadingSubsummary.groupbyDataProviderIDs = 'my_table_text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height of a selected part; specified in pixels.

This height property is the lowerbound as its ending Y value (0 == top of the form).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height of a selected part; specified in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var part = form.newPart(JSPart.HEADER, 100);
part.height = 200;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="pageBreakAfterOccurrence">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[A page break will be inserted after a specified number of occurences of a selected part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[A page break will be inserted after a specified number of occurences of a selected part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.pageBreakAfterOccurrence = 2;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="pageBreakBefore">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, a page break will be inserted before each occurrence of a selected part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, a page break will be inserted before each occurrence of a selected part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);
leadingSubsummary.groupbyDataProviderIDs = 'my_table_text';
leadingSubsummary.pageBreakBefore = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="restartPageNumber">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, page numbering will be restarted after each occurrence of a selected part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, page numbering will be restarted after each occurrence of a selected part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var trailingSubsummary = form.newPart(JSPart.TRAILING_SUBSUMMARY, 360);
trailingSubsummary.groupbyDataProviderIDs = 'my_table_text';
trailingSubsummary.restartPageNumber = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sinkWhenLast">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[When set, the last part on a page (such as a Trailing Grand Summary part) will
"sink" to the lowest part of the page when there is free space.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[When set, the last part on a page (such as a Trailing Grand Summary part) will
"sink" to the lowest part of the page when there is free space.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var trailingGrandSummary = form.newPart(JSPart.TRAILING_GRAND_SUMMARY, 400);
trailingGrandSummary.sinkWhenLast = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Cascading Style Sheet (CSS) class name applied to the part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.styleClass = 'myBody';]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getPartType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[A number representing the type of the form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type of this part.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type of this part.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getPartYOffset">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[A number holding the Y offset of the form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Y offset of the part on the form, this will include all the super forms parts if this form extends a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Y offset of the part on the form, this will include all the super forms parts if this form extends a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSPassword" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPassword">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[field.placeholderText = 'Search';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSPortal" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPortal">
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="initialSort">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The default sort order for the rows displayed in the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The default sort order for the rows displayed in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',100,100,20);
childrenPortal.newTextField('child_table_parent_id', 200, 100, 20);
childrenPortal.initialSort = 'child_table_text desc';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="multiLine">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, portal rows can have a custom layout of fields, buttons, etc. displayed for each
matching row (rather than the default "grid").]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, portal rows can have a custom layout of fields, buttons, etc.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
// Set the fields some distance apart horizontally. By default this distance
// is ignored and the components are put in a grid.
var idField = childrenPortal.newTextField('child_table_id', 0, 100, 20);
idField.background = 'yellow';
var textField = childrenPortal.newTextField('child_table_text',150,100,20);
textField.background = 'green';
var parentIdField = childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
parentIdField.background = 'orange';
// Disable the grid placing of components, and make the distance between components
// become active.
childrenPortal.multiLine = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDrag">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDragEnd">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDragOver">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onDrop">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[form.onDrag = form.newMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="onRender">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The method that is executed when the component is rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[portal.onRender = form.newMethod('function onRender(event) { event.getElement().bgcolor = \'#00ff00\' }');]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="relationName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The name of the relationship between the table related to the currently active 
form and the table you want to show data from in the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The name of the relationship between the table related to the currently active 
form and the table you want to show data from in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[// Create the portal based on one relation.
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var idField = childrenPortal.newTextField('child_table_id', 0, 100, 20);
var textField = childrenPortal.newTextField('child_table_text',150,100,20);
var parentIdField = childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Now make the portal be based on another relation.
childrenPortal.relationName = 'parent_to_smaller_children';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="reorderable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, the portal rows can be re-ordered by dragging the column headers.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, the portal rows can be re-ordered by dragging the column headers.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.reorderable = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="resizable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set the portal rows can be resized by users.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set the portal rows can be resized by users.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Make the columns resizable. By default they are not resizable.
childrenPortal.resizable = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" deprecated="true" name="resizeble">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set the portal rows can be resized by users.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set the portal rows can be resized by users.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #getResizable().]]></deprecated>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Make the columns resizable. By default they are not resizable.
childrenPortal.resizeble = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" deprecated="true" name="rowBGColorCalculation">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The calculation dataprovider (such as servoy_row_bgcolor) used to add background
color and highlight selected or alternate portal rows.

NOTE: This property has been deprecated and is kept visible for legacy purposes. Use CSS Row Styling & onRender event instead.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The calculation dataprovider (such as servoy_row_bgcolor) used to add background
color and highlight selected or alternate portal rows.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by onRender event.]]></deprecated>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Set the row background color calculation. The name should be of a calculation that
// exists in the table.
childrenPortal.rowBGColorCalculation = 'row_color';]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="rowHeight">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The height of each row in pixels. If 0 or not set, the height defaults to 10.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The height of each row in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.rowHeight = 30;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="scrollbars">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;
var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;
var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="showHorizontalLines">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, the portal displays horizontal lines between the rows.

NOTE:
In a multi-line portal, a horizontal line is only displayed
in the selected row; to display a horizontal line in all rows, add a
line to the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, the portal displays horizontal lines between the rows.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.showHorizontalLines = true;
childrenPortal.showVerticalLines = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="showVerticalLines">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set the portal displays vertical lines between the columns.

NOTE:
In a multi-line portal, a vertical line is only displayed
in the selected row; to display a vertical line in all rows, add
a line to the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set the portal displays vertical lines between the columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.showHorizontalLines = true;
childrenPortal.showVerticalLines = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="sortable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[When set, users can sort the contents of the portal by clicking on the column headings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[When set, users can sort the contents of the portal by clicking on the column headings.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.sortable = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="tabSeq">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="wc,sc" name="getButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[A JSButton instance that corresponds to the button with the specified name.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves a button from the portal based on the name of the button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves a button from the portal based on the name of the button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var clickMethod = form.newMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var btn = childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);
btn.name = 'clickMeBtn'; // Give a name to the button, so we can retrieve it by name later.
// Retrieve the button by name and do something with it.
var btnBack = childrenPortal.getButton('clickMeBtn');
btnBack.background = 'yellow';
// Retrieve the button through the array of all buttons and do something with it.
var allButtons = childrenPortal.getButtons();
var btnBackAgain = allButtons[0];
btnBackAgain.foreground = 'red';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the button to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="getButtons">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;"><![CDATA[An array with all buttons in the portal.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves an array with all buttons in the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves an array with all buttons in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var clickMethod = form.newMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var btn = childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);
btn.name = 'clickMeBtn'; // Give a name to the button, so we can retrieve it by name later.
// Retrieve the button by name and do something with it.
var btnBack = childrenPortal.getButton('clickMeBtn');
btnBack.background = 'yellow';
// Retrieve the button through the array of all buttons and do something with it.
var allButtons = childrenPortal.getButtons();
var btnBackAgain = allButtons[0];
btnBackAgain.foreground = 'red';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance corresponding to the field with the specified name.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves a field from this portal based on the name of the field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves a field from this portal based on the name of the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 60, 60, 20);
tfield.name = 'textField'; // Give a name to the field so we can retrieve it later by name.
// Retrieve the text field by its name and do something with it.
var textFieldBack = childrenPortal.getField('textField');
textFieldBack.background = 'yellow';
// Retrieve the calendar field through the array of all fields and do something with it.
var allFields = childrenPortal.getFields();
var calFieldBack = allFields[0];
calFieldBack.foreground = 'red';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the field to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="getFields">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;"><![CDATA[An array with JSField instances corresponding to all fields in the portal.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves an array with all fields in a portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves an array with all fields in a portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 60, 60, 20);
tfield.name = 'textField'; // Give a name to the field so we can retrieve it later by name.
// Retrieve the text field by its name and do something with it.
var textFieldBack = childrenPortal.getField('textField');
textFieldBack.background = 'yellow';
// Retrieve the calendar field through the array of all fields and do something with it.
var allFields = childrenPortal.getFields();
var calFieldBack = allFields[0];
calFieldBack.foreground = 'red';]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getIntercellSpacing">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.awt.Dimension"><![CDATA[A java.awt.Dimension object holding the horizontal and vertical intercell spacing.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The additional spacing between cell rows. Is composed from the horizontal spacing
and the vertical spacing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The additional spacing between cell rows.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var spacing = childrenPortal.getIntercellSpacing();
application.output("horizontal spacing: " + spacing.width);
application.output("vertical spacing: " + spacing.height);]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[A JSLabel instance corresponding to the label with the specified name.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves a label from this portal based on the name of the label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves a label from this portal based on the name of the label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var calLabel = childrenPortal.newLabel('Date', 120, 60, 20);
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20);
textLabel.name = 'textLabel'; // Give a name to this label, so we can retrieve it by name.
// Retrieve the second label by name.
var textLabelBack = childrenPortal.getLabel('textLabel');
textLabelBack.background = 'yellow';
// Retrieve the first label through the array of all labels.
var allLabels = childrenPortal.getLabels();
var calLabelBack = allLabels[0];
calLabelBack.foreground = 'red';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the label to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="getLabels">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;"><![CDATA[An array of JSLabel instances corresponding to all labels in the portal.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Retrieves all labels from the portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Retrieves all labels from the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var calLabel = childrenPortal.newLabel('Date', 120, 60, 20);
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20);
textLabel.name = 'textLabel'; // Give a name to this label, so we can retrieve it by name.
// Retrieve the second label by name.
var textLabelBack = childrenPortal.getLabel('textLabel');
textLabelBack.background = 'yellow';
// Retrieve the first label through the array of all labels.
var allLabels = childrenPortal.getLabels();
var calLabelBack = allLabels[0];
calLabelBack.foreground = 'red';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSButton" typecode="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[A JSButton instance representing the newly created button.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new button on the portal with the given text, place, size and JSMethod as the onClick action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new button on the portal with the given text, place, size and JSMethod as the onClick action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var clickMethod = form.newMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text to be displayed on the button.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the button. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the button.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the button. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSMethod object that should be executed when the button is clicked.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created calendar.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new calendar field in the portal. It is equivalent to calling "newField" 
with the type JSField.CALENDAR.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new calendar field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newCalendar('my_table_date', 0, 60, 20);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created checkbox field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new checkbox field in the portal. It is equivalent to calling "newField" 
with the type JSField.CHECKS.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new checkbox field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var chk = childrenPortal.newCheck('my_table_options', 60, 60, 50);
chk.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newComboBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created combobox field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new combobox field in the portal. It is equivalent to calling "newField" 
with the type JSField.COMBOBOX.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new combobox field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = childrenPortal.newComboBox('my_table_options', 120, 160, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new field on this form. The type of the field is specified by 
using one of the JSField constants like JSField.TEXT_FIELD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new field on this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);

var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";

var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var chk = childrenPortal.newField('my_table_options', JSField.CHECKS, 60, 60, 50);
chk.valuelist = vlist;
var cmb = childrenPortal.newField('my_table_options', JSField.COMBOBOX, 120, 160, 20);
cmb.valuelist = vlist;
var html = childrenPortal.newField('my_table_html', JSField.HTML_AREA, 180, 60, 50);
var img = childrenPortal.newField('my_table_image', JSField.IMAGE_MEDIA, 240, 60, 50);
var pwd = childrenPortal.newField('my_table_text', JSField.PASSWORD, 300, 60, 20);
var radio = childrenPortal.newField('my_table_options', JSField.RADIOS, 360, 60, 50);
radio.valuelist = vlist;
var rtf = childrenPortal.newField('my_table_rtf', JSField.RTF_AREA, 420, 60, 50);
var tarea = childrenPortal.newField('my_table_text', JSField.TEXT_AREA, 480, 60, 50);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 540, 60, 20);
var tahead = childrenPortal.newField('my_table_text', JSField.TYPE_AHEAD, 600, 60, 20);
tahead.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="displaytype" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The display type of the field. Use constants from JSField for this parameter.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newHtmlArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created HTML Area field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new HTML Area field in the portal. It is equivalent to calling "newField" 
with the type JSField.HTML_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new HTML Area field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var html = childrenPortal.newHtmlArea('my_table_html', 180, 60, 50);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newImageMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created Image Media field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new Image Media field in the portal. It is equivalent to calling "newField" 
with the type JSField.IMAGE_MEDIA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new Image Media field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var img = childrenPortal.newImageMedia('my_table_image', 240, 60, 50);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[A JSLabel instance that represents the newly created label.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new label on the form, with the given text, place and size.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new label on the form, with the given text, place and size.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var clickMethod = form.newMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var calLabel = childrenPortal.newLabel('Date', 120, 60, 20); 
// This will result in a button being actually created, because we specify an action.
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20, clickMethod);]]></sample>
          </samples>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text that will be displayed in the label.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the label. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the label.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the label. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSLabel" typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[A JSLabel instance that represents the newly created label.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new label on the form, with the given text, place, size and an JSMethod as the onClick action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new label on the form, with the given text, place, size and an JSMethod as the onClick action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var clickMethod = form.newMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var calLabel = childrenPortal.newLabel('Date', 120, 60, 20); 
// This will result in a button being actually created, because we specify an action.
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20, clickMethod);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text that will be displayed in the label.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the label. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the label.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the label. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSMethod object that should be executed when the label is clicked.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created password field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new password field in the portal. It is equivalent to calling "newField" 
with the type JSField.PASSWORD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new password field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var pwd = childrenPortal.newPassword('my_table_text', 300, 60, 20);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created radio buttons.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new radio buttons field in the portal. It is equivalent to calling "newField" 
with the type JSField.RADIOS.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new radio buttons field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var radio = childrenPortal.newRadios('my_table_options', 360, 60, 50);
radio.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newRtfArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created RTF Area field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new RTF Area field in the portal. It is equivalent to calling "newField" 
with the type JSField.RTF_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new RTF Area field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var rtf = childrenPortal.newRtfArea('my_table_rtf', 420, 60, 50);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created text area field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new text area field in the portal. It is equivalent to calling "newField" 
with the type JSField.TEXT_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new text area field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var tarea = childrenPortal.newTextArea('my_table_text', 480, 60, 50);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created text field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new text field in the portal. It is equivalent to calling "newField" 
with the type JSField.TEXT_FIELD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new text field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var tfield = childrenPortal.newTextField('my_table_text', 540, 60, 20);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="newTypeAhead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSFieldWithConstants" typecode="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created type ahead field.]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Creates a new type ahead field in the portal. It is equivalent to calling "newField" 
with the type JSField.TYPE_AHEAD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Creates a new type ahead field in the portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var tahead = childrenPortal.newTypeAhead('my_table_text', 600, 60, 20);
tahead.valuelist = vlist;]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="setIntercellSpacing">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[The additional spacing between cell rows. Is composed from the horizontal spacing
and the vertical spacing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[The additional spacing between cell rows.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',100,100,20);
childrenPortal.newTextField('child_table_parent_id', 200, 100, 20);
childrenPortal.setIntercellSpacing(5,10);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The horizontal spacing between cells.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The vertical spacing between cells.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSRadios" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRadios">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="mc,wc,sc" name="horizontal">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[Flag for horizontal/vertical radios layout.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[Flag for horizontal/vertical radios layout.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[radio.horizontal = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="mc,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="valuelist">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[The valuelist that is used by this field when displaying data. Can be used
with fields of type CHECKS, COMBOBOX, RADIOS and TYPE_AHEAD.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[The valuelist that is used by this field when displaying data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSRecord" qualifiedName="com.servoy.j2db.dataprocessing.Record" scriptingName="JSRecord">
      <properties>
        <property clientSupport="ng,wc,sc" name="exception">
          <return type="com.servoy.j2db.util.ServoyException" typecode="java.lang.Exception"><![CDATA[The occurred exception.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns last occurred exception on this record (or null).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns last occurred exception on this record (or null).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var exception = record.exception;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="foundset">
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet"><![CDATA[The parent foundset of the record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns parent foundset of the record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns parent foundset of the record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var parent = record.foundset;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="deleteRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Delete this record from the Foundset and the underlying datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Delete this record from the Foundset and the underlying datasource.]]></summary>
          </summaries>
          <deprecated><![CDATA[Use foundset.deleteRecord(record)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record= %%prefix%%foundset.getRecord(index);
record.deleteRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getChangedData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.base.scripting.api.IJSDataSet"><![CDATA[a JSDataSet with the changed data of this record.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSDataSet with outstanding (not saved) changed data of this record.
column1 is the column name, colum2 is the old data and column3 is the new data.

NOTE: To return an array of records with outstanding changed data, see the function databaseManager.getEditedRecords().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSDataSet with outstanding (not saved) changed data of this record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {JSDataSet} */
var dataset = record.getChangedData()
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	application.output(dataset.getValue(i,1) +' '+ dataset.getValue(i,2) +' '+ dataset.getValue(i,3));
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The datasource string of this record.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the records datasource string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the records datasource string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var ds = record.getDataSource();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getPKs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[an Array with the pk values.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns an array with the primary key values of the record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns an array with the primary key values of the record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var pks = foundset.getSelectedRecord().getPKs() // also foundset.getRecord can be used]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasChangedData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the current record has outstanding/changed data.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the current record has outstanding/changed data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the current record has outstanding/changed data.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hasChanged = record.hasChangedData();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="isEditing">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean when in edit.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true or false if the record is being edited or not.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true or false if the record is being edited or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var isEditing = foundset.getSelectedRecord().isEditing() // also foundset.getRecord can be used]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="isNew">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the current record is a new record, false otherwise;]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the current record is a new record or false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the current record is a new record or false otherwise.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var isNew = foundset.getSelectedRecord().isNew();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="revertChanges">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Reverts the in memory outstanding (not saved) changes of the record.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Reverts the in memory outstanding (not saved) changes of the record.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var record= %%prefix%%foundset.getSelectedRecord();
record.revertChanges();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="rollbackChanges">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[If this record exists in underlying datasource it will do a re-query to fetch the latest data from the datasource.
NOTE: If you use transactions then it will be the data of your last update of this record in the transaction,
not the latest committed data of that record in the datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[If this record exists in underlying datasource it will do a re-query to fetch the latest data from the datasource.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.1, replaced by #revertChanges(). Note that revertChanges does in memory revert of outstanding changes, does not query the database.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record= %%prefix%%foundset.getSelectedRecord();
record.rollbackChanges();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="save">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the save was done without an error.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Saves this record to the datasource if it had changes.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Saves this record to the datasource if it had changes.]]></summary>
          </summaries>
          <deprecated><![CDATA[Use databasemanager.saveData(record)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var record= %%prefix%%foundset.getSelectedRecord();
record.save();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSRelation" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelation">
      <constants>
        <constant clientSupport="ng,wc,sc" name="FULL_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a Query Builder join.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a Query Builder join.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.RIGHT_OUTER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INNER_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a JSRelation. It is also used in solutionModel.newRelation(...) and in the QueryBuilder.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a JSRelation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;

 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEFT_OUTER_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a JSRelation. It is also used in solutionModel.newRelation(...) and in the QueryBuilder.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a JSRelation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;

 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RIGHT_OUTER_JOIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a Query Builder join.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the joinType of a Query Builder join.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.RIGHT_OUTER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="allowCreationRelatedRecords">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if related records can be created through this relation.

The default value of this flag is "false".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if related records can be created through this relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.allowCreationRelatedRecords = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="allowParentDeleteWhenHavingRelatedRecords">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the parent record can be deleted while it has related records.

The default value of this flag is "true".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the parent record can be deleted while it has related records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.allowParentDeleteWhenHavingRelatedRecords = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="deleteRelatedRecords">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if related records should be deleted or not when a parent record is deleted.

The default value of this flag is "false".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if related records should be deleted or not when a parent record is deleted.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.deleteRelatedRecords = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreignDataSource">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Qualified name of the foreign data source. Contains both the name of the foreign
server and the name of the foreign table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Qualified name of the foreign data source.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.primaryDataSource = 'db:/user_data/another_parent_table';
relation.foreignDataSource = 'db:/user_data/another_child_table';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="foreignServerName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the server where the foreign table is located.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the server where the foreign table is located.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.1, replaced by foreignDataSource property.]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="foreignTableName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the foreign table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the foreign table.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.1, replaced by foreignDataSource property.]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="initialSort">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String which specified a set of sort options for the initial sorting of data
retrieved through this relation.

Has the form "column_name asc, another_column_name desc, ...".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String which specified a set of sort options for the initial sorting of data
retrieved through this relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.initialSort = 'another_child_table_text asc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="joinType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The join type that is performed between the primary table and the foreign table.
Can be "inner join" or "left outer join".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The join type that is performed between the primary table and the foreign table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;

 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.name = 'anotherName';
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.relationName = relation.name;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="primaryDataSource">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Qualified name of the primary data source. Contains both the name of the primary server
and the name of the primary table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Qualified name of the primary data source.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.primaryDataSource = 'db:/user_data/another_parent_table';
relation.foreignDataSource = 'db:/user_data/another_child_table';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="primaryServerName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the server where the primary table is located.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the server where the primary table is located.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.1, replaced by primaryDataSource property.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.primaryTableName = 'another_parent_table';
relation.primaryServerName = 'user_data';
relation.foreignTableName = 'another_child_table';
relation.foreignServerName = 'user_data';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="primaryTableName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the primary table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the primary table.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.1, replaced by primaryDataSource property.]]></deprecated>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getRelationItems">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelationItem[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSRelationItem;"><![CDATA[An array of JSRelationItem instances representing the relation criteria of this relation.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of JSRelationItem objects representing the relation criteria defined for this relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of JSRelationItem objects representing the relation criteria defined for this relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var criteria = relation.getRelationItems();
for (var i=0; i<criteria.length; i++)
{
	var item = criteria[i];
	application.output('relation item no. ' + i);
	application.output('primary column: ' + item.primaryDataProviderID);
	application.output('operator: ' + item.operator);
	application.output('foreign column: ' + item.foreignColumnName);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the relation object]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the relation object]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
application.output(relation.getUUID().toString())]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRelationItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelationItem" typecode="com.servoy.j2db.scripting.solutionmodel.JSRelationItem"><![CDATA[A JSRelationItem instance representing the newly added relation item.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new relation item for this relation. The primary dataprovider, the foreign data provider 
and one relation operators (like '=' '!=' '>' '<') must be provided.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new relation item for this relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
relation.newRelationItem('another_parent_table_id', '=', 'another_child_table_parent_id');
// for literals use a prefix
relation.newRelationItem(JSRelationItem.LITERAL_PREFIX + "'hello'",'=', 'mytextfield');]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the primary dataprovider.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The operator used to relate the primary and the foreign dataproviders.]]></description>
            </parameter>
            <parameter name="foreinColumnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the foreign dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeRelationItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the desired relation item from the specified relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the desired relation item from the specified relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('myRelation', 'db:/myServer/parentTable', 'db:/myServer/childTable', JSRelation.INNER_JOIN);
relation.newRelationItem('someColumn1', '=', 'someColumn2');
relation.newRelationItem('anotherColumn', '=', 'someOtherColumn');
relation.removeRelationItem('someColumn1', '=', 'someColumn2');
var criteria = relation.getRelationItems();
for (var i = 0; i < criteria.length; i++) {
	var item = criteria[i];
	application.output('primary column: ' + item.primaryDataProviderID);
	application.output('operator: ' + item.operator);
	application.output('foreign column: ' + item.foreignColumnName);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="primaryDataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the primary data provider (column) name]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the operator]]></description>
            </parameter>
            <parameter name="foreignColumnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the foreign column name]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSRelationItem" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelationItem">
      <constants>
        <constant clientSupport="ng,wc,sc" name="LITERAL_PREFIX">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for using literals in solution model in relations.
Strings must be passed as quoted value to make a distinction between string '5' and number 5.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for using literals in solution model in relations.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[relation.newRelationItem(JSRelationItem.LITERAL_PREFIX + "'hello'",'=', 'mytextfield');]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="foreignColumnName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the column from the destination table
that this relation item is based on.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the column from the destination table
that this relation item is based on.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="operator">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The operator that defines the relationship between the primary dataprovider
and the foreign column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The operator that defines the relationship between the primary dataprovider
and the foreign column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="primaryDataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the column from the source table 
that this relation item is based on.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the column from the source table 
that this relation item is based on.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="primaryLiteral">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the literal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the literal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem(JSRelationItem.LITERAL_PREFIX + "'hello'",'=', 'myTextField');
criteria.primaryLiteral = 'literal_text';
//criteria.primaryLiteral = number;
var primaryLiteral = criteria.primaryLiteral;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSRenderEvent" qualifiedName="com.servoy.j2db.scripting.JSRenderEvent" scriptingName="JSRenderEvent">
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getElement">
          <argumentsTypes/>
          <return type="com.servoy.j2db.ui.IScriptRenderMethodsWithFormat" typecode="com.servoy.j2db.ui.IScriptRenderMethods"/>
          <deprecated><![CDATA[replaced by getRenderable()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record of the element that is being rendered]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the record of the element that is being rendered.
This is null for elements of type form when they are in table view mode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the record of the element that is being rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// type the record returned from the call with JSDoc, fill in the right server/tablename
/** @type {JSRecord<db:/servername/tablename>} */
var record = event.getRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRecordIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[record index of the element that is being rendered]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the record index of the element that is being rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the record index of the element that is being rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[event.getRecordIndex()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRenderable">
          <argumentsTypes/>
          <return type="com.servoy.j2db.ui.IScriptRenderMethodsWithOptionalProps" typecode="com.servoy.j2db.ui.IScriptRenderMethodsWithOptionalProps"><![CDATA[Renderable the element that is being rendered]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the element that is being rendered.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the element that is being rendered.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[event.getRenderable();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hasFocus">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the element that is being rendered has the focus, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns whether or not the element that is being rendered has focus.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns whether or not the element that is being rendered has focus.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[event.hasFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isRecordSelected">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the record of the element that is being rendered is selected]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns whatever or not the record of the element that is being rendered is selected.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns whatever or not the record of the element that is being rendered is selected.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[event.isRecordSelected()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSServer" qualifiedName="com.servoy.j2db.dataprocessing.JSServer">
      <functions>
        <function clientSupport="ng,wc,sc" name="createNewTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTableObject" typecode="com.servoy.j2db.dataprocessing.JSTableObject"><![CDATA[JSTableObject created table.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates in this server a new table with the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates in this server a new table with the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("new_table");
	if (table) {
		var pk = table.createNewColumn("new_table_id", JSColumn.INTEGER, 0);
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		if (server.synchronizeWithDB(table))
			application.output("New table created in the database.");
		else
			application.output("New table not created in database.");
	}
	else application.output("New table not created at all.");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to create.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="dropTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean success.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Drops the table with the specified name from this server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Drops the table with the specified name from this server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var result = server.dropTable("new_table");
	if (result)
		application.output("Table dropped.");
	else
		application.output("Table not dropped.");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to drop.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSTableObject" typecode="com.servoy.j2db.dataprocessing.JSTableObject"><![CDATA[JSTableObject table.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSTable instance corresponding to the table with the specified name from this server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSTable instance corresponding to the table with the specified name from this server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var table = server.getTable("employees");
	if (table) {
		var colNames = table.getColumnNames()
		application.output("Table has " + colNames.length + " columns.");
		for (var i=0; i<colNames.length; i++)
			application.output("Column " + i + ": " + colNames[i]);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[Array of String table names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array with the names of all tables in this server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array with the names of all tables in this server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var tableNames = server.getTableNames();
	application.output("There are " + tableNames.length + " tables.");
	for (var i=0; i<tableNames.length; i++)
		application.output("Table " + i + ": " + tableNames[i]);
}
else {
	plugins.dialogs.showInfoDialog("Attention","Server 'example_data' cannot be found.","OK");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isValid">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean valid state.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get valid state for the server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get valid state for the server.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (!server.isValid()) {
	application.output("Server not valid!");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="reloadDataModel">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Reloads the datamodel from the database, if changed externally or via rawSQL plugin.

This call is not needed after a call to synchronizeWithDB().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Reloads the datamodel from the database, if changed externally or via rawSQL plugin.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
var result = plugins.rawSQL.executeSQL("example_data", null, 'CREATE TABLE raw_table (raw_table_id INTEGER)');
if (result) {
	application.output("Table created through rawSQL plugin.");
	if (server) {
		server.reloadDataModel();
		// All existing JSTableObject/JSColumn object references are invalid now! Use getTable to get new ones.
		var table = server.getTable("raw_table");
		if (table) {
			var colNames = table.getColumnNames()
			application.output("Table has " + colNames.length + " columns.");
			for (var i=0; i<colNames.length; i++)
				application.output("Column " + i + ": " + colNames[i]);
		}
	}
}
else {
	application.output("Raw table creation failed: " + plugins.rawSQL.getException());
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="synchronizeWithDB">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSTableObject"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean success.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Synchronizes a JSTable instance with the database. If columns were added to or removed from the JSTable instance, all these changes will now be persisted to the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Synchronizes a JSTable instance with the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("new_table");
	if (table) {
		var pk = table.createNewColumn("new_table_id", JSColumn.INTEGER, 0);
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		if (server.synchronizeWithDB(table))
			application.output("New table created in the database.");
		else
			application.output("New table not created in database.");
	}
	else application.output("New table not created at all.");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="table" type="com.servoy.j2db.dataprocessing.JSTableObject" typecode="com.servoy.j2db.dataprocessing.JSTableObject">
              <description><![CDATA[A JSTableObject instance that should be synchronized.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSStyle" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSStyle">
      <properties>
        <property clientSupport="ng,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The textual content of the style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The textual content of the style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var st = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
st.text = st.text + 'field { background-color: blue; }';
form.styleName = 'myStyle';
application.output('Style name is: ' + st.getName());]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[A String holding the name of the style.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the name of the style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the name of the style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var st = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
st.text = st.text + 'field { background-color: blue; }';
form.styleName = 'myStyle';
application.output('Style name is: ' + st.getName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the style object]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the style object]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var st = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
application.output(st.getUUID().toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSTab" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTab">
      <properties>
        <property clientSupport="ng,wc,sc" deprecated="true" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[obsolete; not supported]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="containsForm">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the form displayed in the tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the form displayed in the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var childForm = solutionModel.newForm('childForm', 'db:/example_data/child_table', null, false, 400, 300);
var anotherChildForm = solutionModel.newForm('anotherChildForm', 'db:/example_data/child_table', null, false, 400, 300);
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.containsForm = anotherChildForm;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.foreground = '#FF0000';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[obsolete; not supported]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="imageMedia">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the image Media file used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the image Media file used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', bytes);
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.imageMedia = ballImage;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Mnemonic used to switch to tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Mnemonic used to switch to tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var childForm = solutionModel.newForm('childForm', 'db:/example_data/child_table', null, false, 400, 300);
var anotherChildForm = solutionModel.newForm('anotherChildForm', 'db:/example_data/child_table', null, false, 400, 300);
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.mnemonic = 'a';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.name = 'firstTabRenamed';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="relationName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the relation that links the form which contains the tab 
with the form displayed in the tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the relation that links the form which contains the tab 
with the form displayed in the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm);
firstTab.relationName = 'parent_table_to_child_table';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text on the tab.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text on the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.text = 'Better Title';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example:
<html>This includes<b>bolded text</b> and
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.toolTipText = 'Tooltip';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[obsolete; not supported]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The X coordinate of the tab. This influences the order in which the tabs are displayed. 
The tabs are displayed in increasing order of the X coordinate. If two tabs have the 
same X coordinate, then they are displayed in increasing order of the Y coordinate.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The X coordinate of the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create two tabs, then make the second one be displayed to the left of the first
// by setting their X coordinates in the needed order.
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.x = 10;
var secondTab = tabs.newTab('secondTab', 'Another Child Form', anotherChildForm);
secondTab.x = 0;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Y coordinate of the tab. Together with the X coordinate, this influences the order 
in which the tabs are displayed. The tabs are displayed in increasing order of the X coordinate,
and if two tabs have the same X coordinate, then they are displayed in increasing order 
of the Y coordinate.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Y coordinate of the tab.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create two tabs, then make the second one be displayed to the left of the first
// by setting their X to the same value and Y coordinates in the needed order. 
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.x = 0;
firstTab.y = 10;
var secondTab = tabs.newTab('secondTab', 'Another Child Form', anotherChildForm);
secondTab.x = 0;
secondTab.y = 0;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.scripting.solutionmodel.JSComponent" publicName="JSTabPanel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTabPanel">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ACCORDION_PANEL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating accordion panel from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating accordion panel from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var accordion = myForm.newTabPanel('accordion', 10, 10, 620, 460);
accordion.tabOrientation = JSTabPanel.ACCORDION_PANEL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT_ORIENTATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for restoring a tab panel orientation to it's initial state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for restoring a tab panel orientation to it's initial state.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = JSTabPanel.SPLIT_HORIZONTAL;
// (...) some code when you decide it's better to revert the orientation
splitPane.tabOrientation = JSTabPanel.DEFAULT_ORIENTATION;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HIDE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating a tab panel that does not show tabs, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating a tab panel that does not show tabs, by setting its tabOrientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = JSTabPanel.HIDE;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SPLIT_HORIZONTAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = JSTabPanel.SPLIT_HORIZONTAL;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SPLIT_VERTICAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = JSTabPanel.SPLIT_VERTICAL;]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="anchors">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('mediaForm', 'db:/example_data/parent_table', null, false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="background">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The background color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="borderType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type, color and style of border of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="closeOnTabs">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[not used]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fontType">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The font type of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = solutionModel.createFont('Times New Roman',1,14);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="foreground">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The foreground color of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="formIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The Z index of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing a group ID for this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="height">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The height in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="onChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to be executed when the selected tab is changed in the tab panel or divider position is changed in split pane.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to be executed when the selected tab is changed in the tab panel or divider position is changed in split pane.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var onChangeMethod = form.newMethod('function onTabChange(previousIndex, event) { application.output("Tab changed from previous index " + previousIndex + " at " + event.getTimestamp()); }');
var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.onChange = onChangeMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="onTabChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <deprecated><![CDATA[As of release 5.0, replaced by onChange property.]]></deprecated>
        </property>
        <property clientSupport="wc,sc" name="printSliding">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in
height and width, based on its content and the content of neighboring
components.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </property>
        <property clientSupport="wc,sc" name="printable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="scrollTabs">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells how to arrange the tabs if they don't fit on a single line.
If this flag is set, then the tabs will stay on a single line, but there will
be the possibility to scroll them to the left and to the right. If this flag
is not set, then the tabs will be arranged on multiple lines.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells how to arrange the tabs if they don't fit on a single line.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 200, 200);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.scrollTabs = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="selectedTabColor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.awt.Color"/>
          <deprecated><![CDATA[not supported]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="styleClass">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabOrientation">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Specifies either the position of the tabs related to the tab panel or the type of tab-panel.
Can be one of SM_ALIGNMENT.(TOP, RIGHT, BOTTOM, LEFT), DEFAULT_ORIENTATION, HIDE, SPLIT_HORIZONTAL, SPLIT_VERTICAL, ACCORDION_PANEL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Specifies either the position of the tabs related to the tab panel or the type of tab-panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);
// The SM_ALIGNMENT constants TOP, RIGHT, BOTTOM and LEFT can be used to put the
// tabs into the needed position. Use HIDE to hide the tabs. Use DEFAULT_ORIENTATION to restore it to it's initial state.
// The constants SPLIT_HORIZONTAL, SPLIT_VERTICAL can be used to create a split pane,
// where the first tab will be the first component and the second tab will the second component.
// ACCORDION_PANEL can be used to create an accordion pane.
tabPanel.tabOrientation = SM_ALIGNMENT.BOTTOM;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabSeq">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components
are not transparent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="width">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The width in pixels of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var prop = fld.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimePropertyNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the design-time properties of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
var propNames = fld.getDesignTimePropertyNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTab" typecode="com.servoy.j2db.scripting.solutionmodel.JSTab"><![CDATA[A JSTab instance represented the requested tab.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSTab instance representing the tab which has the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSTab instance representing the tab which has the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.getTab('tab2').text = 'Child Two Changed';]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the tab that should be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTab[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTab;"><![CDATA[An array of JSTab instances representing all tabs of this tabpanel.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of JSTab instances holding the tabs of the tab panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of JSTab instances holding the tabs of the tab panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
var tabs = tabPanel.getTabs();
for (var i=0; i<tabs.length; i++)
	application.output("Tab " + i + " has text " + tabs[i].text);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of this component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var button_uuid = solutionModel.getForm("my_form").getButton("my_button").getUUID();
application.output(button_uuid.toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTab" typecode="com.servoy.j2db.scripting.solutionmodel.JSTab"><![CDATA[A JSTab instance representing the newly created and added tab.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a new tab with the text label and JSForm.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a new tab with the text label and JSForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create a parent form.
var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 640, 480);
// Create a first child form.
var childOne = solutionModel.newForm('childOne', 'db:/example_data/child_table', null, false, 400, 300);
childOne.newField('child_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
// Create a relation to link the parent form to the first child form.
var parentToChild = solutionModel.newRelation('parentToChild','db:/example_data/parent_table','db:/example_data/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
// Create a second child form.
var childTwo = solutionModel.newForm('childTwo', 'db:/example_data/my_table', null, false, 400, 300);
childTwo.newField('my_table_image', JSField.IMAGE_MEDIA, 10, 10, 100, 100);
// Create a tab panel and add two tabs to it, with the two child forms.
var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new tab.]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text to be displayed on the new tab.]]></description>
            </parameter>
            <parameter name="form" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The JSForm instance that should be displayed in the new tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTab" typecode="com.servoy.j2db.scripting.solutionmodel.JSTab"><![CDATA[A JSTab instance representing the newly created and added tab.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a new tab with the text label and JSForm and JSRelation (can be null for unrelated).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a new tab with the text label and JSForm and JSRelation (can be null for unrelated).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Create a parent form.
var form = solutionModel.newForm('parentForm', 'db:/example_data/parent_table', null, false, 640, 480);
// Create a first child form.
var childOne = solutionModel.newForm('childOne', 'db:/example_data/child_table', null, false, 400, 300);
childOne.newField('child_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
// Create a relation to link the parent form to the first child form.
var parentToChild = solutionModel.newRelation('parentToChild','db:/example_data/parent_table','db:/example_data/child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
// Create a second child form.
var childTwo = solutionModel.newForm('childTwo', 'db:/example_data/my_table', null, false, 400, 300);
childTwo.newField('my_table_image', JSField.IMAGE_MEDIA, 10, 10, 100, 100);
// Create a tab panel and add two tabs to it, with the two child forms.
var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new tab.]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text to be displayed on the new tab.]]></description>
            </parameter>
            <parameter name="form" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The JSForm instance that should be displayed in the new tab.]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A JSRelation object that relates the parent form with the form
                         that will be displayed in the new tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.putDesignTimeProperty('myprop', 'strawberry')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var frm = solutionModel.getForm('orders')
var fld = frm.getField('fld')
fld.removeDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the tab with the specified name from the tab panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the tab with the specified name from the tab panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.removeTab('tab1');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the tab to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setOnTabChangeMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 5.0, replaced by onChange property.]]></deprecated>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSTable" qualifiedName="com.servoy.j2db.dataprocessing.JSTable">
      <functions>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSColumn" typecode="com.servoy.j2db.dataprocessing.JSColumn"><![CDATA[JSColumn column.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSColumn for the named column (or column dataproviderID).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSColumn for the named column (or column dataproviderID).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var jsColumn = jsTable.getColumn('campaign_name')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to return the value from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String array of column names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of all table columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of all table columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var columnNames = jsTable.getColumnNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String datasource uri.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table data source uri.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table data source uri.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var dataSource = jsTable.getDataSource()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQuotedSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String table name, quoted if needed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where is_active = ?', [1])]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRowIdentifierColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String array of row identifier column names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var identifierColumnNames = jsTable.getRowIdentifierColumnNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String table name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var tableNameForDisplay = jsTable.getSQLName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getServerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String server name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Servoy server name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Servoy server name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var serverName = jsTable.getServerName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isMetadataTable">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean is metadata]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns whether table was flagged as metadata table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns whether table was flagged as metadata table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var isMetaDataTable = jsTable.isMetadataTable()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSTableObject" qualifiedName="com.servoy.j2db.dataprocessing.JSTableObject" scriptingName="JSTableObject">
      <functions>
        <function clientSupport="ng,wc,sc" name="createNewColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSColumnObject" typecode="com.servoy.j2db.dataprocessing.JSColumnObject"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table. The name, type and length of the new column must be specified. For specifying the
type of the column, use the JSColumn constants. The column is not actually created in the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method. 

The method returns a JSColumn instance that corresponds to the newly created column. If any error occurs and the column cannot be created, then the method
returns null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use (JSColumn.TEXT, 36) for UUIDs
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		var c = table.createNewColumn("name", JSColumn.TEXT, 100);
		c.allowNull = false
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createNewColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSColumnObject" typecode="com.servoy.j2db.dataprocessing.JSColumnObject"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table. The name, type and length of the new column must be specified. For specifying the
type of the column, use the JSColumn constants. The column is not actually created in the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method. 

The method returns a JSColumn instance that corresponds to the newly created column. If any error occurs and the column cannot be created, then the method
returns null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use (JSColumn.TEXT, 36) for UUIDs
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		var c = table.createNewColumn("name", JSColumn.TEXT, 100);
		c.allowNull = false
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="allowNull" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createNewColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSColumnObject" typecode="com.servoy.j2db.dataprocessing.JSColumnObject"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table. The name, type and length of the new column must be specified. For specifying the
type of the column, use the JSColumn constants. The column is not actually created in the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method. 

The method returns a JSColumn instance that corresponds to the newly created column. If any error occurs and the column cannot be created, then the method
returns null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new column in this table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		var pk = table.createNewColumn("id", JSColumn.MEDIA, 16); // can also use (JSColumn.TEXT, 36) for UUIDs
		pk.rowIdentifierType = JSColumn.PK_COLUMN;
		pk.setFlag(JSColumn.UUID_COLUMN, true)
		pk.sequenceType = JSColumn.UUID_GENERATOR
		var c = table.createNewColumn("name", JSColumn.TEXT, 100);
		c.allowNull = false
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="allowNull" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="pkColumn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="deleteColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes the column with the specified name from this table. The column is not actually deleted from the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes the column with the specified name from this table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var table = server.getTable("users");
	if (table) {
		table.deleteColumn("last_login");
		server.synchronizeWithDB(table);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSColumn" typecode="com.servoy.j2db.dataprocessing.JSColumn"><![CDATA[JSColumn column.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a JSColumn for the named column (or column dataproviderID).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a JSColumn for the named column (or column dataproviderID).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var jsColumn = jsTable.getColumn('campaign_name')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to return the value from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String array of column names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of all table columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of all table columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var columnNames = jsTable.getColumnNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String datasource uri.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table data source uri.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table data source uri.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var dataSource = jsTable.getDataSource()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getQuotedSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String table name, quoted if needed.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where is_active = ?', [1])]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRowIdentifierColumnNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[String array of row identifier column names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var identifierColumnNames = jsTable.getRowIdentifierColumnNames()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSQLName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String table name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var tableNameForDisplay = jsTable.getSQLName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getServerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[String server name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Servoy server name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Servoy server name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var serverName = jsTable.getServerName()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isMetadataTable">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[boolean is metadata]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns whether table was flagged as metadata table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns whether table was flagged as metadata table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var isMetaDataTable = jsTable.isMetadataTable()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSText" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSText">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[field.placeholderText = 'Search';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSTextArea" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTextArea">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="displayType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTISELECT_LISTBOX or SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of display used by the field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The enable state of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.enabled = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.
There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format. 
This property is applicable only for types: TEXT_FIELD, COMBOBOX, TYPE_AHEAD, CALENDAR and SPINNER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onAction">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The method that is executed when the component is clicked.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var doNothingMethod = form.newMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="onDataChange">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table', null, false, 620, 300);
var onDataChangeMethod = form.newMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text that is displayed in field when the field doesn't have a text value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[field.placeholderText = 'Search';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.visible = false;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The x coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The y coordinate of the component on the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="mc" name="getTitle">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSTitle" typecode="com.servoy.j2db.scripting.solutionmodel.JSTitle"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get title label for the field or label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get title label for the field or label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var form = solutionModel.newForm('someForm', 'db:/example_data/parent_table');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 1);
field.getTitle().text = 'Parent table'
forms['someForm'].controller.show()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="mc" publicName="JSTitle" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTitle">
      <properties>
        <property clientSupport="mc" name="dataProviderID">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The dataprovider of the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The dataprovider of the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var field = form.newTextField('parent_table_text', 1);
field.getTitle().dataProviderID = 'mytitlevar']]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="displaysTags">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %% on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by %%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var field = form.newTextField('parent_table_text', 1);
field.getTitle().text = 'Parent table %%customername%%'
field.getTitle().displaysTags = true]]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The text that is displayed inside the component.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The text that is displayed inside the component.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var field = form.newTextField('parent_table_text', 1);
field.getTitle().text = 'Parent table']]></sample>
          </samples>
        </property>
        <property clientSupport="mc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[The visible property of the component, default true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[The visible property of the component, default true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var field = form.newTextField('parent_table_text', 1);
field.getTitle().visible = false]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSUnit" qualifiedName="com.servoy.j2db.scripting.JSUnitAssertFunctions" scriptingName="jsunit">
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="assertEquals">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are equal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.
jsunit.assertEquals("Solution name test", "someSolution", application.getSolutionName());
jsunit.assertEquals("Simple math test", 2, 1 + 1);]]></sample>
          </samples>
          <parameters>
            <parameter name="expected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertEquals">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are equal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.
jsunit.assertEquals("Solution name test", "someSolution", application.getSolutionName());
jsunit.assertEquals("Simple math test", 2, 1 + 1);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertFalse">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is false.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.
jsunit.assertFalse("False test", application.isLastPrintPreviewPrinted());]]></sample>
          </samples>
          <parameters>
            <parameter name="boolean_condition" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertFalse">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is false.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.
jsunit.assertFalse("False test", application.isLastPrintPreviewPrinted());]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="boolean_condition" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertFloatEquals">
          <argumentsTypes>
            <argumentType typecode="float"/>
            <argumentType typecode="float"/>
            <argumentType typecode="float"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two floating point values are equal to within a given tolerance.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.
jsunit.assertFloatEquals("Float equals test", 3.12, 3.121, 0.0015);]]></sample>
          </samples>
          <parameters>
            <parameter name="expectedFloat" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actualFloat" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
            <parameter name="tolerance" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[tolerance when comparing.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertFloatEquals">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="float"/>
            <argumentType typecode="float"/>
            <argumentType typecode="float"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two floating point values are equal to within a given tolerance.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.
jsunit.assertFloatEquals("Float equals test", 3.12, 3.121, 0.0015);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expectedFloat" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actualFloat" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
            <parameter name="tolerance" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[tolerance when comparing.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertMatches">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a regular expression matches a string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.
jsunit.assertMatches(new RegExp("gr(a|e)y"), "gray");]]></sample>
          </samples>
          <parameters>
            <parameter name="regularExpression" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the regular expression used for matching.]]></description>
            </parameter>
            <parameter name="actualString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the actual value to be matched.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertMatches">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a regular expression matches a string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.
jsunit.assertMatches("Match test", new RegExp("gr(a|e)y"), "gray");]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="regularExpression" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the regular expression used for matching.]]></description>
            </parameter>
            <parameter name="actualString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the actual value to be matched.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotNull">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.
var a; // this is undefined, not null
jsunit.assertNotNull(a);]]></sample>
          </samples>
          <parameters>
            <parameter name="object" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotNull">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.
var a; // this is undefined, not null
jsunit.assertNotNull("Not null test", a);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="object" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotSame">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are not the same.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.
var a = new Date(1990, 1, 1);
var b = new Date(1990, 1, 1);
jsunit.assertNotSame(a, b);
jsunit.assertEquals("But equals", a, b);]]></sample>
          </samples>
          <parameters>
            <parameter name="notExpected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value that is not expected.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotSame">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are not the same.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.
var a = new Date(1990, 1, 1);
var b = new Date(1990, 1, 1);
jsunit.assertNotSame("Not same test", a, b);
jsunit.assertEquals("But equals", a, b);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="notExpected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value that is not expected.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotUndefined">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not undefined.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.
var a = 0;
jsunit.assertNotUndefined(a);]]></sample>
          </samples>
          <parameters>
            <parameter name="definedObject" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNotUndefined">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is not undefined.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.
var a = 0;
jsunit.assertNotUndefined("Not undefined test", a);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="definedObject" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNull">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is null. AssertionFailedError is thrown if the object is not null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is null. AssertionFailedError is thrown if the object is not null.
jsunit.assertNull("Null test", null);]]></sample>
          </samples>
          <parameters>
            <parameter name="nullValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertNull">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is null. AssertionFailedError is thrown if the object is not null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is null. AssertionFailedError is thrown if the object is not null.
jsunit.assertNull("Null test", null);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="nullValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertSame">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are the same.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.
var a = new Date(1990, 1, 1);
var b = a;
jsunit.assertSame(a, b);]]></sample>
          </samples>
          <parameters>
            <parameter name="expected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertSame">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that two values are the same.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.
var a = new Date(1990, 1, 1);
var b = a;
jsunit.assertSame("Same test", a, b);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expected" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertTrue">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.
jsunit.assertTrue("True test", application.isLastPrintPreviewPrinted());]]></sample>
          </samples>
          <parameters>
            <parameter name="boolean_condition" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertTrue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that a condition is true.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.
jsunit.assertTrue("True test", application.isLastPrintPreviewPrinted());]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="boolean_condition" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertUndefined">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is undefined.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.
jsunit.assertUndefined("Undefined test", thisIsUndefined);]]></sample>
          </samples>
          <parameters>
            <parameter name="undefinedValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="assertUndefined">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Asserts that an object is undefined.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.
jsunit.assertUndefined(thisIsUndefined);]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="undefinedValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="fail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test. AssertionFailedError is always thrown.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Fails a test. AssertionFailedError is always thrown.
jsunit.fail("Fail test");
jsunit.fail("test", null, "Fail"); // 2nd param is not used in Servoy, params 3 and 1 get merged to form a message. The result is the same as in the line above.]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message. This is usually the only parameter specified when calling this method.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="fail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test. AssertionFailedError is always thrown.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Fails a test. AssertionFailedError is always thrown.
jsunit.fail("Fail test");
jsunit.fail("test", null, "Fail"); // 2nd param is not used in Servoy, params 3 and 1 get merged to form a message. The result is the same as in the line above.]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message. This is usually the only parameter specified when calling this method.]]></description>
            </parameter>
            <parameter name="instanceOfCallStack" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[an internal JSUnit call stack. Use null for this if you want to get to the next optional parameter. Usually not specified.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="fail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test. AssertionFailedError is always thrown.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Fails a test.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// Fails a test. AssertionFailedError is always thrown.
jsunit.fail("Fail test");
jsunit.fail("test", null, "Fail"); // 2nd param is not used in Servoy, params 3 and 1 get merged to form a message. The result is the same as in the line above.]]></sample>
          </samples>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The test description/message. This is usually the only parameter specified when calling this method.]]></description>
            </parameter>
            <parameter name="instanceOfCallStack" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[an internal JSUnit call stack. Use null for this if you want to get to the next optional parameter. Usually not specified.]]></description>
            </parameter>
            <parameter name="userMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[a user message. Usually not specified.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSValueList" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSValueList">
      <constants>
        <constant clientSupport="ng,mc,wc,sc" name="CUSTOM_VALUES">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to set the valueListType of a JSValueList.
Sets the value list to use a custom list of values.
Also used in solutionModel.newValueList(...) to create new valuelists]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to set the valueListType of a JSValueList.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.valueListType = JSValueList.CUSTOM_VALUES; // Change the type to custom values.
vlist.customValues = "one\ntwo\nthree\nfour";]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATABASE_VALUES">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to set the valueListType of a JSValueList.
Sets the value list to use values loaded from a database.
Also used in solutionModel.newValueList(...) to create new valuelists]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to set the valueListType of a JSValueList.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EMPTY_VALUE_ALWAYS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_ALWAYS;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EMPTY_VALUE_NEVER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_NEVER;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="addEmptyValue">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that tells if an empty value must be shown next to the items in the value list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that tells if an empty value must be shown next to the items in the value list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_NEVER;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="customValues">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[A string with the elements in the valuelist. The elements 
can be separated by linefeeds (custom1
custom2), optional with realvalues ((custom1|1
custom2|2)).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[A string with the elements in the valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vl1 = solutionModel.newValueList("customtext",JSValueList.CUSTOM_VALUES);
vl1.customValues = "customvalue1\ncustomvalue2";
var vl2 = solutionModel.newValueList("customid",JSValueList.CUSTOM_VALUES);
vl2.customValues = "customvalue1|1\ncustomvalue2|2";
var form = solutionModel.newForm("customvaluelistform",controller.getDataSource(),null,true,300,300);
var combo1 = form.newComboBox("scopes.globals.text",10,10,120,20);
combo1.valuelist = vl1;
var combo2 = form.newComboBox("scopes.globals.id",10,60,120,20);
combo2.valuelist = vl2;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="dataSource">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compact representation of the names of the server and table that 
are used for loading the data from the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compact representation of the names of the server and table that 
are used for loading the data from the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fallbackValueList">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the fallback valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the fallback valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myValueList = solutionModel.getValueList('myValueListHere')
 //get fallback value list
var fallbackValueList = myValueList.fallbackValueList]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="globalMethod">
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A global method that provides the data for the valuelist. The global method must provided the data 
as a JSDataSet.

It is called when the valuelist needs data, it has 3 modes.
real and display params both null: return the whole list
only display is specified, called by a typeahead, return a filtered list
only real value is specified, called when the list doesnt contain the real value for the give record value, this will insert this value into the existing list.

In find mode the record with be the FindRecord which is just like a normal JSRecord (DataRecord) it has the same properties (column/dataproviders) but doesnt have its methods (like isEditing())

The last argument is rawDisplayValue which contains the same text as displayValue but without converting it to lowercase.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A global method that provides the data for the valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var listProvider = solutionModel.newGlobalMethod('globals', 'function getDataSetForValueList(displayValue, realValue, record, valueListName, findMode, rawDisplayValue) {' +
		'	' +
		'var args = null;' +
		'/** @type QBSelect<db:/example_data/employees> */' +
		'var query = databaseManager.createSelect('db:/example_data/employees');' + 
		'/** @type  {JSDataSet} */' + 
		'var result = null;' + 
		'if (displayValue == null && realValue == null) {' +
		'  // TODO think about caching this result. can be called often!' +
		'  // return the complete list' +
		'  query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname)).add(query.columns.employeeid);' +
		'  result = databaseManager.getDataSetByQuery(query,100);' + 
		'} else if (displayValue != null) {' +
		'  // TYPE_AHEAD filter call, return a filtered list' +
		'  args = [displayValue + "%", displayValue + "%"]' +
		'  query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname)).add(query.columns.employeeid).' +
		'  root.where.add(query.or.add(query.columns.firstname.lower.like(args[0] + '%')).add(query.columns.lastname.lower.like(args[1] + '%')));' +
		'  result = databaseManager.getDataSetByQuery(query,100);' +  
		'} else if (realValue != null) {' +
		'  // TODO think about caching this result. can be called often!' +
		'  // real object not found in the current list, return 1 row with display,realvalue that will be added to the current list' +
		'  // dont return a complete list in this mode because that will be added to the list that is already there' +
		'  args = [realValue];' +
		'  query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname)).add(query.columns.employeeid).' +
		'  root.where.add(query.columns.employeeid.eq(args[0]));' + 
		'  result = databaseManager.getDataSetByQuery(query,1);' + 
		'}' +
		'return result;' + 
		'}');
var vlist = solutionModel.newValueList('vlist', JSValueList.CUSTOM_VALUES);
vlist.globalMethod = listProvider;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the value list.

It is relevant when the "useTableFilter" property is set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the value list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/valuelists';
vlist.setDisplayDataProviderIds('valuelist_data');
vlist.setReturnDataProviderIds('valuelist_data');
vlist.useTableFilter = true;
vlist.name = 'two';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="relationNMName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[relationName supports multiple levels relations]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="relationName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the relation that is used for loading data from the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the relation that is used for loading data from the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rel = solutionModel.newRelation('parent_to_child', 'db:/example_data/parent_table', 'db:/example_data/child_table', JSRelation.INNER_JOIN);
rel.newRelationItem('parent_table_id', '=', 'child_table_parent_id');

var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.relationName = 'parent_to_child';
vlist.setDisplayDataProviderIds('child_table_text');
vlist.setReturnDataProviderIds('child_table_text');]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="separator">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[A String representing the separator that should be used when multiple
display dataproviders are set, when the value list has the type set to
database values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[A String representing the separator that should be used when multiple
display dataproviders are set, when the value list has the type set to
database values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="serverName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the database server that is used for loading the values when 
the value list has the type set to database values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the database server that is used for loading the values when 
the value list has the type set to database values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="setFallbackValueList" undocumented="true">
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="vl" type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.base.solutionmodel.IBaseSMValueList"/>
          </parameters>
        </property>
        <property clientSupport="ng,wc,sc" name="sortOptions">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sort options that are applied when the valuelist loads its data
from the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sort options that are applied when the valuelist loads its data
from the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tableName">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The name of the database table that is used for loading the values when 
the value list has the type set to database values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The name of the database table that is used for loading the values when 
the value list has the type set to database values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="useTableFilter">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the name of the valuelist should be applied as a filter on the
'valuelist_name' column when retrieving the data from the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Flag that tells if the name of the valuelist should be applied as a filter on the
'valuelist_name' column when retrieving the data from the database.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/valuelists';
vlist.setDisplayDataProviderIds('valuelist_data');
vlist.setReturnDataProviderIds('valuelist_data');
vlist.useTableFilter = true;
vlist.name = 'two';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="valueListType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[The type of the valuelist. Can be either custom values or database values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[The type of the valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getDisplayDataProviderIds">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[An array of Strings representing the names of the display dataproviders.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of the dataproviders that will be used to display the valuelist value.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of the dataproviders that will be used to display the valuelist value.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text', 'parent_table_id');
vlist.setReturnDataProviderIds('parent_table_text');
var dispDP = vlist.getDisplayDataProviderIds();
for (var i=0; i<dispDP.length; i++)
	application.output(dispDP[i]);
var retDP = vlist.getReturnDataProviderIds();
for (var i=0; i<retDP.length; i++)
	application.output(retDP[i]);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getReturnDataProviderIds">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[An array of Strings representing the names of the return dataprovider.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of the dataproviders that will be used to define the valuelist value that is saved.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of the dataproviders that will be used to define the valuelist value that is saved.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text', 'parent_table_id');
vlist.setReturnDataProviderIds('parent_table_text');
var dispDP = vlist.getDisplayDataProviderIds();
for (var i=0; i<dispDP.length; i++)
	application.output(dispDP[i]);
var retDP = vlist.getReturnDataProviderIds();
for (var i=0; i<retDP.length; i++)
	application.output(retDP[i]);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the value list]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the value list]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
application.output(vlist.getUUID().toString());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setDisplayDataProviderIds">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders. There can be at most 3 of them, combined with the return dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be displayed
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setDisplayDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders. There can be at most 3 of them, combined with the return dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be displayed
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first display dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setDisplayDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders. There can be at most 3 of them, combined with the return dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be displayed
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first display dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The second display dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setDisplayDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders. There can be at most 3 of them, combined with the return dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be displayed
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the display dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first display dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The second display dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider3" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The third display dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setReturnDataProviderIds">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders. There can be at most 3 of them, combined with the display dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be returned
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setReturnDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders. There can be at most 3 of them, combined with the display dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be returned
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first return dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setReturnDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders. There can be at most 3 of them, combined with the display dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be returned
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first return dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The second return dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setReturnDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders. There can be at most 3 of them, combined with the display dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be returned
by the valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the return dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The first return dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The second return dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider3" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The third return dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="JSVariable" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSVariable">
      <constants>
        <constant clientSupport="ng,mc,wc,sc" name="DATETIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var dateVar = solutionModel.newGlobalVariable('globals', 'gDate', JSVariable.DATETIME);
dateVar.defaultValue = 'now';
application.output(scopes.globals.gDate); // Prints the current date and time.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var intVar = solutionModel.newGlobalVariable('globals', 'gInt', JSVariable.INTEGER);
intVar.defaultValue = 997;
application.output(scopes.globals.gInt); // Prints 997]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var mediaVar = solutionModel.newGlobalVariable('globals', 'gMedia', JSVariable.MEDIA);
mediaVar.defaultValue = 'new Array(1, 2, 3, 4)';
application.output(scopes.globals.gMedia); // Prints out the array with four elements.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="NUMBER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var numberVar = solutionModel.newGlobalVariable('globals', 'gNumber', JSVariable.NUMBER);
numberVar.defaultValue = 192.334;
application.output(scopes.globals.gNumber); // Prints 192.334]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,mc,wc,sc" name="TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var txtVar = solutionModel.newGlobalVariable('globals', 'gText', JSVariable.TEXT);
txtVar.defaultValue = '"some text"'; // Use two pairs of quotes if you want to assign a String as default value.
application.output(scopes.globals.gText); // Prints 'some text' (without quotes).]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="defaultValue">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The default value of the variable. 

It is interpreted as a JS expression.

For form variables ,setting this property requires the form instances to be destroyed (history.remove("formName")). 
If you want to use a default value for a newly created variable  create the variable using the 3 parameter version newVariable(name,type,defaultValue).

For INTEGER variables it can be an integer constant, like 10 for example.
For NUMBER variables it can be a real constant, like 22.41. For DATETIME
variables it can be "now", or a JS expression like "new Date()". For TEXT 
variables it can be any string surrounded with quotes, like "'some text'".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The default value of the variable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var intVar = solutionModel.newGlobalVariable('globals', 'gInt', JSVariable.INTEGER);
intVar.defaultValue = 997;
application.output(scopes.globals.gInt); // Prints 997
var numberVar = solutionModel.newGlobalVariable('globals', 'gNumber', JSVariable.NUMBER);
numberVar.defaultValue = 192.334;
application.output(scopes.globals.gNumber); // Prints 192.334
var dateVar = solutionModel.newGlobalVariable('globals', 'gDate', JSVariable.DATETIME);
dateVar.defaultValue = 'now';
application.output(scopes.globals.gDate); // Prints the current date and time.
var txtVar = solutionModel.newGlobalVariable('globals', 'gText', JSVariable.TEXT);
txtVar.defaultValue = '"some text"'; // Use two pairs of quotes if you want to assign a String as default value.
application.output(scopes.globals.gText); // Prints 'some text' (without quotes).
var mediaVar = solutionModel.newGlobalVariable('globals', 'gMedia', JSVariable.MEDIA);
mediaVar.defaultValue = 'new Array(1, 2, 3, 4)';
application.output(scopes.globals.gMedia); // Prints out the array with four elements.]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The name of the variable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The name of the variable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var gVar = solutionModel.newGlobalVariable('globals', 'gtext', JSVariable.TEXT);
gVar.name = 'anotherName';
gVar.defaultValue = '"default text"';
// The next two lines will print the same output.
application.output(scopes.globals[gVar.name]);
application.output(scopes.globals.anotherName);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="variableType">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The type of the variable. Can be one of: TEXT, INTEGER, NUMBER, DATETIME or MEDIA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The type of the variable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var g = solutionModel.newGlobalVariable('globals', 'gtext',JSVariable.TEXT);
scopes.globals.gtext = 'some text';
g.variableType = JSVariable.DATETIME;
scopes.globals.gtext = 'another text'; // This will raise an error now, because the variable is not longer of type text.]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,mc,wc,sc" name="getScopeName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get scope name]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get scope name]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var globalVariables = solutionModel.getGlobalVariables();
for (var i in globalVariables)
	application.output(globalVariables[i].name + ' is defined in scope ' + globalVariables[i].getScopeName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the variable]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the UUID of the variable]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dateVar = solutionModel.newGlobalVariable('globals', 'gDate', JSVariable.DATETIME);
application.output(dateVar.getUUID().toString());]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="JSWindow" qualifiedName="com.servoy.j2db.scripting.JSWindow" scriptingName="JSWindow">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Value used for x, y, width, height of initial bounds when you want the window to auto-determine bounds when shown for the first time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Value used for x, y, width, height of initial bounds when you want the window to auto-determine bounds when shown for the first time.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// show a dialog that self-determines bounds the first time it it open, then remembers last bounds for future show operations 
var win = application.createWindow("myName", JSWindow.DIALOG);
win.setInitialBounds(JSWindow.DEFAULT, JSWindow.DEFAULT, JSWindow.DEFAULT, JSWindow.DEFAULT); // will be shown initially centred and with preferred size
forms.myForm.show(win);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DIALOG">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a non-modal dialog type.
Non-modal dialogs will allow the user to interact with parent windows, but are less independent then windows with WINDOW type.
Dialogs will stay on top of parent windows and are less accessible through the OS window manager. In web-client dialogs will not
open in a separate browser window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a non-modal dialog type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create a non-modal dialog on top of current active form's window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.DIALOG);
myWindow.show(forms.myForm);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FULL_SCREEN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Value that can be used for bounds in order to specify that a dialog/window should completely fill the screen.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Value that can be used for bounds in order to specify that a dialog/window should completely fill the screen.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create and show a window, with specified title, full screen
var win = application.createWindow("windowName", JSWindow.WINDOW);
win.setInitialBounds(JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN);
win.setTitle("This is a window");
controller.show(win);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MODAL_DIALOG">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a modal dialog type. Modal dialogs will not allow the user to interact with the parent window(s) until closed.
Dialogs will stay on top of parent windows and are less accessible through the OS window manager. In web-client dialogs will not
open in a separate browser window. NOTE: no code is executed in Smart Client after a modal dialog is shown (the show operation blocks) until this dialog closes.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a modal dialog type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create a modal dialog on top of current active form's window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.MODAL_DIALOG);
myWindow.show(forms.myForm);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="WINDOW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a window type. WINDOW type is the most independent type of window. It will be more accessible through the OS window
manager, it can appear both in front of and under other windows and it doesn't block user interaction for other windows. In web-client windows will
open in a separate browser window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Window type constant that identifies a window type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create a window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.WINDOW);
myWindow.show(forms.myForm);]]></sample>
          </samples>
        </constant>
      </constants>
      <properties>
        <property clientSupport="ng,wc,sc" name="controller">
          <return type="com.servoy.j2db.BasicFormController$JSForm" typecode="com.servoy.j2db.BasicFormController$JSForm"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current controller from the window/dialog.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current controller from the window/dialog.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var formName = application.getWindow('test').controller.getName();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="opacity">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float"><![CDATA[the opacity of this window]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the opacity property. By default will have value 1 (completely opaque), and can be assigned to values between 0 and 1.
If set then window will also be undecorated. This should be set before the dialog/window is shown, otherwise it has no effect.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the opacity property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="resizable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets whether or not this window can be resized by the user (default true).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets whether or not this window can be resized by the user (default true).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.getWindow("someWindowName");
if (someWindow.isVisible() == false) { 
	controller.show(someWindow);
	someWindow.resizable = false;
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="storeBounds">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Tells whether or not the bounds of this window should be stored/persisted (default false).
If true, the window's bounds will be stored when the window is closed. Stored bounds will be used when the window is shown again instead of initialBounds.
For non resizable windows, only location is stored/persisted.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Tells whether or not the bounds of this window should be stored/persisted (default false).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.DIALOG, null);
win1.setInitialBounds(200, 200, 450, 350);
win1.resizable = false;
win1.storeBounds = true;
win1.title = "Window 1";
controller.show(win1);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="title">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.WINDOW, null);
win1.setInitialBounds(200, 200, 450, 350);
win1.title = "Window 1";
controller.show(win1);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[transparency state of the window]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the transparency property.
NOTE: For smart clients, the window must be undecorated or the
servoy.smartclient.allowLAFWindowDecoration property set to true]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the transparency property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="undecorated">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[if this window will be undecorated]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the undecorated property.
If set then this window will not have any decoration and can't be moved/resized or closed. This should be set before dialog/window is shown, otherwise has no effect.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the undecorated property.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="close">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean true if the window was successfully closed and false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Closes (hides) the window. It can be shown again using window.show(), controller.show() or controller.showRecords().
The main application window cannot be closed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Closes (hides) the window.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, replaced by #hide()]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//creates and shows a window for 3 seconds before closing it
var win = application.createWindow("someWindowName", JSWindow.WINDOW, null);
win.setInitialBounds(200, 200, 450, 350);
controller.show(win);
application.sleep(3000);
win.close();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="destroy">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Frees the resources allocated by this window. If window is visible, it will close it first.
The window will no longer be available with application.getWindow('windowName') and will no longer be usable.

The main application window cannot be destroyed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Frees the resources allocated by this window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var getWindow = application.getWindow("someWindowName");
getWindow.destroy();
getWindow = application.getWindow("someWindowName");
if (getWindow == null) {
	application.output("Window has been destroyed");
} else { 
	application.output("Window could not be destroyed");
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the height.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the window name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the window name. It will be null in case of main application frame.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the window name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getParent">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the parent JSWindow, if available. If there is no parent JSWindow, it will return null.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the parent JSWindow, if available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the parent JSWindow, if available.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the window type. Can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the window type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the window type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the width.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the x coordinate.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x coordinate.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x coordinate.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the y coordinate.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y coordinate.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y coordinate.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.createWindow("someWindowName", JSWindow.WINDOW, null);
someWindow.setInitialBounds(200, 200, 450, 350);
controller.show(someWindow);

var name = "Name: " + someWindow.getName() + "\n"
var parent = "Parent: " + (someWindow.getParent() == null ? "none" : someWindow.getParent()) + "\n"
var type = "TypeNumber: " + someWindow.getType() + "\n"
var height = "Height: " + someWindow.getHeight() + "\n"
var width = "Width: " + someWindow.getWidth() + "\n"
var undecorated = "Undecorated: " + someWindow.isUndecorated() + "\n"
var opacity = "Opacity: " + someWindow.opacity + "\n"
var transparent = "Transparent: " + someWindow.transparent + "\n"
var locationX = "Location-X-coordinate: " + someWindow.getX() + "\n"
var locationY = "Location-Y-coordinate: " + someWindow.getY() + "\n"
var info = name + parent + type + height + width + locationX + locationY + undecorated + "\n"
var closeMsg = "Press 'Ok' to close this dialog."

var infoDialog = plugins.dialogs.showInfoDialog("Window Info", info + closeMsg, "Ok");
if (infoDialog == "Ok") someWindow.close()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="hide">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Boolean true if the window was successfully closed and false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Hides the window. It can be shown again using window.show(), controller.show() or controller.showRecords().
The main application window cannot be hidden.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Hides the window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//creates and shows a window for 3 seconds before closing it
var win = application.createWindow("someWindowName", JSWindow.WINDOW, null);
win.setInitialBounds(200, 200, 450, 350);
controller.show(win);
application.sleep(3000);
win.hide();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isVisible">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the window is visible, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the window is visible, false otherwise.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the window is visible, false otherwise.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var someWindow = application.getWindow("someWindowName");
if (someWindow.isVisible() == false) { 
	controller.show(someWindow);
	someWindow.resizable = false;
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="resetBounds">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes the window's currently stored bounds. It will only affect the next show of the window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes the window's currently stored bounds.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.DIALOG, null);
win1.title = "Window 1";
win1.setInitialBounds(200, 200, 400, 600);
win1.storeBounds = true;
if (newSolutionVersion) win1.resetBounds();
win1.show(forms.myform);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setInitialBounds">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the initial window bounds.
The initial bounds are only used the first time this window is shown (what first show means depends on storeBounds property).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the initial window bounds.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win = application.createWindow("myName", JSWindow.DIALOG);
win.setInitialBounds(20, 10, 300, 200);
forms.myForm.show(win);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial x coordinate of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial y coordinate of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial width of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial height of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the window location.
If the coordinates are not valid they might be corrected. (for example out of screen locations)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the window location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var window = application.createWindow('test',JSWindow.DIALOG);
window.setLocation(0,0);
window.setSize(400,600);
window.show(forms.child1);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[x coordinate.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[y coordinate.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the window size.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the window size.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var window = application.createWindow('test',JSWindow.DIALOG);
window.setLocation(0,0);
window.setSize(400,600);
window.show(forms.child1);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="show">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows the given form(form name, form object or JSForm) in this window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows the given form(form name, form object or JSForm) in this window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[win.show(forms.myForm);
// win.show("myForm");]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the form that will be shown inside this window. It can be a form name or a form object (actual form or JSForm).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showTextToolbar">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets whether or not this window should have a text tool bar. Has no effect on web client or smart client main application frame.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets whether or not this window should have a text tool bar.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.WINDOW, null);
win1.setInitialBounds(200, 200, 450, 350);
win1.setTitle("Window 1");
win1.showTextToolbar(false);
controller.show(win1);

var win2 = application.createWindow("Window 2", JSWindow.WINDOW, null);
win2.setInitialBounds(500, 500, 450, 350);
win2.setTitle("Window 2");
win2.showTextToolbar(false);
controller.show(win2);

var win3 = application.createWindow("Window 3", JSWindow.WINDOW, null);
win3.setInitialBounds(650, 700, 450, 350);
win3.setTitle("Window 3");
win3.showTextToolbar(true);
controller.show(win3);

application.sleep(2000);
win3.toBack();
application.sleep(2000);
win1.toFront();]]></sample>
          </samples>
          <parameters>
            <parameter name="showTextToolbar" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if you want a text tool bar to be added to this window, false otherwise.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="toBack">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows this window behind other windows, if possible.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows this window behind other windows, if possible.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.WINDOW, null);
win1.setInitialBounds(200, 200, 450, 350);
win1.setTitle("Window 1");
win1.showTextToolbar(false);
controller.show(win1);

var win2 = application.createWindow("Window 2", JSWindow.WINDOW, null);
win2.setInitialBounds(500, 500, 450, 350);
win2.setTitle("Window 2");
win2.showTextToolbar(false);
controller.show(win2);

var win3 = application.createWindow("Window 3", JSWindow.WINDOW, null);
win3.setInitialBounds(650, 700, 450, 350);
win3.setTitle("Window 3");
win3.showTextToolbar(true);
controller.show(win3);

application.sleep(2000);
win3.toBack();
application.sleep(2000);
win1.toFront();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="toFront">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Bring this window in front of other windows, if possible.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Bring this window in front of other windows, if possible.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var win1 = application.createWindow("Window 1", JSWindow.WINDOW, null);
win1.setInitialBounds(200, 200, 450, 350);
win1.setTitle("Window 1");
win1.showTextToolbar(false);
controller.show(win1);

var win2 = application.createWindow("Window 2", JSWindow.WINDOW, null);
win2.setInitialBounds(500, 500, 450, 350);
win2.setTitle("Window 2");
win2.showTextToolbar(false);
controller.show(win2);

var win3 = application.createWindow("Window 3", JSWindow.WINDOW, null);
win3.setInitialBounds(650, 700, 450, 350);
win3.setTitle("Window 3");
win3.showTextToolbar(true);
controller.show(win3);

application.sleep(2000);
win3.toBack();
application.sleep(2000);
win1.toFront();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="LOGGINGLEVEL" qualifiedName="com.servoy.j2db.scripting.info.LOGGINGLEVEL">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DEBUG">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.output('my message',APP_LOG_LEVEL.DEBUG)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ERROR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.output('my message',APP_LOG_LEVEL.ERROR)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="FATAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.output('my message',APP_LOG_LEVEL.FATAL)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INFO">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.output('my message',APP_LOG_LEVEL.INFO)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="WARNING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logging level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.output('my message',APP_LOG_LEVEL.WARNING)]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="MEDIAOPTION" qualifiedName="com.servoy.j2db.scripting.solutionmodel.MEDIAOPTION">
      <constants>
        <constant clientSupport="ng,wc,sc" name="CROP">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be displayed at its original size. If the component is smaller
than the image, then only a part of the image will show up.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ENLARGE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be scaled up to fit the size of the component, if the component is
larger than the image. Can be used in combination with KEEPASPECT in order to preserve
the aspect ratio of the image.

It can also be used in combination with REDUCE, to cover all possibilities when
the size of the component is not known upfront.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="KEEPASPECT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.
Can be used in combination with REDUCE and/or ENLARGE, to maintain the aspect
ratio of the image while it is scaled down or up.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="REDUCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be scaled down to fit the size of the component, if the component
is smaller than the image. It can be used in combination with KEEPASPECT in order
to preserve the aspect ratio of the image.

It can also be used in combination with ENLARGE, to cover all possibilities when
the size of the component is not known upfront.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="MemDataSource" qualifiedName="com.servoy.j2db.dataprocessing.datasource.MemDataSource"/>
    <object clientSupport="wc,sc" publicName="PAGEORIENTATION" qualifiedName="com.servoy.j2db.scripting.solutionmodel.PAGEORIENTATION">
      <constants>
        <constant clientSupport="wc,sc" name="LANDSCAPE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Landscape page orientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Landscape page orientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.getForm("some_form");
form.defaultPageFormat = solutionModel.createPageFormat(792,612,72,72,72,72,SM_ORIENTATION.LANDSCAPE,SM_UNITS.PIXELS);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="PORTRAIT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Portrait page orientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Portrait page orientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.getForm("some_form");
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="REVERSE_LANDSCAPE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Reverse landscape page orientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Reverse landscape page orientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.getForm("some_form");
form.defaultPageFormat = solutionModel.createPageFormat(792,612,72,72,72,72,SM_ORIENTATION.REVERSE_LANDSCAPE,SM_UNITS.PIXELS);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="PARTS" qualifiedName="com.servoy.j2db.scripting.solutionmodel.PARTS">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="BODY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.BODY]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="FOOTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.FOOTER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="HEADER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.HEADER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LEADING_GRAND_SUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.LEADING_GRAND_SUMMARY]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LEADING_SUBSUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.LEADING_SUBSUMMARY]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TITLE_FOOTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.TITLE_FOOTER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TITLE_HEADER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.TITLE_HEADER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TRAILING_GRAND_SUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.TRAILING_GRAND_SUMMARY]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TRAILING_SUBSUMMARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSPart.TRAILING_SUBSUMMARY]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="wc,sc" publicName="PRINTSLIDING" qualifiedName="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING">
      <constants>
        <constant clientSupport="wc,sc" deprecated="true" name="ALLOW_MOVE_MIN_X">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[refer to PRINTSLIDING#ALLOW_MOVE_X]]></deprecated>
        </constant>
        <constant clientSupport="wc,sc" deprecated="true" name="ALLOW_MOVE_MIN_Y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[refer to PRINTSLIDING#ALLOW_MOVE_Y]]></deprecated>
        </constant>
        <constant clientSupport="wc,sc" deprecated="true" name="ALLOW_MOVE_PLUS_X">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[refer to PRINTSLIDING#ALLOW_MOVE_X]]></deprecated>
        </constant>
        <constant clientSupport="wc,sc" deprecated="true" name="ALLOW_MOVE_PLUS_Y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[refer to PRINTSLIDING#ALLOW_MOVE_Y]]></deprecated>
        </constant>
        <constant clientSupport="wc,sc" name="ALLOW_MOVE_X">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will move horizontally to align with its left neighbor,
if that left neighbor moves or increases/decreases its size.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var growHorizLabel = form.newLabel('Grow horizontal -- long text', 10, 30, 30, 20);
growHorizLabel.printSliding = SM_PRINT_SLIDING.GROW_WIDTH;
growHorizLabel.background = 'blue';
var moveHorizRightLabel = form.newLabel('Move horizontal right', 50, 30, 100, 20);
moveHorizRightLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_X;
moveHorizRightLabel.background = 'pink';
var shrinkHorizLabel = form.newLabel('Short', 10, 50, 100, 20);
shrinkHorizLabel.printSliding = SM_PRINT_SLIDING.SHRINK_WIDTH;
shrinkHorizLabel.background = 'green';
var moveHorizLeftLabel = form.newLabel('Move horizontal left', 100, 50, 150, 20);
moveHorizLeftLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_X;
moveHorizLeftLabel.background = 'magenta';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="ALLOW_MOVE_Y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will move vertically to align with its top neighbor,
if that neighbor moves or increases/decreases its size.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var growVertLabel = form.newLabel('Grow vertical', 10, 70, 100, 5);
growVertLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT;
growVertLabel.background = 'orange';
var moveVertDownLabel = form.newLabel('Move vertical down', 10, 75, 100, 20);
moveVertDownLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_Y;
moveVertDownLabel.background = 'cyan';
var shrinkVertLabel = form.newLabel('Shrink vertical', 10, 110, 100, 40);
shrinkVertLabel.printSliding = SM_PRINT_SLIDING.SHRINK_HEIGHT;
shrinkVertLabel.background = 'yellow';
var moveVertUpLabel = form.newLabel('Move vertical up', 10, 160, 100, 20);
moveVertUpLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_Y;
moveVertUpLabel.background = 'purple';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="GROW_HEIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will increase its height to adapt its content, if
the content is too large.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var growVertLabel = form.newLabel('Grow vertical', 10, 70, 100, 5);
growVertLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT;
growVertLabel.background = 'orange';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="GROW_WIDTH">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will increase its width to adapt its content, if the 
content is too large.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var growHorizLabel = form.newLabel('Grow horizontal -- long text', 10, 30, 30, 20);
growHorizLabel.printSliding = SM_PRINT_SLIDING.GROW_WIDTH;
growHorizLabel.background = 'blue';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="NO_SLIDING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
Makes the component not slide during printing. The component will
maintain its designtime location and size.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var noSlidingLabel = form.newLabel('No sliding -- long text', 10, 10, 30, 20);
noSlidingLabel.printSliding = SM_PRINT_SLIDING.NO_SLIDING;
noSlidingLabel.background = 'red';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="SHRINK_HEIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will decrease its height to adapt its content, if
the content is too small.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var shrinkVertLabel = form.newLabel('Shrink vertical', 10, 110, 100, 40);
shrinkVertLabel.printSliding = SM_PRINT_SLIDING.SHRINK_HEIGHT;
shrinkVertLabel.background = 'yellow';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
        <constant clientSupport="wc,sc" name="SHRINK_WIDTH">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will decrease its width to adapt its content, if the
content is too small.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = solutionModel.newForm('printForm', 'db:/example_data/parent_table', null, false, 400, 300);
var shrinkHorizLabel = form.newLabel('Short', 10, 50, 100, 20);
shrinkHorizLabel.printSliding = SM_PRINT_SLIDING.SHRINK_WIDTH;
shrinkHorizLabel.background = 'green';
forms['printForm'].controller.showPrintPreview();]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="PrinterJob" qualifiedName="com.servoy.j2db.documentation.scripting.docs.PrinterJob" scriptingName="PrinterJob"/>
    <object clientSupport="ng,wc,sc" publicName="QBAggregate" qualifiedName="com.servoy.j2db.querybuilder.impl.QBAggregate" scriptingName="QBAggregate">
      <properties>
        <property clientSupport="ng,wc,sc" name="abs">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.abs)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="asc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.asc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="avg">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.avg.eq(1))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="bit_length">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.bit_length)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="ceil">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.ceil)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="count">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="day">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.day)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="desc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.desc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="floor">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.floor)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="hour">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.hour)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="isNull">
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="len">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.len)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="lower">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.lower)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="max">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.max(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="min">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.min(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="minute">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.minute)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="month">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.month)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="not">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.not.eq(1))]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="round">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.round)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="second">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.second)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sqrt">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.sqrt)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sum">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.sum(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="trim">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.trim)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="upper">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.upper)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="year">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.year)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="between">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.between(0, 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="value1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cast">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.cast(QUERY_COLUMN_TYPES.TYPE_INTEGER))]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[string type, see QUERY_COLUMN_TYPES]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="concat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[valeu to concatenate with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="divide">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.divide(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to divide by]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="eq">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: equals]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.eq(1))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="ge">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.ge(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="gt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.gt(0))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBPart"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin(query2))]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBPart" typecode="com.servoy.j2db.querybuilder.impl.QBPart">
              <description><![CDATA[subquery]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin([1, 5, 99]))]]></sample>
          </samples>
          <parameters>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of values]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="le">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.le(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('Serv%'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="char"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like, with escape character]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('X_%', '_'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
            <parameter name="escape" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="char">
              <description><![CDATA[the escape char]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample', 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
            <parameter name="start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[start pos]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="lt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.lt(99))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="minus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.minus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to subtract]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="mod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.mod(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[mod arg]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="multiply">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.multiply(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to multiply with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="nullif">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.nullif('none'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[object to compare]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="plus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add up value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add up value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.plus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3, 2))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="len" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBColumn" qualifiedName="com.servoy.j2db.querybuilder.impl.QBColumn" scriptingName="QBColumn">
      <properties>
        <property clientSupport="ng,wc,sc" name="abs">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.abs)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="asc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.asc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="avg">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.avg.eq(1))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="bit_length">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.bit_length)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="ceil">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.ceil)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="count">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="day">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.day)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="desc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.desc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="floor">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.floor)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="hour">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.hour)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="isNull">
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="len">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.len)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="lower">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.lower)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="max">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.max(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="min">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.min(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="minute">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.minute)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="month">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.month)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="not">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.not.eq(1))]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="round">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.round)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="second">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.second)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sqrt">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.sqrt)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sum">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.sum(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="trim">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.trim)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="upper">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.upper)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="year">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.year)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="between">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.between(0, 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="value1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cast">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.cast(QUERY_COLUMN_TYPES.TYPE_INTEGER))]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[string type, see QUERY_COLUMN_TYPES]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="concat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[valeu to concatenate with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="divide">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.divide(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to divide by]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="eq">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: equals]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.eq(1))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="ge">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.ge(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="gt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.gt(0))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBPart"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin(query2))]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBPart" typecode="com.servoy.j2db.querybuilder.impl.QBPart">
              <description><![CDATA[subquery]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin([1, 5, 99]))]]></sample>
          </samples>
          <parameters>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of values]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="le">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.le(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('Serv%'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="char"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like, with escape character]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('X_%', '_'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
            <parameter name="escape" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="char">
              <description><![CDATA[the escape char]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample', 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
            <parameter name="start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[start pos]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="lt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.lt(99))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="minus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.minus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to subtract]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="mod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.mod(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[mod arg]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="multiply">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.multiply(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to multiply with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="nullif">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.nullif('none'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[object to compare]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="plus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add up value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add up value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.plus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3, 2))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="len" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBColumns" qualifiedName="com.servoy.j2db.querybuilder.impl.QBColumns"/>
    <object clientSupport="ng,wc,sc" publicName="QBCondition" qualifiedName="com.servoy.j2db.querybuilder.impl.QBCondition" scriptingName="QBCondition">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBFunction" qualifiedName="com.servoy.j2db.querybuilder.impl.QBFunction" scriptingName="QBFunction">
      <properties>
        <property clientSupport="ng,wc,sc" name="abs">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.abs)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="asc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an ascending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.asc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="avg">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.avg.eq(1))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="bit_length">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.bit_length)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="ceil">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.ceil)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="count">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="day">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract day from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.day)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="desc">
          <return type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an descending sort expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.desc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="floor">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.floor)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="hour">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract hour from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.hour)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="isNull">
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with null.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="len">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.len)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="lower">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.lower)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="max">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.max(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="min">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.min(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="minute">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract minute from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.minute)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="month">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract month from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.month)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="not">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a negated condition.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.not.eq(1))]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="round">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.round)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="second">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract second from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.second)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sqrt">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.sqrt)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sum">
          <return type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an aggregate expression.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
	.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.sum(10))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="trim">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.trim)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="upper">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.upper)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="year">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Extract year from date]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mydatecol.year)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="between">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column to a range of 2 values or other columns.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.between(0, 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="value1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cast">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create cast(column, type) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.cast(QUERY_COLUMN_TYPES.TYPE_INTEGER))]]></sample>
          </samples>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[string type, see QUERY_COLUMN_TYPES]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="concat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Concatename with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.firstname.concat(' ').concat(query.columns.lastname))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[valeu to concatenate with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="divide">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Divide by value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.divide(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to divide by]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="eq">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: equals]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.eq(1))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="ge">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.ge(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="gt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: greaterThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.gt(0))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBPart"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with subquery result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin(query2))]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBPart" typecode="com.servoy.j2db.querybuilder.impl.QBPart">
              <description><![CDATA[subquery]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isin">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.isin([1, 5, 99]))]]></sample>
          </samples>
          <parameters>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of values]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="le">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThanOrEqual]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.le(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('Serv%'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="like">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="char"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: like, with escape character]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.companyname.like('X_%', '_'))]]></sample>
          </samples>
          <parameters>
            <parameter name="pattern" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string value of the pattern]]></description>
            </parameter>
            <parameter name="escape" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="char">
              <description><![CDATA[the escape char]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(arg, start) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.locate('sample', 5))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
            <parameter name="start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[start pos]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="lt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.
Operator: lessThan]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Compare column with a value or another column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(query.columns.flag.lt(99))]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="minus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Subtract value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.minus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to subtract]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="mod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create mod(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.mod(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[mod arg]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="multiply">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Multiply with value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.multiply(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to multiply with]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="nullif">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.nullif('none'))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[object to compare]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="plus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add up value]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add up value]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.plus(2))]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(pos, len) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.mycol.substring(3, 2))]]></sample>
          </samples>
          <parameters>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="len" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBFunctions" qualifiedName="com.servoy.j2db.querybuilder.impl.QBFunctions">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="abs">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create abs(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynum.abs.eq(query.functions.abs(myval))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="bit_length">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create bit_length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.bit_length.eq(query.functions.bit_length('Sample'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cast">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Cast using type name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Cast using type name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[object to cast]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[type see QUERY_COLUMN_TYPES]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="ceil">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create ceil(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.ceil.eq(query.functions.ceil(myvar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[number object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="coalesce" varargs="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create year(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create year(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mycol.coalesce('defval').eq(query.functions.coalesce(myvar, 'defval')) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[arguments to coalesce]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="concat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create concat(args, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create concat(args, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/udm/contacts>} */
	var query = databaseManager.createSelect('db:/udm/contacts') //$NON-NLS-1$
	query.result.add(query.columns.name_first.concat(' ').concat(query.columns.name_last))
	var ds = databaseManager.getDataSetByQuery(query, -1)]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="day">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create day(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create day(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.day.eq(query.functions.day(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="divide">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create divide(args, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create divide(args, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.divide(2).eq(query.functions.divide(myvar, 2)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="floor">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create floor(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.floor.eq(query.functions.floor(myvar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[number object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="hour">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create hour(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create hour(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.hour.eq(query.functions.hour(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="len">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create length(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.len.eq(query.functions.len('Sample'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(str1, str2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(str1, str2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.locate('amp').eq(query.functions.locate('Sample', 'amp'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="string1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
            <parameter name="string2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to search in]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="locate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create locate(str1, str2, start) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create locate(str1, str2, start) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.locate('amp', 1).eq(query.functions.locate('Sample', 'amp', 1))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="string1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to locate]]></description>
            </parameter>
            <parameter name="string2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[string to search in]]></description>
            </parameter>
            <parameter name="start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[start pos]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="lower">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create lower(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.lower.eq(query.functions.lower('Sample'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="minus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create minus(args, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create minus(args, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.minus(2).eq(query.functions.minus(myvar, 2)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="minute">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create minute(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create minute(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.minute.eq(query.functions.minute(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="mod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create mod(dividend, divisor) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create mod(dividend, divisor) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.mod(2).eq(query.functions.mod(myvar, 2)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="dividend" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="divisor" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="month">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create month(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create month(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.month.eq(query.functions.month(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="multiply">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create multiply(args, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create multiply(args, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.multiply(2).eq(query.functions.multiply(myvar, 2)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="nullif">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg1, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create nullif(arg1, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.nullif('none').eq(query.functions.nullif('Sample', 'none'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="plus">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create plus(args, arg2) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create plus(args, arg2) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.plus(2).eq(query.functions.plus(myvar, 2)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg1" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="arg2" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="round">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create round(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynumcol.round.eq(query.functions.round(myvar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[number object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="second">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create second(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create second(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.second.eq(query.functions.second(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sqrt">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create sqrt(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mynum.sqrt.eq(query.functions.sqrt(myval))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(column, pos) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(column, pos) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.substring(3).eq(query.functions.substring('Sample', 3))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[column name]]></description>
            </parameter>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[position]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="substring">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create substring(column, pos, len) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create substring(column, pos, len) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.substring(3, 2).eq(query.functions.substring('Sample', 3, 2))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[column name]]></description>
            </parameter>
            <parameter name="pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[position]]></description>
            </parameter>
            <parameter name="len" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[length]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="trim">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create trim(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.trim.eq(query.functions.trim('Sample'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="upper">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create upper(column) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.upper.eq(query.functions.upper('Sample'))) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="year">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create year(date) expression]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create year(date) expression]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.mydatecol.year.eq(query.functions.year(mydatevar)) 
foundset.loadRecords(query);]]></sample>
          </samples>
          <parameters>
            <parameter name="arg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[date object]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBGroupBy" qualifiedName="com.servoy.j2db.querybuilder.impl.QBGroupBy">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBGroupBy" typecode="com.servoy.j2db.querybuilder.impl.QBGroupBy"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add column name to group-by clause.

Same as query.groupBy().add(join.getColumn("value"))]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add column name to group-by clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.groupBy.add(query.columns.orderid) // have to group by on pk when using having-conditions in (foundset) pk queries
.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="column" type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn">
              <description><![CDATA[the column to add to the query condition]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBGroupBy" typecode="com.servoy.j2db.querybuilder.impl.QBGroupBy"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add column name to group-by clause.

Same as query.groupBy().add(join.getColumn("value"))]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add column name to group-by clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.groupBy.add(query.columns.orderid) // have to group by on pk when using having-conditions in (foundset) pk queries
.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="function" type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction">
              <description><![CDATA[the function to add to the query]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addPk">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBGroupBy" typecode="com.servoy.j2db.querybuilder.impl.QBGroupBy"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the group by clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the group by clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
foundset.loadRecords(query)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBGroupBy" typecode="com.servoy.j2db.querybuilder.impl.QBGroupBy"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the to group-by clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the to group-by clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var q = foundset.getQuery()
q.where.add(q.columns.x.eq(100))
query.groupBy.clear.root.clearHaving()
foundset.loadRecords(q);]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBJoin" qualifiedName="com.servoy.j2db.querybuilder.impl.QBJoin">
      <properties>
        <property clientSupport="ng,wc,sc" name="columns">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumns" typecode="com.servoy.j2db.querybuilder.impl.QBColumns"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = foundset.getQuery();
query.result.add(query.columns.name, "name");
query.where.add(query.columns.orderdate.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="joins">
          <return type="com.servoy.j2db.querybuilder.impl.QBJoins" typecode="com.servoy.j2db.querybuilder.impl.QBJoins"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.
Joins added to this clause will be based on this table clauses table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().joins]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="on">
          <return type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.impl.QBLogicalCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the on clause for the join.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the on clause for the join.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
var query = databaseManager.createSelect('db:/example_data/person')
/** @type {QBJoin<db:/example_data/person>} */
var join1 = query.joins.add('db:/example_data/person')
join1.on.add(query.columns.parent_person_id.eq(join1.columns.person_id))
/** @type {QBJoin<db:/example_data/person>} */
var join2 = query.joins.add('db:/example_data/person')
join2.on.add(join1.columns.parent_person_id.eq(join2.columns.person_id))

query.where.add(join2.columns.name.eq('john'))
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.
The alias may be of the main table or any level deep joined table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid', 'opk')]]></sample>
          </samples>
          <parameters>
            <parameter name="columnTableAlias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the alias for the table]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the dataSource]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="getJoinType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[joinType.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the join type, one of IQueryBuilderJoin#LEFT_OUTER_JOIN, IQueryBuilderJoin#INNER_JOIN, IQueryBuilderJoin#RIGHT_OUTER_JOIN, IQueryBuilderJoin#FULL_JOIN]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the join type, one of IQueryBuilderJoin#LEFT_OUTER_JOIN, IQueryBuilderJoin#INNER_JOIN, IQueryBuilderJoin#RIGHT_OUTER_JOIN, IQueryBuilderJoin#FULL_JOIN]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableAlias">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the tableAlias]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></summary>
          </summaries>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBJoins" qualifiedName="com.servoy.j2db.querybuilder.impl.QBJoins">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')

 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or
			.add(query.columns.order_id.not.isin([1, 2, 3]))

			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)

	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBJoin" typecode="com.servoy.j2db.querybuilder.impl.QBJoin"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a join with join type IQueryBuilderJoin#LEFT_OUTER_JOIN and no alias for the joining table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a join with join type IQueryBuilderJoin#LEFT_OUTER_JOIN and no alias for the joining table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))
 // to add a join based on a relation, use the relation name
 var join2 = query.joins.add('orders_to_customers', 'cust')
	query.where.add(join2.columns.customerid.eq(999))
	foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBJoin" typecode="com.servoy.j2db.querybuilder.impl.QBJoin"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a join with no alias for the joining table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a join with no alias for the joining table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))
 // to add a join based on a relation, use the relation name
 var join2 = query.joins.add('orders_to_customers', 'cust')
	query.where.add(join2.columns.customerid.eq(999))
	foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source]]></description>
            </parameter>
            <parameter name="joinType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[join type, one of JSRelation.LEFT_OUTER_JOIN, JSRelation.INNER_JOIN, JSRelation.RIGHT_OUTER_JOIN, JSRelation.FULL_JOIN]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBJoin" typecode="com.servoy.j2db.querybuilder.impl.QBJoin"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a join clause from the parent query builder part to the specified data source.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a join clause from the parent query builder part to the specified data source.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))
 // to add a join based on a relation, use the relation name
 var join2 = query.joins.add('orders_to_customers', 'cust')
	query.where.add(join2.columns.customerid.eq(999))
	foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source]]></description>
            </parameter>
            <parameter name="joinType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[join type, one of IQueryBuilderJoin#LEFT_OUTER_JOIN, IQueryBuilderJoin#INNER_JOIN, IQueryBuilderJoin#RIGHT_OUTER_JOIN, IQueryBuilderJoin#FULL_JOIN]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the alias for joining table]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBJoin" typecode="com.servoy.j2db.querybuilder.impl.QBJoin"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a join based on relation or add a manual join.
When dataSourceOrRelation is a relation name, a join will be added based on the relation.
When dataSourceOrRelation is a data source, an empty join will be added with join type IQueryBuilderJoin#LEFT_OUTER_JOIN.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a join based on relation or add a manual join.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
 /** @type {QBJoin<db:/example_data/order_details>} */
	var join = query.joins.add('db:/example_data/order_details', JSRelation.INNER_JOIN, 'odetail')
	join.on.add(join.columns.orderid.eq(query.columns.orderid))
 // to add a join based on a relation, use the relation name
 var join2 = query.joins.add('orders_to_customers', 'cust')
	query.where.add(join2.columns.customerid.eq(999))
	foundset.loadRecords(query)]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSourceOrRelation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the alias for joining table]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getJoins" undocumented="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBJoin[]" typecode="[Lcom.servoy.j2db.querybuilder.impl.QBJoin;"/>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBLogicalCondition" qualifiedName="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" scriptingName="QBLogicalCondition">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.impl.QBLogicalCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a condition to the AND or OR condition list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a condition to the AND or OR condition list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.where.add(query.columns.orderdate.isNull)]]></sample>
          </samples>
          <parameters>
            <parameter name="condition" type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition">
              <description><![CDATA[the condition to add]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBParameter" qualifiedName="com.servoy.j2db.querybuilder.impl.QBParameter">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBParameters" qualifiedName="com.servoy.j2db.querybuilder.impl.QBParameters"/>
    <object clientSupport="ng,wc,sc" publicName="QBPart" qualifiedName="com.servoy.j2db.querybuilder.impl.QBPart" scriptingName="QBPart">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBResult" qualifiedName="com.servoy.j2db.querybuilder.impl.QBResult">
      <properties>
        <property clientSupport="ng,wc,sc" name="distinct">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get/set the distinct flag for the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get/set the distinct flag for the query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.distinct = true]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add an aggregate to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add an aggregate to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.label_text.max)]]></sample>
          </samples>
          <parameters>
            <parameter name="aggregate" type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate">
              <description><![CDATA[the aggregate to add to result]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBAggregate"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add an aggregate with alias to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add an aggregate with alias to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.item_count.max, 'maximum_items')]]></sample>
          </samples>
          <parameters>
            <parameter name="aggregate" type="com.servoy.j2db.querybuilder.impl.QBAggregate" typecode="com.servoy.j2db.querybuilder.impl.QBAggregate">
              <description><![CDATA[the aggregate to add to result]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[aggregate alias]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a column to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a column to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname)]]></sample>
          </samples>
          <parameters>
            <parameter name="column" type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn">
              <description><![CDATA[column to add to result]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a column with alias to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a column with alias to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname, 'customer_name')]]></sample>
          </samples>
          <parameters>
            <parameter name="column" type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn">
              <description><![CDATA[column to add to result]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[column alias]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a function result to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a function result to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.upper())]]></sample>
          </samples>
          <parameters>
            <parameter name="func" type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction">
              <description><![CDATA[the function to add to the result]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a function with alias result to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a function with alias result to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.custname.upper(), 'customer_name')]]></sample>
          </samples>
          <parameters>
            <parameter name="func" type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction">
              <description><![CDATA[the function to add to the result]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[function alias]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addPk">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.addPk()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="addValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a value to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a value to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.addValue(100)]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[value add to result]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a value with an alias to the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a value with an alias to the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.addValue(100, 'myvalue')]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[value add to result]]></description>
            </parameter>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[value alias]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the columns in the query result.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the columns in the query result.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.clear()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumns">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn[]" typecode="[Lcom.servoy.j2db.querybuilder.impl.QBColumn;"><![CDATA[An array of QBColumn thats in the select of this query.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[returns an array with all the columns that will be in the select of this query.
can return empty array. Then the system will auto append the pk when this query is used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[returns an array with all the columns that will be in the select of this query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var columns = query.result.getColumns();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBSelect" qualifiedName="com.servoy.j2db.querybuilder.impl.QBSelect" scriptingName="QBSelect">
      <properties>
        <property clientSupport="ng,wc,sc" name="and">
          <return type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.impl.QBLogicalCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an AND-condition to add conditions to.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an AND-condition to add conditions to.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(
	  query.or
	    .add(
	      query.and
		    .add(query.columns.flag.eq(1))
	    .add(query.columns.order_date.isNull)
		 )
	    .add(
	      query.and
	        .add(query.columns.flag.eq(2))
	        .add(query.column.order_date.gt(new Date()))
	     )
	);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="columns">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumns" typecode="com.servoy.j2db.querybuilder.impl.QBColumns"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = foundset.getQuery();
query.result.add(query.columns.name, "name");
query.where.add(query.columns.orderdate.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="functions">
          <return type="com.servoy.j2db.querybuilder.impl.QBFunctions" typecode="com.servoy.j2db.querybuilder.impl.QBFunctions"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the functions clause from a query, used for functions that are not tied to a column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the functions clause from a query, used for functions that are not tied to a column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.where.add(query.columns.shipname.upper.eq(query.functions.upper('servoy'))) //$NON-NLS-1$
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="groupBy">
          <return type="com.servoy.j2db.querybuilder.impl.QBGroupBy" typecode="com.servoy.j2db.querybuilder.impl.QBGroupBy"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the group by clause from a query]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the group by clause from a query]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="having">
          <return type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.impl.QBLogicalCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the having-part of the query, used to add conditions.
The conditions added here are AND-ed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the having-part of the query, used to add conditions.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries
.root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0))
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="joins">
          <return type="com.servoy.j2db.querybuilder.impl.QBJoins" typecode="com.servoy.j2db.querybuilder.impl.QBJoins"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.
Joins added to this clause will be based on this table clauses table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().joins]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="or">
          <return type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.impl.QBLogicalCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an OR-condition to add conditions to.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an OR-condition to add conditions to.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.where.add(
	  query.or
	    .add(
	      query.and
		    .add(query.columns.flag.eq(1))
	    .add(query.columns.order_date.isNull)
		 )
	    .add(
	      query.and
	        .add(query.columns.flag.eq(2))
	        .add(query.column.order_date.gt(new Date()))
	     )
	);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="params">
          <return type="com.servoy.j2db.querybuilder.impl.QBParameters" typecode="com.servoy.j2db.querybuilder.impl.QBParameters"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the named parameters from a query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the named parameters from a query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query.columns.contact_id.eq(query.getParameter('mycontactid')))

	// load orders where contact_id = 100
	query.params['mycontactid'] = 100
	foundset.loadRecords(query)

	// load orders where contact_id = 200
	query.params['mycontactid'] = 200
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="result">
          <return type="com.servoy.j2db.querybuilder.impl.QBResult" typecode="com.servoy.j2db.querybuilder.impl.QBResult"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the result part of the query, used to add result columns or values.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the result part of the query, used to add result columns or values.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.result.add(query.columns.company_id).add(query.columns.customerid)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="sort">
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the sorting part of the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the sorting part of the query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.sort
.add(query.joins.orders_to_order_details.columns.quantity.desc)
.add(query.columns.companyid)
foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="where">
          <return type="com.servoy.j2db.querybuilder.impl.QBWhereCondition" typecode="com.servoy.j2db.querybuilder.impl.QBWhereCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the where-part of the query, used to add conditions.
The conditions added here are AND-ed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the where-part of the query, used to add conditions.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = foundset.getQuery()
query.where.add(query.columns.flag.eq(1))]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="clearHaving">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the having-part of the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the having-part of the query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var q = foundset.getQuery()
q.where.add(q.columns.x.eq(100))
query.groupBy.clear.root.clearHaving()
foundset.loadRecords(q);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="exists">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get an exists-condition from a subquery]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get an exists-condition from a subquery]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.query.where.add(query.exists(query2))]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.
The alias may be of the main table or any level deep joined table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid', 'opk')]]></sample>
          </samples>
          <parameters>
            <parameter name="columnTableAlias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the alias for the table]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the dataSource]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="getParameter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBParameter" typecode="com.servoy.j2db.querybuilder.impl.QBParameter"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get or create a parameter for the query, this used to parameterize queries.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get or create a parameter for the query, this used to parameterize queries.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query.columns.contact_id.eq(query.getParameter('mycontactid')))

	// load orders where contact_id = 100
	query.params['mycontactid'] = 100
	foundset.loadRecords(query)

	// load orders where contact_id = 200
	query.params['mycontactid'] = 200
	foundset.loadRecords(query)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableAlias">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the tableAlias]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="not">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.IQueryBuilderCondition"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an negated condition.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an negated condition.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.query.where.add(query.not(query.columns.flag.eq(1)))]]></sample>
          </samples>
          <parameters>
            <parameter name="cond" type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.IQueryBuilderCondition">
              <description><![CDATA[the condition to negate]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="not">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.IQueryBuilderLogicalCondition"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an negated condition.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an negated condition.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.query.where.add(query.not(query.columns.flag.eq(1)))]]></sample>
          </samples>
          <parameters>
            <parameter name="cond" type="com.servoy.j2db.querybuilder.impl.QBLogicalCondition" typecode="com.servoy.j2db.querybuilder.IQueryBuilderLogicalCondition">
              <description><![CDATA[the logical condition to negate]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBSort" qualifiedName="com.servoy.j2db.querybuilder.impl.QBSort" scriptingName="QBSort">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBSorts" qualifiedName="com.servoy.j2db.querybuilder.impl.QBSorts">
      <properties>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Ad an ascending sorting on a column to the query sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Ad an ascending sorting on a column to the query sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.sort.add(query.columns.orderid)]]></sample>
          </samples>
          <parameters>
            <parameter name="columnSortAsc" type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn">
              <description><![CDATA[column to sort by]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBFunction"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Ad an ascending sorting on a column to the query sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Ad an ascending sorting on a column to the query sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.sort.add(query.columns.orderid)]]></sample>
          </samples>
          <parameters>
            <parameter name="functionSortAsc" type="com.servoy.j2db.querybuilder.impl.QBFunction" typecode="com.servoy.j2db.querybuilder.impl.QBFunction">
              <description><![CDATA[function to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSort"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Ad a sorting on a column to the query sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Ad a sorting on a column to the query sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.sort.add(query.columns.orderid.desc)]]></sample>
          </samples>
          <parameters>
            <parameter name="sort" type="com.servoy.j2db.querybuilder.impl.QBSort" typecode="com.servoy.j2db.querybuilder.impl.QBSort">
              <description><![CDATA[the sort to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="addPk">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the query sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add the tables' primary pk columns in alphabetical order to the query sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.sort.addPk()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBSorts" typecode="com.servoy.j2db.querybuilder.impl.QBSorts"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the sorting clause for the query.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the sorting clause for the query.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[query.sort.clear()]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBTableClause" qualifiedName="com.servoy.j2db.querybuilder.impl.QBTableClause">
      <properties>
        <property clientSupport="ng,wc,sc" name="columns">
          <return type="com.servoy.j2db.querybuilder.impl.QBColumns" typecode="com.servoy.j2db.querybuilder.impl.QBColumns"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the columns of the datasource that can be used for this query (select or where clause)]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var query = foundset.getQuery();
query.result.add(query.columns.name, "name");
query.where.add(query.columns.orderdate.isNull)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="joins">
          <return type="com.servoy.j2db.querybuilder.impl.QBJoins" typecode="com.servoy.j2db.querybuilder.impl.QBJoins"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.
Joins added to this clause will be based on this table clauses table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the joins clause of this table based clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().joins]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBColumn" typecode="com.servoy.j2db.querybuilder.impl.QBColumn"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.
The alias may be of the main table or any level deep joined table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a column from the table with given alias.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[foundset.getQuery().getColumn('orderid', 'opk')]]></sample>
          </samples>
          <parameters>
            <parameter name="columnTableAlias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the alias for the table]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of column to get]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the dataSource]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the datasource for this.]]></summary>
          </summaries>
        </function>
        <function clientSupport="ng,wc,sc" name="getTableAlias">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the tableAlias]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the table alias for this.]]></summary>
          </summaries>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QBWhereCondition" qualifiedName="com.servoy.j2db.querybuilder.impl.QBWhereCondition">
      <properties>
        <property clientSupport="ng,wc,sc" name="conditionnames">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the names for the conditions in the query where-clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the names for the conditions in the query where-clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var q = foundset.getQuery()
for (var c in q.where.conditionnames)
{
	var cond = q.where.getCondition(c)
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="parent">
          <return type="com.servoy.j2db.querybuilder.impl.QBTableClause" typecode="com.servoy.j2db.querybuilder.impl.QBTableClause"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent table clause, this may be a query or a join clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/person>} */
	var query = databaseManager.createSelect('db:/example_data/person')
	query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john'))
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="root">
          <return type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get query builder parent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/order_details>} */
	var subquery = databaseManager.createSelect('db:/example_data/order_details')
	
 /** @type {QBSelect<db:/example_data/orders>} */
	var query = databaseManager.createSelect('db:/example_data/orders')
	query.where.add(query
		.or 
			.add(query.columns.order_id.not.isin([1, 2, 3]))
			
			.add(query.exists(
					subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root
			))
		)
		
	foundset.loadRecords(query)]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBWhereCondition" typecode="com.servoy.j2db.querybuilder.impl.QBWhereCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a condition to the AND or OR condition list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a condition to the AND or OR condition list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.where.add(query.columns.orderdate.isNull)]]></sample>
          </samples>
          <parameters>
            <parameter name="condition" type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition">
              <description><![CDATA[the condition to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="add">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBWhereCondition" typecode="com.servoy.j2db.querybuilder.impl.QBWhereCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a named condition to the AND or OR condition list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a named condition to the AND or OR condition list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.where.add("mycond", query.columns.orderdate.isNull)]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the condition]]></description>
            </parameter>
            <parameter name="condition" type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition">
              <description><![CDATA[the condition to add]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="clear">
          <argumentsTypes/>
          <return type="com.servoy.j2db.querybuilder.impl.QBWhereCondition" typecode="com.servoy.j2db.querybuilder.impl.QBWhereCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Clear the conditions in the query where-clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Clear the conditions in the query where-clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.where.clear()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getCondition">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBCondition" typecode="com.servoy.j2db.querybuilder.impl.QBCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a named condition in the query where-clause.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a named condition in the query where-clause.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var q = foundset.getQuery()
for (var c in q.where.conditionnames)
{
	var cond = q.where.getCondition(c)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="remove">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.querybuilder.impl.QBWhereCondition" typecode="com.servoy.j2db.querybuilder.impl.QBWhereCondition"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Remove a named condition from the AND or OR condition list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Remove a named condition from the AND or OR condition list.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders')
query.where.remove("mycond")]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="QUERY_COLUMN_TYPES" qualifiedName="com.servoy.j2db.querybuilder.impl.QUERY_COLUMN_TYPES">
      <constants>
        <constant clientSupport="ng,wc,sc" name="TYPE_BIG_DECIMAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_BIG_INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_BINARY">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_BLOB">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_BOOLEAN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_BYTE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_CHARACTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_CLOB">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_DATE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_DOUBLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_FLOAT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_IMAGE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_SHORT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_STRING">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_TIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_TIMESTAMP">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant used for casting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[/** @type {QBSelect<db:/example_data/orders>} */
var query = databaseManager.createSelect('db:/example_data/orders') //$NON-NLS-1$
query.result.add(query.functions.cast("22",QUERY_COLUMN_TYPES.TYPE_INTEGER)).add(query.columns.amt_discount.cast(QUERY_COLUMN_TYPES.TYPE_STRING)); 
application.output(databaseManager.getDataSetByQuery(query,1).getAsHTML())]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="Renderable" qualifiedName="com.servoy.j2db.ui.IScriptRenderMethodsWithOptionalProps" scriptingName="Renderable">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.imageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.imageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.imageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeAccordionPanel" qualifiedName="com.servoy.j2db.ui.IScriptAccordionPanelMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the selected tab index for the specified tabpanel.
When setting the value either the tab index or the tab name can be used.
When getting the value, the tab index (not the name) will be returned all the time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the selected tab index for the specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected tab index of the tabpanel
var current = %%prefix%%%%elementName%%.tabIndex;

//sets (goes to) the selected tabIndex of the tabpanel
%%prefix%%%%elementName%%.tabIndex = current + 1;

//or sets (goes to) the tab with the specified name
%%prefix%%%%elementName%%.tabIndex = 'tab_name';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="addTab">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.addTab(forms.orders,'ordersTab','Orders',null,null,'#000000','#BBCCEE');]]></sample>
          </samples>
          <parameters>
            <parameter name="form/formname">
              <description><![CDATA[the specified form/form name you wish to add as a tab]]></description>
            </parameter>
            <parameter name="name" optional="true">
              <description><![CDATA[the specified name for the tab or NULL (default is null)]]></description>
            </parameter>
            <parameter name="tabText" optional="true">
              <description><![CDATA[the specified text for the tab (default is null)]]></description>
            </parameter>
            <parameter name="tooltip" optional="true">
              <description><![CDATA[a specified tooltip for the tab (default is null)]]></description>
            </parameter>
            <parameter name="iconURL" optional="true">
              <description><![CDATA[a specified icon image or icon URL for the tab (default is null)]]></description>
            </parameter>
            <parameter name="fg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal foreground color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="bg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal background color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="relatedfoundset/relationname" optional="true">
              <description><![CDATA[the specified name of the related foundset (default is null)]]></description>
            </parameter>
            <parameter name="index" optional="true">
              <description><![CDATA[the specified index of a tab, default is -1, will add tab to the end, this index is 0 based]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMaxTabIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[maximum tab index (number)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var max = %%prefix%%%%elementName%%.getMaxTabIndex();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The mnemonic.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var mnemonic = %%prefix%%%%elementName%%.getMnemonicAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[color as hexadecimal RGB string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var color = %%prefix%%%%elementName%%.getTabFGColorAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabFormNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the name of the form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var formName = %%prefix%%%%elementName%%.getSelectedTabFormName(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The tab name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabName = %%prefix%%%%elementName%%.getTabNameAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabRelationNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[relation name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relName = %%prefix%%%%elementName%%.getTabRelationNameAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The tab text.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the text for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the text for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabText = %%prefix%%%%elementName%%.getTabTextAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="isTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if tab is enabled, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var status = %%prefix%%%%elementName%%.isTabEnabledAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeAllTabs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tabs were successfully removed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes all tabs for a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes all tabs for a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.removeAllTabs();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTabAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully removed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.

NOTE: In Servoy 4.x (and higher), the addTab function applies to relationless or related tabs in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.removeTabAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[The index of the tab to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setMnemonicAt(3,'a');]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the status of a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the status of a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabEnabledAt(3,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
            <parameter name="b" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if enabled; or false if disabled.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabFGColorAt(3,'#000000');]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the hexadecimal RGB color value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the text for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the text for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabTextAt(3,'newTitle');]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeBean" qualifiedName="com.servoy.j2db.ui.IScriptMobileBean">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" name="innerHTML">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Gets or sets the innerHTML that is displayed on the bean's div]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Gets or sets the innerHTML that is displayed on the bean's div]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[//gets the innerHTML of the element
var my_bean_innerHTML = %%prefix%%%%elementName%%.innerHTML;

//sets the innerHTML of the element
%%prefix%%%%elementName%%.innerHTML = '<div>my inner HTML</div>';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc" deprecated="true" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Gets or sets the text that is displayed on the bean]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Gets or sets the text that is displayed on the bean]]></summary>
          </summaries>
          <deprecated><![CDATA[by innerHTML property]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[//gets the text of the element
var my_text = %%prefix%%%%elementName%%.text;

//sets the text of the element
%%prefix%%%%elementName%%.text = my_text + 'is cool';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeButton" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeButton">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.imageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.imageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.imageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.rolloverImageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.rolloverImageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.rolloverImageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the text that is displayed on the label, button or image.

NOTE: The .text property applies to labels, buttons, or images ONLY.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the text that is displayed on the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the text of the element
var my_text = %%prefix%%%%elementName%%.text;

//sets the text of the element
%%prefix%%%%elementName%%.text = my_text + 'is cool';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage();
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50, 50);
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target width, use -1 for original image width.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target height, use -1 for original image height.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeCalendar" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeCalendar">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeCheck" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeCheck">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeChecks" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeChecks">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeCombobox" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeCombobox">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="RuntimeComponent" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeComponent" scriptingName="RuntimeComponent">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeDataButton" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeDataButton">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.imageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.imageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.imageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.rolloverImageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.rolloverImageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.rolloverImageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage();
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50, 50);
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target width, use -1 for original image width.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target height, use -1 for original image height.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeDataLabel" qualifiedName="com.servoy.j2db.ui.IScriptDataLabelMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.imageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.imageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.imageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.rolloverImageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.rolloverImageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.rolloverImageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The label for property (String).]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the label for property of a label. This property is used to link a label to a certain element (by default used for tableview header, form security, can be used for custom purposes ).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the label for property of a label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getLabelForElementName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getParameterValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The parameter value as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the http request parameter for a submit within html label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the http request parameter for a submit within html label.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, the method is obsolete.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var param = %%prefix%%%%elementName%%.getParameterValue('my_parameter');]]></sample>
          </samples>
          <parameters>
            <parameter name="param" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Parameter that was sent in request.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage();
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50, 50);
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target width, use -1 for original image width.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target height, use -1 for original image height.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="RuntimeForm" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Form" scriptingName="RuntimeForm">
      <properties>
        <property clientSupport="ng,wc,sc" name="_super">
          <return type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.scripting.FormScope"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Provides access to the methods of the parent of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Provides access to the methods of the parent of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%_super.some_method();]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="alldataproviders" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all dataproviders of the form's foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all dataproviders of the form's foundset.]]></summary>
          </summaries>
          <deprecated><![CDATA[use foundset.alldataproviders instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var dataprovidersNames = %%prefix%%alldataproviders;
application.output("This form has " + dataprovidersNames.length + " data providers.")
for (var i=0; i<dataprovidersNames.length; i++)
	application.output(dataprovidersNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allmethods" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all script names of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all script names of the form.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel - JSForm.getMethods(Boolean) or JSForm.getMethods() instead;
an exact replacement, if you need it would be 'solutionModel.getForm(controller.getName()).getMethods().map(function (jsMethod) { return jsMethod.getName() } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var methodNames = %%prefix%%allmethods;
application.output("This form has " + methodNames.length + " methods defined.")
for (var i=0; i<methodNames.length; i++)
	application.output(methodNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allnames" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the names of all elements on the form as an array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the names of all elements on the form as an array.]]></summary>
          </summaries>
          <deprecated><![CDATA[use elements.allnames instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var names = %%prefix%%allnames;
application.output("This form has " + names.length + " named items.")
for (var i=0; i<names.length; i++)
	application.output(names[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allrelations" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all relation names of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all relation names of the form.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel.getRelations(dataSource) instead, where dataSource is provided by solution model's JSForm.dataSource or controller.getDataSource();
an exact replacement, if you need it would be 'solutionModel.getRelations(controller.getDataSource()).map(function (jsRelation) { return jsRelation.name } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var relationsNames = %%prefix%%allrelations;
application.output("This form has " + relationsNames.length + " relations.")
for (var i=0; i<relationsNames.length; i++)
	application.output(relationsNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" deprecated="true" name="allvariables" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get all form variable names.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get all form variable names.]]></summary>
          </summaries>
          <deprecated><![CDATA[use solutionModel - JSForm.getVariables(Boolean) or JSForm.getVariables() instead;
an exact replacement, if you need it would be 'solutionModel.getForm(controller.getName()).getVariables().map(function (jsVariable) { return jsVariable.name } )'.]]></deprecated>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var varNames = %%prefix%%allvariables;
application.output("This form has " + varNames.length + " variables defined.")
for (var i=0; i<varNames.length; i++)
	application.output(varNames[i]);]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="controller">
          <return type="com.servoy.j2db.BasicFormController$JSForm" typecode="com.servoy.j2db.BasicFormController$JSForm"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the controller of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the controller of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[%%prefix%%controller.enabled = !%%prefix%%controller.enabled;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="elements">
          <return type="com.servoy.j2db.documentation.scripting.docs.FormElements" typecode="com.servoy.j2db.documentation.scripting.docs.FormElements"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an array with the elements in the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an array with the elements in the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var elems = %%prefix%%elements;
application.output("This form has " + elems.length + " named elements.")
for (var i=0; i<elems.length; i++)
	application.output(elems[i].getName());]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="foundset">
          <return type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the foundset of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the foundset of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[application.output("selected index in form foundset: " + %%prefix%%foundset.getSelectedIndex());]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeGroup" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeGroup">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeHtmlArea" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeHtmlArea">
      <properties>
        <property clientSupport="ng,wc,sc" name="URL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only. 

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the relative URL of the HTML_AREA field
%%prefix%%%%elementName%%.URL = "http://www.examples.com/icon.gif";

//gets the relative URL of the HTML_AREA field
var theURL = %%prefix%%%%elementName%%.URL;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="baseURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the base URL of theField when display is HTML_AREA
var baseURL = %%prefix%%%%elementName%%.baseURL;

//sets the base URL of theField when display is HTML_AREA
%%prefix%%%%elementName%%.baseURL = "http://www.examples.com";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="caretPosition">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.
 
NOTE: This does not work in Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsPlainText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the plain text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only. It is for Smart Client use only.

NOTE: As of Servoy 4.x (and higher) you can also get/set the relative or absolute URL for an HTML_AREA field element. For more detail, see the .URL and .baseURL field element runtime properties earlier in this section.

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getAsPlainText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The selected text from the component.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area. 

NOTE: This does not work for text fields in the Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          </samples>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="selectAll">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeImageMedia" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeImageMedia">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeInsetList" qualifiedName="com.servoy.j2db.ui.IScriptInsetListComponentMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="recordIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get record index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get record index.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#getSelectedIndex().]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="deleteRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.deleteRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// adds the duplicated record on top
%%prefix%%%%elementName%%.duplicateRecord();

adds the duplicated record as the topmost record of the foundset]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// adds the duplicated record on top
%%prefix%%%%elementName%%.duplicateRecord(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="addOnTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[add on top (default true)
adds the duplicated record to the foundset]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getMaxRecordIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[As of release 5.x, replaced by foundset#getSize().]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The selected index (integer).]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSortColumns">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[array with column names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getSortColumns();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items 
%%prefix%%%%elementName%%.newRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items 
//adds the new record on top
%%prefix%%%%elementName%%.newRecord(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="addOnTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[adds the new portal record as the topmost row of the foundset, default value is true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setRecordIndex" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeLabel" qualifiedName="com.servoy.j2db.ui.IScriptScriptLabelMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="imageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.imageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.imageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.imageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="mnemonic">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rolloverImageURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets/Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.rolloverImageURL = "http://www.servoy.com/images/test.gif";

//sets an image from your own image library
%%prefix%%%%elementName%%.rolloverImageURL = "media:///arrow.gif";

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.rolloverImageURL = 'media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the text that is displayed on the label, button or image.

NOTE: The .text property applies to labels, buttons, or images ONLY.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the text that is displayed on the label, button or image.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the text of the element
var my_text = %%prefix%%%%elementName%%.text;

//sets the text of the element
%%prefix%%%%elementName%%.text = my_text + 'is cool';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The label for property (String).]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the label for property of a label. This property is used to link a label to a certain element (by default used for tableview header, form security, can be used for custom purposes ).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the label for property of a label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getLabelForElementName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getParameterValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The parameter value as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the http request parameter for a submit within html label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the http request parameter for a submit within html label.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, the method is obsolete.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var param = %%prefix%%%%elementName%%.getParameterValue('my_parameter');]]></sample>
          </samples>
          <parameters>
            <parameter name="param" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Parameter that was sent in request.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage();
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[An array of bytes.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the image data in .]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50, 50);
plugins.file.writeFile("mypicture.jpg", jpgData);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target width, use -1 for original image width.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The target height, use -1 for original image height.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeListBox" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeListBox">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedElements">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[array with selected values]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the selected values (real values from valuelist) as array. The form element should have a dataProviderID assigned in order for this to work.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the selected values (real values from valuelist) as array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var values = %%prefix%%%%elementName%%.getSelectedElements();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimePassword" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimePassword">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//get the placeholder text
var placeholderText = %%prefix%%%%elementName%%.placeholderText;
//set another placeholder
%%prefix%%%%elementName%%.placeholderText = 'Search..';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimePortal" qualifiedName="com.servoy.j2db.ui.IScriptPortalComponentMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="recordIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get record index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get record index.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#getSelectedIndex().]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="deleteRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.deleteRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// adds the duplicated record on top
%%prefix%%%%elementName%%.duplicateRecord();

adds the duplicated record as the topmost record of the foundset]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// adds the duplicated record on top
%%prefix%%%%elementName%%.duplicateRecord(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="addOnTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[add on top (default true)
adds the duplicated record to the foundset]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getMaxRecordIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[As of release 5.x, replaced by foundset#getSize().]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The selected index (integer).]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSortColumns">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[array with column names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getSortColumns();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items 
%%prefix%%%%elementName%%.newRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items 
//adds the new record on top
%%prefix%%%%elementName%%.newRecord(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="addOnTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[adds the new portal record as the topmost row of the foundset, default value is true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeRadio" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeRadio">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeRadios" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeRadios">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedElements">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"><![CDATA[array with selected values]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the selected values (real values from valuelist) as array. The form element should have a dataProviderID assigned in order for this to work.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the selected values (real values from valuelist) as array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var values = %%prefix%%%%elementName%%.getSelectedElements();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeRectangle" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeRectangle">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeRtfArea" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeRtfArea">
      <properties>
        <property clientSupport="ng,wc,sc" name="URL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only. 

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the relative URL of the HTML_AREA field
%%prefix%%%%elementName%%.URL = "http://www.examples.com/icon.gif";

//gets the relative URL of the HTML_AREA field
var theURL = %%prefix%%%%elementName%%.URL;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="baseURL">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the base URL of theField when display is HTML_AREA
var baseURL = %%prefix%%%%elementName%%.baseURL;

//sets the base URL of theField when display is HTML_AREA
%%prefix%%%%elementName%%.baseURL = "http://www.examples.com";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="caretPosition">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.
 
NOTE: This does not work in Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getAsPlainText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the plain text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only. It is for Smart Client use only.

NOTE: As of Servoy 4.x (and higher) you can also get/set the relative or absolute URL for an HTML_AREA field element. For more detail, see the .URL and .baseURL field element runtime properties earlier in this section.

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getAsPlainText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The selected text from the component.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area. 

NOTE: This does not work for text fields in the Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          </samples>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="selectAll">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeSpinner" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeSpinner">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeSplitPane" qualifiedName="com.servoy.j2db.ui.IScriptSplitPaneMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="continuousLayout">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets if the components should continuously be redrawn as the divider changes position.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets if the components should continuously be redrawn as the divider changes position.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.continuousLayout = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="dividerLocation">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets divider location.
If location is less then 1 then the location will be considered at (location * 100) percent of the split pane from left,
otherwise it will represent the pixels from left.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets divider location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.dividerLocation = 0.75;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="dividerSize">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets divider size in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets divider size in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.dividerSize = 10;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="leftFormMinSize">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets left form minimum size in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets left form minimum size in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.leftFormMinSize = 100;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="resizeWeight">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Specifies how to distribute extra space when the size of the split pane changes.
A value of 0, the default, indicates the right/bottom component gets all the extra space (the left/top component acts fixed),
where as a value of 1 specifies the left/top component gets all the extra space (the right/bottom component acts fixed).
Specifically, the left/top component gets (weight * diff) extra space and the right/bottom component gets (1 - weight) * diff extra space]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Specifies how to distribute extra space when the size of the split pane changes.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.resizeWeight = 0.5;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="rightFormMinSize">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets right form minimum size in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets right form minimum size in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.rightFormMinSize = 100;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="tabIndex" undocumented="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="addTab" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <parameters>
            <parameter name="vargs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLeftForm">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.scripting.FormScope"><![CDATA[left form of the split pane]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the left form of the split pane.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the left form of the split pane.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var leftForm = %%prefix%%%%elementName%%.getLeftForm();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getMaxTabIndex" undocumented="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
        </function>
        <function clientSupport="ng,wc,sc" name="getMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The mnemonic.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var mnemonic = %%prefix%%%%elementName%%.getMnemonicAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRightForm">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.scripting.FormScope"><![CDATA[right form of the split pane]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the right form of the split pane.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the right form of the split pane.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rightForm = %%prefix%%%%elementName%%.getRightForm();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabFGColorAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabFormNameAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabNameAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabRelationNameAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabTextAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isTabEnabledAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeAllTabs" undocumented="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeTabAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLeftForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as left panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as left panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLeftForm(forms.orders);]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified form or form name you wish to add as left panel]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLeftForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as left panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as left panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLeftForm(forms.orders,'orders_to_order_details');]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified form or form name you wish to add as left panel]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the relation name or a related foundset or null for relationless]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setMnemonicAt(3,'a');]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setRightForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as right panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as right panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setRightForm(forms.orders);]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified form or form name you wish to add as right panel]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setRightForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as right panel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a relationless or related form as right panel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setRightForm(forms.orders,'orders_to_order_details');]]></sample>
          </samples>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the specified form or form name you wish to add as right panel]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the relation name or a related foundset or null for relationless]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setTabEnabledAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="b" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setTabFGColorAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="clr" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setTabTextAt" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeTabPanel" qualifiedName="com.servoy.j2db.ui.IScriptTabPanelMethods">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="tabIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the selected tab index for the specified tabpanel.
When setting the value either the tab index or the tab name can be used.
When getting the value, the tab index (not the name) will be returned all the time.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the selected tab index for the specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the selected tab index of the tabpanel
var current = %%prefix%%%%elementName%%.tabIndex;

//sets (goes to) the selected tabIndex of the tabpanel
%%prefix%%%%elementName%%.tabIndex = current + 1;

//or sets (goes to) the tab with the specified name
%%prefix%%%%elementName%%.tabIndex = 'tab_name';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="addTab">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.addTab(forms.orders,'ordersTab','Orders',null,null,'#000000','#BBCCEE');]]></sample>
          </samples>
          <parameters>
            <parameter name="form/formname">
              <description><![CDATA[the specified form/form name you wish to add as a tab]]></description>
            </parameter>
            <parameter name="name" optional="true">
              <description><![CDATA[the specified name for the tab or NULL (default is null)]]></description>
            </parameter>
            <parameter name="tabText" optional="true">
              <description><![CDATA[the specified text for the tab (default is null)]]></description>
            </parameter>
            <parameter name="tooltip" optional="true">
              <description><![CDATA[a specified tooltip for the tab (default is null)]]></description>
            </parameter>
            <parameter name="iconURL" optional="true">
              <description><![CDATA[a specified icon image or icon URL for the tab (default is null)]]></description>
            </parameter>
            <parameter name="fg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal foreground color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="bg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal background color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="relatedfoundset/relationname" optional="true">
              <description><![CDATA[the specified name of the related foundset (default is null)]]></description>
            </parameter>
            <parameter name="index" optional="true">
              <description><![CDATA[the specified index of a tab, default is -1, will add tab to the end, this index is 0 based]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMaxTabIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[maximum tab index (number)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var max = %%prefix%%%%elementName%%.getMaxTabIndex();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The mnemonic.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the mnemonic for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var mnemonic = %%prefix%%%%elementName%%.getMnemonicAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getSelectedTabFormName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 3.x, replaced by #getTabFormNameAt(int).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTabBGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[As of release 5.0, method is obsolete.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[color as hexadecimal RGB string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var color = %%prefix%%%%elementName%%.getTabFGColorAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabFormNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the name of the form]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var formName = %%prefix%%%%elementName%%.getSelectedTabFormName(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The tab name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabName = %%prefix%%%%elementName%%.getTabNameAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabRelationNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[relation name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relName = %%prefix%%%%elementName%%.getTabRelationNameAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The tab text.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the text for a specified tab of a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the text for a specified tab of a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabText = %%prefix%%%%elementName%%.getTabTextAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isTabEnabled">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 3.x, replaced by #isTabEnabledAt(int).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="isTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if tab is enabled, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var status = %%prefix%%%%elementName%%.isTabEnabledAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeAllTabs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tabs were successfully removed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes all tabs for a specified tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes all tabs for a specified tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.removeAllTabs();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="removeTabAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[a boolean value indicating if tab was successfully removed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.

NOTE: In Servoy 4.x (and higher), the addTab function applies to relationless or related tabs in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.removeTabAt(3);]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[The index of the tab to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setMnemonicAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the mnemonic for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setMnemonicAt(3,'a');]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setTabBGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 5.0, method is obsolete.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setTabEnabled">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 3.x, replaced by #setTabEnabledAt(int,boolean).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the status of a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the status of a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabEnabledAt(3,true);]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
            <parameter name="b" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if enabled; or false if disabled.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabFGColorAt(3,'#000000');]]></sample>
          </samples>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the hexadecimal RGB color value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the text for a specified tab in a tabpanel.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the text for a specified tab in a tabpanel.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setTabTextAt(3,'newTitle');]]></sample>
          </samples>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeTextArea" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeTextArea">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="caretPosition">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.
 
NOTE: This does not work in Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//get the placeholder text
var placeholderText = %%prefix%%%%elementName%%.placeholderText;
//set another placeholder
%%prefix%%%%elementName%%.placeholderText = 'Search..';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScrollY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y scroll location in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of an element using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y scroll location of specified element - only for an element where height of element is less than the height of element content.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The selected text from the component.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area. 

NOTE: This does not work for text fields in the Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          </samples>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="selectAll">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for an element where the height of the element is greater than the height of element content

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of an element; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the scroll location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" extendsComponent="com.servoy.j2db.ui.runtime.IRuntimeComponent" publicName="RuntimeTextField" qualifiedName="com.servoy.j2db.ui.runtime.IRuntimeTextField">
      <properties>
        <property clientSupport="ng,wc,sc" name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the background color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="border">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

It only returns it's correct value if it was explicitly set.

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the border attribute(s) of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
%%prefix%%%%elementName%%.border = 'LineBorder,1,#ccffcc';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="caretPosition">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.
 
NOTE: This does not work in Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="editable">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.
It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="font">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points). 

It only returns it's correct value if it was explicitly set.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the font name, style, and size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.font = 'Tahoma,1,11';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="format">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.

There are different options for the different dataprovider types that are assigned to this field.
For Integer fields, there is a display and an edit format, using http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and the max (string) length can be set.
For Text/String fields, there are options to force uppercase,lowercase or only numbers. Or a mask can be set that restrict the input the pattern chars can be found here: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/MaskFormatter.html
A mask can have a placehoder (what is shown when there is no data) and if the data must be stored raw (without literals of the mask). A max text length can also be set to force
the max text length input, this doesn't work on mask because that max length is controlled with the mask.
For Date fields a display and edit format can be set by using a pattern from here: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html, you can also say this must behave like a mask (the edit format)
A mask only works with when the edit format is exactly that mask (1 char is 1 number/char), because for example MM then only 2 numbers are allowed MMM that displays the month as a string is not supported as a mask.
Some examples are "dd-MM-yyyy", "MM-dd-yyyy", etc.
The format property is also used to set the UI Converter, this means that you can convert the value object to something else before it gets set into the field, this can also result in a type change of the data. 
So a string in scripting/db is converted to a integer in the ui, then you have to set an integer format.
It only returns it's correct value if it was explicitly set, otherwise null.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the display formatting of an element for number and text values; does not affect the actual value stored in the database column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="placeholderText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the placeholder text in a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//get the placeholder text
var placeholderText = %%prefix%%%%elementName%%.placeholderText;
//set another placeholder
%%prefix%%%%elementName%%.placeholderText = 'Search..';]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="titleText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the title text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var titleText = %%prefix%%%%elementName%%.titleText;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 

NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.

NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the form in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[The value of the property for specified key.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The data provider as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.elements.mylabel.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The display type of the element as String.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the type of a specified element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the height of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLabelForElementNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[An array with element names.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var array = elements.name_first.getLabelForElementNames();
for (var i = 0; i<array.length; i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the x location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y location of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element. The method can only be used in Record view.

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the y location of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The name of the element.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns the name of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSelectedText">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The selected text from the component.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area. 

NOTE: This does not work for text fields in the Web Client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the currently selected text in the specified text field or text area.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getValueListName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[The valuelist name.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width of the element in pixels.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the width of the current element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          </samples>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          </samples>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Request the focus in this element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components), skip on focus gained method call
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="selectAll">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Selects all the contents of a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.
Please note that location should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the location of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          </samples>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element. It takes as input the width and the height. 
Please note that size should not be altered at runtime when an element is anchored. Use the solutionModel in such a situation.

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the size of an element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).
This does not effect the value list with same name list on other elements or value lists at application level.

Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.

NOTE: if you modify values for checkbox/radio field, note that having one value in valuelist is a special case, so switching between one value and 0/multiple values after form is created may have side effects]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="SCROLLBAR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.SCROLLBAR">
      <constants>
        <constant clientSupport="ng,wc,sc" name="HORIZONTAL_SCROLLBAR_ALWAYS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are always displayed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are always displayed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HORIZONTAL_SCROLLBAR_AS_NEEDED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are displayed only when needed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are displayed only when needed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HORIZONTAL_SCROLLBAR_NEVER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are never displayed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are never displayed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SCROLLBARS_WHEN_NEEDED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal and vertical scroll bar policy so that both scrollbars are displayed
only when needed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the horizontal and vertical scroll bar policy so that both scrollbars are displayed
only when needed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
// This is the default option, but if you really want you can set it explicitly.
neededScrollbars.scrollbars = SM_SCROLLBAR.SCROLLBARS_WHEN_NEEDED;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="VERTICAL_SCROLLBAR_ALWAYS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are always displayed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are always displayed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="VERTICAL_SCROLLBAR_AS_NEEDED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are displayed only when needed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are displayed only when needed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="VERTICAL_SCROLLBAR_NEVER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are never displayed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are never displayed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="SQL_ACTION_TYPES" qualifiedName="com.servoy.j2db.scripting.info.SQL_ACTION_TYPES">
      <constants>
        <constant clientSupport="ng,wc,sc" name="DELETE_ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the "delete" SQL action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the "delete" SQL action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
	application.output("it was an insert");
else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
	application.output("it was a delete");
else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
	application.output("it was an update");
else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
	application.output("it was a select");
else if (action == SQL_ACTION_TYPES.NO_ACTION)
	application.output("it was nothing");
else
	application.output("what was this?");]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INSERT_ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the "insert" SQL action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the "insert" SQL action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
	application.output("it was an insert");
else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
	application.output("it was a delete");
else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
	application.output("it was an update");
else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
	application.output("it was a select");
else if (action == SQL_ACTION_TYPES.NO_ACTION)
	application.output("it was nothing");
else
	application.output("what was this?");]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant expressing that no SQL action took place.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant expressing that no SQL action took place.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
	application.output("it was an insert");
else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
	application.output("it was a delete");
else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
	application.output("it was an update");
else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
	application.output("it was a select");
else if (action == SQL_ACTION_TYPES.NO_ACTION)
	application.output("it was nothing");
else
	application.output("what was this?");]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SELECT_ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the "select" SQL action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the "select" SQL action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
	application.output("it was an insert");
else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
	application.output("it was a delete");
else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
	application.output("it was an update");
else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
	application.output("it was a select");
else if (action == SQL_ACTION_TYPES.NO_ACTION)
	application.output("it was nothing");
else
	application.output("what was this?");]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UPDATE_ACTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant for the "update" SQL action.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant for the "update" SQL action.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
	application.output("it was an insert");
else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
	application.output("it was a delete");
else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
	application.output("it was an update");
else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
	application.output("it was a select");
else if (action == SQL_ACTION_TYPES.NO_ACTION)
	application.output("it was nothing");
else
	application.output("what was this?");]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Security" qualifiedName="com.servoy.j2db.scripting.JSSecurity" scriptingName="security">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ACCESSIBLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the accessible flag for form security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the accessible flag for form security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DELETE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the delete flag for table security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the delete flag for table security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INSERT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the insert flag for table security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the insert flag for table security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="READ">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the read flag for table security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the read flag for table security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TRACKING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the tracking flag for table security (tracks sql insert/update/delete).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the tracking flag for table security (tracks sql insert/update/delete).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TRACKING_VIEWS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the tracking flag for table security (tracks sql select).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the tracking flag for table security (tracks sql select).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UPDATE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the update flag for table security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the update flag for table security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="VIEWABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Constant representing the viewable flag for form security.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Constant representing the viewable flag for form security.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
        </constant>
      </constants>
      <functions>
        <function clientSupport="ng,wc,sc" name="addUserToGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if added]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Adds an user to a named group.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Adds an user to a named group.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var userUID = security.getUserUID();
security.addUserToGroup(userUID, 'groupname');]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to be added]]></description>
            </parameter>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the group to add to]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc" name="authenticate">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[authentication result from authenticator solution or boolean in case of servoy built-in authentication]]></return>
          <descriptions>
            <description clientSupport="ng,mc"><![CDATA[Authenticate the given credentials against the mobile service solution. 
It will set the credentials and then do a sync call to the server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc"><![CDATA[Authenticate the given credentials against the mobile service solution.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc"><![CDATA[// method will return null in mobile client, the same flow as for default login page will happen after calling this method
security.authenticate(['myusername', 'mypassword']);]]></sample>
          </samples>
          <parameters>
            <parameter name="credentials" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array whose elements are passed as arguments to the authenticator method, in case of servoy built-in authentication this should be [username, password]]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="authenticate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[authentication result from authenticator solution or boolean in case of servoy built-in authentication]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.

Note: this method should be called from a login solution.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create the credentials object as expected by the authenticator solution
var ok =  security.authenticate('myldap_authenticator', 'login', [scopes.globals.userName, scopes.globals.passWord])
if (!ok)
{
	plugins.dialogs.showErrorDialog('Login failed', 'OK')
}

// if no authenticator name is used, the credentials are checked using the Servoy built-in user management
ok = security.authenticate(null, null, [scopes.globals.userName, scopes.globals.passWord])]]></sample>
          </samples>
          <parameters>
            <parameter name="authenticator_solution" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator solution installed on the Servoy Server, null for servoy built-in authentication]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator method, null for servoy built-in authentication]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="authenticate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[authentication result from authenticator solution or boolean in case of servoy built-in authentication]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Authenticate the given credentials against the mobile service solution. First two parameters are not used in mobile solution, just the credentials. 
It will set the credentials and then do a sync call to the server.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.

Note: this method should be called from a login solution, once logged in, the authenticate method has no effect.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Authenticate the given credentials against the mobile service solution.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[// method will return null in mobile client, the same flow as for default login page will happen after calling this method
security.authenticate(null, null, ['myusername', 'mypassword']);]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[// create the credentials object as expected by the authenticator solution
var ok =  security.authenticate('myldap_authenticator', 'login', [scopes.globals.userName, scopes.globals.passWord])
if (!ok)
{
	plugins.dialogs.showErrorDialog('Login failed', 'OK')
}

// if no authenticator name is used, the credentials are checked using the Servoy built-in user management
ok = security.authenticate(null, null, [scopes.globals.userName, scopes.globals.passWord])]]></sample>
          </samples>
          <parameters>
            <parameter name="authenticator_solution" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator solution installed on the Servoy Server, null for servoy built-in authentication]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator method, null for servoy built-in authentication]]></description>
            </parameter>
            <parameter name="credentials" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array whose elements are passed as arguments to the authenticator method, in case of servoy built-in authentication this should be [username, password]]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="canDelete">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[replaced by canDelete(String)]]></deprecated>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the server name]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the table name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="canDelete">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if allowed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="canInsert">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[replaced by canInsert(String)]]></deprecated>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the server name]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the table name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="canInsert">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if allowed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="canRead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[replaced by canRead(String)]]></deprecated>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the server name]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the table name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="canRead">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if allowed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="canUpdate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[replaced by canUpdate(String)]]></deprecated>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the server name]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the parameter name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="canUpdate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if allowed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a boolean value for security rights.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="changeGroupName">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if changed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Changes the groupname of a group.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Changes the groupname of a group.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[security.changeGroupName('oldGroup', 'newGroup');]]></sample>
          </samples>
          <parameters>
            <parameter name="oldGroupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the old name]]></description>
            </parameter>
            <parameter name="newGroupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="changeUserName">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if changed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Changes the username of the specified userUID.
Note: this method can only be called by an admin user or a normal logged in user changing its own userName.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Changes the username of the specified userUID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if(security.changeUserName(security.getUserUID('name1'), 'name2'))
{
	application.output('Username changed');
}]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to work on]]></description>
            </parameter>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new username]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="checkPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if password oke]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true if the password for that userUID is correct, else false.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true if the password for that userUID is correct, else false.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if(security.checkPassword(security.getUserUID(), 'password1'))
{
	security.setPassword(security.getUserUID(), 'password2')
}
else
{
	application.output('wrong password')
}]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to check the password for]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new password]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the created groupname]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a group, returns the groupname (or null when group couldn't be created).
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a group, returns the groupname (or null when group couldn't be created).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var deleteGroup = true;
//ceate a group
var groupName = security.createGroup('myGroup');
if (groupName)
{
	//create a user
	var uid = security.createUser('myusername', 'mypassword');
	if (uid) //test if user was created
	{
		//set a newUID for the user
		var isChanged = security.setUserUID(uid,'myUserUID')
		// add user to group
		security.addUserToGroup(uid, groupName);
		// if not delete group, do delete group
		if (deleteGroup) 
		{
			security.deleteGroup(groupName);
		}
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the group name to create]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createUser">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the userUID the created userUID, will be same if provided]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the username]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createUser">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the userUID the created userUID, will be same if provided]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the username]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="deleteGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if deleted]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes a group, returns true if no error was reported.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes a group, returns true if no error was reported.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var deleteGroup = true;
//ceate a group
var groupName = security.createGroup('myGroup');
if (groupName)
{
	//create a user
	var uid = security.createUser('myusername', 'mypassword');
	if (uid) //test if user was created
	{
		//set a newUID for the user
		var isChanged = security.setUserUID(uid,'myUserUID')
		// add user to group
		security.addUserToGroup(uid, groupName);
		// if not delete group, do delete group
		if (deleteGroup) 
		{
			security.deleteGroup(groupName);
		}
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the name of the group to delete]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="deleteUser">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the user is successfully deleted.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes an user. returns true if no error was reported.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes an user.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The UID of the user to be deleted.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getClientID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the clientId as seen on the server admin page]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the client ID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the client ID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var clientId = security.getClientID()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getElementUUIDs">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with element info]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the form elements UUID's as dataset, the one with no name is the form itself.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the form elements UUID's as dataset, the one with no name is the form itself.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var formElementsUUIDDataSet = security.getElementUUIDs('orders_form');]]></sample>
          </samples>
          <parameters>
            <parameter name="formname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the formname to retieve the dataset for]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getGroupId">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Group ID for the specified group (name)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Group ID for the specified group (name)]]></summary>
          </summaries>
          <deprecated><![CDATA[Deprecated as of release 3.0, not supported anymore.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns the groupid for the admin group in the variable
//var groupIDForAdmin = security.getGroupId('admin')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getGroups">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with all the groups]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the groups (returns a dataset).
first id column is deprecated!, use only the group name column.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the groups (returns a dataset).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getSystemUserName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the os user name]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Retrieves the username of the currently logged in user on operating system level.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Retrieves the username of the currently logged in user on operating system level.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the current os username
var osUserName = security.getSystemUserName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserGroups">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with groupnames]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the groups of the current user.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the groups of the current user.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	/** @type {JSDataSet} */
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserGroups">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with groupnames]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the groups for given user UID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the groups for given user UID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	/** @type {JSDataSet} */
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to retrieve the user groups]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getUserId">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <deprecated><![CDATA[As of release 3.0, replaced by #getUserUID(String).]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getUserName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the user name]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[returns the current logged in username of that is used when doing a sync.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[returns the current logged in username of that is used when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var username = security.getUserName();
if (username != null) {
  // user is logged in 
}]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the current loggedIn username
var userName = security.getUserName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserName">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the user name]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[returns the current logged in username of that is used when doing a sync.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[returns the current logged in username of that is used when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var username = security.getUserName();
if (username != null) {
  // user is logged in 
}]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the current loggedIn username
var userName = security.getUserName();]]></sample>
          </samples>
          <parameters>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID used to retrieve the name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the userUID]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current user UID (null if not logged in); finds the userUID for given user_name if passed as parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current user UID (null if not logged in); finds the userUID for given user_name if passed as parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the current loggedIn username
var userName = security.getUserName(); 
//gets the uid of the given username
var userUID = security.getUserUID(userName);
//is the same as above 
//var my_userUID = security.getUserUID();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUserUID">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the userUID]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the current user UID (null if not logged in); finds the userUID for given user_name if passed as parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the current user UID (null if not logged in); finds the userUID for given user_name if passed as parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the current loggedIn username
var userName = security.getUserName(); 
//gets the uid of the given username
var userUID = security.getUserUID(userName);
//is the same as above 
//var my_userUID = security.getUserUID();]]></sample>
          </samples>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the username to find the userUID for]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getUsers">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with all the users]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the users in the security settings (returns a dataset).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the users in the security settings (returns a dataset).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	/** @type {JSDataSet} */
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getUsers">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with all the users]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get all the users in the security settings (returns a dataset).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get all the users in the security settings (returns a dataset).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	/** @type {JSDataSet} */
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the group to filter on]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isUserMemberOfGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[dataset with groupnames]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check whatever the current user is part of the specified group]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check whatever the current user is part of the specified group]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//check whatever user is part of the Administrators group
if(security.isUserMemberOfGroup('Administrators', security.getUserUID('admin')))
{
	// do administration stuff
}]]></sample>
          </samples>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[name of the group to check]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isUserMemberOfGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[dataset with groupnames]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Check whatever the user specified as parameter is part of the specified group.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Check whatever the user specified as parameter is part of the specified group.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//check whatever user is part of the Administrators group
if(security.isUserMemberOfGroup('Administrators', security.getUserUID('admin')))
{
	// do administration stuff
}]]></sample>
          </samples>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[name of the group to check]]></description>
            </parameter>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[UID of the user to check]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="login">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if loggedin]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Login to be able to leave the solution loginForm.

Example: Group names may be received from LDAP (Lightweight Directory Access Protocol) - a standard protocol used in web browsers and email applications to enable lookup queries that access a directory listing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Login to be able to leave the solution loginForm.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var groups = ['Administrators']; //normally these groups are for example received from LDAP
var user_uid = scopes.globals.email; //also this uid might be received from external authentication method
var ok =  security.login(scopes.globals.username, user_uid , groups)
if (!ok)
{
	plugins.dialogs.showErrorDialog('Login failure',  'Already logged in? or no user_uid/groups specified?', 'OK')
}]]></sample>
          </samples>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the username, like 'JamesWebb']]></description>
            </parameter>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to process login for]]></description>
            </parameter>
            <parameter name="groups" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the groups array]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="logout">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync. When the next sync happens the login form will be shown.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.
You can redirect to another solution if needed; if you want to go to a different url, you need to call application.showURL(url) before calling security.logout() (this is only applicable for Web Client).
An alternative option to close a solution and to open another solution, while keeping the user logged in, is application.closeSolution().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[security.logout();
plugins.mobile.sync();]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set the url to go to after logout.
//application.showURL('http://www.servoy.com', '_self');  //Web Client only
security.logout();
//security.logout('solution_name');//log out and close current solution and open solution 'solution_name'
//security.logout('solution_name','global_method_name');//log out, close current solution, open solution 'solution_name' and call global method 'global_method_name' of the newly opened solution
//security.logout('solution_name','global_method_name','my_string_argument');//log out, close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
//security.logout('solution_name','global_second_method_name',2);
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="logout">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync. When the next sync happens the login form will be shown.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.
You can redirect to another solution if needed; if you want to go to a different url, you need to call application.showURL(url) before calling security.logout() (this is only applicable for Web Client).
An alternative option to close a solution and to open another solution, while keeping the user logged in, is application.closeSolution().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[security.logout();
plugins.mobile.sync();]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set the url to go to after logout.
//application.showURL('http://www.servoy.com', '_self');  //Web Client only
security.logout();
//security.logout('solution_name');//log out and close current solution and open solution 'solution_name'
//security.logout('solution_name','global_method_name');//log out, close current solution, open solution 'solution_name' and call global method 'global_method_name' of the newly opened solution
//security.logout('solution_name','global_method_name','my_string_argument');//log out, close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
//security.logout('solution_name','global_second_method_name',2);
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the solution to load after logout]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="logout">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync. When the next sync happens the login form will be shown.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.
You can redirect to another solution if needed; if you want to go to a different url, you need to call application.showURL(url) before calling security.logout() (this is only applicable for Web Client).
An alternative option to close a solution and to open another solution, while keeping the user logged in, is application.closeSolution().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[security.logout();
plugins.mobile.sync();]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set the url to go to after logout.
//application.showURL('http://www.servoy.com', '_self');  //Web Client only
security.logout();
//security.logout('solution_name');//log out and close current solution and open solution 'solution_name'
//security.logout('solution_name','global_method_name');//log out, close current solution, open solution 'solution_name' and call global method 'global_method_name' of the newly opened solution
//security.logout('solution_name','global_method_name','my_string_argument');//log out, close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
//security.logout('solution_name','global_second_method_name',2);
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the solution to load after logout]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the method to run in the solution to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="logout">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync. When the next sync happens the login form will be shown.]]></description>
            <description clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.
You can redirect to another solution if needed; if you want to go to a different url, you need to call application.showURL(url) before calling security.logout() (this is only applicable for Web Client).
An alternative option to close a solution and to open another solution, while keeping the user logged in, is application.closeSolution().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Clears the current credentials that the user specified when doing a sync.]]></summary>
            <summary clientSupport="ng,wc,sc"><![CDATA[Logout the current user and close the solution, if the solution requires authentication and user is logged in.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[security.logout();
plugins.mobile.sync();]]></sample>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Set the url to go to after logout.
//application.showURL('http://www.servoy.com', '_self');  //Web Client only
security.logout();
//security.logout('solution_name');//log out and close current solution and open solution 'solution_name'
//security.logout('solution_name','global_method_name');//log out, close current solution, open solution 'solution_name' and call global method 'global_method_name' of the newly opened solution
//security.logout('solution_name','global_method_name','my_string_argument');//log out, close current solution, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
//security.logout('solution_name','global_second_method_name',2);
//Note: specifying a solution will not work in the Developer due to debugger dependencies
//specified solution should be of compatible type with client (normal type or client specific(Smart client only/Web client only) type )]]></sample>
          </samples>
          <parameters>
            <parameter name="solutionToLoad" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the solution to load after logout]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the method to run in the solution to load]]></description>
            </parameter>
            <parameter name="argument" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the argument to pass to the method to run]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeUserFromGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if removed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes an user from a group.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes an user from a group.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to be removed]]></description>
            </parameter>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the group to remove from]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if changed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a new password for the given userUID.
Note: this method can only be called by an admin user or a normal logged in user changing its own password.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a new password for the given userUID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if(security.checkPassword(security.getUserUID(), 'password1'))
{
	security.setPassword(security.getUserUID(), 'password2')
}
else
{
	application.output('wrong password')
}]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to set the new password for]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new password]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setSecuritySettings">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the security settings; the entries contained in the given dataset will override those contained in the current security settings.

NOTE: The security.getElementUUIDs and security.setSecuritySettings functions can be used to define custom security that overrides Servoy security. 
For additional information see the function security.getElementUUIDs.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the security settings; the entries contained in the given dataset will override those contained in the current security settings.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          </samples>
          <parameters>
            <parameter name="dataset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the dataset with security settings]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setUserId">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 3.0, replaced by #setUserUID(Object,String).]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="setUserUID">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if changed]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set a new userUID for the given userUID.
Note: this method can only be called by an admin.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set a new userUID for the given userUID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var deleteGroup = true;
//ceate a group
var groupName = security.createGroup('myGroup');
if (groupName)
{
	//create a user
	var uid = security.createUser('myusername', 'mypassword');
	if (uid) //test if user was created
	{
		//set a newUID for the user
		var isChanged = security.setUserUID(uid,'myUserUID')
		// add user to group
		security.addUserToGroup(uid, groupName);
		// if not delete group, do delete group
		if (deleteGroup) 
		{
			security.deleteGroup(groupName);
		}
	}
}]]></sample>
          </samples>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to set the new user UID for]]></description>
            </parameter>
            <parameter name="newUserUID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new user UID]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" publicName="ServoyException" qualifiedName="com.servoy.j2db.util.ServoyException" scriptingName="ServoyException">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ABSTRACT_FORM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for ABSTRACT_FORM.

This code is used when a form, that cannot be created, is shown (for example, a form without parts).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for ABSTRACT_FORM.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ACQUIRE_LOCK_FAILURE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.

This code is used when a database failed to lock a row or table.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BAD_SQL_SYNTAX">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for BAD_SQL_SYNTAX.

This code is used when a database exception is recognized as an sql syntax error.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for BAD_SQL_SYNTAX.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="CLIENT_NOT_AUTHORIZED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.

This code is used when an client performs an action that requires the user to be logged in and the user has not logged in yet.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATA_ACCESS_RESOURCE_FAILURE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.

This code is used when a database exception received an error accessing storage devices.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATA_INTEGRITY_VIOLATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.

This code is used when a database exception is recognized as an integrity exception (like constraint violation).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEADLOCK">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DEADLOCK.

This code is used when a deadlock is detected by the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DEADLOCK.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DELETE_NOT_GRANTED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for DELETE_NOT_GRANTED.

This code is used when a record deletion was rejected by a pre-delete Servoy trigger.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for DELETE_NOT_GRANTED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="EXECUTE_PROGRAM_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.

This code is used when an external program was not executed correctly.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INCORRECT_LOGIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INCORRECT_LOGIN.

This code is used when the user enters invalid credentials.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INCORRECT_LOGIN.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INVALID_INPUT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT.

This code is used when the user enters data that could not be validated.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INVALID_INPUT_FORMAT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT_FORMAT.

This code is not used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_INPUT_FORMAT.]]></summary>
          </summaries>
          <deprecated><![CDATA[This code is not used]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" name="INVALID_RESULTSET_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.

This code is used when a data is requested that is not selected in the sql.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MAINTENANCE_MODE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for MAINTENANCE_MODE.

This code is used when a client could not be registered with the server because the server is in maintenance mode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for MAINTENANCE_MODE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_ACCESS.

This code is used when a user wants to view data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_CREATE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_CREATE_ACCESS.

This code is used when a user wants to create new records and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_CREATE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_DELETE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_DELETE_ACCESS.

This code is used when a user wants to delete data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_DELETE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_LICENSE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_LICENSE.

This code is used when a client could not be registered with the server because of license limitations.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_LICENSE.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_MODIFY_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_MODIFY_ACCESS.

This code is used when a user wants to update data and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_MODIFY_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_PARENT_DELETE_WITH_RELATED_RECORDS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.

This code is used when a record could not be deleted because a non-empty relation exists for the record that does not allow parent delete when having related records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="NO_RELATED_CREATE_ACCESS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.

This code is used when a user wants to create new related records and this is disallowed by security settings.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PERMISSION_DENIED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for PERMISSION_DENIED.

This code is used when a database exception is recognized as a authorization error.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for PERMISSION_DENIED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECORD_LOCKED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_LOCKED.

This code is used when a record could not be updated or deleted because it is locked by another client.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_LOCKED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RECORD_VALIDATION_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_VALIDATION_FAILED.

This code is used when a record update/insert was rejected by a pre-update/insert Servoy trigger.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for RECORD_VALIDATION_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="SAVE_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for SAVE_FAILED.

This code is used when a javascript exception occurred during saving data to the database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for SAVE_FAILED.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UNEXPECTED_UPDATE_COUNT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.

This code is used when a data could not be deleted or updated when expected (for example 
when a record was deleted outside Servoy and a Servoy client wants to update the record).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="UNKNOWN_DATABASE_EXCEPTION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.

This code is used when an unrecognized database exception has occurred.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </constant>
      </constants>
      <functions>
        <function clientSupport="ng,wc,sc" name="getErrorCode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the error code for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMessage">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string message for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the string message for this ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the string message for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getScriptStackTrace">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the script stack trace for this ServoyException if this could be created.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the script stack trace for this ServoyException if this could be created.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getStackTrace">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the stack trace for this ServoyException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the stack trace for this ServoyException.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="isServoyException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></summary>
          </summaries>
          <deprecated><![CDATA[Use "typeof" operator instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	/** @type {ServoyException} */
	var servoyException = ex;
	application.output("is a ServoyException")
	application.output("Errorcode: "+servoyException.getErrorCode())
	var trace = "";
	if (ex.getScriptStackTrace) trace = servoyException.getScriptStackTrace();
	else if (servoyException.getStackTrace)  trace = servoyException.getStackTrace();
	if (servoyException.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				/** @type {DataException} */
				var dataException = record.exception;
				application.output('SQL: '+dataException.getSQL())
				application.output('SQLState: '+dataException.getSQLState())
				application.output('VendorErrorCode: '+dataException.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="SolutionModel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSSolutionModel" scriptingName="solutionModel">
      <functions>
        <function clientSupport="ng,wc,sc" name="cloneComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[the exact copy of the given component]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel) and gives it a new name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel) and gives it a new name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get an existing field to clone.
var field = solutionModel.getForm("formWithField").getField("fieldName");
// make a clone/copy of the field
var clone = solutionModel.cloneComponent("clonedField",field);]]></sample>
          </samples>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name of the cloned component]]></description>
            </parameter>
            <parameter name="component" type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the component to clone]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cloneComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[the exact copy of the given component]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel), gives it a new name and moves it to a new parent form, specified as a parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel), gives it a new name and moves it to a new parent form, specified as a parameter.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get an existing field to clone.
var field = solutionModel.getForm("formWithField").getField("fieldName");
// get the target form for the copied/cloned field
var form = solutionModel.getForm("targetForm");
// make a clone/copy of the field and re parent it to the target form.
var clone = solutionModel.cloneComponent("clonedField",field,form);
// show it
forms["targetForm"].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name of the cloned component]]></description>
            </parameter>
            <parameter name="component" type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the component to clone]]></description>
            </parameter>
            <parameter name="newParentForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[the new parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="cloneForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given form and gives it the new name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Makes an exact copy of the given form and gives it the new name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get an existing form
var form = solutionModel.getForm("existingForm")
// make a clone/copy from it
var clone = solutionModel.cloneForm("clonedForm", form)
// add a new label to the clone
clone.newLabel("added label",50,50,80,20);
// show it
forms["clonedForm"].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name for the form clone]]></description>
            </parameter>
            <parameter name="jsForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[the form to be cloned]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createBevelBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a bevel border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a bevel border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createBevelBorder(SM_BEVELTYPE.RAISED,'#ff0000','#00ff00','#ff0000','#00ff00');]]></sample>
          </samples>
          <parameters>
            <parameter name="bevel_type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bevel border type (SM_BEVELTYPE.RAISED or SM_BEVELTYPE.LOWERED)]]></description>
            </parameter>
            <parameter name="highlight_outer_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border highlight outer color]]></description>
            </parameter>
            <parameter name="highlight_inner_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border highlight inner color]]></description>
            </parameter>
            <parameter name="shadow_outer_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border shadow outer color]]></description>
            </parameter>
            <parameter name="shadow_inner_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border shadow outer color]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createEmptyBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an empty border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an empty border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createEmptyBorder(1,1,1,1);]]></sample>
          </samples>
          <parameters>
            <parameter name="top_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[top width of empty border in pixels]]></description>
            </parameter>
            <parameter name="right_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[right width of empty border in pixels]]></description>
            </parameter>
            <parameter name="bottom_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bottom width of empty border in pixels]]></description>
            </parameter>
            <parameter name="left_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[left width of empty border in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createEtchedBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create an etched border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create an etched border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createEtchedBorder(SM_BEVELTYPE.RAISED,'#ff0000','#00ff00');]]></sample>
          </samples>
          <parameters>
            <parameter name="bevel_type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bevel border type]]></description>
            </parameter>
            <parameter name="highlight_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border highlight color]]></description>
            </parameter>
            <parameter name="shadow_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bevel border shadow color]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a font string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a font string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
var component = form.getComponent("someComponent")
component.fontType = solutionModel.createFont('Arial',SM_FONTSTYLE.BOLD,14);]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the font]]></description>
            </parameter>
            <parameter name="style" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the style of the font (PLAIN, BOLD, ITALIC or BOLD+ITALIC)]]></description>
            </parameter>
            <parameter name="size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the font size]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createLineBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a line border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a line border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createLineBorder(1,'#ff0000');]]></sample>
          </samples>
          <parameters>
            <parameter name="thick" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[border thickness in pixels]]></description>
            </parameter>
            <parameter name="color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[color of the line border]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createMatteBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a matte border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a matte border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createMatteBorder(1,1,1,1,"#00ff00");]]></sample>
          </samples>
          <parameters>
            <parameter name="top_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[top width of matte border in pixels]]></description>
            </parameter>
            <parameter name="right_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[right width of matte border in pixels]]></description>
            </parameter>
            <parameter name="bottom_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bottom width of matte border in pixels]]></description>
            </parameter>
            <parameter name="left_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[left width of matte border in pixels]]></description>
            </parameter>
            <parameter name="color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[border color]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a page format string.

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a page format string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a page format string.

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a page format string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="orientation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified orientation of the page to be printed; the default is Portrait mode]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a page format string.

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a page format string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="orientation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified orientation of the page to be printed; the default is Portrait mode]]></description>
            </parameter>
            <parameter name="units" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified units for the width and height of the page to be printed; the default is pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createRoundedBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[F"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a special matte border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a special matte border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
// create a rectangle border (no rounded corners) and continous line
form.borderType = solutionModel.createSpecialMatteBorder(1,1,1,1,"#00ff00","#00ff00","#00ff00","#00ff00",0,null);
// create a border with rounded corners and dashed line (25 pixels drawn, then 25 pixels skipped)
// rounding_radius is an array of up to 8 numbers, order is: top-left,top-right,bottom-right,bottom-left (repetead twice - for width and height)
// form.borderType = solutionModel.createSpecialMatteBorder(1,1,1,1,"#00ff00","#00ff00","#00ff00","#00ff00",new Array(10,10,10,10),new Array(25,25));]]></sample>
          </samples>
          <parameters>
            <parameter name="top_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[top width of matte border in pixels]]></description>
            </parameter>
            <parameter name="right_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[right width of matte border in pixels]]></description>
            </parameter>
            <parameter name="bottom_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bottom width of matte border in pixels]]></description>
            </parameter>
            <parameter name="left_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[left width of matte border in pixels]]></description>
            </parameter>
            <parameter name="top_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[top border color]]></description>
            </parameter>
            <parameter name="right_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[right border color]]></description>
            </parameter>
            <parameter name="bottom_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bottom border color]]></description>
            </parameter>
            <parameter name="left_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[left border color]]></description>
            </parameter>
            <parameter name="rounding_radius" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[F">
              <description><![CDATA[array with width/height of the arc to round the corners]]></description>
            </parameter>
            <parameter name="border_style" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the border styles for the four margins(top/left/bottom/left)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createSpecialMatteBorder">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="float"/>
            <argumentType typecode="[F"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a special matte border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a special matte border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
// create a rectangle border (no rounded corners) and continous line
form.borderType = solutionModel.createSpecialMatteBorder(1,1,1,1,"#00ff00","#00ff00","#00ff00","#00ff00",0,null);
// create a border with rounded corners and dashed line (25 pixels drawn, then 25 pixels skipped)
// form.borderType = solutionModel.createSpecialMatteBorder(1,1,1,1,"#00ff00","#00ff00","#00ff00","#00ff00",10,new Array(25,25));]]></sample>
          </samples>
          <parameters>
            <parameter name="top_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[top width of matte border in pixels]]></description>
            </parameter>
            <parameter name="right_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[right width of matte border in pixels]]></description>
            </parameter>
            <parameter name="bottom_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bottom width of matte border in pixels]]></description>
            </parameter>
            <parameter name="left_width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[left width of matte border in pixels]]></description>
            </parameter>
            <parameter name="top_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[top border color]]></description>
            </parameter>
            <parameter name="right_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[right border color]]></description>
            </parameter>
            <parameter name="bottom_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[bottom border color]]></description>
            </parameter>
            <parameter name="left_color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[left border color]]></description>
            </parameter>
            <parameter name="rounding_radius" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[width of the arc to round the corners]]></description>
            </parameter>
            <parameter name="dash_pattern" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[F">
              <description><![CDATA[the dash pattern of border stroke]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="createTitledBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a titled border string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a titled border string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',solutionModel.createFont('Arial',SM_FONTSTYLE.PLAIN,10),'#ff0000',SM_TITLEJUSTIFICATION.CENTER,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
          <parameters>
            <parameter name="title_text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text from border]]></description>
            </parameter>
            <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[title text font string]]></description>
            </parameter>
            <parameter name="color" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[border color]]></description>
            </parameter>
            <parameter name="title_justification" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[title text justification]]></description>
            </parameter>
            <parameter name="title_position" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[bevel title text position]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get an existing calculation for the given name and datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get an existing calculation for the given name and datasource.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced with solutionModel.getDataSourceNode(dataSource).getCalculation(name)]]></deprecated>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the calculation]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource the calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getCalculations">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSCalculation;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets all the calculations for the given datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets all the calculations for the given datasource.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced with solutionModel.getDataSourceNode(dataSource).getCalculations()]]></deprecated>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource the calculations belong to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataSourceNode">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSDataSourceNode" typecode="com.servoy.j2db.scripting.solutionmodel.JSDataSourceNode"><![CDATA[a JSDataSourceNode]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified data source node and returns information about the form (see JSDataSourceNode node).
The JSDataSourceNode holds all calculations and foundset methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified data source node and returns information about the form (see JSDataSourceNode node).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dsnode = solutionModel.getDataSourceNode('db:/example_data/customers');
var c = dsnode.getCalculation("myCalculation");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());]]></sample>
          </samples>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[table data source]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the specified form object and returns information about the form (see JSForm node).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the specified form object and returns information about the form (see JSForm node).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var myForm = solutionModel.getForm('existingFormName');
//get the style of the form (for all other properties see JSForm node)
var styleName = myForm.styleName;]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getForms">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;"><![CDATA[an array of JSForm type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of all forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of all forms.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var forms = solutionModel.getForms()
for (var i in forms)
	application.output(forms[i].name)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getForms">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;"><![CDATA[an array of JSForm type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of forms, that are all based on datasource/servername.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of forms, that are all based on datasource/servername.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var forms = solutionModel.getForms(datasource)
for (var i in forms)
	application.output(forms[i].name)]]></sample>
          </samples>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource or servername]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getForms">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;"><![CDATA[an array of JSForm type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of forms, that are all based on datasource/servername and tablename.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an array of forms, that are all based on datasource/servername and tablename.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var forms = solutionModel.getForms(datasource,tablename)
for (var i in forms)
	application.output(forms[i].name)]]></sample>
          </samples>
          <parameters>
            <parameter name="server" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource or servername]]></description>
            </parameter>
            <parameter name="tablename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the tablename]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <deprecated><![CDATA[Replaced by #getGlobalMethod(String,String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing global method by the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing global method by the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var method = solutionModel.getGlobalMethod('globals', 'nameOfGlobalMethod');
if (method != null) application.output(method.code);]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the method is searched]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the specified global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalMethods">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"><![CDATA[an array of JSMethod type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The list of all global methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The list of all global methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var methods = solutionModel.getGlobalMethods('globals');
for (var x in methods)
	application.output(methods[x].getName());]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalMethods">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;"><![CDATA[an array of JSMethod type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[The list of all global methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[The list of all global methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var methods = solutionModel.getGlobalMethods('globals');
for (var x in methods)
	application.output(methods[x].getName());]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[limit to global methods of specified scope name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"/>
          <deprecated><![CDATA[Replaced by #getGlobalVariable(String,String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing global variable by the specified name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing global variable by the specified name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var globalVariable = solutionModel.getGlobalVariable('globals', 'globalVariableName');
application.output(globalVariable.name + " has the default value of " + globalVariable.defaultValue);]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the variable is searched]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the global variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalVariables">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"><![CDATA[an array of JSVariable type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all global variables.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all global variables.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var globalVariables = solutionModel.getGlobalVariables('globals');
for (var i in globalVariables)
	application.output(globalVariables[i].name + " has the default value of " + globalVariables[i].defaultValue);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getGlobalVariables">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;"><![CDATA[an array of JSVariable type elements]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all global variables.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all global variables.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var globalVariables = solutionModel.getGlobalVariables('globals');
for (var i in globalVariables)
	application.output(globalVariables[i].name + " has the default value of " + globalVariables[i].defaultValue);]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[limit to global vars of specified scope name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="getListForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSList" typecode="com.servoy.j2db.scripting.solutionmodel.JSList"><![CDATA[the existing list form, or null if it does not exist.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Returns an existing list form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Returns an existing list form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var list = solutionModel.getListForm('created_by_sm_2');]]></sample>
          </samples>
          <parameters>
            <parameter name="formName">
              <description><![CDATA[the form's name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="getListForms">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSList[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSList;"><![CDATA[an array of IBaseSHList type elements]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Get an array of all list-forms.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Get an array of all list-forms.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var forms = solutionModel.getListForms()
for (var i in forms)
	application.output(forms[i].name)]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"><![CDATA[a JSMedia element]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the specified media object; can be assigned to a button/label.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the specified media object; can be assigned to a button/label.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myMedia = solutionModel.getMedia('button01.gif')
//now set the imageMedia property of your label or button
//myButton.imageMedia = myMedia
// OR
//myLabel.imageMedia = myMedia]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the media object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getMediaList">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMedia;"><![CDATA[a list with all the media objects.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the list of all media objects.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the list of all media objects.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var mediaList = solutionModel.getMediaList();
if (mediaList.length != 0 && mediaList != null) {
	for (var x in mediaList) {
		application.output(mediaList[x]);
	}
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation" typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets an existing relation by the specified name and returns a JSRelation Object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets an existing relation by the specified name and returns a JSRelation Object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relation = solutionModel.getRelation('name');
application.output("The primary server name is " + relation.primaryServerName);
application.output("The primary table name is " + relation.primaryTableName);
application.output("The foreign table name is " + relation.foreignTableName);
application.output("The relation items are " + relation.getRelationItems());]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the relation]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getRelations">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSRelation;"><![CDATA[an array of all relations (all elements in the array are of type JSRelation)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relations = solutionModel.getRelations('server_name','table_name');
if (relations.length != 0)
	for (var i in relations)
		application.output(relations[i].name);]]></sample>
          </samples>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the datasource for the specified table]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getRelations">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSRelation;"><![CDATA[an array of all relations (all elements in the array are of type JSRelation)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var relations = solutionModel.getRelations('server_name','table_name');
if (relations.length != 0)
	for (var i in relations)
		application.output(relations[i].name);]]></sample>
          </samples>
          <parameters>
            <parameter name="servername" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the server for the specified table]]></description>
            </parameter>
            <parameter name="tablename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the table]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getScopeNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[an array of String scope names]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all scope names used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all scope names used.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var scopeNames = solutionModel.getScopeNames();
for (var name in scopeNames)
	application.output(name);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSStyle" typecode="com.servoy.j2db.scripting.solutionmodel.JSStyle"><![CDATA[a JSStyle]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the style specified by the given name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the style specified by the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var style = solutionModel.getStyle('my_existing_style')
style.content = 'combobox { color: #0000ff;font: italic 10pt "Verdana";}']]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the style]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getValueList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"><![CDATA[a JSValueList object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing valuelist by the specified name and returns a JSValueList Object that can be assigned to a field.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an existing valuelist by the specified name and returns a JSValueList Object that can be assigned to a field.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var myValueList = solutionModel.getValueList('myValueListHere')
//now set the valueList property of your field
//myField.valuelist = myValueList]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getValueLists">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList[]" typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSValueList;"><![CDATA[an array of JSValueList objects]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all valuelists for the currently active solution.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets an array of all valuelists for the currently active solution.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var valueLists = solutionModel.getValueLists();
if (valueLists != null && valueLists.length != 0)
	for (var i in valueLists)
		application.output(valueLists[i].name);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced with solutionModel.getDataSourceNode(dataSource).newCalculation(code, type)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc = solutionModel.newCalculation("function myCalculation() { return 123; }", JSVariable.INTEGER, "db:/example_data/customers");
var calc2 = solutionModel.newCalculation("function myCalculation2() { return '20'; }", "db:/example_data/customers");
var calc3 = solutionModel.newCalculation("function myCalculation3() { return 'Hello World!'; }",	JSVariable.TEXT, "db:/example_data/employees");

var c = solutionModel.getCalculation("myCalculation","db:/example_data/customers");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

var allCalcs = solutionModel.getCalculations("db:/example_data/customers");
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the calculation, one of the JSVariable types.]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource this calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSCalculation" typecode="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.TEXT;]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced with solutionModel.getDataSourceNode(dataSource).newCalculation(code)]]></deprecated>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource this calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm"><![CDATA[a new JSForm object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm')]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.solutionmodel.ISMForm"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a new JSForm object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new form with the given JSForm as its super form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new form with the given JSForm as its super form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//creates 2 forms with elements on them; shows the parent form, waits 2 seconds and shows the child form
var mySuperForm = solutionModel.newForm('mySuperForm', 'db:/my_server/my_table', null, false, 800, 600);
var label1 = mySuperForm.newLabel('LabelName', 20, 20, 120, 30);
label1.text = 'DataProvider';
label1.background = 'red';
mySuperForm.newTextField('myDataProvider', 140, 20, 140,20);
forms['mySuperForm'].controller.show();
application.sleep(2000);
var mySubForm = solutionModel.newForm('mySubForm', mySuperForm);
var label2 = mySuperForm.newLabel('SubForm Label', 20, 120, 120, 30);
label2.background = 'green';
forms['mySuperForm'].controller.recreateUI();
forms['mySubForm'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new form]]></description>
            </parameter>
            <parameter name="superForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.solutionmodel.ISMForm">
              <description><![CDATA[the super form that will extended from, see JSform.setExtendsForm();]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm"><![CDATA[a new JSForm object]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new JSForm Object.

NOTE: See the JSForm node for more information about form objects that can be added to the new form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new JSForm Object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var myForm = solutionModel.newForm('newForm', 'db:/my_server/my_table')
//now you can add stuff to the form (under JSForm node)
//add a label
myForm.newLabel('Name', 1)
//add a "normal" text entry field
myForm.newTextField('dataProviderNameHere', 2)]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the datasource for the specified table]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a new JSForm object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.

NOTE: See the JSForm node for more information about form objects that can be added to the new form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm', 'db:/my_server/my_table', 'myStyleName', false, 800, 600)
//now you can add stuff to the form (under JSForm node)
//add a label
myForm.newLabel('Name', 20, 20, 120, 30)
//add a "normal" text entry field
myForm.newTextField('dataProviderNameHere', 140, 20, 140,20)]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the datasource for the specified table]]></description>
            </parameter>
            <parameter name="styleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified style]]></description>
            </parameter>
            <parameter name="show_in_menu" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if true show the name of the new form in the menu; or false for not showing]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the form in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the form in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a new JSForm object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.

NOTE: See the JSForm node for more information about form objects that can be added to the new form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSForm Object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myForm = solutionModel.newForm('newForm', 'my_server', 'my_table', 'myStyleName', false, 800, 600)
//With only a datasource:
//var myForm = solutionModel.newForm('newForm', datasource, 'myStyleName', false, 800, 600)
//now you can add stuff to the form (under JSForm node)
//add a label
myForm.newLabel('Name', 20, 20, 120, 30)
//add a "normal" text entry field
myForm.newTextField('dataProviderNameHere', 140, 20, 140,20)]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the server for the specified table]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the table]]></description>
            </parameter>
            <parameter name="styleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified style]]></description>
            </parameter>
            <parameter name="show_in_menu" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if true show the name of the new form in the menu; or false for not showing]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the form in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the form in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <deprecated><![CDATA[Replaced by #newGlobalMethod(String,String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new global method with the specified code in a scope.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new global method with the specified code in a scope.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var method = solutionModel.newGlobalMethod('globals', 'function myglobalmethod(){foundset.newRecord()}')]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the method is created]]></description>
            </parameter>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified code for the global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"/>
          <deprecated><![CDATA[Replaced by #newGlobalVariable(String,String,int)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSVariable" typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new global variable with the specified name and number type.

NOTE: The global variable number type is based on the value assigned from the SolutionModel-JSVariable node; for example: JSVariable.INTEGER.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new global variable with the specified name and number type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var myGlobalVariable = solutionModel.newGlobalVariable('globals', 'newGlobalVariable', JSVariable.INTEGER);
myGlobalVariable.defaultValue = 12;
//myGlobalVariable.defaultValue = "{a:'First letter',b:'Second letter'}" // an js object, type must be media.
//myGlobalVariable.defaultValue = '"some text"'; // Use two pairs of quotes if you want to assign a String as default value.]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the variable is created]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name for the global variable]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified number type for the global variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="mc" name="newListForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSList" typecode="com.servoy.j2db.scripting.solutionmodel.JSList"><![CDATA[the newly created list form.]]></return>
          <descriptions>
            <description clientSupport="mc"><![CDATA[Creates a new list form, similar to an inset list but without the inset list's header and relation.
The result will be an independent form which behaves like a mobile list.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="mc"><![CDATA[Creates a new list form, similar to an inset list but without the inset list's header and relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="mc"><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a button to go to it on the main form
b = f.newButton("Show created list form",0,9,10,10,
	f.newMethod("function showListForm() { forms.created_by_sm_2.controller.show(); }"));
// create the actual list form
var list = f.createListForm('created_by_sm_2', databaseManager.getDataSource("udm","contacts"),"name_first");
list.onAction = solutionModel.getForm('created_by_sm_2').newMethod("function goBack() { history.back(); }");]]></sample>
          </samples>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new form's name.]]></description>
            </parameter>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the list will be populated based on this datasource.]]></description>
            </parameter>
            <parameter name="textDataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the dataprovider that will be used to populate the main text area of the list's items.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMedia" typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia"><![CDATA[a JSMedia object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new media object that can be assigned to a label or a button.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new media object that can be assigned to a label or a button.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var myMedia = solutionModel.newMedia('button01.gif',bytes)
//now set the imageMedia property of your label or button
//myButton.imageMedia = myMedia
// OR
//myLabel.imageMedia = myMedia]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new media]]></description>
            </parameter>
            <parameter name="bytes" type="byte[]" typecode="[B">
              <description><![CDATA[The content]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation" typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary datasource, foreign datasource and the type of join for the new relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary datasource, foreign datasource and the type of join for the new relation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rel = solutionModel.newRelation('myRelation', myPrimaryDataSource, myForeignDataSource, JSRelation.INNER_JOIN);
application.output(rel.getRelationItems());]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the new relation]]></description>
            </parameter>
            <parameter name="primaryDataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the primary datasource]]></description>
            </parameter>
            <parameter name="foreignDataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the foreign datasource]]></description>
            </parameter>
            <parameter name="joinType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the type of join for the new relation; JSRelation.INNER_JOIN, JSRelation.LEFT_OUTER_JOIN]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation" typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary server and table name, foreign server and table name, and the type of join for the new relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary server and table name, foreign server and table name, and the type of join for the new relation.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, deprecated because of ambigous parameters.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rel = solutionModel.newRelation('myRelation', myPrimaryServerName, myPrimaryTableName, myForeignServerName, myForeignTableName, JSRelation.INNER_JOIN);
application.output(rel.getRelationItems());]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the new relation]]></description>
            </parameter>
            <parameter name="primaryDataSourceOrServer" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the primary server]]></description>
            </parameter>
            <parameter name="primaryTableNameOrForeignServer" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the primary table]]></description>
            </parameter>
            <parameter name="foreignDataSourceOrTable" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the foreign server]]></description>
            </parameter>
            <parameter name="joinType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the type of join for the new relation; JSRelation.INNER_JOIN, JSRelation.LEFT_OUTER_JOIN]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="newRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSRelation" typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary server and table name, foreign server and table name, and the type of join for the new relation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary server and table name, foreign server and table name, and the type of join for the new relation.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, deprecated because of ambigous parameters.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var rel = solutionModel.newRelation('myRelation', myPrimaryServerName, myPrimaryTableName, myForeignServerName, myForeignTableName, JSRelation.INNER_JOIN);
application.output(rel.getRelationItems());]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the new relation]]></description>
            </parameter>
            <parameter name="primaryServerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the primary server]]></description>
            </parameter>
            <parameter name="primaryTableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the primary table]]></description>
            </parameter>
            <parameter name="foreignServerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the foreign server]]></description>
            </parameter>
            <parameter name="foreignTableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the foreign table]]></description>
            </parameter>
            <parameter name="joinType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the type of join for the new relation; JSRelation.INNER_JOIN, JSRelation.LEFT_OUTER_JOIN]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSStyle" typecode="com.servoy.j2db.scripting.solutionmodel.JSStyle"><![CDATA[a JSStyle object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Creates a new style with the given css content string under the given name.

NOTE: Will throw an exception if a style with that name already exists.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Creates a new style with the given css content string under the given name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.newForm('myForm','db:/my_server/my_table',null,true,1000,800);
if (form.transparent == false)
{
	var style = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
	style.text = style.text + 'field { background-color: blue; }';
	form.styleName = 'myStyle';
}
var field = form.newField('columnTextDataProvider',JSField.TEXT_FIELD,100,100,100,50);
forms['myForm'].controller.show();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the new style]]></description>
            </parameter>
            <parameter name="content" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the css content of the new style]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="newValueList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSValueList" typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList"><![CDATA[a JSValueList object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new valuelist with the specified name and number type.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Creates a new valuelist with the specified name and number type.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vl1 = solutionModel.newValueList("customText",JSValueList.CUSTOM_VALUES);
vl1.customValues = "customvalue1\ncustomvalue2";
var vl2 = solutionModel.newValueList("customid",JSValueList.CUSTOM_VALUES);
vl2.customValues = "customvalue1|1\ncustomvalue2|2";
var form = solutionModel.newForm("customValueListForm",controller.getDataSource(),null,true,300,300);
var combo1 = form.newComboBox("scopes.globals.text",10,10,120,20);
combo1.valuelist = vl1;
var combo2 = form.newComboBox("scopes.globals.id",10,60,120,20);
combo2.valuelist = vl2;]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name for the valuelist]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified number type for the valuelist; may be JSValueList.CUSTOM_VALUES, JSValueList.DATABASE_VALUES, JSValueList.EMPTY_VALUE_ALWAYS, JSValueList.EMPTY_VALUE_NEVER]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the calculation specified by name and datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the calculation specified by name and datasource.]]></summary>
          </summaries>
          <deprecated><![CDATA[replaced with solutionModel.getDataSourceNode(dataSource).removeCalculation(name)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var calc1 = solutionModel.newCalculation("function myCalculation1() { return 123; }", JSVariable.INTEGER, "db:/example_data/customers");
var calc2 = solutionModel.newCalculation("function myCalculation2() { return '20'; }", "db:/example_data/customers");

var c = solutionModel.getCalculation("myCalculation1", "db:/example_data/customers");
application.output("Name: " + c.getName() + ", Stored: " + c.isStored());

solutionModel.removeCalculation("myCalculation1", "db:/example_data/customers");
c = solutionModel.getCalculation("myCalculation1", "db:/example_data/customers");
if (c != null) {
	application.output("myCalculation could not be removed.");
}

var allCalcs = solutionModel.getCalculations("db:/example_data/customers");
for (var i = 0; i < allCalcs.length; i++) {
	application.output(allCalcs[i]);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the calculation to be removed]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource the calculation belongs to]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true is form has been removed, false if form could not be removed]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified form during the persistent connected client session.

NOTE: Make sure you call history.remove first in your Servoy method (script).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified form during the persistent connected client session.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//first remove it from the current history, to destroy any active form instance
var success = history.removeForm('myForm')
//removes the named form from this session, please make sure you called history.remove() first
if(success)
{
	solutionModel.removeForm('myForm')
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[Replaced by #removeGlobalMethod(String,String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified global method.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified global method.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var m1 = solutionModel.newGlobalMethod('globals', 'function myglobalmethod1(){application.output("Global Method 1");}');
var m2 = solutionModel.newGlobalMethod('globals', 'function myglobalmethod2(){application.output("Global Method 2");}');

var success = solutionModel.removeGlobalMethod('globals', 'myglobalmethod1');
if (success == false) application.output('!!! myglobalmethod1 could not be removed !!!');

var list = solutionModel.getGlobalMethods('globals');
for (var i = 0; i < list.length; i++) {
	application.output(list[i].code);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the method is declared]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the global method to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="removeGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[Replaced by #removeGlobalVariable(String,String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified global variable.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified global variable.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var v1 = solutionModel.newGlobalVariable('globals', 'globalVar1', JSVariable.INTEGER);
var v2 = solutionModel.newGlobalVariable('globals', 'globalVar2', JSVariable.TEXT);

var success = solutionModel.removeGlobalVariable('globals', 'globalVar1');
if (success == false) application.output('!!! globalVar1 could not be removed !!!');

var list = solutionModel.getGlobalVariables('globals');
for (var i = 0; i < list.length; i++) {
	application.output(list[i].name + '[ ' + list[i].variableType + ']: ' + list[i].variableType);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the scope in which the variable is declared]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the global variable to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the media item specified by name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the media item specified by name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var bytes1 = plugins.file.readFile('D:/Imgs/image1.png');
var image1 = solutionModel.newMedia('image1.png', bytes1);
var bytes2 = plugins.file.readFile('D:/Imgs/image2.jpg');
var image2 = solutionModel.newMedia('image2.jpg',bytes2);
var bytes3 = plugins.file.readFile('D:/Imgs/image3.jpg');
var image3 = solutionModel.newMedia('image3.jpg',bytes3);

var f = solutionModel.newForm("newForm",databaseManager.getDataSource('example_data', 'orders'),null,false,500,350);
var l = f.newLabel('', 20, 70, 300, 200);
l.imageMedia = image1;
l.borderType =  solutionModel.createLineBorder(4,'#ff0000');
forms["newForm"].controller.show();

var status = solutionModel.removeMedia('image1.jpg');
if (status) application.output("image1.png has been removed");
else application.output("image1.png has not been removed");

var mediaList = solutionModel.getMediaList();
for (var i = 0; i < mediaList.length; i++) {
	application.output(mediaList[i].getName() + ":" + mediaList[i].mimeType);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the media item to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the relation specified by name. You cannot remove the the relation if it is touched within the application.
So even if you remove all the ui elements using it, like tabs, it still can't be removed, because of underlying created and cached data.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the relation specified by name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = solutionModel.removeRelation('myRelation');
if (success) { application.output("Relation has been removed");}
else {application.output("Relation could not be removed");}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the relation to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="removeStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Removes the specified style.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Removes the specified style.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var s = solutionModel.newStyle("smStyle1",'form { background-color: yellow; }');
var status = solutionModel.removeStyle("smStyle1");
if (status == false) application.output("Could not remove style.");
else application.output("Style removed.");]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the style to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="removeValueList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the removal was successful, false otherwise]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified valuelist.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Removes the specified valuelist.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var vlName = "customValueList";
var vl = solutionModel.newValueList(vlName,JSValueList.CUSTOM_VALUES);
vl.customValues = "customvalue1\ncustomvalue2";

var status = solutionModel.removeValueList(vlName);
if (status) application.output("Removal has been done.");
else application.output("ValueList not removed.");

var vls = solutionModel.getValueLists();
if (vls != null) {
	for (var i = 0; i < vls.length; i++) {
		application.output(vls[i]);
	}
	application.output("");
}]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[name of the valuelist to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="revertForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm object]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Reverts the specified form to the original (blueprint) version of the form; will result in an exception error if the form is not an original form.

NOTE: Make sure you call history.remove first in your Servoy method (script) or call form.controller.recreateUI() before the script ends.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Reverts the specified form to the original (blueprint) version of the form; will result in an exception error if the form is not an original form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// revert the form to the original solution form, removing any changes done to it through the solution model.
var revertedForm = solutionModel.revertForm('myForm')
// add a label on a random place.
revertedForm.newLabel("MyLabel",Math.random()*100,Math.random()*100,80,20);
// make sure that the ui is up to date.
forms.myForm.controller.recreateUI();]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form to revert]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="wrapMethodWithArguments" varargs="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMMethod"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a JSMethod instance with arguments to be assigned to an event.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a JSMethod instance with arguments to be assigned to an event.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var str = "John's Bookstore"
var form = solutionModel.getForm('orders')
var button = form.getButton('abutton')
var method = form.getFormMethod('doit') // has 4 arguments: event (fixed), boolean, number and string
// string arguments have to be quoted, they are interpreted before the method is called
var quotedString = "'"+utils.stringReplace(str, "'", "\\'")+"'"
// list all arguments the method has, use nulls for fixed arguments (like event)
button.onAction = solutionModel.wrapMethodWithArguments(method, [null, true, 42, quotedString])]]></sample>
          </samples>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.base.solutionmodel.IBaseSMMethod">
              <description><![CDATA[JSMethod to be assigned to an event]]></description>
            </parameter>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[positional arguments]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="TABLESECURITY" qualifiedName="com.servoy.j2db.scripting.info.TABLESECURITY">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DELETE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.DELETE]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INSERT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.INSERT]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="READ">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.READ]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TRACKING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.TRACKING]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="UPDATE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSSecurity.UPDATE]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="TITLEJUSTIFICATION" qualifiedName="com.servoy.j2db.scripting.solutionmodel.TITLEJUSTIFICATION">
      <constants>
        <constant clientSupport="ng,wc,sc" name="CENTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Position title text in the center of the border line.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Position title text in the center of the border line.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.CENTER,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Default justification for the title text]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Default justification for the title text]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEADING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Position title text at the left side of the border line
 for left to right orientation, at the right side of the 
 border line for right to left orientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Position title text at the left side of the border line
 for left to right orientation, at the right side of the 
 border line for right to left orientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.LEADING,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Position title text at the left side of the border line.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Position title text at the left side of the border line.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.LEFT,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="RIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Position title text at the right side of the border line.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Position title text at the right side of the border line.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.RIGHT,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TRAILING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Position title text at the right side of the border line
 for left to right orientation, at the left side of the 
 border line for right to left orientation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Position title text at the right side of the border line
 for left to right orientation, at the left side of the 
 border line for right to left orientation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.TRAILING,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="TITLEPOSITION" qualifiedName="com.servoy.j2db.scripting.solutionmodel.TITLEPOSITION">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ABOVE_BOTTOM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Title in the middle of the border's bottom line]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Title in the middle of the border's bottom line]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.ABOVE_BOTTOM);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="ABOVE_TOP">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Title above the border's top line]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Title above the border's top line]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.ABOVE_TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BELOW_BOTTOM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Title below the border's bottom line]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Title below the border's bottom line]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.BELOW_BOTTOM);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="BELOW_TOP">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Title above the border's bottom line]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Title above the border's bottom line]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.BELOW_TOP);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DEFAULT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Default vertical orientation for the title text]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Default vertical orientation for the title text]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.DEFAULT_POSITION);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TOP">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Title in the middle of the border's top line]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Title in the middle of the border's top line]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.borderType = solutionModel.createTitledBorder('Test',null,'#ff0000',SM_TITLEJUSTIFICATION.DEFAULT,SM_TITLEPOSITION.TOP);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="UICONSTANTS" qualifiedName="com.servoy.j2db.scripting.info.UICONSTANTS">
      <constants>
        <constant clientSupport="ng,wc,sc" name="ALLOW_JAVASCRIPT_LINK_INPUT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using element.putClientProperty()

If set to true, the element will accept javascript links in the input
If set to false, all 'javascript:' texts will be removed from the input

The value can be true/false
DEFAULT: false]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[element.putClientProperty(APP_UI_PROPERTY.ALLOW_JAVASCRIPT_LINK_INPUT, true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="COMBOBOX_SHOW_POPUP_ON_FOCUS_GAIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() or element.putClientProperty().

If set on application it will affect all COMBOBOX fields. If set on an element it will affect only that COMBOBOX element/field (with priority over the application property).
Value can be true/false/null.

If set to true, the affected COMBOBOX will show the pop-up when gaining focus.
DEFAULT: true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// make all COMBOBOX fields not show the pop-up when gaining focus
application.putClientProperty(APP_UI_PROPERTY.COMBOBOX_SHOW_POPUP_ON_FOCUS_GAIN, false);
// make one COMBOBOX field show the pop-up when gaining focus - overrides the application property set
forms.someForm.elements.comboboxElement.putClientProperty(APP_UI_PROPERTY.COMBOBOX_SHOW_POPUP_ON_FOCUS_GAIN, true);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATE_FORMATTERS_LENIENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() or element.putClientProperty().

If set on application it will affect all date formatted fields. CAUTION: this property must be set on application before the fields are created (for example in solution onOpen handler). Changing it after fields were created will not affect these existing fields.
If set on an element it will affect only that date formatted element/field (with priority over the application property).
Value can be true/false/null.

If set to false, date formatted fields will not allow input of out-of-bounds values (like 62 minutes means 2 minutes and +1 hour).
DEFAULT: true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// make all date formatted fields (created after this line is executed) not use lenient mode
application.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_LENIENT, false);
// make one date formatted field use lenient mode - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_LENIENT, true);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() or element.putClientProperty(). It is used only in Smart Client.

If set on application it will affect all date formatted fields. If set on an element it will affect only that date formatted element/field (with priority over the application property).
Value can be true/false/null.

If set to true, only selected part of the date will be affected when using up/down keys to cycle through values. (for example, pressing up when cursor is on minutes and minutes shows 59 will not result in hour change)
DEFAULT: false.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// make all date formatted fields use roll instead of add
application.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD, true);
// make one date formatted field use add instead of roll - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD, false);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DIALOG_FULL_SCREEN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Value that can be used to specify that a dialog should completely fill the screen.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Value that can be used to specify that a dialog should completely fill the screen.]]></summary>
          </summaries>
          <deprecated><![CDATA[because of a rewrite of dialogs/windows (based in JSWindow objects)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showFormInDialog('customers',APP_UI_PROPERTY.DIALOG_FULL_SCREEN,APP_UI_PROPERTY.DIALOG_FULL_SCREEN,
     APP_UI_PROPERTY.DIALOG_FULL_SCREEN,APP_UI_PROPERTY.DIALOG_FULL_SCREEN,'My Title',true,true,'customers_dialog',true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="FULL_SCREEN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Value that can be used to specify that a dialog/window should completely fill the screen.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Value that can be used to specify that a dialog/window should completely fill the screen.]]></summary>
          </summaries>
          <deprecated><![CDATA[because of a rewrite of dialogs/windows (based in JSWindow objects)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.showFormInDialog('customers',APP_UI_PROPERTY.FULL_SCREEN,APP_UI_PROPERTY.FULL_SCREEN,
     APP_UI_PROPERTY.FULL_SCREEN,APP_UI_PROPERTY.FULL_SCREEN,'My Title',true,true,'customers_dialog',true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="HTML_EDITOR_CONFIGURATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set on editable html area using element.putClientProperty()

The value must be a valid json string according to TinyMCE editor configuration (http://www.tinymce.com/wiki.php/configuration). 
It will be used to override/set configuration properties in order to customize the editor.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set on editable html area using element.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// adding a new TinyMCE plugin (same for skin or theme)
// this code assumes plugin.min.js was copied in web server at specified path
// NOTE: we use external plugin, not plugin, in order for file to be accessible from web server; for this example, pluging.min.js file must be copied under ServoyInstall/application_server/server/webapps/ROOT/tinymce/plugins/link
element.putClientProperty(APP_UI_PROPERTY.HTML_EDITOR_CONFIGURATION, '{external_plugins: { "link": "../../../tinymce/plugins/link/plugin.min.js"}}')

// change the editor configuration (add menubar, status bar and change toolbar)
element.putClientProperty(APP_UI_PROPERTY.HTML_EDITOR_CONFIGURATION, '{menubar: "tools table format view insert edit", statusbar : true, toolbar: "undo redo | styleselect | bold italic"}')]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="LEAVE_FIELDS_READONLY_IN_FIND_MODE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty().

If set to true, fields that are read-only won't be editable in find mode
If set to false, fields that are read-only will be editable in find mode

The value can be true/false
DEFAULT: false]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.LEAVE_FIELDS_READONLY_IN_FIND_MODE, true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TABLEVIEW_WC_DEFAULT_SCROLLABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty().

If set to true, table views in web client are scrollable by default
If set to false, table views in web client are not scrollable, but pageable by default

The value can be true/false
DEFAULT: false 

When this property is set to true, you can control the size of the page by setting the servoy property "servoy.webclient.scrolling.tableview.multiplier".
The default value is 2. Setting the property to a higher value, will result in more data to be queried at once. You can also set it to a lower value, like 1 or 1.5 for example.
We strongly recommend that the default or lower size be used in order to avoid blocking situations due to the big request being made to the server.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.TABLEVIEW_WC_DEFAULT_SCROLLABLE, true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TABLEVIEW_WC_SCROLLABLE_KEEP_LOADED_ROWS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty().

If set to true, scrollable table views in web client will keep the already loaded rows in the view
If set to false, scrollable table views in web client will unload not visible rows in the view

The value can be true/false
DEFAULT: false]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.TABLEVIEW_WC_SCROLLABLE_KEEP_LOADED_ROWS, true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TOOLTIP_DISMISS_DELAY">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() and
indicates the delay in milliseconds after the tooltip is dismissed.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.TOOLTIP_DISMISS_DELAY, 4000)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TOOLTIP_INITIAL_DELAY">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() and
indicates the delay in milliseconds before the tooltip is shown.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.TOOLTIP_INITIAL_DELAY, 2000)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() or element.putClientProperty().

If set on application it will affect all TYPE-AHEAD fields. If set on an element it will affect only that TYPE-AHEAD element/field (with priority over the application property).
Value can be true/false/null.

If set to true, the affected TYPE_AHEAD(s) will show the pop-up when gaining focus.
DEFAULT: true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// make all TYPE-AHEAD fields not show the pop-up when gaining focus
application.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN, false);
// make one TYPE-AHEAD field show the pop-up when gaining focus - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN, true);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty() or element.putClientProperty().

If set on application it will affect all TYPE-AHEAD fields. If set on an element it will affect only that TYPE-AHEAD element/field (with priority over the application property).
Value can be true/false/null.

If set to true, the affected TYPE_AHEAD(s) will show the pop-up when the field content is empty.
DEFAULT: true.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// make all TYPE-AHEAD fields not show the pop-up when there is empty content in the field
application.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY, false);
// make one TYPE-AHEAD field show the pop-up when there is empty content in the field - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY, true);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="USE_SYSTEM_PRINT_DIALOG">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty().

If set to true, the system standard Printing dialog will be used when printing is needed.
If set to false, the Servoy Printing dialog will be used.

The value can be true/false/null.
DEFAULT: false]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.USE_SYSTEM_PRINT_DIALOG, true)]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="VALUELIST_MAX_ROWS">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.putClientProperty()

The value can be a positive integer representing the maximum number of rows that will be retrieved by query in database or related valuelist. 
Can have a maximum value of 1000.

DEFAULT: 500]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[application.putClientProperty(APP_UI_PROPERTY.VALUELIST_MAX_ROWS, 1000)]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="UNITS" qualifiedName="com.servoy.j2db.scripting.solutionmodel.UNITS">
      <constants>
        <constant clientSupport="ng,wc,sc" name="INCH">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Inch length unit.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Inch length unit.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(8.5,11,1,1,1,1,SM_ORIENTATION.PORTRAIT,SM_UNITS.INCH);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="MM">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Millimeters length unit.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Millimeters length unit.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(215,279,25,25,25,25,SM_ORIENTATION.PORTRAIT,SM_UNITS.MM);]]></sample>
          </samples>
        </constant>
        <constant clientSupport="ng,wc,sc" name="PIXELS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Pixels length unit.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Pixels length unit.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var form = solutionModel.getForm("someForm");
form.defaultPageFormat = solutionModel.createPageFormat(612,792,72,72,72,72,SM_ORIENTATION.PORTRAIT,SM_UNITS.PIXELS);]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" publicName="UUID" qualifiedName="com.servoy.j2db.util.UUID" scriptingName="UUID">
      <functions>
        <function clientSupport="ng,wc,sc" name="toBytes">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"><![CDATA[the byte array representation of the UUID.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the byte array representation of the UUID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the byte array representation of the UUID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[uuid.toBytes();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="toString">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string representation of the UUID.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the string representation of the UUID.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the string representation of the UUID.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[uuid.toString();]]></sample>
          </samples>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="Utils" qualifiedName="com.servoy.j2db.scripting.JSUtils" scriptingName="utils">
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="dateFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <deprecated><![CDATA[replaced by parseDate(String, String) or dateFormat(Date, String)]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="dateFormat">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the date as text]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Format a date object to a text representation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Format a date object to a text representation.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var formattedDateString = utils.dateFormat(dateobject,'EEE, d MMM yyyy HH:mm:ss');]]></sample>
          </samples>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date">
              <description><![CDATA[the date]]></description>
            </parameter>
            <parameter name="format" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the format to output]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getUnicodeCharacter">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a string containing the unicode character]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a string containing the character for the unicode number.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a string containing the character for the unicode number.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns a big dot
var dot = utils.getUnicodeCharacter(9679);]]></sample>
          </samples>
          <parameters>
            <parameter name="unicodeCharacterNumber" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number indicating the unicode character]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="hasChildRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 2.0, replaced by #hasRecords(JSFoundSet).]]></deprecated>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSFoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if exists]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.
Another use is, to pass a record and qualified relations string to test multiple relations/foundset at once]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test the orders_to_orderitems foundset 
if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//test the orders_to_orderitems.orderitems_to_products foundset to be reached from the current record 
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet">
              <description><![CDATA[the foundset to be tested]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSRecord"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the foundset/relation has records.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.
Another use is, to pass a record and qualified relations string to test multiple relations/foundset at once]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//test the orders_to_orderitems foundset 
if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//test the orders_to_orderitems.orderitems_to_products foundset to be reached from the current record 
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          </samples>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.base.scripting.api.IJSRecord">
              <description><![CDATA[A JSRecord to test.]]></description>
            </parameter>
            <parameter name="relationString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The relation name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="isMondayFirstDayOfWeek">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if Monday is first day of the week in current locale]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns true when Monday is the first day of the week for your current locale setting.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns true when Monday is the first day of the week for your current locale setting.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if(utils.isMondayFirstDayOfWeek())
{
	//a date calculation
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="numberFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting number in text]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Format a number to have a defined fraction.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Format a number to have a defined fraction.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var textalNumber = utils.numberFormat(16.749, 2); //returns 16.75]]></sample>
          </samples>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the number to format]]></description>
            </parameter>
            <parameter name="digits" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[nr of digits]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="numberFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting number in text]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Format a number to specification.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Format a number to specification.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var textalNumber2 = utils.numberFormat(100006.749, '#,###.00'); //returns 100,006.75]]></sample>
          </samples>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the number to format]]></description>
            </parameter>
            <parameter name="format" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the format]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="numberFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[use numberFormat(Number, String) or numberFormat(Number, Number)]]></deprecated>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the number to format]]></description>
            </parameter>
            <parameter name="digitsOrFormat" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[nr of digits or the format]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="parseDate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[the date as date object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Parse a string to a date object.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Parse a string to a date object.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var parsedDate = utils.parseDate(datestring,'EEE, d MMM yyyy HH:mm:ss');]]></sample>
          </samples>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the date as text]]></description>
            </parameter>
            <parameter name="format" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the format to parse the to date]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringEscapeMarkup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the escaped text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var escapedText = utils.stringEscapeMarkup('<html><body>escape me</body></html>')]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringEscapeMarkup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the escaped text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var escapedText = utils.stringEscapeMarkup('<html><body>escape me</body></html>')]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="escapeSpaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[indicating to escape spaces]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringEscapeMarkup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the escaped text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the escaped markup text (HTML/XML).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var escapedText = utils.stringEscapeMarkup('<html><body>escape me</body></html>')]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="escapeSpaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[indicating to escape spaces]]></description>
            </parameter>
            <parameter name="convertToHtmlUnicodeEscapes" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[indicating to use unicode escapes]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the formatted text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Formats a string according to format specifiers and arguments.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Formats a string according to format specifiers and arguments.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// the  format specifier has the syntax: %[argument_index$][flags][width][.precision]conversion
// argument index is 1$, 2$ ...
// flags is a set of characters that modify the output format
// typical values: '+'(The result will always include a sign), ','(The result will include locale-specific grouping separators)
// width is a non-negative decimal integer indicating the minimum number of characters to be written to the output
// precision is a non-negative decimal integer usually used to restrict the number of characters
// conversion is a character indicating how the argument should be formatted
// typical conversion values: b(boolean), s(string), c(character), d(decimal integer), f(floating number), t(prefix for date and time)
// Date/Time Conversions (used after 't' prefix): 
		// 'H' 	Hour of the day for the 24-hour clock, formatted as two digits with a leading zero as necessary i.e. 00 - 23. 
		// 'I' 	Hour for the 12-hour clock, formatted as two digits with a leading zero as necessary, i.e. 01 - 12. 
		// 'k' 	Hour of the day for the 24-hour clock, i.e. 0 - 23. 
		// 'l' 	Hour for the 12-hour clock, i.e. 1 - 12. 
		// 'M' 	Minute within the hour formatted as two digits with a leading zero as necessary, i.e. 00 - 59. 
		// 'S' 	Seconds within the minute, formatted as two digits with a leading zero as necessary, i.e. 00 - 60 ("60" is a special value required to support leap seconds).
		// 'L' 	Millisecond within the second formatted as three digits with leading zeros as necessary, i.e. 000 - 999.
		// 'p' 	Locale-specific morning or afternoon marker in lower case, e.g."am" or "pm". Use of the conversion prefix 'T' forces this output to upper case. 
		// 'z' 	RFC 822 style numeric time zone offset from GMT, e.g. -0800.
		// 'Z' 	A string representing the abbreviation for the time zone.
		// 'B' 	Locale-specific full month name, e.g. "January", "February".
		// 'b' 	Locale-specific abbreviated month name, e.g. "Jan", "Feb". 
		// 'h' 	Same as 'b'. 
		// 'A' 	Locale-specific full name of the day of the week, e.g. "Sunday", "Monday" 
		// 'a' 	Locale-specific short name of the day of the week, e.g. "Sun", "Mon" 
		// 'C' 	Four-digit year divided by 100, formatted as two digits with leading zero as necessary, i.e. 00 - 99 
		// 'Y' 	Year, formatted as at least four digits with leading zeros as necessary, e.g. 0092 equals 92 CE for the Gregorian calendar. 
		// 'y' 	Last two digits of the year, formatted with leading zeros as necessary, i.e. 00 - 99.
		// 'j' 	Day of year, formatted as three digits with leading zeros as necessary, e.g. 001 - 366 for the Gregorian calendar. 
		// 'm' 	Month, formatted as two digits with leading zeros as necessary, i.e. 01 - 13. 
		// 'd' 	Day of month, formatted as two digits with leading zeros as necessary, i.e. 01 - 31 
		// 'e' 	Day of month, formatted as two digits, i.e. 1 - 31.

		// common compositions for date/time conversion
		// 'R' 	Time formatted for the 24-hour clock as "%tH:%tM" 
		// 'T' 	Time formatted for the 24-hour clock as "%tH:%tM:%tS". 
		// 'r' 	Time formatted for the 12-hour clock as "%tI:%tM:%tS %Tp". The location of the morning or afternoon marker ('%Tp') may be locale-dependent. 
		// 'D' 	Date formatted as "%tm/%td/%ty". 
		// 'F' 	ISO 8601 complete date formatted as "%tY-%tm-%td". 
		// 'c' 	Date and time formatted as "%ta %tb %td %tT %tZ %tY", e.g. "Sun Jul 20 16:17:00 EDT 1969".

utils.stringFormat('%s Birthday: %2$tm %2$te,%2$tY',new Array('My',new Date(2009,0,1))) // returns My Birthday: 01 1,2009
utils.stringFormat('The time is: %1$tH:%1$tM:%1$tS',new Array(new Date(2009,0,1,12,0,0))) // returns The time is: 12:00:00
utils.stringFormat('My %s: %2$.0f, my float: %2$.2f',new Array('integer',10)) // returns My integer: 10, my float: 10.00
utils.stringFormat('Today is: %1$tc',new Array(new Date())) // returns current date/time as:  Today is: Fri Feb 20 14:15:54 EET 2009
utils.stringFormat('Today is: %tF',new Array(new Date())) // returns current date as: Today is: 2009-02-20]]></sample>
          </samples>
          <parameters>
            <parameter name="text_to_format" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to format]]></description>
            </parameter>
            <parameter name="parameters" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array with parameters]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringIndexReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[use stringIndexReplace(String, Number, Number, String)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringIndexReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the changed text string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces a portion of a string with replacement text from a specified index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces a portion of a string with replacement text from a specified index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'this was a test'
var retval = utils.stringIndexReplace('this is a test',6,2,'was');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the start index to work from]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the size of the text to replace]]></description>
            </parameter>
            <parameter name="replacement_text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the replacement text]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringInitCap">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the changed text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns all words starting with capital chars.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns all words starting with capital chars.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'This Is A Test'
var retval = utils.stringInitCap('This is A test');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringLeft">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the result text string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a string with the requested number of characters, starting from the left.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a string with the requested number of characters, starting from the left.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'this i'
var retval = utils.stringLeft('this is a test',6);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringLeftWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string with number of words form the left]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the number of words, starting from the left.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the number of words, starting from the left.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'this is a'
var retval = utils.stringLeftWords('this is a test',3);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringMD5HashBase16">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting hashString]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the md5 hash (encoded as base16) for specified text.

NOTE: MD5 (Message-Digest Algorythm 5) is a hash function with a 128-bit hash value, for more info see: http://en.wikipedia.org/wiki/MD5]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the md5 hash (encoded as base16) for specified text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hashed_password = utils.stringMD5HashBase16(user_password)]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringMD5HashBase64">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting hashString]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the md5 hash (encoded as base64) for specified text.

NOTE: MD5 (Message-Digest Algorythm 5) is a hash function with a 128-bit hash value, for more info see: http://en.wikipedia.org/wiki/MD5]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the md5 hash (encoded as base64) for specified text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hashed_password = utils.stringMD5HashBase64(user_password)]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringMiddle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the result text string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a substring from the original string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a substring from the original string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'his'
var retval = utils.stringMiddle('this is a test',2,3);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the start index to work from]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringMiddleWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string with number of words form the left and]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a substring from the original string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a substring from the original string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'is a'
var retval = utils.stringMiddleWords('this is a test',2,2);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[start word index]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the word count to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringPBKDF2Hash">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting hashString]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the PBKDF2 hash for specified text. This method is preferred above the old MD5 hash for enhanced security.
It uses a default of 2000 iterations. The string that is returned can only be used in the utils.validatePBKDF2Hash(password,thisReturnValue) 
to check if this hash is a result of that password.
This will always be false: utils.stringPBKDF2Hash("test") == utils.stringPBKDF2Hash("test"). Because for the same string in multiply calls it will not generate the same hash.
So you can only check it like this: utils.validatePBKDF2Hash("test",utils.stringPBKDF2Hash("test"))

NOTE: PBKDF2 is the key hash function for the PKCS (Public-Key Cryptography) standard, for more info see: http://en.wikipedia.org/wiki/PBKDF2]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the PBKDF2 hash for specified text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hashed_password = utils.stringPBKDF2Hash(user_password)]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringPBKDF2Hash">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting hashString]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the PBKDF2 hash for specified text. This method is preferred above the old MD5 hash for enhanced security.

NOTE: PBKDF2 is the key hash function for the PKCS (Public-Key Cryptography) standard, for more info see: http://en.wikipedia.org/wiki/PBKDF2]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the PBKDF2 hash for specified text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var hashed_password = utils.stringPBKDF2Hash(user_password,5000)]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="iterations" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[how many hash iterations should be done, minimum should be 1000 or higher.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringPatternCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[use stringPatternCount(String text, String searchString)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringPatternCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the occurrenceCount that the search string is found in the text]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the number of times searchString appears in textString.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the number of times searchString appears in textString.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 2 as count
var count = utils.stringPatternCount('this is a test','is');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="toSearchFor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string to search for]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringPosition">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[use stringPosition(String, String, Number, Number)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringPosition">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the position]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the position of the string to search for, from a certain start position and occurrence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the position of the string to search for, from a certain start position and occurrence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 4 as position
var pos = utils.stringPosition('This is a test','s',1,1)]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="toSearchFor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string to search]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the start index to search from]]></description>
            </parameter>
            <parameter name="i_occurrence" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the occurrence]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[use stringReplace(String, String, String)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the changed text string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Replaces a portion of a string with replacement text.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Replaces a portion of a string with replacement text.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'these are cow 1 and cow 2.'
var retval = utils.stringReplace('these are test 1 and test 2.','test','cow');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="search_text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the string to search]]></description>
            </parameter>
            <parameter name="replacement_text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the replacement text]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringReplaceTags">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the text with replaced tags]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the text with %%tags%% replaced, based on provided record or foundset or form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the text with %%tags%% replaced, based on provided record or foundset or form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Next line places a string in variable x, whereby the tag(%%TAG%%) is filled with the value of the database column 'company_name' of the selected record.
var x = utils.stringReplaceTags("The companyName of the selected record is %%company_name%% ", foundset)
//var otherExample = utils.stringReplaceTags("The amount of the related order line %%amount%% ", order_to_orderdetails);
//var recordExample = utils.stringReplaceTags("The amount of the related order line %%amount%% ", order_to_orderdetails.getRecord(i);
//Next line places a string in variable y, whereby the tag(%%TAG%%) is filled with the value of the form variable 'x' of the form named 'main'.
//var y = utils.stringReplaceTags("The value of form variable is %%x%% ", forms.main);
//The next sample shows the use of a javascript object
//var obj = new Object();//create a javascript object
//obj['x'] = 'test';//assign an named value
//var y = utils.stringReplaceTags("The value of object variable is %%x%% ", obj);//use the named value in a tag]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text tags to work with]]></description>
            </parameter>
            <parameter name="scriptable" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the javascript object or foundset,record,form to be used to fill in the tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringRight">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the result text string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a string with the requested number of characters, starting from the right.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a string with the requested number of characters, starting from the right.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'a test'
var retval = utils.stringLeft('this is a test',6);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringRightWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the string with number of words form the right]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the number of words, starting from the right.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the number of words, starting from the right.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'is a test'
var retval = utils.stringRightWords('this is a test',3);]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringToNumber">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <deprecated><![CDATA[use stringToNumber(String)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringToNumber">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"><![CDATA[the resulting number]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Filters characters out of from a string and leaves digits, returns the number. Uses locale decimal separator.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Filters characters out of from a string and leaves digits, returns the number.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 65567
var retval = utils.stringToNumber('fg65gf567');]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringToNumber">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"><![CDATA[the resulting number]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Filters characters out of from a string and leaves digits, returns the number. Decimal separator is specified as parameter.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Filters characters out of from a string and leaves digits, returns the number.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 65.567
var retval = utils.stringToNumber('fg65gf.567','.');]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="decimalSeparator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[decimal separator]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="stringTrim">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <deprecated><![CDATA[use stringTrim(String)]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="stringTrim">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the resulting trimmed string]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the string without leading or trailing spaces.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the string without leading or trailing spaces.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns 'text'
var retval = utils.stringTrim('   text   ');]]></sample>
          </samples>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="stringWordCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the word count]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the number of words in the text string.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the number of words in the text string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//returns '4' as result
var retval = utils.stringWordCount('this is a test');]]></sample>
          </samples>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="timestampToDate">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"><![CDATA[the stripped date object]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a datestamp from the timestamp (sets hours,minutes,seconds and milliseconds to 0).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a datestamp from the timestamp (sets hours,minutes,seconds and milliseconds to 0).]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var date = utils.timestampToDate(application.getTimeStamp());]]></sample>
          </samples>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date">
              <description><![CDATA[object to be stripped from its time elements]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="validatePBKDF2Hash">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if his hash is valid for that password]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Validates the given password against the given hash. The hash should be generated by one of the stringPBKDF2Hash(password [,iteration]) functions. If hash is null or empty string the method will return false.

NOTE: PBKDF2 is the key hash function for the PKCS (Public-Key Cryptography) standard, for more info see: http://en.wikipedia.org/wiki/PBKDF2]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Validates the given password against the given hash.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (utils.validatePBKDF2Hash(user_password, hashFromDb)) {
   // logged in 
}]]></sample>
          </samples>
          <parameters>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password to test against]]></description>
            </parameter>
            <parameter name="hash" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the hash the password needs to validate to.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="VALUELIST" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VALUELIST">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="CUSTOM_VALUES">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSValueList.CUSTOM_VALUES]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DATABASE_VALUES">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSValueList.DATABASE_VALUES]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="EMPTY_VALUE_ALWAYS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSValueList.EMPTY_VALUE_ALWAYS]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="EMPTY_VALUE_NEVER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSValueList.EMPTY_VALUE_NEVER]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="VARIABLETYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VARIABLETYPE">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="DATETIME">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.DATETIME]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="INTEGER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.INTEGER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="MEDIA">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.MEDIA]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="NUMBER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.NUMBER]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="TEXT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSColumn.TEXT]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,wc,sc" deprecated="true" publicName="VIEW" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VIEW">
      <constants>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LIST_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSForm.LIST_VIEW]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LOCKED_LIST_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSForm.LOCKED_LIST_VIEW]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LOCKED_RECORD_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSForm.LOCKED_RECORD_VIEW]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="LOCKED_TABLE_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSForm.LOCKED_TABLE_VIEW]]></deprecated>
        </constant>
        <constant clientSupport="ng,wc,sc" deprecated="true" name="RECORD_VIEW">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[replaced by JSForm.RECORD_VIEW]]></deprecated>
        </constant>
      </constants>
    </object>
    <object clientSupport="wc" publicName="WEBCONSTANTS" qualifiedName="com.servoy.j2db.scripting.info.WEBCONSTANTS">
      <constants>
        <constant clientSupport="wc" name="WEBCLIENT_TEMPLATES_DIR">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="wc"><![CDATA[Property that can be set using application.putClientProperty(), it sets the servoy_web_client_default.css location directory in the templates dir for this client]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc"><![CDATA[Property that can be set using application.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc"><![CDATA[// set this if you want to set the css path to the servoy_web_client_default.css file that you can specify per client
// by default this file resides in '/servoy-webclient/templates/default/servoy_web_client_default.css'
// and you will override the 'default' in that url so setting it to myclient1 will result in:
// by default this file resides in '/servoy-webclient/templates/myclient1/servoy_web_client_default.css'
application.putClientProperty(APP_WEB_PROPERTY.WEBCLIENT_TEMPLATES_DIR, 'myclient1');]]></sample>
          </samples>
        </constant>
      </constants>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="controller" qualifiedName="com.servoy.j2db.BasicFormController$JSForm" scriptingName="controller">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a form; also known as "grayed-out".

Notes:
-A disabled element(s) cannot be selected by clicking the form.
-The disabled "grayed" color is dependent on the LAF set in the Servoy Smart Client Application Preferences.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets or sets the enabled state of a form; also known as "grayed-out".]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the enabled state of the form
var state = %%prefix%%controller.enabled;
//enables the form for input
%%prefix%%controller.enabled = true;]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" name="readOnly">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets or sets the read-only state of a form; also known as "editable"

Note: The field(s) in a form set as read-only can be selected and the field data can be copied to clipboard.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets or sets the read-only state of a form; also known as "editable"

Note: The field(s) in a form set as read-only can be selected and the field data can be copied to clipboard.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the read-only state of the form
var state = %%prefix%%controller.readOnly;
//sets the read-only state of the form
%%prefix%%controller.readOnly = true]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,wc,sc" deprecated="true" name="recordIndex">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#getSelectedIndex()]]></deprecated>
        </property>
        <property clientSupport="ng,wc,sc" name="view">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get/Set the current type of view of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get/Set the current type of view of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//gets the type of view for this form
var view = %%prefix%%controller.view;
//sets the form to Record view
%%prefix%%controller.view = 0;//RECORD_VIEW
//sets the form to List view
%%prefix%%controller.view = 1;//LIST_VIEW]]></sample>
          </samples>
        </property>
      </properties>
      <functions>
        <function clientSupport="ng,wc,sc" deprecated="true" name="addFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter to limit the foundset permanently]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Add a filter parameter to limit the foundset permanently]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#addFoundSetFilterParam(String,String,Object,String).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%controller.addFoundSetFilterParam('customerid', '=', 'BLONP');//possible to add multiple
%%prefix%%controller.loadAllRecords();//to make param(s) effective]]></sample>
          </samples>
          <parameters>
            <parameter name="column_dataprovider_id"/>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="copyAllRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copy all records from foundset to variable and clipboard]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copy all records from foundset to variable and clipboard]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by application#setClipboardContent(Object).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recorddata = %%prefix%%controller.copyAllRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="copyRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Copy current record to variable and clipboard.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Copy current record to variable and clipboard.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by application#setClipboardContent(Object).]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recorddata = %%prefix%%controller.copyRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="deleteAllRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[false incase of related foundset having records and orphans records are not allowed by the relation]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Deletes all records in foundset, resulting in empty foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Deletes all records in foundset, resulting in empty foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%controller.deleteAllRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="deleteRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[false incase of related foundset having records and orphans records are not allowed by the relation]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Delete current selected record, deletes mulitple selected records incase the foundset is using multiselect.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Delete current selected record, deletes mulitple selected records incase the foundset is using multiselect.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%controller.deleteRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="duplicateFoundSet">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get duplicate of current foundset, can be used by loadRecords again]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get duplicate of current foundset, can be used by loadRecords again]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#duplicateFoundSet()]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dupFoundset = %%prefix%%controller.duplicateFoundSet();
%%prefix%%controller.find();
//search some fields
var count = %%prefix%%controller.search();
if (count == 0)
{
	plugins.dialogs.showWarningDialog('Alert', 'No records found','OK');
	controller.loadRecords(dupFoundset);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succesful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.duplicateRecord(); //duplicate the current record, adds on top
//%%prefix%%controller.duplicateRecord(false); //duplicate the current record, adds at bottom
//%%prefix%%controller.duplicateRecord(1,2); //duplicate the first record as second record]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.duplicateRecord(); //duplicate the current record, adds on top
//%%prefix%%controller.duplicateRecord(false); //duplicate the current record, adds at bottom
//%%prefix%%controller.duplicateRecord(1,2); //duplicate the first record as second record]]></sample>
          </samples>
          <parameters>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true adds the new record as the topmost record]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Duplicate current record or record at index in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.duplicateRecord(); //duplicate the current record, adds on top
//%%prefix%%controller.duplicateRecord(false); //duplicate the current record, adds at bottom
//%%prefix%%controller.duplicateRecord(1,2); //duplicate the first record as second record]]></sample>
          </samples>
          <parameters>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[adds at specified index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="find">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the foundset is now in find mode, false otherwise.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the foundset in find mode. (Start a find request), use the "search" function to perform/exit the find.

Before going into find mode, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), the foundset will not go into find mode.
Make sure the operator and the data (value) are part of the string passed to dataprovider (included inside a pair of quotation marks).
Note: always make sure to check the result of the find() method.

When in find mode, columns can be assigned string expressions (including operators) that are evaluated as:
General:
      c1||c2    (condition1 or condition2)
      c|format  (apply format on condition like 'x|dd-MM-yyyy')
      !c        (not condition)
      #c        (modify condition, depends on column type)
      ^         (is null)
      ^=        (is null or empty)
      &lt;x     (less than value x)
      &gt;x     (greater than value x)
      &lt;=x    (less than or equals value x)
      &gt;=x    (greater than or equals value x)
      x...y     (between values x and y, including values)
      x         (equals value x)

 Number fields:
      =x       (equals value x)
      ^=       (is null or zero)

 Date fields:
      #c       (equals value x, entire day)
      now      (equals now, date and or time)
      //       (equals today)
      today    (equals today)

 Text fields:
      #c	        (case insensitive condition)
      = x      (equals a space and 'x')
      ^=       (is null or empty)
      %x%      (contains 'x')
      %x_y%    (contains 'x' followed by any char and 'y')
      \%      (contains char '%')
      \_      (contains char '_')

Related columns can be assigned, they will result in related searches.
For example, "employees_to_department.location_id = headoffice" finds all employees in the specified location).

Searching on related aggregates is supported.
For example, "orders_to_details.total_amount = '&gt;1000'" finds all orders with total order details amount more than 1000.

Arrays can be used for searching a number of values, this will result in an 'IN' condition that will be used in the search.
The values are not restricted to strings but can be any type that matches the column type.
For example, "record.department_id = [1, 33, 99]"]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the foundset in find mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[if (%%prefix%%foundset.find()) //find will fail if autosave is disabled and there are unsaved records
{
	columnTextDataProvider = 'a search value'
	// for numbers you have to make sure to format it correctly so that the decimal point is in your locales notation (. or ,)
	columnNumberDataProvider = '>' + utils.numberFormat(anumber, '####.00');
	columnDateDataProvider = '31-12-2010|dd-MM-yyyy'
	%%prefix%%foundset.search()
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="focusField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets focus to a field specified by its name.
If the second parameter is set to true, then readonly fields will be skipped
(the focus will be set to the first non-readonly field located after the field with the specified name; the tab sequence is respected when searching for the non-readonly field).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets focus to a field specified by its name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabseq = %%prefix%%controller.getTabSequence();
if (tabseq.length > 1) {
	// If there is more than one field in the tab sequence,
	// focus the second one and skip over readonly fields.
	%%prefix%%controller.focusField(tabseq[1], true);
}
else {
	// If there is at most one field in the tab sequence, then focus
	// whatever field is first, and don't bother to skip over readonly fields.
	%%prefix%%controller.focusField(null, false);
}]]></sample>
          </samples>
          <parameters>
            <parameter name="fieldName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the field to be focussed]]></description>
            </parameter>
            <parameter name="skipReadonly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[indication to skip read only fields, if the named field happens to be read only]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="focusFirstField">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets focus to the first field of the form; based on tab order sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets focus to the first field of the form; based on tab order sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.focusFirstField();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getContainerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the name of the window/dialog this form is displayed in. If the form is not showing in a window or dialog (other then main application frame), it returns null.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the window/dialog this form is displayed in.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the window/dialog this form is displayed in.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 6.0, dialogs/windows API has been rewritten (based in JSWindow objects). Use #getWindow() instead.]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var dialogOrWindowName = %%prefix%%controller.getContainerName();
if (dialogOrWindowName != null) {
	application.closeForm(dialogOrWindowName);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderMaxLength">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the length]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the maximum length allowed in the specified dataprovider.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the maximum length allowed in the specified dataprovider.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.getDataProviderMaxLength('name');]]></sample>
          </samples>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the dataprovider value (null if unknown dataprovider)]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets a value based on the specified dataprovider name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets a value based on the specified dataprovider name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var val = %%prefix%%controller.getDataProviderValue('contact_name');]]></sample>
          </samples>
          <parameters>
            <parameter name="dataProvider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name to retieve the value for]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getDataSource">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the datasource]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the used datasource.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the used datasource.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var dataSource = %%prefix%%controller.getDataSource();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="getDesignMode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the design mode state (true/fase)]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Returns the state of this form designmode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Returns the state of this form designmode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var success = %%prefix%%controller.getDesignMode();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDesignTimeProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of a form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get a design-time property of a form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var prop = forms.orders.controller.getDesignTimeProperty('myprop')]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFormContext">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[the dataset with form context]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the forms context where it resides, returns a dataset of its structure to the main controller.
Note1: can't be called in onload, because no context is yet available at this time.
Note2: tabindex is 1 (left) or 2 (right) for a SplitPane and 0 based for the other tabpanels; tabindex1based is the same as tabindex but is 1 based.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the forms context where it resides, returns a dataset of its structure to the main controller.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//dataset columns: [containername(1),formname(2),tabpanel or beanname(3),tabname(4),tabindex(5),tabindex1based(6)]
//dataset rows: mainform(1) -> parent(2)  -> current form(3) (when 3 forms deep)
/** @type {JSDataSet} */
var dataset = %%prefix%%controller.getFormContext();
if (dataset.getMaxRowIndex() > 1)
{
	// form is in a tabpanel
	var parentFormName = dataset.getValue(1,2)
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getFormWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the width in pixels]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the form width in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the form width in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var width = %%prefix%%controller.getFormWidth();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getMaxRecordIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the max record index]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the current cached record count of the current foundset.
To return the full foundset count, use: databaseManager.getFoundSetCount(...)
Tip: get the the table count of all rows in a table, use: databaseManager.getTableCount(...)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the current cached record count of the current foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[for ( var i = 1 ; i <= %%prefix%%controller.getMaxRecordIndex() ; i++ )
{
	%%prefix%%controller.setSelectedIndex(i);
	//do some action per record
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the name]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the name of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the name of this form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var formName = %%prefix%%controller.getName();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getPartHeight">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the part height in pixels]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the part height in pixels.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the part height in pixels.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var height = %%prefix%%controller.getPartHeight(JSPart.BODY);]]></sample>
          </samples>
          <parameters>
            <parameter name="partType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose height will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getPartYOffset">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[A number holding the Y offset of the specified form part.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the Y offset of a given part of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var offset = %%prefix%%controller.getPartYOffset(JSPart.BODY);]]></sample>
          </samples>
          <parameters>
            <parameter name="partType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose Y offset will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getSelectedIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the index]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the current record index of the current foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the current record index of the current foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%controller.getSelectedIndex();
//sets the next record in the foundset, will be reflected in UI
%%prefix%%controller.setSelectedIndex(current+1);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getServerName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the server used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the server used.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getDataSource()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getTabSequence">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[array of names]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get an array with the names of the components that are part of the tab sequence.
The order of the names respects the order of the tab sequence.
Components that are not named will not appear in the returned array, although they may be in the tab sequence.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get an array with the names of the components that are part of the tab sequence.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var tabseq = %%prefix%%controller.getTabSequence();
if (tabseq.length > 1) {
	// If there is more than one field in the tab sequence,
	// focus the second one and skip over readonly fields.
	%%prefix%%controller.focusField(tabseq[1], true);
}
else {
	// If there is at most one field in the tab sequence, then focus
	// whatever field is first, and don't bother to skip over readonly fields.
	%%prefix%%controller.focusField(null, false);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="getTableName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the name of the table used.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the name of the table used.]]></summary>
          </summaries>
          <deprecated><![CDATA[As of release 5.0, replaced by #getDataSource()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="getWindow">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"><![CDATA[the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currentWindow = controller.getWindow();
if (currentWindow != null) {
	currentWindow.title = 'We have a new title';
} else {
	currentWindow = application.createWindow("Window Name", JSWindow.WINDOW, null);
	currentWindow(650, 700, 450, 350);
	currentWindow = "Window Title";
	controller.show(currentWindow);
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="invertRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Inverts the current foundset against all rows of the current table; all records that are not in the foundset will become the current foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Inverts the current foundset against all rows of the current table; all records that are not in the foundset will become the current foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.invertRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadAllRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads all accessible records from the datasource into the form foundset.
When the form contains a related foundset it will be replaced by a default foundset on same datasource.

Notes:
-the default foundset is always limited by filters, if databaseManager.addFoundSetFilterParam function is used.
-typical use is loading the normal foundset again after form usage in a related tabpanel]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads all accessible records from the datasource into the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadAllRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadOmittedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads the records that are currently omitted in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads the records that are currently omitted in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadOmittedRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads all accessible records from the datasource into the form foundset. Typical usage is loading records after search in related tabpanel.
The difference to loadAllRecords() is that related foundset will load related records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads all accessible records from the datasource into the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//to reload all last (related) records again, if for example after a search in related tabpanel
%%prefix%%controller.loadRecords();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a (related) foundset into the form.
The form will no longer share the default foundset with forms of the same datasource, use loadAllRecords to restore the default foundset.

This will really update the foundset instance itself of the form, so now existing foundset is altered just the new foundset is shown.
This is different then doing foundset.loadRecords(foundset) because that just alters the current foundset and doesn't do anything with the foundset
that is given.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a (related) foundset into the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//to load a (related)foundset into the form.
//the form will no longer share the default foundset with forms of the same datasource, use loadAllRecords to restore the default foundset
%%prefix%%controller.loadRecords(order_to_orderdetails);]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(FoundSet)]]></deprecated>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a primary key dataset, will remove related sort.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a primary key dataset, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//to load a primary key dataset, will remove related sort
//var dataset = databaseManager.getDataSetByQuery(...);
// dataset must match the table primary key columns (alphabetically ordered)
%%prefix%%controller.loadRecords(dataset);]]></sample>
          </samples>
          <parameters>
            <parameter name="pkdataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet">
              <description><![CDATA[to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(JSDataSet)]]></deprecated>
          <parameters>
            <parameter name="pkdataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.

NOTE: This function will return true if the foundset was altered/changed. It is up to the developer to check for the presence of actual data using getSize().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));]]></sample>
          </samples>
          <parameters>
            <parameter name="UUIDpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(UUID)]]></deprecated>
          <parameters>
            <parameter name="UUIDpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID"/>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.

NOTE: This function will return true if the foundset was altered/changed. It is up to the developer to check for the presence of actual data using getSize().]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads a single record by primary key, will remove related sort.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadRecords(123);]]></sample>
          </samples>
          <parameters>
            <parameter name="singlenNmber_pk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls with ignored argumentsaray.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords(Number)]]></deprecated>
          <parameters>
            <parameter name="singlenNmber_pk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="ignored" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls.
Deprecated method to handle pre-6.1 calls to varargs function controller.loadRecords([1]), this was called with vargs=[1] in stead of vargs=[[1]].]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Method to handle old loadRecords calls.]]></summary>
          </summaries>
          <deprecated><![CDATA[use loadRecords with single typed argument]]></deprecated>
          <parameters>
            <parameter name="vargs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query'). The query must be a valid sql select.
If the foundset is related this function is not allowed.

see foundset.loadRecords(QBSelect).

When possible, the foundset will be loaded with the given query.
This is not always possible because the foundset needs to manipulate the query when adding conditions and joins.
In that case the query will be wrapped: select pk from tab where pk = (queryString)
The result is the same, except for te ordering in the queryString which will be ignored.

The query will be wrapped when one of the following is true:
<ul>
<li>you have no order-by clause</li>
<li>you have no from keyword</li>
<li>your query is not fully qualified on the main table</li>
<li>you have a group-by, having, join or union keyword</li>
</ul>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query').]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadRecords(sqlstring);]]></sample>
          </samples>
          <parameters>
            <parameter name="queryString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[to load]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query'). The query must be a valid sql select.
If the foundset is related this function is not allowed.

see foundset.loadRecords(QBSelect).

When possible, the foundset will be loaded with the given query.
This is not always possible because the foundset needs to manipulate the query when adding conditions and joins.
In that case the query will be wrapped: select pk from tab where pk = (queryString)
The result is the same, except for te ordering in the queryString which will be ignored.

The query will be wrapped when one of the following is true:
<ul>
<li>you have no order-by clause</li>
<li>you have no from keyword</li>
<li>your query is not fully qualified on the main table</li>
<li>you have a group-by, having, join or union keyword</li>
</ul>]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Loads records into form foundset based on a query (also known as 'Form by query').]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.loadRecords(sqlstring,parameters);]]></sample>
          </samples>
          <parameters>
            <parameter name="queryString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[to load]]></description>
            </parameter>
            <parameter name="queryArgumentsArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to replace the questions marks in the queryString]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if succesful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
%%prefix%%controller.newRecord();//default adds on top
//%%prefix%%controller.newRecord(false); //adds at bottom
//%%prefix%%controller.newRecord(2); //adds as second record]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
%%prefix%%controller.newRecord();//default adds on top
//%%prefix%%controller.newRecord(false); //adds at bottom
//%%prefix%%controller.newRecord(2); //adds as second record]]></sample>
          </samples>
          <parameters>
            <parameter name="insertOnTop" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true adds the new record as the topmost record]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="newRecord">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Create a new record in the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// foreign key data is only filled in for equals (=) relation items
%%prefix%%controller.newRecord();//default adds on top
//%%prefix%%controller.newRecord(false); //adds at bottom
//%%prefix%%controller.newRecord(2); //adds as second record]]></sample>
          </samples>
          <parameters>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[adds at specified index]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="omitRecord">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Omit current record in form foundset, to be shown with loadOmittedRecords.

Note: The omitted records are discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invert]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Omit current record in form foundset, to be shown with loadOmittedRecords.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var success = %%prefix%%controller.omitRecord();]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="print">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//print this form (with foundset records)
%%prefix%%controller.print();
//print only current record (no printerSelectDialog) to pdf plugin printer
//%%prefix%%controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="print">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//print this form (with foundset records)
%%prefix%%controller.print();
//print only current record (no printerSelectDialog) to pdf plugin printer
//%%prefix%%controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="print">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//print this form (with foundset records)
%%prefix%%controller.print();
//print only current record (no printerSelectDialog) to pdf plugin printer
//%%prefix%%controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="showPrinterSelectDialog" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to show the printer select dialog (default printer is normally used)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="print">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.awt.print.PrinterJob"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset, without preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//print this form (with foundset records)
%%prefix%%controller.print();
//print only current record (no printerSelectDialog) to pdf plugin printer
//%%prefix%%controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="showPrinterSelectDialog" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to show the printer select dialog (default printer is normally used)]]></description>
            </parameter>
            <parameter name="printerJob" type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob">
              <description><![CDATA[print to plugin printer job, see pdf printer plugin for example]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" deprecated="true" name="printPreview">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[As of release 5.0, replaced by #showPrintPreview()]]></deprecated>
        </function>
        <function clientSupport="wc,sc" name="printXML">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the XML]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset records to xml format.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset records to xml format.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//TIP: see also plugins.file.writeXMLFile(...)
var xml = %%prefix%%controller.printXML();
//print only current record
//var xml = %%prefix%%controller.printXML(true);]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="printXML">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the XML]]></return>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Print this form with current foundset records to xml format.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Print this form with current foundset records to xml format.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//TIP: see also plugins.file.writeXMLFile(...)
var xml = %%prefix%%controller.printXML();
//print only current record
//var xml = %%prefix%%controller.printXML(true);]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="recreateUI">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if successful]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Recreates the forms UI components, to reflect the latest solution model.
Use this after altering the elements via solutionModel at the JSForm of this form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Recreates the forms UI components, to reflect the latest solution model.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// get the solution model JSForm
var form = solutionModel.getForm("myForm");
// get the JSField of the form
var field = form.getField("myField");
// alter the field
field.x = field.x + 10;
// recreate the runtime forms ui to reflect the changes.
%%prefix%%controller.recreateUI();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="relookup">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Performs a relookup for the current foundset record dataproviders.
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Performs a relookup for the current foundset record dataproviders.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.relookup();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="saveData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 3.0, replaced by databaseManager#saveData()]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="search">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.
Clear results from previous searches.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="search">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.
Reduce results from previous searches.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
          <parameters>
            <parameter name="clearLastResults" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="search">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[the recordCount]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false); //to extend foundset]]></sample>
          </samples>
          <parameters>
            <parameter name="clearLastResults" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
            <parameter name="reduceSearch" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean, reduce (true) or extend (false) previous search results, default true]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the value based on a specified dataprovider name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the value based on a specified dataprovider name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.setDataProviderValue('contact_name','mycompany');]]></sample>
          </samples>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name to set the value for]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to set in the dataprovider]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with param true, false will return to normal browse/edit mode.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with param true, false will return to normal browse/edit mode.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="designMode" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[sets form in design mode if true, false ends design mode.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
            <parameter name="onselect" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onSelect method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
            <parameter name="onselect" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onSelect method reference]]></description>
            </parameter>
            <parameter name="onresize" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onResize method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
            <parameter name="onselect" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onSelect method reference]]></description>
            </parameter>
            <parameter name="onresize" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onResize method reference]]></description>
            </parameter>
            <parameter name="ondblclick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDblClick method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[var form = forms["selectedFormName"];
if (!form.controller.getDesignMode())
{
	// Set the current form in designmode with no callbacks
	form.controller.setDesignMode(true);
	// Set the current form in designmode with callbacks
	// where onDrag, onDrop, onSelect, onResize are names of form methods (not from "selectedFormName" form)
	// form.controller.setDesignMode(onDrag, onDrop, onSelect, onResize);
}
//Set the current form out of designmode (to normal browse)
//form.controller.setDesignMode(false);]]></sample>
          </samples>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
            <parameter name="onselect" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onSelect method reference]]></description>
            </parameter>
            <parameter name="onresize" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onResize method reference]]></description>
            </parameter>
            <parameter name="ondblclick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onDblClick method reference]]></description>
            </parameter>
            <parameter name="onrightclick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[onRightClick method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.

Orientation values:
0 - Landscape mode
1 - Portrait mode

Units values:
0 - millimeters
1 - inches
2 - pixels

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10);

//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10, SM_ORIENTATION.LANDSCAPE);

//Set page format to a custom size of 100x200 mm in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.LANDSCAPE, SM_UNITS.MM);

//Set page format to a custom size of 100x200 inch in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.PORTRAIT, SM_UNITS.INCH);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.

Orientation values:
0 - Landscape mode
1 - Portrait mode

Units values:
0 - millimeters
1 - inches
2 - pixels

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10);

//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10, SM_ORIENTATION.LANDSCAPE);

//Set page format to a custom size of 100x200 mm in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.LANDSCAPE, SM_UNITS.MM);

//Set page format to a custom size of 100x200 inch in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.PORTRAIT, SM_UNITS.INCH);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="orientation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified orientation of the page to be printed; the default is Portrait mode]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setPageFormat">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.

Orientation values:
0 - Landscape mode
1 - Portrait mode

Units values:
0 - millimeters
1 - inches
2 - pixels

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the page format to use when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10);

//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10, SM_ORIENTATION.LANDSCAPE);

//Set page format to a custom size of 100x200 mm in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.LANDSCAPE, SM_UNITS.MM);

//Set page format to a custom size of 100x200 inch in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, SM_ORIENTATION.PORTRAIT, SM_UNITS.INCH);]]></sample>
          </samples>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="orientation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified orientation of the page to be printed; the default is Portrait mode]]></description>
            </parameter>
            <parameter name="units" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified units for the width and height of the page to be printed; the default is pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="setPreferredPrinter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Set the preferred printer name to use when printing.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Set the preferred printer name to use when printing.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[%%prefix%%controller.setPreferredPrinter('HP Laser 2200');]]></sample>
          </samples>
          <parameters>
            <parameter name="printerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the printer to be used when printing.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Sets the current record index of the current foundset.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Sets the current record index of the current foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%controller.getSelectedIndex();
//sets the next record in the foundset, will be reflected in UI
%%prefix%%controller.setSelectedIndex(current+1);]]></sample>
          </samples>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index to select]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTabSequence">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Set the tab order sequence programatically, by passing the elements references in a javascript array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Set the tab order sequence programatically, by passing the elements references in a javascript array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.setTabSequence([%%prefix%%elements.fld_order_id, %%prefix%%elements.fld_order_amount]);]]></sample>
          </samples>
          <parameters>
            <parameter name="arrayOfElements" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array containing the element references]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="show">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// show the form in the current window/dialog
%%prefix%%controller.show();
// show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.show(w);
// show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.show(w);
// or %%prefix%%controller.show("mydialog");
//show the form in the main window
//%%prefix%%controller.show(null);]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="show">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// show the form in the current window/dialog
%%prefix%%controller.show();
// show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.show(w);
// show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.show(w);
// or %%prefix%%controller.show("mydialog");
//show the form in the main window
//%%prefix%%controller.show(null);]]></sample>
          </samples>
          <parameters>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="show">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[replaced by show(Object)]]></deprecated>
          <parameters>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the window in which this form should be shown]]></description>
            </parameter>
            <parameter name="isModal" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true for a modal window, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="show">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Shows the form (makes the form visible)
This function does not affect the form foundset in any way.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// show the form in the current window/dialog
%%prefix%%controller.show();
// show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.show(w);
// show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.show(w);
// or %%prefix%%controller.show("mydialog");
//show the form in the main window
//%%prefix%%controller.show(null);]]></sample>
          </samples>
          <parameters>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showAllRecords">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Show all records in database.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Show all records in database.]]></summary>
          </summaries>
          <deprecated><![CDATA[Obsolete method, use foundset object instead.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showOmittedRecords">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <deprecated><![CDATA[As of release 3.0, replaced by foundset#loadOmittedRecords()]]></deprecated>
        </function>
        <function clientSupport="wc,sc" name="showPrintPreview">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//shows this form (with foundset records) in print preview
%%prefix%%controller.showPrintPreview();
//to print preview current record only
//%%prefix%%controller.showPrintPreview(true);
//to print preview current record only with 125% zoom factor;
//%%prefix%%controller.showPrintPreview(true, null, 125);]]></sample>
          </samples>
        </function>
        <function clientSupport="wc,sc" name="showPrintPreview">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//shows this form (with foundset records) in print preview
%%prefix%%controller.showPrintPreview();
//to print preview current record only
//%%prefix%%controller.showPrintPreview(true);
//to print preview current record only with 125% zoom factor;
//%%prefix%%controller.showPrintPreview(true, null, 125);]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="showPrintPreview">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.awt.print.PrinterJob"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//shows this form (with foundset records) in print preview
%%prefix%%controller.showPrintPreview();
//to print preview current record only
//%%prefix%%controller.showPrintPreview(true);
//to print preview current record only with 125% zoom factor;
//%%prefix%%controller.showPrintPreview(true, null, 125);]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="printerJob" type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob">
              <description><![CDATA[print to plugin printer job, see pdf printer plugin for example (incase print is used from printpreview)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="wc,sc" name="showPrintPreview">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.awt.print.PrinterJob"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="wc,sc"><![CDATA[Show this form in print preview.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="wc,sc"><![CDATA[//shows this form (with foundset records) in print preview
%%prefix%%controller.showPrintPreview();
//to print preview current record only
//%%prefix%%controller.showPrintPreview(true);
//to print preview current record only with 125% zoom factor;
//%%prefix%%controller.showPrintPreview(true, null, 125);]]></sample>
          </samples>
          <parameters>
            <parameter name="printCurrentRecordOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="printerJob" type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob">
              <description><![CDATA[print to plugin printer job, see pdf printer plugin for example (incase print is used from printpreview)]]></description>
            </parameter>
            <parameter name="zoomFactor" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[a specified number value from 10-400]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.scripting.api.IJSFoundSet"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.base.scripting.api.IJSFoundSet">
              <description><![CDATA[the foundset to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[the foundset to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.FoundSet"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.FoundSet">
              <description><![CDATA[the foundset to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="pkdataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet">
              <description><![CDATA[the pkdataset to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="pkdataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet">
              <description><![CDATA[the pkdataset to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="pkdataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet">
              <description><![CDATA[the pkdataset to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.querybuilder.impl.QBSelect"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.querybuilder.impl.QBSelect" typecode="com.servoy.j2db.querybuilder.impl.QBSelect">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="UUIDpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[the UUIDpk to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="UUIDpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[the UUIDpk to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.util.UUID"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="UUIDpk" type="com.servoy.j2db.util.UUID" typecode="com.servoy.j2db.util.UUID">
              <description><![CDATA[the UUIDpk to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="singleNumber_pk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the singleNumber_pk to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="singleNumber_pk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the singleNumber_pk to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="singleNumber_pk" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the singleNumber_pk to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <deprecated><![CDATA[see showRecords(FoundSet, String) or showRecords(FoundSet, JSWindow)]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the foundset to load before showing the form]]></description>
            </parameter>
            <parameter name="dialogName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the name of the dialog in which to show the form]]></description>
            </parameter>
            <parameter name="modal" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[true for modal dialog, false for non-modal]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="argumentsArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of arguments for the query]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="argumentsArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of arguments for the query]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow">
              <description><![CDATA[the window in which this form should be shown, given as a window object]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="argumentsArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of arguments for the query]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="showRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);
//%%prefix%%controller.showRecords(foundset, "mydialog");]]></sample>
          </samples>
          <parameters>
            <parameter name="query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the query to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the window in which this form should be shown, specified by the name of an existing window.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="showRelatedRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <deprecated><![CDATA[Obsolete method, use foundset object instead.]]></deprecated>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sorts the form foundset based on the given sort string.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sorts the form foundset based on the given sort string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.sort('columnA desc,columnB asc');]]></sample>
          </samples>
          <parameters>
            <parameter name="sortString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sorts the form foundset based on the given sort string.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sorts the form foundset based on the given sort string.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.sort('columnA desc,columnB asc');]]></sample>
          </samples>
          <parameters>
            <parameter name="sortString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
            <parameter name="defer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the "sortString" will be just stored, without performing a query on the database (the actual sorting will be deferred until the next data loading action).]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="sortDialog">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Show the sort dialog to the user a preselection sortString can be passed, to sort the form foundset.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Show the sort dialog to the user a preselection sortString can be passed, to sort the form foundset.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.sortDialog('columnA desc,columnB asc');]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="sortDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[%%prefix%%controller.sortDialog('columnA desc,columnB asc');]]></sample>
          </samples>
          <parameters>
            <parameter name="sortString" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="elements" qualifiedName="com.servoy.j2db.documentation.scripting.docs.FormElements" scriptingName="elements">
      <properties>
        <property clientSupport="ng,mc,wc,sc" name="[index]">
          <return type="com.servoy.j2db.ui.runtime.IRuntimeComponent" typecode="com.servoy.j2db.ui.runtime.IRuntimeComponent"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an element of the form by its index.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an element of the form by its index.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[for (var i=0; i<%%prefix%%elements.length; i++)
{
	var elem = %%prefix%%elements[i];
	application.output(elem.getName() + ": " + elem.getDataProviderID());
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="[name]">
          <return type="com.servoy.j2db.ui.runtime.IRuntimeComponent" typecode="com.servoy.j2db.ui.runtime.IRuntimeComponent"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get an element of the form by its name.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get an element of the form by its name.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[for (var i=0; i<%%prefix%%elements.allnames.length; i++)
{
	var name = %%prefix%%elements.allnames[i];
	var elem = %%prefix%%elements[name];
	application.output(name + ": " + elem.getDataProviderID());	
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="allnames" special="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Lcom.servoy.j2db.documentation.scripting.docs.String;"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the names of all elements of the form, as an array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the names of all elements of the form, as an array.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[for (var i=0; i<%%prefix%%elements.allnames.length; i++)
{
	var name = %%prefix%%elements.allnames[i];
	var elem = %%prefix%%elements[name];
	application.output(name + ": " + elem.getDataProviderID());	
}]]></sample>
          </samples>
        </property>
        <property clientSupport="ng,mc,wc,sc" name="length">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of elements of the form.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Get the number of elements of the form.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[for (var i=0; i<%%prefix%%elements.length; i++)
{
	var elem = %%prefix%%elements[i];
	application.output(elem.getName() + ": " + elem.getDataProviderID());
}]]></sample>
          </samples>
        </property>
      </properties>
    </object>
    <object clientSupport="ng,mc,wc,sc" publicName="i18n" qualifiedName="com.servoy.j2db.scripting.JSI18N" scriptingName="i18n">
      <functions>
        <function clientSupport="ng,wc,sc" name="getAvailableTimeZoneIDs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Get the list of available time zones.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Get the list of available time zones.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[//Get the list of available time zones 
var timezones = i18n.getAvailableTimeZoneIDs();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getCountries">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[a String array containing the available countries.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the list of countries available for localization]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the list of countries available for localization]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[i18n.getCountries()]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getCurrentCountry">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the current country.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the current country; based on the current locale settings in the Servoy Client Locale preferences. 

NOTE: For more information on i18n, see the chapter on Internationalization in the Servoy Developer User's Guide, and the chapter on Internationalization-I18N in the Programming Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the current country; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currCountry = i18n.getCurrentCountry();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getCurrentLanguage">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the current language.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the current language; based on the current locale settings in the Servoy Client Locale preferences. 

NOTE: For more information on i18n, see the chapter on Internationalization in the Servoy Developer User's Guide, and the chapter on Internationalization-I18N in the Programming Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the current language; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[var currLang = i18n.getCurrentLanguage();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getCurrentTimeZone">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the current time zone.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the current time zone of the client; based on the current locale settings in the Servoy Client Locale preferences. For Servoy Web Clients the time zone is given by the browser (if it is possible to obtain it).]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the current time zone of the client; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var currTimeZone = i18n.getCurrentTimeZone();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDefaultDateFormat">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the default date format.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the current default date format; based on the current locale settings in the Servoy Client Locale preferences.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the current default date format; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var defaultDateFormat = i18n.getDefaultDateFormat();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getDefaultNumberFormat">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String representing the default number format.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Gets the current default number format; based on the current locale settings in the Servoy Client Locale preferences.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Gets the current default number format; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var defaultNumberFormat = i18n.getDefaultNumberFormat();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getI18NMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String that is the message for the message key.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the real message (for the clients locale) for a specified message key.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the real message (for the clients locale) for a specified message key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// returns 'Welcome my_name in my solution'
// if the key 'mykey.username.text' is 'Welcome {0} in my solution'
i18n.getI18NMessage('mykey.username.text',new Array('my_name'))]]></sample>
          </samples>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message key]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="getI18NMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[a String that is the message for the message key.]]></return>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Gets the real message (for the clients locale) for a specified message key. 
You can use parameter substitution by using {n}, where n is a index number of the value thats in the arguments array.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Gets the real message (for the clients locale) for a specified message key.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[// returns 'Welcome my_name in my solution'
// if the key 'mykey.username.text' is 'Welcome {0} in my solution'
i18n.getI18NMessage('mykey.username.text',new Array('my_name'))]]></sample>
          </samples>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message key]]></description>
            </parameter>
            <parameter name="dynamicValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Arguments array when using parameter substitution.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getLanguages">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[a JSDataSet with all the languages.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with rows that contains a language key (en) and the displayname (English) column.

See http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt for a list that could be returned.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with rows that contains a language key (en) and the displayname (English) column.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var set = i18n.getLanguages();
for(var i=1;i<=set.getMaxRowIndex();i++)
{
	application.output(set.getValue(i, 1) + " " + set.getValue(i, 2));
}]]></sample>
          </samples>
          <links>
            <link>
              <url>http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt</url>
            </link>
          </links>
        </function>
        <function clientSupport="ng,wc,sc" name="getSystemMessages">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[a JSDataSet with all the system messages.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with rows that contains 3 columns: 'key' (i18n key), 'reference' (reference text for that key) and 'locale ([CURRENT_LOCALE])' (where [CURRENT_LOCALE] is the current language) - with the system messages of servoy. 
This means all servoy messages, with all available translations.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns a dataset with rows that contains 3 columns: 'key' (i18n key), 'reference' (reference text for that key) and 'locale ([CURRENT_LOCALE])' (where [CURRENT_LOCALE] is the current language) - with the system messages of servoy.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var set = i18n.getSystemMessages();
for(var i=1;i<=set.getMaxRowIndex();i++)
{
	application.output(set.getValue(i, 1) + " " + set.getValue(i, 2)+ " " + set.getValue(i, 3));
}]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,wc,sc" name="getTimeZoneOffset">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the time zone's offset from UTC.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var timeZoneOffset = i18n.getTimeZoneOffset('America/Los_Angeles');]]></sample>
          </samples>
          <parameters>
            <parameter name="timeZoneId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The time zone to get the offset for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTimeZoneOffset">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[an int representing the time zone's offset from UTC.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var timeZoneOffset = i18n.getTimeZoneOffset('America/Los_Angeles');]]></sample>
          </samples>
          <parameters>
            <parameter name="timeZoneId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The time zone to get the offset for.]]></description>
            </parameter>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date">
              <description><![CDATA[The date in the time zone (default current date). Needed in case daylight saving time/GMT offset changes are used in the time zone.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="getTimeZones">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"><![CDATA[an Array with all the timezones.]]></return>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Returns an array of known timezones.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Returns an array of known timezones.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[var timeZones = i18n.getTimeZones();]]></sample>
          </samples>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setI18NMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Sets the value of i18n key for client scope,if value null the setting is removed. 
All forms not yet loaded will change (execute this in solution startup or first form)]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Sets the value of i18n key for client scope,if value null the setting is removed.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//sets the value of i18n key for client scope; if value null the setting is removed
//Warning: already created form elements with i18n text lookup will not change,
//so call this method in the solution startup method or in methods from first form
//this method saves message for current locale, so if locale is changed with setLocale, all messages set from scripting will be lost

i18n.setI18NMessage('mykey.username.text','my_name')]]></sample>
          </samples>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message key]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[They value for the message key.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setI18NMessagesFilter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.
So that you can have multiple default values and multiple values per locale for one key.
// NOTE: this function is only working on runtime clients when the i18n values are read from the database]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.]]></summary>
          </summaries>
          <deprecated><![CDATA[use table filters on the i18n table using databaseManager.addTableFilterParam]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Puts i18n in filter mode - this allows you to have multiple default/per locale
// values for one key and to use one of them based on the filter parameters.
// Let's say you added a new column "message_variant" to your i18n table.
// Now you can have keys that will translate to a language differently depending on the used variant
// For example you have 2 rows in you table for key X, language EN, different values and different "message_variant" (let's say 1 and 2)
// If you want the solution to use the first variant, you will have to call:
i18n.setI18NMessagesFilter('message_variant', '1')

// Using filter fall back : if there is no key for 'message_variant' with value '1', it will
// search for value '2'
var filterValue = new Array();
filterValue[0] = '1';
filterValue[1] = '2';
i18n.setI18NMessagesFilter('message_variant', filterValue)

// ATTENTION: if you use setI18NMessagesFilter(...) it is not recommended to use the i18n Dialog (especially before the filter is applied through JS).]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The column name that is the filter column in the i18n table.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The filter value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" deprecated="true" name="setI18NMessagesFilter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.
So that you can have multiple default values and multiple values per locale for one key.
You can use filter fall back by setting the filter value as an array of strings.
// NOTE: this function is only working on runtime clients when the i18n values are read from the database]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.]]></summary>
          </summaries>
          <deprecated><![CDATA[use table filters on the i18n table using databaseManager.addTableFilterParam, for example: </br>
databaseManager.addTableFilterParam('database', 'your_i18n_table', 'message_variant', 'in', [1, 2])]]></deprecated>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// Puts i18n in filter mode - this allows you to have multiple default/per locale
// values for one key and to use one of them based on the filter parameters.
// Let's say you added a new column "message_variant" to your i18n table.
// Now you can have keys that will translate to a language differently depending on the used variant
// For example you have 2 rows in you table for key X, language EN, different values and different "message_variant" (let's say 1 and 2)
// If you want the solution to use the first variant, you will have to call:
i18n.setI18NMessagesFilter('message_variant', '1')

// Using filter fall back : if there is no key for 'message_variant' with value '1', it will
// search for value '2'
var filterValue = new Array();
filterValue[0] = '1';
filterValue[1] = '2';
i18n.setI18NMessagesFilter('message_variant', filterValue)

// ATTENTION: if you use setI18NMessagesFilter(...) it is not recommended to use the i18n Dialog (especially before the filter is applied through JS).]]></sample>
          </samples>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The column name that is the filter column in the i18n table.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[The filter value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,mc,wc,sc" name="setLocale">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,mc,wc,sc"><![CDATA[Set/Overwrite the locale for this client.
All forms not yet loaded will change (execute this in solution startup or first form).

The language must be a lowercase 2 letter code defined by ISO-639.
see http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt
The country must be an upper case 2 letter code defined by IS-3166
see http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html 

NOTE: For more information on i18n, see the chapter on Internationalization in the Servoy Developer User's Guide, and the chapter on Internationalization-I18N in the Programming Guide.]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,mc,wc,sc"><![CDATA[Set/Overwrite the locale for this client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,mc,wc,sc"><![CDATA[//Warning: already created form elements with i18n text lookup will not change,
//so call this method in the solution startup method or in methods from first form

i18n.setLocale('en','US');]]></sample>
          </samples>
          <parameters>
            <parameter name="language" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The lowercase 2 letter code]]></description>
            </parameter>
            <parameter name="country" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The upper case 2 letter code.]]></description>
            </parameter>
          </parameters>
        </function>
        <function clientSupport="ng,wc,sc" name="setTimeZone">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <descriptions>
            <description clientSupport="ng,wc,sc"><![CDATA[Sets the current time zone of the client.
The parameter should be a string having the format which can be retrieved via i18n.getAvailableTimeZones or
can be seen in the SmartClient Edit -> Preferences -> Locale at the "Default Timezone" combobox. 
For instance the time zone for Netherlands is set using the ID "Europe/Amsterdam".]]></description>
          </descriptions>
          <summaries>
            <summary clientSupport="ng,wc,sc"><![CDATA[Sets the current time zone of the client.]]></summary>
          </summaries>
          <samples>
            <sample clientSupport="ng,wc,sc"><![CDATA[// This will set the default time zone to Central European Time
i18n.setTimeZone("Europe/Amsterdam");]]></sample>
          </samples>
          <parameters>
            <parameter name="timezone" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the client's time zone]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
  </runtime>
</servoydoc>
