<?xml version="1.0" encoding="UTF-8"?>

<!--This file is automatically generated. Don't bother editing it, because your changes will probably be lost at the next build.-->
<servoydoc version="6.0.0 a0" buildNumber="1200" generationTime="2010-09-14 14:55:24">
  <runtime>
    <object publicName="ALIGNMENT" qualifiedName="com.servoy.j2db.scripting.solutionmodel.ALIGNMENT">
      <constants>
        <constant name="BOTTOM">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting vertical alignment for components.
It makes the text inside the component be bottom aligned vertically.]]></description>
          <summary><![CDATA[Constant used for setting vertical alignment for components.]]></summary>
          <sample><![CDATA[var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
        </constant>
        <constant name="CENTER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting horizontal and vertical alignment
for components. If used for horizontal alignment,
then the text of the component will be horizontally centered.
Similarly, if used for vertical alignment, then the text
of the component will be vertically centered.]]></description>
          <summary><![CDATA[Constant used for setting horizontal and vertical alignment
for components.]]></summary>
          <sample><![CDATA[var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER]]></sample>
        </constant>
        <constant name="LEFT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting horizontal alignment for components.
It makes the text inside the component be left aligned horizontally.]]></description>
          <summary><![CDATA[Constant used for setting horizontal alignment for components.]]></summary>
          <sample><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;]]></sample>
        </constant>
        <constant name="RIGHT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting horizontal alignment for components.
It makes the text inside the component be right aligned vertically.]]></description>
          <summary><![CDATA[Constant used for setting horizontal alignment for components.]]></summary>
          <sample><![CDATA[var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
        </constant>
        <constant name="SPLIT_HORIZONTAL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></description>
          <summary><![CDATA[Constant used for creating horizontal split pane from tab panel, by setting its tabOrientation.]]></summary>
          <sample><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = SM_ALIGNMENT.SPLIT_HORIZONTAL;]]></sample>
        </constant>
        <constant name="SPLIT_VERTICAL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></description>
          <summary><![CDATA[Constant used for creating vertical split pane from tab panel, by setting its tabOrientation.]]></summary>
          <sample><![CDATA[var splitPane = myForm.newTabPanel('splitPane', 10, 10, 620, 460);
splitPane.tabOrientation = SM_ALIGNMENT.SPLIT_VERTICAL;]]></sample>
        </constant>
        <constant name="TOP">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting vertical alignment for components.
It makes the text inside the component be top aligned vertically.]]></description>
          <summary><![CDATA[Constant used for setting vertical alignment for components.]]></summary>
          <sample><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="ANCHOR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.ANCHOR">
      <constants>
        <constant name="ALL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored on all sides. This means that
the component will keep a constant distance from all sides
of the window and will grow/shrink as the window is resized.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;]]></sample>
        </constant>
        <constant name="DEFAULT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
It is equivalent to a combination of NORTH and WEST anchoring.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.DEFAULT;]]></sample>
        </constant>
        <constant name="EAST">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the right side of the window,
which means that the component will keep a constant distance
from the right side of the window. If WEST anchoring is also 
enabled, then the component will grow/shrink as the window 
is horizontally resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </constant>
        <constant name="NORTH">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the top side of the window,
which means that the component will keep a constant distance
from the top side of the window. If SOUTH anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST;]]></sample>
        </constant>
        <constant name="SOUTH">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the bottom side of the window,
which means that the component will keep a constant distance
from the bottom side of the window. If NORTH anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </constant>
        <constant name="WEST">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifying anchoring for components.
Makes the component anchored to the left side of the window,
which means that the component will keep a constant distance
from the left side of the window. If EAST anchoring is also 
enabled, then the component will grow/shrink as the window 
is vertically resized.

This constant is used also for setting tab orientation on tab panels.]]></description>
          <summary><![CDATA[Constant to be used when specifying anchoring for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST;]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="APPLICATION_TYPES" qualifiedName="com.servoy.j2db.scripting.info.APPLICATION_TYPES">
      <constants>
        <constant name="HEADLESS_CLIENT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for application type headless_client.]]></description>
          <summary><![CDATA[Constant for application type headless_client.]]></summary>
          <sample><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.HEADLESS_CLIENT)
{
	//we are in headless_client
}]]></sample>
        </constant>
        <constant name="RUNTIME_CLIENT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for application type runtime_client.]]></description>
          <summary><![CDATA[Constant for application type runtime_client.]]></summary>
          <sample><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.RUNTIME_CLIENT)
{
	//we are in runtime_client
}]]></sample>
        </constant>
        <constant name="SMART_CLIENT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for application type smart_client.]]></description>
          <summary><![CDATA[Constant for application type smart_client.]]></summary>
          <sample><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.SMART_CLIENT)
{
	//we are in smart_client
}]]></sample>
        </constant>
        <constant name="WEB_CLIENT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for application type web_client.]]></description>
          <summary><![CDATA[Constant for application type web_client.]]></summary>
          <sample><![CDATA[if (application.getApplicationType() == APPLICATION_TYPES.WEB_CLIENT)
{
	//we are in web_client
}]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="ARGUMENTS" qualifiedName="com.servoy.j2db.scripting.info.ARGUMENTS">
      <constants>
        <constant name="callee">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The currently executing function.]]></description>
          <summary><![CDATA[The currently executing function.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="length">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The number of arguments passed to the function.]]></description>
          <summary><![CDATA[The number of arguments passed to the function.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="Application" scriptingName="application" qualifiedName="com.servoy.j2db.scripting.JSApplication">
      <functions>
        <function name="addClientInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Adds a string of client information which gets stored on the server, 
and can be viewed on the Clients page of Servoy Server Administration Console.

The new piece of client information is added on behalf of the running 
Servoy client.

This function can be called more than once, if you want to add multiple
lines of client information.

NOTE: 
This function can also be used with the function <em>getClientCountForInfo</em>
to count the number of clients with matching addditional client information.]]></description>
          <summary><![CDATA[Adds a string of client information which gets stored on the server, 
and can be viewed on the Clients page of Servoy Server Administration Console.]]></summary>
          <sample><![CDATA[application.addClientInfo('SaaS company name');
application.addClientInfo('For any issues call +31-SA-AS');]]></sample>
          <parameters>
            <parameter name="info" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A line of text to be added as additional client information
             on behalf of the running Servoy client.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="beep">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Produces a "beep" sound; commonly used to indicate an error or warning dialog.]]></description>
          <summary><![CDATA[Produces a "beep" sound; commonly used to indicate an error or warning dialog.]]></summary>
          <sample><![CDATA[application.beep();]]></sample>
        </function>
        <function name="closeAllWindows">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean true if all windows were closed and false otherwise.]]></return>
          <description><![CDATA[Close all visible windows (except main application window). Returns true if operation was successful.]]></description>
          <summary><![CDATA[Close all visible windows (except main application window).]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="closeForm" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the dialog(s)/window(s) were closed, (false) otherwise]]></return>
          <description><![CDATA[Close the dialog/window with the given name (call this method to hide the form shown with 'showFormInDialog' or 'showFormInWindow'). If (true) is passed, then all the windows/dialogs will be closed. If the name is missing or null, the default dialog/window will be closed.]]></description>
          <summary><![CDATA[Close the dialog/window with the given name (call this method to hide the form shown with 'showFormInDialog' or 'showFormInWindow').]]></summary>
          <sample><![CDATA[application.closeForm(); // closes the current dialog/window
//application.closeForm('windowOrDialogName'); //closes the dialog/window with this specific name]]></sample>
          <parameters>
            <parameter name="windowOrDialogName/closeAll" optional="true">
              <description><![CDATA[Name of the dialog/window to close, or (true) to close all open dialogs/windows.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="closeFormDialog" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the dialog(s) were closed, (false) otherwise]]></return>
          <description><![CDATA[Close the dialog with the given name (call this method to hide the form shown with 'showFormInDialog'). If (true) is passed, then all the windows will be closed. If the name is missing or null, the default dialog will be closed.]]></description>
          <summary><![CDATA[Close the dialog with the given name (call this method to hide the form shown with 'showFormInDialog').]]></summary>
          <sample><![CDATA[application.closeFormDialog(); // closes the current dialog
//application.closeFormDialog('dialogname'); //closes the dialog with the specific name]]></sample>
          <parameters>
            <parameter name="dialogName/closeAll" optional="true">
              <description><![CDATA[Name of the dialog to close, or (true) to close all open dialogs.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="closeSolution">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Close the current open solution and optionally open a new one.]]></description>
          <summary><![CDATA[Close the current open solution and optionally open a new one.]]></summary>
          <sample><![CDATA[application.closeSolution();
//application.closeSolution('solution_name','global_method_name','my_argument');//log out, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
//note: specifying a solution will not work in developer due to debugger dependencies]]></sample>
          <parameters>
            <parameter name="solutionToLoad" optional="true">
              <description><![CDATA[Name of the solution to load]]></description>
            </parameter>
            <parameter name="method" optional="true">
              <description><![CDATA[Name of the global method to call]]></description>
            </parameter>
            <parameter name="argument" optional="true">
              <description><![CDATA[Argument passed to the global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createJPGImage" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="[B" type="byte[]"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.images.ImageProvider" member="getImage"/>
          </sees>
        </function>
        <function name="createNewFormInstance">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the instance was created succesfully, (false) otherwise]]></return>
          <description><![CDATA[Create a new form instance.]]></description>
          <summary><![CDATA[Create a new form instance.]]></summary>
          <sample><![CDATA[var ok = application.createNewFormInstance('orders','orders_view');
if (ok)
{
	application.showFormInDialog(forms.orders_view)
	//forms['orders_view'].controller.show()
	//forms.xyz.elements.myTabPanel.addTab(forms['orders_view'])
	//forms['orders_view'].elements.mylabel.setLocation(10,20)
}]]></sample>
          <parameters>
            <parameter name="designFormName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the design form]]></description>
            </parameter>
            <parameter name="newInstanceScriptName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the new form instance]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createTempFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="createTempFile"/>
          </sees>
        </function>
        <function name="createThumbnailJPGImage" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="[B" type="byte[]"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="createJPGImage"/>
          </sees>
        </function>
        <function name="createWindow">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.JSWindowImpl$JSWindow" type="com.servoy.j2db.scripting.JSWindowImpl$JSWindow"><![CDATA[the newly created window.]]></return>
          <description><![CDATA[Creates a new window that can be used for displaying forms. Initially the window is not visible.
If there is already a window with the given name, it will be closed and destroyed prior to creating the new window.
Use the form controller show() and showRecords() methods in order to show a form in this window.]]></description>
          <summary><![CDATA[Creates a new window that can be used for displaying forms.]]></summary>
          <sample><![CDATA[// create and show a window, with specified title, initial location and size
var win = application.createWindow("windowName", JSWindow.WINDOW);
win.setInitialBounds(10, 10, 300, 300);
win.setTitle("This is a window");
controller.show(win);
// create and show a non-modal dialog with default initial bounds/title
var nmd = application.createWindow("nonModalDialogName", JSWindow.DIALOG);
controller.showRecords(15, nmd); // 15 is a single-number pk in this case]]></sample>
          <parameters>
            <parameter name="windowName">
              <description><![CDATA[the name of the window.]]></description>
            </parameter>
            <parameter name="type">
              <description><![CDATA[the type of the window. Can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW.]]></description>
            </parameter>
            <parameter name="parentWindow" optional="true">
              <description><![CDATA[the parent JSWindow object. If it is not specified, the current window will be used as parent. This parameter is only used by dialogs.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeProgram">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The output generated by the program execution.]]></return>
          <description><![CDATA[Execute a program and returns output. Specify the cmd as you would do in a console.]]></description>
          <summary><![CDATA[Execute a program and returns output.]]></summary>
          <sample><![CDATA[//'#' is divider between program args, environment vars and startdir
var program_output = application.executeProgram('c:/temp/program.ext','arg0','arg1','argN','#','path=c:/temp','#','c:/temp');]]></sample>
          <parameters>
            <parameter name="programName(fullpath)">
              <description><![CDATA[Name of the program to execute]]></description>
            </parameter>
            <parameter name="arg1" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="arg2" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="argN" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program args, environment vars and startdir]]></description>
            </parameter>
            <parameter name="environmentvar1">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="environmentvarN" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="startdirectory" optional="true">
              <description><![CDATA[Program start directory]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeProgramInBackground">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Execute a program in the background. Specify the cmd as you would do in a console.]]></description>
          <summary><![CDATA[Execute a program in the background.]]></summary>
          <sample><![CDATA[//'#' is divider between program args, environment vars and startdir
application.executeProgramInBackground('c:/temp/program.ext','arg0','arg1','argN');]]></sample>
          <parameters>
            <parameter name="programName(fullpath)">
              <description><![CDATA[Name of the program to execute in background]]></description>
            </parameter>
            <parameter name="arg1" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="arg2" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="argN" optional="true">
              <description><![CDATA[Argument]]></description>
            </parameter>
            <parameter name="#" optional="true">
              <description><![CDATA[Divider between program args, environment vars and startdir]]></description>
            </parameter>
            <parameter name="environmentvar1" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="environmentvarN" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
            <parameter name="startdirectory" optional="true">
              <description><![CDATA[Environment variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="exit">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Stop and exit application.]]></description>
          <summary><![CDATA[Stop and exit application.]]></summary>
          <sample><![CDATA[// exit application
application.exit();]]></sample>
        </function>
        <function name="getActiveClientCount">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Active user count on the server]]></return>
          <description><![CDATA[Get the active user count on the server (can be limited to current solution).]]></description>
          <summary><![CDATA[Get the active user count on the server (can be limited to current solution).]]></summary>
          <sample><![CDATA[var count = application.getActiveClientCount(true);]]></sample>
          <parameters>
            <parameter name="currentSolutionOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean (true) to get the active user count on server only to the current solution]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getActiveUserCount" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="getActiveClientCount"/>
          </sees>
        </function>
        <function name="getApplicationType">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Constant application type]]></return>
          <description><![CDATA[Get the application type.]]></description>
          <summary><![CDATA[Get the application type.]]></summary>
          <sample><![CDATA[var type = application.getApplicationType();
//see application type contstant]]></sample>
        </function>
        <function name="getClientCountForInfo">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Number of clients]]></return>
          <description><![CDATA[Gets the count for all clients displaying the same additional information 
in the Clients page of Servoy Server Administration Console.]]></description>
          <summary><![CDATA[Gets the count for all clients displaying the same additional information 
in the Clients page of Servoy Server Administration Console.]]></summary>
          <sample><![CDATA[var count = application.getClientCountForInfo('SaaS company name');
application.output('Including yourself, there are ' + count + ' client(s) running on behalf of the company.');]]></sample>
          <parameters>
            <parameter name="info" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The additional client info string to search for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getClipboardString">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The string from the clipboard]]></return>
          <description><![CDATA[Gets a string from the clipboard, null if not a string or empty.]]></description>
          <summary><![CDATA[Gets a string from the clipboard, null if not a string or empty.]]></summary>
          <sample><![CDATA[var fromClipboard = application.getClipboardString();]]></sample>
        </function>
        <function name="getCurrentLookAndFeelName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Current Look And Feel]]></return>
          <description><![CDATA[Gets the name of the current Look And Feel specified in Application Preferences.]]></description>
          <summary><![CDATA[Gets the name of the current Look And Feel specified in Application Preferences.]]></summary>
          <sample><![CDATA[var laf = application.getCurrentLookAndFeelName();]]></sample>
        </function>
        <function name="getDateStamp" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"/>
          <description><![CDATA[Get the current date (with hour/minutes/seconds set to zero).]]></description>
          <summary><![CDATA[Get the current date (with hour/minutes/seconds set to zero).]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSUtils" member="timestampToDate"/>
          </sees>
        </function>
        <function name="getHostName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Name of the localhost]]></return>
          <description><![CDATA[Get the name of the localhost.]]></description>
          <summary><![CDATA[Get the name of the localhost.]]></summary>
          <sample><![CDATA[var hostName = application.getHostName();]]></sample>
        </function>
        <function name="getIPAddress">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[IP address of the client]]></return>
          <description><![CDATA[Get the clients' IP address.]]></description>
          <summary><![CDATA[Get the clients' IP address.]]></summary>
          <sample><![CDATA[var ip = application.getIPAddress();]]></sample>
        </function>
        <function name="getLastErrorCode" deprecated="true">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Returns the last error code or 0 if no error has happend, calling also clears errorCode]]></description>
          <summary><![CDATA[Returns the last error code or 0 if no error has happend, calling also clears errorCode]]></summary>
          <sample><![CDATA[var error = application.getLastErrorCode();
//if (error != 0) showErrorDialog();]]></sample>
        </function>
        <function name="getLastKeyModifiers" deprecated="true">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Returns the last key modifiers of last action (shift = 1,ctrl = 2,meta = 4,alt = 8)]]></description>
          <summary><![CDATA[Returns the last key modifiers of last action (shift = 1,ctrl = 2,meta = 4,alt = 8)]]></summary>
          <sample><![CDATA[//get the last key modifiers of last user action (shift = 1,ctrl = 2,meta = 4,alt = 8)
var m = application.getLastKeyModifiers();
if ( (m & 1) == 1)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent"/>
          </sees>
        </function>
        <function name="getLicenseNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[Client licenses names]]></return>
          <description><![CDATA[Get the names of the used client licenses (as strings in array).]]></description>
          <summary><![CDATA[Get the names of the used client licenses (as strings in array).]]></summary>
          <sample><![CDATA[var array = application.getLicenseNames();]]></sample>
        </function>
        <function name="getMethodTriggerElementName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent"/>
          </sees>
        </function>
        <function name="getMethodTriggerFormName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent"/>
          </sees>
        </function>
        <function name="getNewUUID" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get a new UUID (also known as GUID)]]></description>
          <summary><![CDATA[Get a new UUID (also known as GUID)]]></summary>
          <sample><![CDATA[var new_uuid = application.getNewUUID();]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="getUUID"/>
          </sees>
        </function>
        <function name="getOSName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Name of the operating system]]></return>
          <description><![CDATA[Returns the name of the operating system.]]></description>
          <summary><![CDATA[Returns the name of the operating system.]]></summary>
          <sample><![CDATA[var osname = application.getOSName();]]></sample>
        </function>
        <function name="getPrinters">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[All printer names]]></return>
          <description><![CDATA[Get all the printer names in an array.]]></description>
          <summary><![CDATA[Get all the printer names in an array.]]></summary>
          <sample><![CDATA[var printersArray = application.getPrinters();]]></sample>
        </function>
        <function name="getScreenHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Screen height]]></return>
          <description><![CDATA[Get the screen height in pixels.]]></description>
          <summary><![CDATA[Get the screen height in pixels.]]></summary>
          <sample><![CDATA[var height = application.getScreenHeight();]]></sample>
        </function>
        <function name="getScreenWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Screen width]]></return>
          <description><![CDATA[Get the screen width in pixels.]]></description>
          <summary><![CDATA[Get the screen width in pixels.]]></summary>
          <sample><![CDATA[var width = application.getScreenWidth();]]></sample>
        </function>
        <function name="getServerTimeStamp">
          <argumentsTypes/>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[Server time]]></return>
          <description><![CDATA[Returns a date object initialized on server with current date and time.]]></description>
          <summary><![CDATA[Returns a date object initialized on server with current date and time.]]></summary>
          <sample><![CDATA[var servertime = application.getServerTimeStamp();]]></sample>
        </function>
        <function name="getServerURL">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[HTTP server URL]]></return>
          <description><![CDATA[Gets the HTTP server url.]]></description>
          <summary><![CDATA[Gets the HTTP server url.]]></summary>
          <sample><![CDATA[var url = application.getServerURL();]]></sample>
        </function>
        <function name="getSolutionName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Current solution name]]></return>
          <description><![CDATA[Returns the name of the current solution.]]></description>
          <summary><![CDATA[Returns the name of the current solution.]]></summary>
          <sample><![CDATA[var solutionName = application.getSolutionName();]]></sample>
        </function>
        <function name="getSolutionRelease">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Current solution release number]]></return>
          <description><![CDATA[Get the solution release number.]]></description>
          <summary><![CDATA[Get the solution release number.]]></summary>
          <sample><![CDATA[var release = application.getSolutionRelease();]]></sample>
        </function>
        <function name="getStartupArguments">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[Array with 2 elements, the startup argument and an object containing all startup arguments, or
 null if there is no argument passed]]></return>
          <description><![CDATA[Get the parameters which are provided by startup.]]></description>
          <summary><![CDATA[Get the parameters which are provided by startup.]]></summary>
          <sample><![CDATA[var args_array = application.getStartupArguments();
// the first element in the array is the 'argument' value from the startup
var argument = args_array[0];
// the second element is an object containing all the startup arguments
var startupArgumentObj = args_array[1];
var arg1 = startupArgumentObj.arg1_name;
var arg2 = startupArgumentObj.arg2_name;]]></sample>
        </function>
        <function name="getTimeStamp">
          <argumentsTypes/>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[Current time at the client]]></return>
          <description><![CDATA[Returns a date object initialized in client with current date and time.]]></description>
          <summary><![CDATA[Returns a date object initialized in client with current date and time.]]></summary>
          <sample><![CDATA[var clienttime = application.getTimeStamp();]]></sample>
        </function>
        <function name="getUUID">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.util.UUID" type="com.servoy.j2db.util.UUID"><![CDATA[The new UUID object]]></return>
          <description><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object. A table column marked as UUID will work with such objects.]]></description>
          <summary><![CDATA[Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object.]]></summary>
          <sample><![CDATA[var new_uuid_object = application.getUUID(); // generate new uuid object
var uuid_object1 = application.getUUID(new_uuid_object.toString()); // convert a string representing an uuid to an uuid object
var uuid_object2 = application.getUUID(new_uuid_object.toBytes());  // convert a byte array representing an uuid to an uuid object]]></sample>
          <parameters>
            <parameter name="uuidStringOrByteArray" optional="true">
              <description><![CDATA[String or byte array representing an uuid]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUserName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Returns the user name when logged in ('unknown' when not logged in)]]></description>
          <summary><![CDATA[Returns the user name when logged in ('unknown' when not logged in)]]></summary>
          <sample><![CDATA[var uname = application.getUserName();]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSSecurity" member="getUserName"/>
          </sees>
        </function>
        <function name="getUserProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Property value]]></return>
          <description><![CDATA[Get a persistent user property.]]></description>
          <summary><![CDATA[Get a persistent user property.]]></summary>
          <sample><![CDATA[var value = application.getUserProperty('showOrders');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the property]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUserPropertyNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[Array of all user property names]]></return>
          <description><![CDATA[Get all persistent user property names.]]></description>
          <summary><![CDATA[Get all persistent user property names.]]></summary>
          <sample><![CDATA[// display all user properties
allPropertyNames = application.getUserPropertyNames();
for(var i = 0; i < allPropertyNames.length; i++)
		application.output(allPropertyNames[i] + " = " + application.getUserProperty(allPropertyNames[i]));]]></sample>
        </function>
        <function name="getValueListArray">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="org.mozilla.javascript.NativeArray" type="com.servoy.j2db.documentation.scripting.docs.Array"><![CDATA[Named array for the valuelist]]></return>
          <description><![CDATA[Retrieve a valuelist as array, to get real-values for display-values.
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          <summary><![CDATA[Retrieve a valuelist as array, to get real-values for display-values.]]></summary>
          <sample><![CDATA[var packet_types = application.getValueListArray('packet_types');
if (a_realValue == packet_types['displayValue'])
{
}]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValueListDisplayValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[Display value of the real value from the valuelist]]></return>
          <description><![CDATA[Retrieve a valuelist display-value for a real-value.
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          <summary><![CDATA[Retrieve a valuelist display-value for a real-value.]]></summary>
          <sample><![CDATA[var displayable_status = application.getValueListDisplayValue('case_status',status);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="realValue" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Real value of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[DataSet with valuelist's display values and real values]]></return>
          <description><![CDATA[Get all values from a custom or database type value list as dataset (with columns displayValue,realValue).
NOTE: this doesn't return a value for a valuelist that depends on a database relation or is a global method valuelist.]]></description>
          <summary><![CDATA[Get all values from a custom or database type value list as dataset (with columns displayValue,realValue).]]></summary>
          <sample><![CDATA[//Note:see databaseManager.JSDataSet for full details of dataset
var dataset = application.getValueListItems('my_en_types');
//example to calc a strange total
global_total = 0;
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
		global_total = global_total + dataset.getValue(i,1);
}
//example to assign to dataprovider
//employee_salary = dataset.getValue(1,1)]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValueListNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[Array with all valuelist names]]></return>
          <description><![CDATA[Get all the valuelist names as array.]]></description>
          <summary><![CDATA[Get all the valuelist names as array.]]></summary>
          <sample><![CDATA[var array = application.getValueListNames();]]></sample>
        </function>
        <function name="getValuelistDisplayValue" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="getValueListDisplayValue"/>
          </sees>
        </function>
        <function name="getVersion">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[Application version]]></return>
          <description><![CDATA[Returns the application version.]]></description>
          <summary><![CDATA[Returns the application version.]]></summary>
          <sample><![CDATA[application.getVersion();]]></sample>
        </function>
        <function name="getWindow">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.JSWindowImpl$JSWindow" type="com.servoy.j2db.scripting.JSWindowImpl$JSWindow"><![CDATA[the JSWindow with the specified name, or null if no such window exists.]]></return>
          <description><![CDATA[Get a window by window name.]]></description>
          <summary><![CDATA[Get a window by window name.]]></summary>
          <sample><![CDATA[// close and dispose window resources
win = application.getWindow("someWindowName");
if (win != null) {
	if (win.isVisible()) win.close();
	win.destroy();
}]]></sample>
          <parameters>
            <parameter name="name" optional="true">
              <description><![CDATA[the name of the window. If not specified, the main application JSWindow will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWindowHeight" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Window height]]></return>
          <description><![CDATA[Get the window height in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Get the window height in pixels.]]></summary>
          <sample><![CDATA[var height = application.getWindowHeight('customerDialog');]]></sample>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWindowWidth" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Window width]]></return>
          <description><![CDATA[Get the window width in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Get the window width in pixels.]]></summary>
          <sample><![CDATA[var width = application.getWindowWidth('customerDialog');]]></sample>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWindowX" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Window X location]]></return>
          <description><![CDATA[Get the window X location in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Get the window X location in pixels.]]></summary>
          <sample><![CDATA[var x = application.getWindowX('customerDialog');]]></sample>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Window name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWindowY" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[Window Y location]]></return>
          <description><![CDATA[Get the window Y location in pixels. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Get the window Y location in pixels.]]></summary>
          <sample><![CDATA[var y = application.getWindowY('customerDialog');]]></sample>
          <parameters>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isFormInDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the form is showing in a dialog, (false) otherwise]]></return>
          <description><![CDATA[Test if the form is currently showing in a dialog.]]></description>
          <summary><![CDATA[Test if the form is currently showing in a dialog.]]></summary>
          <sample><![CDATA[if(application.isFormInDialog(forms.formname))
{
	//close dialog
}]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Form object or name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isInDeveloper">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the solution is running in the developer, (false) otherwise]]></return>
          <description><![CDATA[Returns true if the solution is running in the developer.]]></description>
          <summary><![CDATA[Returns true if the solution is running in the developer.]]></summary>
          <sample><![CDATA[var flag = application.isInDeveloper();]]></sample>
        </function>
        <function name="isLastPrintPreviewPrinted">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) is the last print preview did print, (false) otherwise]]></return>
          <description><![CDATA[Check if the last printpreview did print.]]></description>
          <summary><![CDATA[Check if the last printpreview did print.]]></summary>
          <sample><![CDATA[//attached this method to onShow on the form being shown after printpreview
//set a global called globals.showPrintPreview to 1 in the onPrintPreview method
if (globals.showPrintPreview == 1)
{
globals.showPrintPreview = 0;//clear for next time
	if (application.isLastPrintPreviewPrinted())
	{
		plugins.dialogs.showInfoDialog('Alert',  'There is printed in printpreview',  'OK')
	}
}]]></sample>
        </function>
        <function name="isRunningInDeveloper" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Returns true if the solution is running in the developer.]]></description>
          <summary><![CDATA[Returns true if the solution is running in the developer.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="isInDeveloper"/>
          </sees>
        </function>
        <function name="logout" deprecated="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSSecurity" member="logout"/>
          </sees>
        </function>
        <function name="output" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <parameters>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="output">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Output something on the out stream. (if running in debugger view output console tab)]]></description>
          <summary><![CDATA[Output something on the out stream.]]></summary>
          <sample><![CDATA[// log level is used to determine how/if to log in servoy_log.txt; for smart client java out and err streams are used
application.output('my very important trace msg');// default log level: info
application.output('my very important msg',LOGGINGLEVEL.ERROR);// log level: error]]></sample>
          <parameters>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object to send to output stream]]></description>
            </parameter>
            <parameter name="level" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int" optional="true">
              <description><![CDATA[the log level where it should log to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overrideStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Overrides one style (defined in in a form) with another.]]></description>
          <summary><![CDATA[Overrides one style (defined in in a form) with another.]]></summary>
          <sample><![CDATA[//This function will only have effect on  forms not yet created, so solution onLoad is the best place to override'
//For example overriding the use of default/designed style anywhere in the solution from 'mystyle' to 'mystyle_mac'
application.overrideStyle('mystyle','mystyle_mace')//in this case both styles should have about the same classes]]></sample>
          <parameters>
            <parameter name="originalStyleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the style to override]]></description>
            </parameter>
            <parameter name="newStyleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the new style]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="playSound">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Play a sound (AU file, an AIFF file, a WAV file, and a MIDI file).]]></description>
          <summary><![CDATA[Play a sound (AU file, an AIFF file, a WAV file, and a MIDI file).]]></summary>
          <sample><![CDATA[application.playSound('media:///click.wav');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[URL of the sound file]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="[B" type="byte[]"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="readFile"/>
          </sees>
        </function>
        <function name="readTXTFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="readTXTFile"/>
          </sees>
        </function>
        <function name="redo">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Redo last action (if possible).]]></description>
          <summary><![CDATA[Redo last action (if possible).]]></summary>
          <sample><![CDATA[application.redo();]]></sample>
        </function>
        <function name="removeAllClientInfo">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Removes all names given to the client via the admin page.]]></description>
          <summary><![CDATA[Removes all names given to the client via the admin page.]]></summary>
          <sample><![CDATA[application.removeAllClientInfo();]]></sample>
        </function>
        <function name="sendMail" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.mail.MailProvider" member="sendMail"/>
          </sees>
        </function>
        <function name="setClipboardContent">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets a string object in the clipboard.]]></description>
          <summary><![CDATA[Sets a string object in the clipboard.]]></summary>
          <sample><![CDATA[application.setClipboardContent('test');]]></sample>
          <parameters>
            <parameter name="string" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[New content of the clipboard]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setErrorCapture" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Enable or disable the error capture, if enabled you can use getLastErrorCode()]]></description>
          <summary><![CDATA[Enable or disable the error capture, if enabled you can use getLastErrorCode()]]></summary>
          <sample><![CDATA[//turn on error capture
application.setErrorCapture(true);]]></sample>
        </function>
        <function name="setFocusLostSaveEnabled" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Enable/disable the auto save when clicking anywhere on a form and the focus get lost.]]></description>
          <summary><![CDATA[Enable/disable the auto save when clicking anywhere on a form and the focus get lost.]]></summary>
          <sample><![CDATA[application.setFocusLostSaveEnabled(false);]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getAutoSave"/>
          </sees>
        </function>
        <function name="setNumpadEnterAsFocusNextEnabled">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set if numpad enter should behave like focus next.]]></description>
          <summary><![CDATA[Set if numpad enter should behave like focus next.]]></summary>
          <sample><![CDATA[application.setNumpadEnterAsFocusNextEnabled(true);]]></sample>
          <parameters>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean (true) if numpad enter should behave like focus next]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setStatusText">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the status area value.]]></description>
          <summary><![CDATA[Set the status area value.]]></summary>
          <sample><![CDATA[application.setStatusText('Your status text');]]></sample>
          <parameters>
            <parameter name="text">
              <description><![CDATA[New status text]]></description>
            </parameter>
            <parameter name="tip" optional="true">
              <description><![CDATA[Status tooltip text]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setToolbarVisible">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Make a toolbar visible or invisible.]]></description>
          <summary><![CDATA[Make a toolbar visible or invisible.]]></summary>
          <sample><![CDATA[//example: hide the text toolbar
application.setToolbarVisible('text',false);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the toolbar]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Visibility of the toolbar]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setUIProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if the UI property was set with the new value]]></return>
          <description><![CDATA[Sets a UI property.]]></description>
          <summary><![CDATA[Sets a UI property.]]></summary>
          <sample><![CDATA[//Only use this function from the solution on open method!
//In smart client, use this to set javax.swing.UIDefaults properties.
application.setUIProperty('ToolTip.hideAccelerator', true)
//To change the comboboxes selection background color, do this:
application.setUIProperty('ComboBox.selectionBackground', new Packages.javax.swing.plaf.ColorUIResource(java.awt.Color.RED)) 


//In web client, use this to change the template directory.
//To change the default dir of templates/default to templates/green_skin, do this:
application.setUIProperty('templates.dir','green_skin');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Name of the UI property]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[New value of the UI property]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setUserProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set a persistent user property.]]></description>
          <summary><![CDATA[Set a persistent user property.]]></summary>
          <sample><![CDATA[application.setUserProperty('showOrders','1');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Name of the user property]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[New value of the user property]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></description>
          <summary><![CDATA[Fill a custom type valuelist with values from array(s) or dataset.]]></summary>
          <sample><![CDATA[//set display values (return values will be same as display values)
application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'));
//set display values and return values (which are stored in dataprovider)
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array(10000,10010,10456));
//set display values and return values converted to numbers
//application.setValueListItems('my_en_types',new Array('Item 1', 'Item 2', 'Item 3'),new Array('10000','10010', '10456'), true);
//do query and fill valuelist (see databaseManager for full details of queries/dataset)
//var query = 'select display_value,optional_real_value from test_table';
//var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 25);

//application.setValueListItems('my_en_types',dataset);]]></sample>
          <parameters>
            <parameter name="name">
              <description><![CDATA[Name of the valuelist]]></description>
            </parameter>
            <parameter name="displayValArray/dataset">
              <description><![CDATA[Display values array or DataSet]]></description>
            </parameter>
            <parameter name="realValuesArray" optional="true">
              <description><![CDATA[Real values array]]></description>
            </parameter>
            <parameter name="autoconvert(false)" optional="true">
              <description><![CDATA[Boolean (true) if display values and return values should be converted to numbers]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setWindowLocation" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the window location. If windowName is not specified or null, it will use either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Set the window location.]]></summary>
          <sample><![CDATA[application.setWindowLocation(10,10,'customerDialog');]]></sample>
          <parameters>
            <parameter name="x">
              <description><![CDATA[Window new X location]]></description>
            </parameter>
            <parameter name="y">
              <description><![CDATA[Window new Y location]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setWindowSize" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the window size. If windowName is not specified or null, it will resize either the default dialog (if it is shown) or the main application window.]]></description>
          <summary><![CDATA[Set the window size.]]></summary>
          <sample><![CDATA[application.setWindowSize(400,400,'customerDialog');]]></sample>
          <parameters>
            <parameter name="width">
              <description><![CDATA[Window new width]]></description>
            </parameter>
            <parameter name="height">
              <description><![CDATA[Window new height]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[Name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showCalendar">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[Selected date or null if canceled]]></return>
          <description><![CDATA[Show the calendar, returns selected date or null if canceled.]]></description>
          <summary><![CDATA[Show the calendar, returns selected date or null if canceled.]]></summary>
          <sample><![CDATA[var selectedDate = application.showCalendar();]]></sample>
          <parameters>
            <parameter name="selecteddate" optional="true">
              <description><![CDATA[Default selected date]]></description>
            </parameter>
            <parameter name="dateformat" optional="true">
              <description><![CDATA[Date format]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showColorChooser">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[selected color or null if canceled]]></return>
          <description><![CDATA[Show the colorChooser. Returned value is in format #RRGGBB or null if canceled.]]></description>
          <summary><![CDATA[Show the colorChooser.]]></summary>
          <sample><![CDATA[var selectedColor = application.showColorChooser();]]></sample>
          <parameters>
            <parameter name="colorString" optional="true">
              <description><![CDATA[Default color]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showDirectorySelectDialog" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="showDirectorySelectDialog"/>
          </sees>
        </function>
        <function name="showFileOpenDialog" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="showFileOpenDialog"/>
          </sees>
        </function>
        <function name="showFileSaveDialog" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="showFileSaveDialog"/>
          </sees>
        </function>
        <function name="showFontChooser">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[selected font]]></return>
          <description><![CDATA[Show the font chooser dialog. Returns the selected font.]]></description>
          <summary><![CDATA[Show the font chooser dialog.]]></summary>
          <sample><![CDATA[var selectedFont = application.showFontChooser();
elements.myfield.font = selectedFont]]></sample>
          <parameters>
            <parameter name="fontString" optional="true">
              <description><![CDATA[Default font]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show the form specified by the parameter, that can be a name (is case sensitive!) or a form object.]]></description>
          <summary><![CDATA[Show the form specified by the parameter, that can be a name (is case sensitive!) or a form object.]]></summary>
          <sample><![CDATA[application.showForm('MyForm');]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Form object or name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFormInDialog" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show the specified form in a dialog. (NOTE: x, y, width, height are initial bounds - applied only the fist time a dialog is shown)

NOTE:
In the Smart Client, no code is executed after the function showFormInDialog <em>if the dialog is modal</em>.

NOTE:
x, y, width and height coordinates are only applied the first time the specified dialog is shown.
Use APP_UI_PROPERTY.DIALOG_FULL_SCREEN for these values when the dialog should be full-screen.]]></description>
          <summary><![CDATA[Show the specified form in a dialog.]]></summary>
          <sample><![CDATA[//Show the specified form in a modal dialog, on default initial location and size (x,y,w,h)
//application.showFormInDialog(forms.contacts);
//Note: No code is executed after the showFormInDialog until the dialog is closed if it is created as a modal dialog.
//Show the specified form in a non-modal dialog with a specified name, on default initial location and size (x,y,w,h)
//application.showFormInDialog(forms.contacts,'contactsdialog',false);
//Show the specified form in a modal dialog, at a specified initial location and size with custom title, not resizable but with text toolbar
application.showFormInDialog(forms.contacts,100,80,500,300,'my own dialog title',false,true,'mydialog',true);]]></sample>
          <parameters>
            <parameter name="form">
              <description><![CDATA[The form to be shown in the dialog.]]></description>
            </parameter>
            <parameter name="x" optional="true">
              <description><![CDATA[The "x" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="y" optional="true">
              <description><![CDATA[The "y" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="width" optional="true">
              <description><![CDATA[The width of the dialog.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The height of the dialog.]]></description>
            </parameter>
            <parameter name="dialogTitle" optional="true">
              <description><![CDATA[The title of the dialog.]]></description>
            </parameter>
            <parameter name="resizable" optional="true">
              <description><![CDATA[<em>true</em> if the dialog size should be modifiable; <em>false</em> if not.]]></description>
            </parameter>
            <parameter name="showTextToolbar" optional="true">
              <description><![CDATA[<em>true</em> to add a text toolbar; <em>false</em> to not add a text toolbar.]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[The name of the window; defaults to "dialog" if nothing is specified. Window and dialog names share the same namespace.]]></description>
            </parameter>
            <parameter name="modal" optional="true">
              <description><![CDATA[<em>true</em> if the dialog should be modal; <em>false</em> if not. Defaults to <em>true</em>.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFormInWindow" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show the specified form in a window. (NOTE: x, y, width, height are initial bounds - applied only the fist time a window is shown)

NOTE:
Forms in windows cannot be modal. They are more independent then dialogs, even non-modal ones. For example in SC, a non-modal dialog will always
be shown on top of the parent window and it will not have a separate entry in the OS window manager (for example Windows taskbar). 

NOTE:
x, y, width and height coordinates are only applied the first time the specified window is shown.
Use APP_UI_PROPERTY.FULL_SCREEN for these values when the window should be full-screen.]]></description>
          <summary><![CDATA[Show the specified form in a window.]]></summary>
          <sample><![CDATA[//Show the specified form in a window, on default initial location and size
//application.showFormInWindow(forms.contacts);
//Show the specified form in a window with a specified name, on default initial location and size
//application.showFormInWindow(forms.contacts,'contactsWindow');
//Show the specified form in a window, at a specified initial location and size with custom title, not resizable but with text toolbar
application.showFormInWindow(forms.contacts,100,80,500,300,'my own window title',false,true,'mywindow');]]></sample>
          <parameters>
            <parameter name="form">
              <description><![CDATA[The form to be shown in the dialog.]]></description>
            </parameter>
            <parameter name="x" optional="true">
              <description><![CDATA[The "x" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="y" optional="true">
              <description><![CDATA[The "y" coordinate of the dialog.]]></description>
            </parameter>
            <parameter name="width" optional="true">
              <description><![CDATA[The width of the dialog.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The height of the dialog.]]></description>
            </parameter>
            <parameter name="dialogTitle" optional="true">
              <description><![CDATA[The title of the dialog.]]></description>
            </parameter>
            <parameter name="resizable" optional="true">
              <description><![CDATA[<em>true</em> if the dialog size should be modifiable; <em>false</em> if not.]]></description>
            </parameter>
            <parameter name="showTextToolbar" optional="true">
              <description><![CDATA[<em>true</em> to add a text toolbar; <em>false</em> to not add a text toolbar.]]></description>
            </parameter>
            <parameter name="windowName" optional="true">
              <description><![CDATA[The name of the window; defaults to "dialog" if nothing is specified. Window and dialog names share the same namespace.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showI18NDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[selected I18N key or null if cancel is pressed]]></return>
          <description><![CDATA[Opens the i18n dialog so users can change translations. Returns the key selected by the user (not it's translation)  or null if cancel is pressed. Optional parameters specify the initial selections in the dialog.]]></description>
          <summary><![CDATA[Opens the i18n dialog so users can change translations.]]></summary>
          <sample><![CDATA[application.showI18NDialog("servoy.button.close", "en");]]></sample>
          <parameters>
            <parameter name="keyToSelect" optional="true">
              <description><![CDATA[Default selected key]]></description>
            </parameter>
            <parameter name="languageToSelect" optional="true">
              <description><![CDATA[Default selected language]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showURL">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean (true) if URL was shown]]></return>
          <description><![CDATA[Shows an URL in a browser.]]></description>
          <summary><![CDATA[Shows an URL in a browser.]]></summary>
          <sample><![CDATA[application.showURL('http://www.example.com');

//webclient specific additional parameters...
//2nd parameter: target frame or named dialog/window, so its possible to control in which (internal) frame or dialog the url is loaded, '_self' is current window,'_blank' is new dialog, '_top' is main window
//3rd parameter: dialog options used when a dialog is specified, example: 'height=200,width=400,status=yes,toolbar=no,menubar=no,location=no'
//3th or 4th parameter: a timeout in seconds when the url should be shown, immediantly/0 is default']]></sample>
          <parameters>
            <parameter name="url">
              <description><![CDATA[URL to show]]></description>
            </parameter>
            <parameter name="webclientTarget" optional="true">
              <description><![CDATA[Target frame or named dialog/window]]></description>
            </parameter>
            <parameter name="webclientTargetOptions/timeout" optional="true">
              <description><![CDATA[Dialog options used when a dialog is specified / a timeout in seconds when the url should be shown]]></description>
            </parameter>
            <parameter name="timeout" optional="true">
              <description><![CDATA[A timeout in seconds when the url should be shown]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sleep">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sleep for specified time (in milliseconds).]]></description>
          <summary><![CDATA[Sleep for specified time (in milliseconds).]]></summary>
          <sample><![CDATA[//Sleep for 3 seconds
application.sleep(3000);]]></sample>
          <parameters>
            <parameter name="ms" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[Sleep time in milliseconds]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="undo">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Undo last action (if possible).]]></description>
          <summary><![CDATA[Undo last action (if possible).]]></summary>
          <sample><![CDATA[application.undo();]]></sample>
        </function>
        <function name="updateUI">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Updates the UI (painting). If in a script an element changed and the script continues doing 
things, you can give an number in ms how long this can take.]]></description>
          <summary><![CDATA[Updates the UI (painting).]]></summary>
          <sample><![CDATA[application.updateUI(500);
//continue doing things]]></sample>
          <parameters>
            <parameter name="milliseconds" optional="true">
              <description><![CDATA[How long the update should take in milliseconds]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="writeFile"/>
          </sees>
        </function>
        <function name="writeTXTFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="writeTXTFile"/>
          </sees>
        </function>
        <function name="writeXMLFile" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.file.FileProvider" member="writeXMLFile"/>
          </sees>
        </function>
      </functions>
      <returnTypes>
        <returnType qualifiedName="com.servoy.j2db.dnd.DRAGNDROP"/>
        <returnType qualifiedName="com.servoy.j2db.dnd.JSDNDEvent"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.JSEvent"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.APPLICATION_TYPES"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.CLIENTDESIGN"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.ELEMENT_TYPES"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.LOGGINGLEVEL"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.UICONSTANTS"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.WEBCONSTANTS"/>
        <returnType qualifiedName="com.servoy.j2db.util.UUID"/>
      </returnTypes>
    </object>
    <object publicName="Button" qualifiedName="com.servoy.j2db.ui.IScriptScriptButtonMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="mnemonic">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          <summary><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          <sample><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the text that is displayed on the label, button or image.

NOTE: The .text property applies to labels, buttons, or images ONLY.]]></description>
          <summary><![CDATA[Gets or sets the text that is displayed on the label, button or image.]]></summary>
          <sample><![CDATA[//gets the text of the element
var my_text = %%prefix%%%%elementName%%.text;

//sets the text of the element
%%prefix%%%%elementName%%.text = my_text + 'is cool';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="[B" type="byte[]"><![CDATA[An array of bytes.]]></return>
          <description><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view. 

Syntax
elements.elementName.getThumbnailJPGImage([width],[height])]]></description>
          <summary><![CDATA[Returns the image data in .]]></summary>
          <sample><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50,50);
application.writeFile("mypicture.jpg", jpgData);]]></sample>
          <parameters>
            <parameter name="width" optional="true">
              <description><![CDATA[The target width, if not specified original image width will be used.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The target height, if not specified original image width will be used.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Request the focus in this element. (Focus is also a text cursor on text components).]]></description>
          <summary><![CDATA[Request the focus in this element.]]></summary>
          <sample><![CDATA[//request the focus in this %%prefix%%%%elementName%% (focus is also a text cursor on text components)
%%prefix%%%%elementName%%.requestFocus();]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[If true will execute onFocusGained method, else will not; default value is true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setImageURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the image displayed on a button or label; based on URL. 

Syntax 
elements.elementName.setImageURL(String)]]></description>
          <summary><![CDATA[Sets the image displayed on a button or label; based on URL.]]></summary>
          <sample><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.setImageURL("http://www.servoy.com/images/test.gif");

//sets an image from your own image library
%%prefix%%%%elementName%%.setImageURL("media:///arrow.gif");

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.setImageURL('media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2');]]></sample>
          <parameters>
            <parameter name="url">
              <description><![CDATA[the specified URL.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setRolloverImageURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the image displayed on a button or label roll over; based on URL. 

Syntax 
elements.elementName.setRolloverImageURL(String)]]></description>
          <summary><![CDATA[Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          <sample><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.setRolloverImageURL("http://www.servoy.com/images/test.gif");

//sets an image from your own image library
%%prefix%%%%elementName%%.setRolloverImageURL("media:///arrow.gif");

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.setRolloverImageURL('media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2');]]></sample>
          <parameters>
            <parameter name="url">
              <description><![CDATA[the specified URL.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="CLIENTDESIGN" qualifiedName="com.servoy.j2db.scripting.info.CLIENTDESIGN">
      <constants>
        <constant name="HANDLES">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using elements['element_1'].putClientProperty(...), it sets the available handles in clientdesign]]></description>
          <summary><![CDATA[Property that can be set using elements['element_1'].]]></summary>
          <sample><![CDATA[//by default all are present. ('l' stands for left, 't' stands for top, etc.)
elements['element_1'].putClientProperty(CLIENTDESIGN.HANDLES, new Array('r', 'l')); // other options are 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr']]></sample>
        </constant>
        <constant name="SELECTABLE">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using elements['element_1'].putClientProperty(...), it sets the selectable flag in clientdesign]]></description>
          <summary><![CDATA[Property that can be set using elements['element_1'].]]></summary>
          <sample><![CDATA[//by default an element with an name is selectable in client design
elements['element_1'].putClientProperty(CLIENTDESIGN.SELECTABLE, false);]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="COLUMNTYPE" qualifiedName="com.servoy.j2db.scripting.info.COLUMNTYPE" deprecated="true">
      <constants>
        <constant name="DATETIME" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="INTEGER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="MEDIA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="NUMBER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TEXT" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="CURSOR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.CURSOR">
      <constants>
        <constant name="DEFAULT_CURSOR">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting the roll over cursor for components.
Use this for setting the roll over cursor to the default (dependent
on the OS and the L&F).]]></description>
          <summary><![CDATA[Constant used for setting the roll over cursor for components.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.DEFAULT_CURSOR;]]></sample>
        </constant>
        <constant name="HAND_CURSOR">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used for setting the roll over cursor for components.
Use this for setting the roll over cursor to a hand.]]></description>
          <summary><![CDATA[Constant used for setting the roll over cursor for components.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="Calendar" qualifiedName="com.servoy.j2db.ui.IScriptDataCalendarMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="format">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></description>
          <summary><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></summary>
          <sample><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="CheckBox" qualifiedName="com.servoy.j2db.ui.IScriptCheckBoxMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getValueListName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The valuelist name.]]></return>
          <description><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          <summary><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist). 
Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.]]></description>
          <summary><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          <sample><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          <parameters>
            <parameter name="dataset">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Combobox" qualifiedName="com.servoy.j2db.ui.IScriptDataComboboxMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="format">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></description>
          <summary><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></summary>
          <sample><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getValueListName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The valuelist name.]]></return>
          <description><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          <summary><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist). 
Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.]]></description>
          <summary><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          <sample><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          <parameters>
            <parameter name="dataset">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="DEFAULTS" qualifiedName="com.servoy.j2db.scripting.solutionmodel.DEFAULTS">
      <constants>
        <constant name="COMMAND_DEFAULT">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[Constants used for setting commands to "default".]]></description>
          <summary><![CDATA[Constants used for setting commands to "default".]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('parentForm', 'example_data', 'parent_table', 'null', false, 1200, 800);
form.onFindCmd = SM_DEFAULTS.COMMAND_DEFAULT; // This makes the find work like it does by default.]]></sample>
        </constant>
        <constant name="COMMAND_NONE">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[Constant used for setting commands to "none".]]></description>
          <summary><![CDATA[Constant used for setting commands to "none".]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('parentForm', 'example_data', 'parent_table', 'null', false, 1200, 800);
form.onFindCmd = SM_DEFAULTS.COMMAND_NONE; // This disables the find on the form.]]></sample>
        </constant>
        <constant name="DEFAULT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used in various places to set properties to their default value.]]></description>
          <summary><![CDATA[Constant used in various places to set properties to their default value.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('parentForm', 'example_data', 'parent_table', 'null', false, 1200, 800);
form.navigator = SM_DEFAULTS.DEFAULT; // Show the default navigator on the form.]]></sample>
        </constant>
        <constant name="IGNORE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used to remove a component from the tab sequence.]]></description>
          <summary><![CDATA[Constant used to remove a component from the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </constant>
        <constant name="NONE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used in various places to set properties to "none".]]></description>
          <summary><![CDATA[Constant used in various places to set properties to "none".]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('parentForm', 'example_data', 'parent_table', 'null', false, 1200, 800);
form.navigator = SM_DEFAULTS.NONE; // Hide the navigator on the form.]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="DISPLAYTYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.DISPLAYTYPE" deprecated="true">
      <constants>
        <constant name="CALENDAR" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="CHECKS" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="COMBOBOX" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="HTML_AREA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="IMAGE_MEDIA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="PASSWORD" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="RADIOS" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="RTF_AREA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TEXT_AREA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TEXT_FIELD" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TYPE_AHEAD" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="DRAGNDROP" qualifiedName="com.servoy.j2db.dnd.DRAGNDROP">
      <constants>
        <constant name="COPY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for copy drag operation.]]></description>
          <summary><![CDATA[Constant for copy drag operation.]]></summary>
          <sample><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
        </constant>
        <constant name="MIME_TYPE_SERVOY" undocumented="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </constant>
        <constant name="MIME_TYPE_SERVOY_RECORD" undocumented="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </constant>
        <constant name="MOVE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for move drag operation.]]></description>
          <summary><![CDATA[Constant for move drag operation.]]></summary>
          <sample><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
        </constant>
        <constant name="NONE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for no drag operation.]]></description>
          <summary><![CDATA[Constant for no drag operation.]]></summary>
          <sample><![CDATA[function startDrag(event)
{
	if(event.getElementName() == "copy")
		return DRAGNDROP.COPY;
	else if(event.getElementName() == "move")
		return DRAGNDROP.MOVE

	return DRAGNDROP.NONE;
}]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="DataException" qualifiedName="com.servoy.j2db.dataprocessing.DataException">
      <functions>
        <function name="getErrorCode">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></return>
          <description><![CDATA[Returns the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></description>
          <summary><![CDATA[Returns the error code for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="getMessage">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string message for this ServoyException.]]></return>
          <description><![CDATA[Returns the string message for this ServoyException.]]></description>
          <summary><![CDATA[Returns the string message for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="getParameters">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[the parameters of the SQL query that caused this DataException in an array.]]></return>
          <description><![CDATA[Returns the parameters of the SQL query that caused this DataException in an array.]]></description>
          <summary><![CDATA[Returns the parameters of the SQL query that caused this DataException in an array.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{   
	var param = record.exception.getParameters();
	for (j = 0; j < param.length; j++)
	{      
		application.output("SQL Parameter [" + j + "]: " + param[j]);  
	}
}]]></sample>
        </function>
        <function name="getSQL">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the SQL query that caused this DataException.]]></return>
          <description><![CDATA[Returns the SQL query that caused this DataException.]]></description>
          <summary><![CDATA[Returns the SQL query that caused this DataException.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("SQL: " + record.exception.getSQL());
}]]></sample>
        </function>
        <function name="getSQLState">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the SQLState for this DataException.]]></return>
          <description><![CDATA[Returns the SQLState for this DataException.
This is a "SQLstate" string, which follows either the XOPEN SQLstate conventions or the SQL 99 conventions.
The values of the SQLState string are described in the appropriate spec.]]></description>
          <summary><![CDATA[Returns the SQLState for this DataException.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("SQLState: " + record.exception.getSQLState());
}]]></sample>
        </function>
        <function name="getStackTrace">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <description><![CDATA[Returns the stack trace for this ServoyException.]]></description>
          <summary><![CDATA[Returns the stack trace for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="getValue">
          <argumentsTypes/>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[the value for this DataException.]]></return>
          <description><![CDATA[Returns the value for this DataException.
The value is the object thrown in table pre-insert, pre-update or pre-delete triggers.]]></description>
          <summary><![CDATA[Returns the value for this DataException.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("VALUE: " + record.exception.getValue());
}]]></sample>
        </function>
        <function name="getVendorErrorCode">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the error code of the error thrown by the back-end database server.]]></return>
          <description><![CDATA[Returns the error code of the error thrown by the back-end database server.]]></description>
          <summary><![CDATA[Returns the error code of the error thrown by the back-end database server.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception instanceof DataException)
{
	application.output("VendorErrorCode: " + record.exception.getVendorErrorCode());
}]]></sample>
        </function>
        <function name="isDataException" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true.]]></return>
          <description><![CDATA[This method will always return true; it makes the distinction between DataException and ServoyException.]]></description>
          <summary><![CDATA[This method will always return true; it makes the distinction between DataException and ServoyException.]]></summary>
          <sample><![CDATA[var record = array[i];
application.output(record.exception);
if (record.exception.isDataException)
{
	application.output("SQL: " + record.exception.getSQL());
	application.output("SQLState: " + record.exception.getSQLState());
	application.output("VendorErrorCode: " + record.exception.getVendorErrorCode());
}]]></sample>
        </function>
        <function name="isServoyException" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true.]]></return>
          <description><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></description>
          <summary><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Database Manager" scriptingName="databaseManager" qualifiedName="com.servoy.j2db.dataprocessing.JSDatabaseManager">
      <properties>
        <property name="nullColumnValidatorEnabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Enable/disable the default null validator for non null columns, makes it possible todo the checks later on when saving, when for example autosave is disabled.]]></description>
          <summary><![CDATA[Enable/disable the default null validator for non null columns, makes it possible todo the checks later on when saving, when for example autosave is disabled.]]></summary>
          <sample><![CDATA[databaseManager.nullColumnValidatorEnabled = false;//disable

//test if enabled
if(databaseManager.nullColumnValidatorEnabled) application.output('null validation enabled')]]></sample>
        </property>
      </properties>
      <functions>
        <function name="acquireLock">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the lock could be acquired.]]></return>
          <description><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.
The record_index can be -1 to lock all rows, 0 to lock the current row, or a specific row of > 0 
Optionally name the lock(s) so that it can be referenced it in releaseAllLocks()

returns true if the lock could be acquired.]]></description>
          <summary><![CDATA[Request lock(s) for a foundset, can be a normal or related foundset.]]></summary>
          <sample><![CDATA[//locks the complete foundset
databaseManager.acquireLock(foundset,-1);

//locks the current row
databaseManager.acquireLock(foundset,0);

//locks all related orders for the current Customer
var success = databaseManager.acquireLock(Cust_to_Orders,-1);
if(!success)
{
  plugins.dialogs.showWarningDialog('Alert','Failed to get a lock','OK');
}]]></sample>
          <parameters>
            <parameter name="foundset">
              <description><![CDATA[The JSFoundset to get the lock for]]></description>
            </parameter>
            <parameter name="record_index">
              <description><![CDATA[The record index which should be locked.]]></description>
            </parameter>
            <parameter name="lock_name" optional="true">
              <description><![CDATA[The name of the lock.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the tablefilter could be applied.]]></return>
          <description><![CDATA[Adds a filter to all the foundsets based on a table.
Note: if null is provided as the tablename the filter will be applied on all tables with the dataprovider name
returns true if the tablefilter could be applied.]]></description>
          <summary><![CDATA[Adds a filter to all the foundsets based on a table.]]></summary>
          <sample><![CDATA[//best way to call this in a global solution startup method
var success = databaseManager.addTableFilterParam('admin', 'messages', 'messagesid', '>', 10, 'higNumberedMessagesRule')]]></sample>
          <parameters>
            <parameter name="server_name">
              <description><![CDATA[The name of the database server connection for the specified table name.]]></description>
            </parameter>
            <parameter name="table_name">
              <description><![CDATA[The name of the specified table.]]></description>
            </parameter>
            <parameter name="dataprovider">
              <description><![CDATA[A specified dataprovider column name.]]></description>
            </parameter>
            <parameter name="operator">
              <description><![CDATA[One of "=, <, >, >=, <=, !=, LIKE, or IN".]]></description>
            </parameter>
            <parameter name="value">
              <description><![CDATA[The specified filter value.]]></description>
            </parameter>
            <parameter name="filter_name" optional="true">
              <description><![CDATA[The specified name of the database table filter.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="commitTransaction" undocumented="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
        </function>
        <function name="commitTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[if the transaction could be committed.]]></return>
          <description><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></description>
          <summary><![CDATA[Returns true if a transaction is committed; rollback if commit fails.]]></summary>
          <sample><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.  
if (cancel || !databaseManager.commitTransaction())
{
  databaseManager.rollbackTransaction();
}]]></sample>
          <parameters>
            <parameter name="saveFirst" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[save edited records to the database first (default true)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="convertFoundSet">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.FoundSet" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[The converted JSFoundset.]]></return>
          <description><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.]]></description>
          <summary><![CDATA[Creates a foundset that combines all the records of the specified one-to-many relation seen from the given parent/primary foundset.]]></summary>
          <sample><![CDATA[// Convert in the order form a orders foundset into a orderdetails foundset, 
// that has all the orderdetails from all the orders in the foundset.
var convertedFoundSet = databaseManager.convertFoundSet(foundset,order_to_orderdetails);
// or var convertedFoundSet = databaseManager.convertFoundSet(foundset,"order_to_orderdetails");
forms.orderdetails.controller.showRecords(convertedFoundSet);]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to convert.]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[can be a one-to-many relation object or the name of a one-to-many relation]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="convertToDataSet">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[JSDataSet with the data.]]></return>
          <description><![CDATA[Converts the argument to a JSDataSet, possible use in controller.loadRecords(dataset)]]></description>
          <summary><![CDATA[Converts the argument to a JSDataSet, possible use in controller.]]></summary>
          <sample><![CDATA[// converts a foundset pks to a dataset
var dataset = databaseManager.convertToDataSet(foundset);
// converts a foundset to a dataset
//var dataset = databaseManager.convertToDataSet(foundset,['product_id','product_name']);
// converts an object array to a dataset
//var dataset = databaseManager.convertToDataSet(files,['name','path']);
// converts an array to a dataset
//var dataset = databaseManager.convertToDataSet(new Array(1,2,3,4,5,6));
// converts an string list to a dataset
//var dataset = databaseManager.convertToDataSet('4,5,6');]]></sample>
          <parameters>
            <parameter name="array/ids_string/foundset">
              <description><![CDATA[The data that should go into the JSDataSet.]]></description>
            </parameter>
            <parameter name="array_with_dataprovider_names" optional="true">
              <description><![CDATA[Array with column names.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="copyMatchingColumns">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if no errors happend.]]></return>
          <description><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).
returns true if no error did happen.

NOTE: This function could be used to store a copy of records in an archive table. Use the getRecord() function to get the record as an object.]]></description>
          <summary><![CDATA[Copies all matching non empty columns (if overwrite boolean is given all columns except pk/ident, if array then all columns except pk and array names).]]></summary>
          <sample><![CDATA[for( var i = 1 ; i <= foundset.getSize() ; i++ )
{
	var srcRecord = foundset.getRecord(i);
	var destRecord = otherfoundset.getRecord(i);
	if (srcRecord == null || destRecord == null) break;
	databaseManager.copyMatchingColumns(srcRecord,destRecord,true)
}
//saves any outstanding changes to the dest foundset
controller.saveData();]]></sample>
          <parameters>
            <parameter name="src_record">
              <description><![CDATA[The source record to be copied.]]></description>
            </parameter>
            <parameter name="dest_record">
              <description><![CDATA[The destination record to copy to.]]></description>
            </parameter>
            <parameter name="overwrite/array_of_names_not_overwritten" optional="true">
              <description><![CDATA[true (default false) if everything can be overwritten or an array of names that shouldnt be overwritten.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createDataSource" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDataSet" member="createDataSource"/>
          </sees>
        </function>
        <function name="createEmptyDataSet">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[An empty JSDataSet with the initial sizes.]]></return>
          <description><![CDATA[Returns an empty dataset object.]]></description>
          <summary><![CDATA[Returns an empty dataset object.]]></summary>
          <sample><![CDATA[// gets an empty dataset with a specifed row and column count
var dataset = databaseManager.createEmptyDataSet(10,10)
// gets an empty dataset with a specifed row count and column array
var dataset2 = databaseManager.createEmptyDataSet(10,new Array ('a','b','c','d'))]]></sample>
          <parameters>
            <parameter name="row_count">
              <description><![CDATA[The number of rows in the DataSet object.]]></description>
            </parameter>
            <parameter name="columnCount/array_with_column_names">
              <description><![CDATA[Number of columns or the column names.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeStoredProcedure" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.extensions.plugins.rawSQL.RawSQLProvider" member="executeStoredProcedure"/>
          </sees>
        </function>
        <function name="getAutoSave">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if autosave if enabled.]]></return>
          <description><![CDATA[Returns true or false if autosave is enabled or disabled.]]></description>
          <summary><![CDATA[Returns true or false if autosave is enabled or disabled.]]></summary>
          <sample><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
databaseManager.setAutoSave(true)]]></sample>
        </function>
        <function name="getChangedRecordData" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"/>
          <description><![CDATA[Returns a dataset with outstanding (not saved) changed data on a record

NOTE: To return an array of records with oustanding changed data, see the function databaseManager.getEditedRecords().]]></description>
          <summary><![CDATA[Returns a dataset with outstanding (not saved) changed data on a record

NOTE: To return an array of records with oustanding changed data, see the function databaseManager.]]></summary>
          <sample><![CDATA[var dataset = databaseManager.getChangedRecordData(record)
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	application.output(dataset.getValue(i,1) +' '+ dataset.getValue(i,2) +' '+ dataset.getValue(i,3));
}]]></sample>
          <parameters>
            <parameter name="record">
              <description><![CDATA[The specified record.]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getEditedRecords"/>
            <see object="com.servoy.j2db.dataprocessing.Record" member="getChangedData"/>
          </sees>
        </function>
        <function name="getDataSetByQuery">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[The JSDataSet containing the results of the query.]]></return>
          <description><![CDATA[Performs a sql query on the specified server, returns the result in a dataset.
Will throw an exception if anything did go wrong when executing the query.]]></description>
          <summary><![CDATA[Performs a sql query on the specified server, returns the result in a dataset.]]></summary>
          <sample><![CDATA[//finds duplicate records in a specified foundset
var vQuery =" SELECT companiesid from companies where company_name IN (SELECT company_name from companies group bycompany_name having count(company_name)>1 )";
var vDataset =databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), vQuery, null, 1000);
controller.loadRecords(vDataset);

var maxReturnedRows = 10;//useful to limit number of rows
var query = 'select c1,c2,c3 from test_table where start_date = ?';//do not use '.' or special chars in names or aliases if you want to access data by name
var args = new Array();
args[0] = order_date //or  new Date()
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, args, maxReturnedRows);

// place in label: 
// elements.myLabel.text = '<html>'+dataset.getAsHTML()+'</html>';

//example to calc a strange total
global_total = 0;
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	dataset.rowIndex = i;
	global_total = global_total + dataset.c1 + dataset.getValue(i,3);
}
//example to assign to dataprovider
//employee_salary = dataset.getValue(row,column)]]></sample>
          <parameters>
            <parameter name="server_name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the server where the query should be executed.]]></description>
            </parameter>
            <parameter name="sql_query" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The custom sql.]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[Specified arguments or null if there are no arguments.]]></description>
            </parameter>
            <parameter name="max_returned_rows" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The maximum number of rows returned by the query.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataSourceServerName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The servername of the datasource.]]></return>
          <description><![CDATA[Returns the server name from the datasource, or null if not a database datasource.]]></description>
          <summary><![CDATA[Returns the server name from the datasource, or null if not a database datasource.]]></summary>
          <sample><![CDATA[var servername = databaseManager.getDataSourceServerName(datasource);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource string to get the server name from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataSourceTableName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The tablename of the datasource.]]></return>
          <description><![CDATA[Returns the table name from the datasource, or null if not a database datasource.]]></description>
          <summary><![CDATA[Returns the table name from the datasource, or null if not a database datasource.]]></summary>
          <sample><![CDATA[var tablename = databaseManager.getDataSourceTableName(datasource);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource string to get the tablename from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDatabaseProductName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[A database product name.]]></return>
          <description><![CDATA[Returns the database product name as supplied by the driver for a server.

NOTE: For more detail on named server connections, see the chapter on Database Connections, beginning with the Introduction to database connections in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Returns the database product name as supplied by the driver for a server.]]></summary>
          <sample><![CDATA[var databaseProductName = databaseManager.getDatabaseProductName(servername)]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The specified name of the database server connection.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getEditedRecords">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;" type="com.servoy.j2db.dataprocessing.Record[]"><![CDATA[Array of outstanding/unsaved JSRecords.]]></return>
          <description><![CDATA[Returns an array of edited records with outstanding (unsaved) data. 

NOTE: To return a dataset of outstanding (unsaved) edited data for each record, see JSRecord.getChangedData();
NOTE2: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          <summary><![CDATA[Returns an array of edited records with outstanding (unsaved) data.]]></summary>
          <sample><![CDATA[//This method can be used to loop through all outstanding changes,
//the application.output line contains all the changed data, their tablename and primary key
var editr = databaseManager.getEditedRecords()
for (x=0;x<editr.length;x++)
{
	var ds = editr[x].getChangedData();
	var jstable = databaseManager.getTable(editr[x]);
	var tableSQLName = jstable.getSQLName();
	var pkrec = jstable.getRowIdentifierColumnNames().join(',');
	var pkvals = new Array();
	for (var j = 0; j < jstable.getRowIdentifierColumnNames().length; j++)
	{
		pkvals[j] = editr[x][jstable.getRowIdentifierColumnNames()[j]];
	}
	application.output('Table: '+tableSQLName +', PKs: '+ pkvals.join(',') +' ('+pkrec +')');
	// Get a dataset with outstanding changes on a record
	for( var i = 1 ; i <= ds.getMaxRowIndex() ; i++ )
	{
		application.output('Column: '+ ds.getValue(i,1) +', oldValue: '+ ds.getValue(i,2) +', newValue: '+ ds.getValue(i,3));
	}
}
//in most cases you will want to set autoSave back on now
databaseManager.setAutoSave(true);]]></sample>
        </function>
        <function name="getFailedRecords">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;" type="com.servoy.j2db.dataprocessing.Record[]"><![CDATA[Array of failed JSRecords]]></return>
          <description><![CDATA[Returns an array of records that fail after a save.]]></description>
          <summary><![CDATA[Returns an array of records that fail after a save.]]></summary>
          <sample><![CDATA[var array = databaseManager.getFailedRecords()
for( var i = 0 ; i < array.length ; i++ )
{
	var record = array[i];
	application.output(record.exception);
	if (record.exception.getErrorCode() == ServoyException.RECORD_VALIDATION_FAILED)
	{
		// exception thrown in pre-insert/update/delete event method
		var thrown = record.exception.getValue()
		application.output("Record validation failed: "+thrown)
	}
 // find out the table of the record (similar to getEditedRecords)
 var jstable = databaseManager.getTable(record);
 var tableSQLName = jstable.getSQLName();
 application.output('Table:'+tableSQLName+' in server:'+jstable.getServerName()+' failed to save.')
}]]></sample>
        </function>
        <function name="getFoundSet">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.FoundSet" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[A new JSFoundset for that datasource.]]></return>
          <description><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></description>
          <summary><![CDATA[Returns a foundset object for a specified datasource or server and tablename.]]></summary>
          <sample><![CDATA[var fs = databaseManager.getFoundSet(controller.getDataSource())
var ridx = fs.newRecord()
var record = fs.getRecord(ridx)
record.emp_name = 'John'
databaseManager.saveData()]]></sample>
          <parameters>
            <parameter name="server_name/data_source">
              <description><![CDATA[The servername or datasource to get a JSFoundset for.]]></description>
            </parameter>
            <parameter name="table_name" optional="true">
              <description><![CDATA[The tablename of the first param was the servername.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFoundSetCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the foundset count]]></return>
          <description><![CDATA[Returns the total number of records in a foundset.

NOTE: This can be an expensive operation (time-wise) if your resultset is large.]]></description>
          <summary><![CDATA[Returns the total number of records in a foundset.]]></summary>
          <sample><![CDATA[//return the total number of records in a foundset.
databaseManager.getFoundSetCount(foundset);]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to get the count for.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFoundSetDataProviderAsArray">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[An Array with the column values.]]></return>
          <description><![CDATA[Returns a foundset dataprovider (normally a column) as JavaScript array.]]></description>
          <summary><![CDATA[Returns a foundset dataprovider (normally a column) as JavaScript array.]]></summary>
          <sample><![CDATA[// returns an array with all order_id values of the specified foundset. 
var array = databaseManager.getFoundSetDataProviderAsArray(foundset,'order_id');]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The foundset]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The dataprovider for the values of the array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFoundSetUpdater">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSFoundSetUpdater" type="com.servoy.j2db.dataprocessing.JSFoundSetUpdater"><![CDATA[The JSFoundsetUpdater for the specified JSFoundset.]]></return>
          <description><![CDATA[Returns a JSFoundsetUpdater object that can be used to update all or a specific number of rows in the specified foundset.]]></description>
          <summary><![CDATA[Returns a JSFoundsetUpdater object that can be used to update all or a specific number of rows in the specified foundset.]]></summary>
          <sample><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The foundset to update.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getLastDatabaseMessage" deprecated="true" undocumented="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </function>
        <function name="getNextSequence">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The next sequence for the column, null if there was no sequence for that column 
         or if there is no column with the given name.]]></return>
          <description><![CDATA[Gets the next sequence for a column which has a sequence defined in its column dataprovider properties.

NOTE: For more infomation on configuring the sequence for a column, see the section Auto enter options for a column from the Dataproviders chapter in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets the next sequence for a column which has a sequence defined in its column dataprovider properties.]]></summary>
          <sample><![CDATA[var seqDataSource = forms.seq_table.controller.getDataSource();
var nextValue = databaseManager.getNextSequence(seqDataSource, 'seq_table_value');
application.output(nextValue);

nextValue = databaseManager.getNextSequence(databaseManager.getDataSourceServerName(seqDataSource), databaseManager.getDataSourceTableName(seqDataSource), 'seq_table_value')
application.output(nextValue);]]></sample>
          <parameters>
            <parameter name="dataSource|serverName">
              <description><![CDATA[The datasource that points to the table which has the column with the sequence,
 								or the name of the server where the table can be found. If the name of the server
 								is specified, then a second optional parameter specifying the name of the table
 								must be used. If the datasource is specified, then the name of the table is not needed
 								as the second argument.]]></description>
            </parameter>
            <parameter name="tableName" optional="true">
              <description><![CDATA[The name of the table that has the column with the sequence. Use this parameter
 							only if you specified the name of the server as the first parameter.]]></description>
            </parameter>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column that has a sequence defined in its properties.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getNextSequence" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getSQL" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getSQL">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String representing the sql of the JSFoundset.]]></return>
          <description><![CDATA[Returns the internal SQL which defines the specified (related)foundset.
Optionally, the foundset and table filter params can be excluded in the sql (includeFilters=false).
Make sure to set the applicable filters when the sql is used in a loadRecords() call.]]></description>
          <summary><![CDATA[Returns the internal SQL which defines the specified (related)foundset.]]></summary>
          <sample><![CDATA[var sql = databaseManager.getSQL(foundset)]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to get the sql for.]]></description>
            </parameter>
            <parameter name="includeFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[optional, include the foundset and table filters, default true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getSQLParameters" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"/>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getSQLParameters">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[An Array with the sql parameter values.]]></return>
          <description><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.]]></description>
          <summary><![CDATA[Returns the internal SQL parameters, as an array, that are used to define the specified (related)foundset.]]></summary>
          <sample><![CDATA[var sqlParameterArray = databaseManager.getSQLParameters(foundset)]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to get the sql parameters for.]]></description>
            </parameter>
            <parameter name="includeFilters" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[optional, include the parameters for the filters, default true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getServerNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An Array of servernames.]]></return>
          <description><![CDATA[Returns an array with all the server names used in the solution.

NOTE: For more detail on named server connections, see the chapter on Database Connections, beginning with the Introduction to database connections in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Returns an array with all the server names used in the solution.]]></summary>
          <sample><![CDATA[var array = databaseManager.getServerNames()]]></sample>
        </function>
        <function name="getTable">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSTable" type="com.servoy.j2db.dataprocessing.JSTable"><![CDATA[the JSTable get from the input.]]></return>
          <description><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).
The parameter can be a JSFoundset,JSRecord,datasource string or server/tablename combination.]]></description>
          <summary><![CDATA[Returns the JSTable object from which more info can be obtained (like columns).]]></summary>
          <sample><![CDATA[var jstable = databaseManager.getTable(controller.getDataSource());
//var jstable = databaseManager.getTable(foundset);
//var jstable = databaseManager.getTable(record);
//var jstable = databaseManager.getTable(datasource);
var tableSQLName = jstable.getSQLName();
var columnNamesArray = jstable.getColumnNames();
var firstColumnName = columnNamesArray[0];
var jscolumn = jstable.getColumn(firstColumnName);
var columnLength = jscolumn.getLength();
var columnType = jscolumn.getTypeAsString();
var columnSQLName = jscolumn.getSQLName();
var isPrimaryKey = jscolumn.isRowIdentifier();]]></sample>
          <parameters>
            <parameter name="foundset/record/datasource/server_name">
              <description><![CDATA[The data where the JSTable can be get from.]]></description>
            </parameter>
            <parameter name="table_name" optional="true">
              <description><![CDATA[The tablename of the first param is a servername string.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTableCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the total table count.]]></return>
          <description><![CDATA[Returns the total number of records(rows) in a table.

NOTE: This can be an expensive operation (time-wise) if your resultset is large]]></description>
          <summary><![CDATA[Returns the total number of records(rows) in a table.]]></summary>
          <sample><![CDATA[//return the total number of rows in a table.
var count = databaseManager.getTableCount(foundset);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Data where a server table can be get from. Can be a foundset, a datasource name or a JSTable.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTableFilterParams">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="[[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[][]"><![CDATA[Two dimensional array.]]></return>
          <description><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.
The "columns" of a row from this array are: tablename,dataprovider,operator,value,tablefilername]]></description>
          <summary><![CDATA[Returns a two dimensional array object containing the table filter information currently applied to the servers tables.]]></summary>
          <sample><![CDATA[var params = databaseManager.getTableFilterParams(databaseManager.getDataSourceServerName(controller.getDataSource()))
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('Table filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          <parameters>
            <parameter name="server_name">
              <description><![CDATA[The name of the database server connection.]]></description>
            </parameter>
            <parameter name="filter_name" optional="true">
              <description><![CDATA[The filter name for which to get the array.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTableNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An Array with the tables names of that server.]]></return>
          <description><![CDATA[Returns an array of all table names for a specified server.]]></description>
          <summary><![CDATA[Returns an array of all table names for a specified server.]]></summary>
          <sample><![CDATA[//return all the table names as array
var tableNamesArray =databaseManager.getTableNames('user_data');
var firstTableName = tableNamesArray[0];]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The server name to get the table names from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getViewNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An Array with the view names of that server.]]></return>
          <description><![CDATA[Returns an array of all view names for a specified server.]]></description>
          <summary><![CDATA[Returns an array of all view names for a specified server.]]></summary>
          <sample><![CDATA[//return all the view names as array
var viewNamesArray =databaseManager.getViewNames('user_data');
var firstViewName = viewNamesArray[0];]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The server name to get the view names from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasLocks">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the current client has locks or the lock.]]></return>
          <description><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></description>
          <summary><![CDATA[Returns true if the current client has any or the specified lock(s) acquired.]]></summary>
          <sample><![CDATA[var hasLocks = databaseManager.hasLocks('mylock')]]></sample>
          <parameters>
            <parameter name="lock_name" optional="true">
              <description><![CDATA[The lock name to check.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasNewRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the JSFoundset has new records or JSRecord is a new record.]]></return>
          <description><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></description>
          <summary><![CDATA[Returns true if the argument (foundSet / record) has at least one row that was not yet saved in the database.]]></summary>
          <sample><![CDATA[var fs = databaseManager.getFoundSet(databaseManager.getDataSourceServerName(controller.getDataSource()),'employees');
	databaseManager.startTransaction();
	var ridx = fs.newRecord();
	var record = fs.getRecord(ridx);
	record.emp_name = 'John';
	if (databaseManager.hasNewRecords(fs)) {
		application.output("new records");
	} else {
		application.output("no new records");
	}
	databaseManager.saveData();
	databaseManager.commitTransaction();]]></sample>
          <parameters>
            <parameter name="foundset/record">
              <description><![CDATA[The JSFoundset or JSRecord to test.]]></description>
            </parameter>
            <parameter name="foundset_index" optional="true">
              <description><![CDATA[The record index in the foundset to test (not specified means has the foundset any new records)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasRecordChanges">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if there are changes in the JSFoundset or JSRecord.]]></return>
          <description><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.

NOTE: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          <summary><![CDATA[Returns true if the specified foundset, on a specific index or in any of its records, or the specified record has changes.]]></summary>
          <sample><![CDATA[if (databaseManager.hasRecordChanges(foundset,2))
{
	//do save or something else
}]]></sample>
          <parameters>
            <parameter name="foundset/record">
              <description><![CDATA[The JSFoundset or JSRecord to test if it has changes.]]></description>
            </parameter>
            <parameter name="foundset_index" optional="true">
              <description><![CDATA[The record index in the foundset to test (not specified means has the foundset any changed records)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the foundset/relation has records.]]></return>
          <description><![CDATA[Returns true if the (related)foundset exists and has records.]]></description>
          <summary><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          <sample><![CDATA[if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          <parameters>
            <parameter name="foundset/record">
              <description><![CDATA[A JSFoundset to test or a JSRecord for which to test a relation]]></description>
            </parameter>
            <parameter name="qualifiedRelationString" optional="true">
              <description><![CDATA[The relationname if the first param is a JSRecord.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasTransaction">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the client has a transaction.]]></return>
          <description><![CDATA[Returns true if there is an transaction active for this client.]]></description>
          <summary><![CDATA[Returns true if there is an transaction active for this client.]]></summary>
          <sample><![CDATA[var hasTransaction = databaseManager.hasTransaction()]]></sample>
        </function>
        <function name="mergeRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the records could me merged.]]></return>
          <description><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination 
record pk, deletes source record. Do use a transaction!

This function is very handy in situations where duplicate data exists. It allows you to merge the two records 
and move all related records in one go. Say the source_record is "Ikea" and the combined_destination_record is "IKEA", the 
"Ikea" record is deleted and all records related to it (think of contacts and orders, for instance) will be related 
to the "IKEA" record. 

The function takes an optional array of column names. If provided, the data in the named columns will be copied 
from source_record to combined_destination_record. 

Note that it is essential for both records to originate from the same foundset, as shown in the sample code.]]></description>
          <summary><![CDATA[Merge records from the same foundset, updates entire datamodel (via foreign type on columns) with destination 
record pk, deletes source record.]]></summary>
          <sample><![CDATA[databaseManager.mergeRecords(foundset.getRecord(1),foundset.getRecord(2));]]></sample>
          <parameters>
            <parameter name="source_record">
              <description><![CDATA[The source JSRecord to copy from.]]></description>
            </parameter>
            <parameter name="combined_destination_record">
              <description><![CDATA[The target/destination JSRecord to copy into.]]></description>
            </parameter>
            <parameter name="columnnamesarray_to_copy" optional="true">
              <description><![CDATA[The column names Array that should be copied.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="recalculate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Can be used to recalculate a specified record or all rows in the specified foundset.
May be necessary when records are inserted in a program external to Servoy.]]></description>
          <summary><![CDATA[Can be used to recalculate a specified record or all rows in the specified foundset.]]></summary>
          <sample><![CDATA[// recalculate one record from a foundset.
databaseManager.recalculate(foundset.getRecord(1));
// recalculate all records from the foundset.
// please use with care, this can be expensive!
//databaseManager.recalculate(foundset);]]></sample>
          <parameters>
            <parameter name="foundsetOrRecord" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[JSFoundset or JSRecord to recalculate.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="refreshRecordFromDatabase">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the refresh was done.]]></return>
          <description><![CDATA[Flushes the client data cache and requeries the data for a record (based on the record index) in a foundset or all records in the foundset.
Used where a program external to Servoy has modified the database record.
Record index of -1 will refresh all records in the foundset and 0 the selected record.]]></description>
          <summary><![CDATA[Flushes the client data cache and requeries the data for a record (based on the record index) in a foundset or all records in the foundset.]]></summary>
          <sample><![CDATA[//refresh the second record from the foundset.
databaseManager.refreshRecordFromDatabase(foundset,2)
//flushes all records in the related foundset  (-1 is or can be an expensive operation)
databaseManager.refreshRecordFromDatabase(order_to_orderdetails,-1);]]></sample>
          <parameters>
            <parameter name="foundset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSFoundset to refresh]]></description>
            </parameter>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The index of the JSRecord that must be refreshed (or -1 for all).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="releaseAllLocks">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if all locks or the lock is released.]]></return>
          <description><![CDATA[Release all current locks the client has (optionally limited to named locks).
return true if the locks are released.]]></description>
          <summary><![CDATA[Release all current locks the client has (optionally limited to named locks).]]></summary>
          <sample><![CDATA[databaseManager.releaseAllLocks('mylock')]]></sample>
          <parameters>
            <parameter name="lock_name" optional="true">
              <description><![CDATA[The lock name to release.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeDataSource" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Free resources allocated for a previously created data source]]></description>
          <summary><![CDATA[Free resources allocated for a previously created data source]]></summary>
          <sample><![CDATA[databaseManager.removeDataSource(uri);]]></sample>
          <parameters>
            <parameter name="uri" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="removeTableFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the filter could be removed.]]></return>
          <description><![CDATA[Removes a previously defined table filter.]]></description>
          <summary><![CDATA[Removes a previously defined table filter.]]></summary>
          <sample><![CDATA[var success = databaseManager.removeTableFilterParam('admin', 'higNumberedMessagesRule')]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the database server connection.]]></description>
            </parameter>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the filter that should be removed.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="rollbackEditedRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Rolls back in memory edited records that are outstanding (not saved). 
Can specify a record or foundset as parameter to rollback.
Best used in combination with the function databaseManager.setAutoSave()
This does not include deletes, they do not honor the autosafe false flag so they cant be rollbacked by this call.]]></description>
          <summary><![CDATA[Rolls back in memory edited records that are outstanding (not saved).]]></summary>
          <sample><![CDATA[//Set autosave, if false then no saves will happen by the ui (not including deletes!). Until you call saveData or setAutoSave(true)
//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
//databaseManager.rollbackEditedRecords(foundset); // rollback all records from foundset
//databaseManager.rollbackEditedRecords(foundset.getSelectedRecord()); // rollback only one record
databaseManager.setAutoSave(true)]]></sample>
          <parameters>
            <parameter name="foundset/record" optional="true">
              <description><![CDATA[A JSFoundset or a JSRecord to rollback]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="rollbackTransaction" undocumented="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
        </function>
        <function name="rollbackTransaction">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Rollback a transaction started by databaseManager.startTransaction().]]></description>
          <summary><![CDATA[Rollback a transaction started by databaseManager.]]></summary>
          <sample><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.  
if (cancel || !databaseManager.commitTransaction())
{
  databaseManager.rollbackTransaction();
}]]></sample>
          <parameters>
            <parameter name="rollbackEdited" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[also rollback deletes that are done between start and a rollback call that are not handled by autosave false and rollbackEditedRecords()  (default true)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="saveData">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the save was done without an error.]]></return>
          <description><![CDATA[Saves all outstanding (unsaved) data and exits the current record. 
Optionally, by specifying a record or foundset, can save a single record or all reacords from foundset instead of all the data.

NOTE: The fields focus may be lost in user interface in order to determine the edits.]]></description>
          <summary><![CDATA[Saves all outstanding (unsaved) data and exits the current record.]]></summary>
          <sample><![CDATA[databaseManager.saveData();
//databaseManager.saveData(foundset.getRecord(1));//save specific record
//databaseManager.saveData(foundset);//save all records from foundset]]></sample>
          <parameters>
            <parameter name="record/foundset" optional="true">
              <description><![CDATA[The JSRecord to save.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setAutoSave">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[false if the current edited record could not be saved.]]></return>
          <description><![CDATA[Set autosave, if false then no saves will happen by the ui (not including deletes!). 
Until you call databaseManager.saveData() or setAutoSave(true)

If you also want to be able to rollback deletes then you have to use databaseManager.startTransaction().
Because even if autosave is false deletes of records will be done.]]></description>
          <summary><![CDATA[Set autosave, if false then no saves will happen by the ui (not including deletes!).]]></summary>
          <sample><![CDATA[//Rollbacks in mem the records that were edited and not yet saved. Best used in combination with autosave false.
databaseManager.setAutoSave(false)
//Now let users input data

//On save or cancel, when data has been entered:
if (cancel) databaseManager.rollbackEditedRecords()
databaseManager.setAutoSave(true)]]></sample>
          <parameters>
            <parameter name="autoSave" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[Boolean to enable or disable autosave.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setCreateEmptyFormFoundsets">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Turnoff the initial form foundset record loading, set this in the solution open method.
Simular to calling foundset.clear() in the form's onload event.

NOTE: When the foundset record loading is turned off, controller.find or controller.loadAllRecords must be called to display the records]]></description>
          <summary><![CDATA[Turnoff the initial form foundset record loading, set this in the solution open method.]]></summary>
          <sample><![CDATA[//this has to be called in the solution open method
databaseManager.setCreateEmptyFormFoundsets()]]></sample>
        </function>
        <function name="startTransaction">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Start a database transaction.
If you want to avoid round trips to the server or avoid the posibility of blocking other clients 
because of your pending changes, you can use databaseManager.setAutoSave(false/true) and databaseManager.rollbackEditedRecords().

startTransaction, commit/rollbackTransacton() does support rollbacking of record deletes which autoSave = false doesnt support.]]></description>
          <summary><![CDATA[Start a database transaction.]]></summary>
          <sample><![CDATA[// starts a database transaction
databaseManager.startTransaction()
//Now let users input data

//when data has been entered do a commit or rollback if the data entry is canceld or the the commit did fail.  
if (cancel || !databaseManager.commitTransaction())
{
  databaseManager.rollbackTransaction();
}]]></sample>
        </function>
        <function name="switchServer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the switch could be done.]]></return>
          <description><![CDATA[Switches a named server to another named server with the same datamodel (recommended to be used in an onOpen method for a solution).
return true if successful.]]></description>
          <summary><![CDATA[Switches a named server to another named server with the same datamodel (recommended to be used in an onOpen method for a solution).]]></summary>
          <sample><![CDATA[//dynamically changes a server for the entire solution, destination database server must contain the same tables/columns!
//will fail if there is a lock, transaction , if repository_server is used or if destination server is invalid
//in the solution keep using the sourceName every where to reference the server!  
var success = databaseManager.switchServer('crm', 'crm1')]]></sample>
          <parameters>
            <parameter name="sourceName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the source database server connection]]></description>
            </parameter>
            <parameter name="destinationName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the destination database server connection.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
      <returnTypes>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.FoundSet"/>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.JSColumn"/>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.JSDataSet"/>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.JSFoundSetUpdater"/>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.JSTable"/>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.Record"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.COLUMNTYPE"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.SQL_ACTION_TYPES"/>
      </returnTypes>
    </object>
    <object publicName="ELEMENT_TYPES" qualifiedName="com.servoy.j2db.scripting.info.ELEMENT_TYPES">
      <constants>
        <constant name="BUTTON">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Button type.]]></description>
          <summary><![CDATA[Constant representing an element of the Button type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Button type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.BUTTON)
{
     // element is a Button component
}]]></sample>
        </constant>
        <constant name="CALENDAR">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Calendar type.]]></description>
          <summary><![CDATA[Constant representing an element of the Calendar type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Calendar type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.CALENDAR)
{
     // element is a Calendar field
}]]></sample>
        </constant>
        <constant name="CHECK">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Check type.]]></description>
          <summary><![CDATA[Constant representing an element of the Check type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Check type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.CHECK)
{
     // element is a Check(box) field
}]]></sample>
        </constant>
        <constant name="GROUP">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing a Group of elements.]]></description>
          <summary><![CDATA[Constant representing a Group of elements.]]></summary>
          <sample><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.GROUP)
{
     // element is a group element
}]]></sample>
        </constant>
        <constant name="IMAGE_MEDIA">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the ImageMedia type.]]></description>
          <summary><![CDATA[Constant representing an element of the ImageMedia type.]]></summary>
          <sample><![CDATA[//the return value for an element of the ImageMedia type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.IMAGE_MEDIA)
{
     // element is a Image Media field
}]]></sample>
        </constant>
        <constant name="LABEL">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Label type.]]></description>
          <summary><![CDATA[Constant representing an element of the Label type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Label type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.LABEL)
{
     // element is a Label component
}]]></sample>
        </constant>
        <constant name="PASSWORD">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Password type.]]></description>
          <summary><![CDATA[Constant representing an element of the Password type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Password type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.PASSWORD)
{
     // element is a Password component
}]]></sample>
        </constant>
        <constant name="PORTAL">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Portal type.]]></description>
          <summary><![CDATA[Constant representing an element of the Portal type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Portal type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.PORTAL)
{
     // element is a Portal component
}]]></sample>
        </constant>
        <constant name="RADIOS">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Radios type.]]></description>
          <summary><![CDATA[Constant representing an element of the Radios type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Radios type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.RADIOS)
{
     // element is a Radios field.
}]]></sample>
        </constant>
        <constant name="TABPANEL">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the Tabpanel type.]]></description>
          <summary><![CDATA[Constant representing an element of the Tabpanel type.]]></summary>
          <sample><![CDATA[//the return value for an element of the Tabpanel type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TABPANEL)
{
     // element is a Tabpanel component
}]]></sample>
        </constant>
        <constant name="TEXT_AREA">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the TextArea type.]]></description>
          <summary><![CDATA[Constant representing an element of the TextArea type.]]></summary>
          <sample><![CDATA[//the return value for an element of the TextArea type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TEXT_AREA)
{
     // element is a TextArea field
}]]></sample>
        </constant>
        <constant name="TEXT_FIELD">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant representing an element of the TextField type.]]></description>
          <summary><![CDATA[Constant representing an element of the TextField type.]]></summary>
          <sample><![CDATA[//the return value for an element of the TextField type, as returned by the following code
var etype = elements.elementName.getElementType();
if (etype == ELEMENT_TYPES.TEXT_FIELD)
{
     // element is a text field
}]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="FORMSECURITY" qualifiedName="com.servoy.j2db.scripting.info.FORMSECURITY" deprecated="true">
      <constants>
        <constant name="ACCESSIBLE" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="VIEWABLE" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="Form" scriptingName="Form" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Form">
      <properties>
        <property name="_super">
          <return typecode="com.servoy.j2db.FormController$JSForm" type="com.servoy.j2db.FormController$JSForm"/>
          <description><![CDATA[Provides access to the methods of the parent of this form.]]></description>
          <summary><![CDATA[Provides access to the methods of the parent of this form.]]></summary>
          <sample><![CDATA[%%prefix%%_super.some_method();]]></sample>
        </property>
        <property name="alldataproviders" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all dataproviders of the form.]]></description>
          <summary><![CDATA[Get all dataproviders of the form.]]></summary>
          <sample><![CDATA[var dataprovidersNames = %%prefix%%alldataproviders;
application.output("This form has " + dataprovidersNames.length + " data providers.")
for (var i=0; i<dataprovidersNames.length; i++)
	application.output(dataprovidersNames[i]);]]></sample>
        </property>
        <property name="allmethods" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all script names of the form.]]></description>
          <summary><![CDATA[Get all script names of the form.]]></summary>
          <sample><![CDATA[var methodNames = %%prefix%%allmethods;
application.output("This form has " + methodNames.length + " methods defined.")
for (var i=0; i<methodNames.length; i++)
	application.output(methodNames[i]);]]></sample>
        </property>
        <property name="allnames" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get the names of all elements on the form as an array.]]></description>
          <summary><![CDATA[Get the names of all elements on the form as an array.]]></summary>
          <sample><![CDATA[var names = %%prefix%%allnames;
application.output("This form has " + names.length + " named items.")
for (var i=0; i<names.length; i++)
	application.output(names[i]);]]></sample>
        </property>
        <property name="allrelations" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all relation names of the form.]]></description>
          <summary><![CDATA[Get all relation names of the form.]]></summary>
          <sample><![CDATA[var relationsNames = %%prefix%%allrelations;
application.output("This form has " + relationsNames.length + " relations.")
for (var i=0; i<relationsNames.length; i++)
	application.output(relationsNames[i]);]]></sample>
        </property>
        <property name="allvariables" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all form variable names.]]></description>
          <summary><![CDATA[Get all form variable names.]]></summary>
          <sample><![CDATA[var varNames = %%prefix%%allvariables;
application.output("This form has " + varNames.length + " variables defined.")
for (var i=0; i<varNames.length; i++)
	application.output(varNames[i]);]]></sample>
        </property>
        <property name="controller">
          <return typecode="com.servoy.j2db.FormController$JSForm" type="com.servoy.j2db.FormController$JSForm"/>
          <description><![CDATA[Get the controller of the form.]]></description>
          <summary><![CDATA[Get the controller of the form.]]></summary>
          <sample><![CDATA[%%prefix%%controller.enabled = !%%prefix%%controller.enabled;]]></sample>
        </property>
        <property name="elements">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.FormElements" type="com.servoy.j2db.documentation.scripting.docs.FormElements"/>
          <description><![CDATA[Get an array with the elements in the form.]]></description>
          <summary><![CDATA[Get an array with the elements in the form.]]></summary>
          <sample><![CDATA[var elems = %%prefix%%elements;
application.output("This form has " + elems.length + " named elements.")
for (var i=0; i<elems.length; i++)
	application.output(elems[i].getName());]]></sample>
        </property>
        <property name="foundset">
          <return typecode="com.servoy.j2db.dataprocessing.FoundSet" type="com.servoy.j2db.dataprocessing.FoundSet"/>
          <description><![CDATA[Get the foundset of the form.]]></description>
          <summary><![CDATA[Get the foundset of the form.]]></summary>
          <sample><![CDATA[application.output("selected index in form foundset: " + %%prefix%%foundset.getSelectedIndex());]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="Forms" scriptingName="forms" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Forms">
      <properties>
        <property name="['name']">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get a form by name.]]></description>
          <summary><![CDATA[Get a form by name.]]></summary>
          <sample><![CDATA[var allFormNames = forms.allnames;
application.output("There are " + allFormNames.length + " forms.");
for (var i=0; i<allFormNames.length; i++) 
{
	var f = forms[allFormNames[i]];
	application.output("Form " + allFormNames[i] + " has selected index " + f.controller.getSelectedIndex());
}]]></sample>
        </property>
        <property name="allnames" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all form names of the current solution.]]></description>
          <summary><![CDATA[Get all form names of the current solution.]]></summary>
          <sample><![CDATA[var allFormNames = forms.allnames;
application.output("There are " + allFormNames.length + " forms.");
for (var i=0; i<allFormNames.length; i++) 
{
	var f = forms[allFormNames[i]];
	application.output("Form " + allFormNames[i] + " has selected index " + f.controller.getSelectedIndex());
}]]></sample>
        </property>
        <property name="length">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Number" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get the number of forms loaded into memory.]]></description>
          <summary><![CDATA[Get the number of forms loaded into memory.]]></summary>
          <sample><![CDATA[application.output("Number of forms loaded into memory: " + forms.length);]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="Globals" scriptingName="globals" qualifiedName="com.servoy.j2db.documentation.scripting.docs.Globals">
      <properties>
        <property name="allmethods" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all global script names of the current solution.]]></description>
          <summary><![CDATA[Get all global script names of the current solution.]]></summary>
          <sample><![CDATA[var allMethodNames = globals.allmethods;
application.output("There are " + allMethodNames.length + " global methods.");
for (var i=0; i<allMethodNames.length; i++)
	application.output(allMethodNames[i]);]]></sample>
        </property>
        <property name="allrelations" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all global relation names of the current solution.]]></description>
          <summary><![CDATA[Get all global relation names of the current solution.]]></summary>
          <sample><![CDATA[var allRelationNames = globals.allrelations;
application.output("There are " + allRelationNames.length + " global relations.");
for (var i=0; i<allRelationNames.length; i++)
	application.output(allRelationNames[i]);]]></sample>
        </property>
        <property name="allvariables" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get all global variable names of the current solution.]]></description>
          <summary><![CDATA[Get all global variable names of the current solution.]]></summary>
          <sample><![CDATA[var allVarNames = globals.allvariables;
application.output("There are " + allVarNames.length + " global variables.");
for (var i=0; i<allVarNames.length; i++)
	application.output(allVarNames[i]);]]></sample>
        </property>
        <property name="currentcontroller">
          <return typecode="com.servoy.j2db.FormController$JSForm" type="com.servoy.j2db.FormController$JSForm"/>
          <description><![CDATA[Get the controller of the top level form in the currently active dialog.]]></description>
          <summary><![CDATA[Get the controller of the top level form in the currently active dialog.]]></summary>
          <sample><![CDATA[application.output("Current controller is: " + currentcontroller.getName());]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="GroupScriptObject" qualifiedName="com.servoy.j2db.scripting.GroupScriptObject">
      <properties>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="History" scriptingName="history" qualifiedName="com.servoy.j2db.FormManager$HistoryProvider">
      <properties>
        <property name="buttonsEnabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Set/Get the history buttons enabled.]]></description>
          <summary><![CDATA[Set/Get the history buttons enabled.]]></summary>
          <sample><![CDATA[history.buttonsEnabled = true;
var status = history.buttonsEnabled;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="back">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Navigates back in the history stack; shows the previous form (if present).]]></description>
          <summary><![CDATA[Navigates back in the history stack; shows the previous form (if present).]]></summary>
          <sample><![CDATA[history.back();]]></sample>
        </function>
        <function name="clear">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Clear the entire history stack.]]></description>
          <summary><![CDATA[Clear the entire history stack.]]></summary>
          <sample><![CDATA[history.clear();]]></sample>
        </function>
        <function name="forward">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Navigates forward in the history stack; shows the next form (if present).]]></description>
          <summary><![CDATA[Navigates forward in the history stack; shows the next form (if present).]]></summary>
          <sample><![CDATA[history.forward();]]></sample>
        </function>
        <function name="getCurrentIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the current absolute index]]></return>
          <description><![CDATA[Get the current absolute index in the history stack.]]></description>
          <summary><![CDATA[Get the current absolute index in the history stack.]]></summary>
          <sample><![CDATA[var abs_index = history.getCurrentIndex();]]></sample>
        </function>
        <function name="getFormName">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the formName]]></return>
          <description><![CDATA[Get the form name based on the specified absolute index in the history stack location.]]></description>
          <summary><![CDATA[Get the form name based on the specified absolute index in the history stack location.]]></summary>
          <sample><![CDATA[var name = history.getFormName(history.getCurrentIndex());]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the absolute index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="go">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Navigates to the relative index based on current position in the history.]]></description>
          <summary><![CDATA[Navigates to the relative index based on current position in the history.]]></summary>
          <sample><![CDATA[history.go(-3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the absolute index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Removes the named form item from the history stack (and from memory) if not currently shown.]]></description>
          <summary><![CDATA[Removes the named form item from the history stack (and from memory) if not currently shown.]]></summary>
          <sample><![CDATA[var done = history.removeForm('mypreviousform');]]></sample>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the form to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Removes an absolute index based history stack form item.]]></description>
          <summary><![CDATA[Removes an absolute index based history stack form item.]]></summary>
          <sample><![CDATA[var done = history.removeIndex(history.getCurrentIndex()+1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index of the form to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="size">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the size]]></return>
          <description><![CDATA[Returns the total size of the history stack.]]></description>
          <summary><![CDATA[Returns the total size of the history stack.]]></summary>
          <sample><![CDATA[var size = history.size();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Image" qualifiedName="com.servoy.j2db.ui.IScriptMediaInputFieldMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getScrollX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x scroll location in pixels.]]></return>
          <description><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
        </function>
        <function name="getScrollY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y scroll location in pixels.]]></return>
          <description><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="isEditable">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if editable, false otherwise]]></return>
          <description><![CDATA[Gets the editable/read-only state of a field; true - editable; false - read-only; ! - the editable/read-only state is inverted (the opposite).]]></description>
          <summary><![CDATA[Gets the editable/read-only state of a field; true - editable; false - read-only; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.isEditable();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the scroll location of a portal. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for a portal where the height of the portal is greater than the height of the portal filed(s).

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of a portal; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:
 
//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the scroll location of a portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JOINTYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JOINTYPE" deprecated="true">
      <constants>
        <constant name="INNER_JOIN" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LEFT_OUTER_JOIN" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="JSButton" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSButton">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="dataProviderID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The dataprovider of the component.]]></description>
          <summary><![CDATA[The dataprovider of the component.]]></summary>
          <sample><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
        </property>
        <property name="displaysTags">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %%on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by%%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          <summary><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          <sample><![CDATA[var label = form.newLabel('You are viewing record no. %%parent_table_id%%. You are running on server %%serverURL%%.', 
					10, 10, 600, 100);
label.displaysTags = true;]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="horizontalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          <summary><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
        </property>
        <property name="imageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The image Media object that should be displayed inside the component.]]></description>
          <summary><![CDATA[The image Media object that should be displayed inside the component.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var label = form.newLabel('', 10, 10, 100, 100);
label.imageMedia = ballImage;]]></sample>
        </property>
        <property name="labelFor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Some components can be set to be labels of other components. This is useful in
two situations. In table view mode it is used for constructing the header of the
table. In record view mode, by setting mnemonics on the label, keyboard shortcuts
can be used to set the focus to fields.]]></description>
          <summary><![CDATA[Some components can be set to be labels of other components.]]></summary>
          <sample><![CDATA[var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O';]]></sample>
        </property>
        <property name="margin">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, right, bottom, left.]]></description>
          <summary><![CDATA[The margins of the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
        </property>
        <property name="mediaOptions">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Options to scale the image Media object that is displayed inside the component.
Can be set to one or a combination of CROP, REDUCE, ENLARGE and KEEPASPECT.

REDUCE will scale down the image if the component is smaller than the image.
REDUCE combined with KEEPASPECT will reduce the image, but keep its aspect ratio. 
This is useful when the component has other proportions than the image.

ENLARGE will scale up the image if the component is larger than the image.
ENLARGE combined with KEEPASPECT will scale up the image while keeping its aspect ratio.

CROP will leave the image at its original size. If the component is smaller than
the image this will result in only a part of the image showing up.]]></description>
          <summary><![CDATA[Options to scale the image Media object that is displayed inside the component.]]></summary>
          <sample><![CDATA[// Load two images, a big one and a small one.
var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
// Put the big image in several small labels, with different media options.
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
// Put the small image in several big labels, with different media options.
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
        </property>
        <property name="mnemonic">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The keyboard shortcut that activates this component. A letter must be specified, 
and the actual shortcut will be combination of ALT + the specified letter.

This property can be used in two ways. Normally the keyboard shortcut activates 
the onClick event of the component. But if the "labelFor" property is set for the
component, then the keyboard shortcut will move the focus to the component whose
label this component is.]]></description>
          <summary><![CDATA[The keyboard shortcut that activates this component.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var btn = form.newButton('I am a button', 10, 40, 200, 20, m);
btn.mnemonic = 'B'; // When ALT-B is pressed the mouse will respond as if clicked.
var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O'; // When ALT-O is pressed the focus will move to fieldOne.]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="onAction">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onDoubleClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is double clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is double clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onRightClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is right clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="rolloverCursor">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The cursor that is shown as the mouse is rolled over the component.
Possible options are DEFAULT and HAND.]]></description>
          <summary><![CDATA[The cursor that is shown as the mouse is rolled over the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
        </property>
        <property name="rolloverImageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The roll over image Media object used. When the mouse is moved over the component,
this image Media will be displayed. When the mouse is moved out of the component,
whatever text or image was being initially displayed will be restored.]]></description>
          <summary><![CDATA[The roll over image Media object used.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var mapBytes = plugins.file.readFile('d:/map.jpg');
var mapImage = solutionModel.newMedia('map.jpg', mapBytes);
var label = form.newLabel('', 10, 10, 200, 200);
label.imageMedia = mapImage;
label.rolloverImageMedia = ballImage;]]></sample>
        </property>
        <property name="rotation">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The rotation of the element. You can choose 0, 90, 180, or 270 and the label is rotated accordingly.  
This property also applies to buttons and images.]]></description>
          <summary><![CDATA[The rotation of the element.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 200, m);
label.rotation = 90;
var btn = form.newButton('And I am a button', 10, 220, 200, 20, m);
btn.rotation = 180;]]></sample>
        </property>
        <property name="showClick">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the element will show the clicked state when selected. 
Applies to labels and buttons and images only.]]></description>
          <summary><![CDATA[When set, the element will show the clicked state when selected.]]></summary>
          <sample><![CDATA[// Create a form method.
var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
// Create a label with the method attached to its onClick event.
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
// By default the label does not visually react to clicks, but we can enable this.
// Basically the label will now behave as a button does.
label.showClick = true;
// Create a button with the same method attached to its onClick event.
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
// By default the button visually reacts to onClick, but we can disable this.
// Then the button will behave like a label does.
btn.showClick = false;]]></sample>
        </property>
        <property name="showFocus">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set the text of an element will showfocus when selected.
Applies to labels and buttons only. 
The text property for the element MUST be filled in first. 

NOTE: The TAB key may also be used to select the element, depending 
on the operating system being used and the selected LAF.]]></description>
          <summary><![CDATA[When set the text of an element will showfocus when selected.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
label.showFocus = false;
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
btn.showFocus = false;]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text that is displayed inside the component.]]></description>
          <summary><![CDATA[The text that is displayed inside the component.]]></summary>
          <sample><![CDATA[// In general the text is specified when creating the component.
var label = form.newLabel('Initial text', 10, 10, 100, 20);
// But it can be changed later if needed.
label.text = 'Changed text';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example: 
<html>This includes<b>bolded text</b> and 
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          <summary><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="verticalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          <summary><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="setOnActionMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnAction"/>
          </sees>
        </function>
        <function name="setOnDoubleClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnDoubleClick"/>
          </sees>
        </function>
        <function name="setOnRightClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnRightClick"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSCalculation" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSCalculation">
      <properties>
        <property name="code" undocumented="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </property>
        <property name="variableType" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </property>
      </properties>
      <functions>
        <function name="getName" undocumented="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </function>
        <function name="isStored" undocumented="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
        </function>
      </functions>
    </object>
    <object publicName="JSColumn" qualifiedName="com.servoy.j2db.dataprocessing.JSColumn">
      <constants>
        <constant name="DATETIME">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          <summary><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </constant>
        <constant name="INTEGER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          <summary><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </constant>
        <constant name="MEDIA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          <summary><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </constant>
        <constant name="NUMBER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          <summary><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </constant>
        <constant name="TEXT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting or getting the type of columns.]]></description>
          <summary><![CDATA[Constant used when setting or getting the type of columns.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </constant>
      </constants>
      <functions>
        <function name="getAllowNull">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean allow-null flag.]]></return>
          <description><![CDATA[Get the allow-null flag of the column.]]></description>
          <summary><![CDATA[Get the allow-null flag of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
if (!column.getAllowNull())
{
	 // column cannot be null
}]]></sample>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String dataprovider id.]]></return>
          <description><![CDATA[Get the data provider id (name) for this column.]]></description>
          <summary><![CDATA[Get the data provider id (name) for this column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
var dataProviderId = column.getDataProviderID()]]></sample>
        </function>
        <function name="getDescription">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String column description.]]></return>
          <description><![CDATA[Get the description property of the column.]]></description>
          <summary><![CDATA[Get the description property of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customername')
var desc = column.getDescription()]]></sample>
        </function>
        <function name="getForeignType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String foreign type.]]></return>
          <description><![CDATA[Get the foreign type of the column.
The foreign type can be defined design time as a foreign key reference to another table.]]></description>
          <summary><![CDATA[Get the foreign type of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
var foreignType = column.getForeignType()
if (foreignType != null)
{
	var fkTable = databaseManager.getTable('example_data', foreignType)
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="mergeRecords"/>
          </sees>
        </function>
        <function name="getLength">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int column length.]]></return>
          <description><![CDATA[Get the length of the column as reported by the JDBC driver.]]></description>
          <summary><![CDATA[Get the length of the column as reported by the JDBC driver.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customername')
if (column.getLength() < 10)
{
	 // handle short column
}]]></sample>
        </function>
        <function name="getQualifiedName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String qualified column name.]]></return>
          <description><![CDATA[Get the qualified name (including table name) of the column as known by the database.
The name is quoted, if necessary, as defined by the actual database used.]]></description>
          <summary><![CDATA[Get the qualified name (including table name) of the column as known by the database.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
var qualifiedSqlName = column.getQualifiedName()]]></sample>
        </function>
        <function name="getQuotedSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[column name, quoted if needed.]]></return>
          <description><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></description>
          <summary><![CDATA[Returns a quoted version of the column name, if necessary, as defined by the actual database used.]]></summary>
          <sample><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
var jsColumn = jsTable.getColumn('active')
var quotedColumnName = jsColumn.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where ' + quotedColumnName + ' = ?', [1])]]></sample>
        </function>
        <function name="getSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String sql name]]></return>
          <description><![CDATA[Get the name of the column as known by the database.]]></description>
          <summary><![CDATA[Get the name of the column as known by the database.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
var sqlName = column.getSQLName()]]></sample>
        </function>
        <function name="getScale">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int column scale.]]></return>
          <description><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></description>
          <summary><![CDATA[Get the scale of the column as reported by the JDBC driver.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customername')
var scale = column.getScale()]]></sample>
        </function>
        <function name="getTitle">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String column title.]]></return>
          <description><![CDATA[Get the title property of the column.]]></description>
          <summary><![CDATA[Get the title property of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customername')
var title = column.getTitle()]]></sample>
        </function>
        <function name="getType">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int sql type.]]></return>
          <description><![CDATA[Get the JDBC type of the column.
The type reported by the JDBC driver will be mapped to one of:
 - JSColumn.DATETIME
 - JSColumn.TEXT
 - JSColumn.NUMBER
 - JSColumn.INTEGER
 - JSColumn.MEDIA]]></description>
          <summary><![CDATA[Get the JDBC type of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
switch (column.getType())
{
case JSColumn.TEXT:
	// handle text column
break;

case JSColumn.NUMBER:
case JSColumn.INTEGER:
	// handle numerical column
break;
}]]></sample>
        </function>
        <function name="getTypeAsString">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String sql name.]]></return>
          <description><![CDATA[Get the name JDBC type of the column.
The same mapping as defined in JSColumn.getType() is applied.]]></description>
          <summary><![CDATA[Get the name JDBC type of the column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('customerid')
var typeName = column.getTypeAsString()]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSColumn" member="getType"/>
          </sees>
        </function>
        <function name="isRowIdentifier">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if is row identifier else false.]]></return>
          <description><![CDATA[Is this column one of the row identifiers for its table.]]></description>
          <summary><![CDATA[Is this column one of the row identifiers for its table.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('orderid')
if (column.isRowIdentifier())
{
	 // handle pk column
}]]></sample>
        </function>
        <function name="isUUID">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if is marked as UUID columns else false.]]></return>
          <description><![CDATA[Is this column marked as UUID column.]]></description>
          <summary><![CDATA[Is this column marked as UUID column.]]></summary>
          <sample><![CDATA[var table = databaseManager.getTable('example_data', 'orders')
var column = table.getColumn('orderid')
if (column.isUUID())
{
	 // handle UUID column
}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSComponent" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSComponent">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="JSDNDEvent" qualifiedName="com.servoy.j2db.dnd.JSDNDEvent">
      <constants>
        <constant name="ACTION">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onAction event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
   // its an action event.
}]]></sample>
        </constant>
        <constant name="DATACHANGE">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDataChange event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.DATACHANGE) 
{
   // its a data change event
}]]></sample>
        </constant>
        <constant name="DOUBLECLICK">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDoubleClick event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.DOUBLECLICK) 
{
   // its a double click event.
}]]></sample>
        </constant>
        <constant name="FOCUSGAINED">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusGained or the forms onElementFocusGained event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FOCUSGAINED) 
{
   // its a focus gained event.
}]]></sample>
        </constant>
        <constant name="FOCUSLOST">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusLost or the forms onElementFocusLost event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FOCUSLOST) 
{
   // its a focus lost event.
}]]></sample>
        </constant>
        <constant name="FORM">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to a form event (like onShow) or command (like onDeleteRecord)]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FORM) 
{
   // its a form event or command
}]]></sample>
        </constant>
        <constant name="MODIFIER_ALT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_CTRL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_META">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the META modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the META modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_SHIFT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="NONE">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() if the event is not used in a known event or command.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.NONE) 
{
   // type is not set.
}]]></sample>
        </constant>
        <constant name="ONDRAG">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDrag event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAG) 
{
   // its an ondrag event
   if (event.getElementName() == 'todragelement')
   	return DRAGNDROP.COPY
}]]></sample>
        </constant>
        <constant name="ONDRAGEND">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDragEnd event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAGEND) 
{
   // its an on drag end event.
   // return true if the drop has been completed successfully
   return event.isDropSuccess(); 
}]]></sample>
        </constant>
        <constant name="ONDRAGOVER">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDragOver event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAGOVER) 
{
   // its an on drag over event.
   // return true if it over the right element.
   return event.getElementName() == 'candroponelement';
}]]></sample>
        </constant>
        <constant name="ONDROP">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDrop event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDROP) 
{
   // its a on drop event.
   var element = elements[event.getElementName()];
   // do drop on element
   return true;
}]]></sample>
        </constant>
        <constant name="RIGHTCLICK">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onRightClick event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.RIGHTCLICK) 
{
   // its a right click event.
}]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="data">
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></description>
          <summary><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></summary>
          <sample><![CDATA[// A client design method that handles ondrag
if (event.getType() == JSEvent.ONDRAG)
{
     // the data is the selected elements array
     var elements = event.data;
     // only start a client design drag when there is 1 element
     if (elements.length == 1)
     {
     	return true;
     }
}

// code for a data drag method
event.data = "drag me!";
return DRAGNDROP.COPY;

// code for a data drop method
var data = event.data;
elemements[event.getElementName()].setText(data);
return true;]]></sample>
        </property>
        <property name="dataMimeType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The event data mime type]]></description>
          <summary><![CDATA[The event data mime type]]></summary>
          <sample><![CDATA[]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getDragResult">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[a DRAGNDROP constant, representing the result of the drag action]]></return>
          <description><![CDATA[Returns the result of the drag action.]]></description>
          <summary><![CDATA[Returns the result of the drag action.]]></summary>
          <sample><![CDATA[function onDragEnd(event)
{
		var dragResult = event.getDragResult();
		if(dragResult == DRAGNDROP.NONE)
		{
			// the drag was canceled
		}
		else if(dragResult == DRAGNDROP.COPY)
		{
			// the drag ended with a copy action
		}
		else if(dragResult == DRAGNDROP.MOVE)
		{
			// the drag ended with a move action
		}]]></sample>
        </function>
        <function name="getElementName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the element name.]]></return>
          <description><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></description>
          <summary><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></summary>
          <sample><![CDATA[if (event.getElementName() == 'myElement')
{
    elements[event.getElementName()].bgcolor = '#ff0000';
}]]></sample>
        </function>
        <function name="getFormName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the form name.]]></return>
          <description><![CDATA[returns the name of the form the element was placed on.]]></description>
          <summary><![CDATA[returns the name of the form the element was placed on.]]></summary>
          <sample><![CDATA[forms[event.getFormName()].myFormMethod();]]></sample>
        </function>
        <function name="getModifiers">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int which holds the modifiers as a bitset.]]></return>
          <description><![CDATA[Returns the modifiers of the event, see JSEvent.MODIFIER_XXXX for the modifiers that can be returned.]]></description>
          <summary><![CDATA[Returns the modifiers of the event, see JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
        </function>
        <function name="getRecord">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.Record" type="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record of the event]]></return>
          <description><![CDATA[Returns the record of the event.]]></description>
          <summary><![CDATA[Returns the record of the event.]]></summary>
          <sample><![CDATA[event.Record();]]></sample>
        </function>
        <function name="getSource">
          <argumentsTypes/>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[an Object representing the source of this event.]]></return>
          <description><![CDATA[returns the source component/element of the event.
If it has a name the getElementName() is the name of this component.]]></description>
          <summary><![CDATA[returns the source component/element of the event.]]></summary>
          <sample><![CDATA[var sourceDataProvider = event.getSource().getDataProviderID();]]></sample>
        </function>
        <function name="getTimestamp">
          <argumentsTypes/>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[a Date when this event happened.]]></return>
          <description><![CDATA[Returns the time the event occurred.]]></description>
          <summary><![CDATA[Returns the time the event occurred.]]></summary>
          <sample><![CDATA[event.getTimestamp();]]></sample>
        </function>
        <function name="getType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the type of this event.]]></return>
          <description><![CDATA[returns the event type see the JSEvents constants what it can return.
Plugins can create events with there own types.]]></description>
          <summary><![CDATA[returns the event type see the JSEvents constants what it can return.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
   // its an action event.
}]]></sample>
        </function>
        <function name="getX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int representing the X position.]]></return>
          <description><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          <summary><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.]]></summary>
          <sample><![CDATA[var x = event.getX();
var xPrevious = previousEvent.getX();
var movedXPixels = x -xPrevious;]]></sample>
        </function>
        <function name="getY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int representing the Y position.]]></return>
          <description><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          <summary><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.]]></summary>
          <sample><![CDATA[var y = event.getY();
var yPrevious = previousEvent.getY();
var movedYPixels = y -yPrevious;]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSDataSet" qualifiedName="com.servoy.j2db.dataprocessing.JSDataSet">
      <properties>
        <property name="rowIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get or set the record index of the dataset.]]></description>
          <summary><![CDATA[Get or set the record index of the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
//to set the rowIndex:
dataset.rowIndex = 1 //sets the rowIndex to the first row (dataset is 1-based)
//to retrieve the rowIndex of the currently selected row
var currRow = dataset.rowIndex]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addColumn">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded, else false.]]></return>
          <description><![CDATA[adds a column with the specified name to the dataset.]]></description>
          <summary><![CDATA[adds a column with the specified name to the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.addColumn('columnName',1);]]></sample>
          <parameters>
            <parameter name="name">
              <description><![CDATA[column name.]]></description>
            </parameter>
            <parameter name="index" optional="true">
              <description><![CDATA[column index number between 1 and getMaxColumnIndex().]]></description>
            </parameter>
            <parameter name="type" optional="true">
              <description><![CDATA[the type of column, see JSColumn constants.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addHTMLProperty">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Add an HTML property to an HTML tag produced in getAsHTML().

For row and col parameters use:
1 = applies to the container
0 = applies to all
>0 = applies to specific cell]]></description>
          <summary><![CDATA[Add an HTML property to an HTML tag produced in getAsHTML().]]></summary>
          <sample><![CDATA[//adds a container property (to TABLE tag)
dataset.addHTMLProperty(-1,-1,'cellspacing','3');

//adds a row property to all rows (to TR tag)
dataset.addHTMLProperty(0,0,'class','text');

//adds a row property to second row (to TR tag)
dataset.addHTMLProperty(2,0,'class','text');

//adds a column property to all 3rd columns (to TD tag)
dataset.addHTMLProperty(0,3,'class','redcolumn') ;

//adds a specific cell property (to TD tag)
dataset.addHTMLProperty(2,4,'color','blue');

globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';]]></sample>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String property name]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String property value]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRow" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="addRow">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Add a row to the dataset.]]></description>
          <summary><![CDATA[Add a row to the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
dataset.addRow(new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns
dataset.addRow(2, new Array(1,2,3,4,5,6,7,7)); //adds a row with 8 columns after row 2]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int" optional="true">
              <description><![CDATA[index to add row (1-based), add by default as last row]]></description>
            </parameter>
            <parameter name="array" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[row data]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createDataSource" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createDataSource">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String uri reference to the created data source.]]></return>
          <description><![CDATA[Create a data source from the data set with specified name and using specified types.]]></description>
          <summary><![CDATA[Create a data source from the data set with specified name and using specified types.]]></summary>
          <sample><![CDATA[ds.addColumn('my_id');
	ds.addColumn('my_label');
	var uri = ds.createDataSource('mydata', [JSColumn.INTEGER, JSColumn.TEXT]);
	var jsform = solutionModel.newForm(fname, uri, null, true, 300, 300);

 var query = 'select customerid, address, city, country  from customers';
 var ds2 = databaseManager.getDataSetByQuery('example_data', query, null, 999);
 var uri2 = ds2.createDataSource('mydata2'); // types are inferred from query result]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data source name]]></description>
            </parameter>
            <parameter name="types" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object" optional="true">
              <description><![CDATA[array of types as defined in JSColumn, when null or not supplied types are inferred from the data if possible.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAsHTML">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String html.]]></return>
          <description><![CDATA[Get the dataset as an html table.]]></description>
          <summary><![CDATA[Get the dataset as an html table.]]></summary>
          <sample><![CDATA[//gets a dataset based on a query
//useful to limit the number of rows
var maxReturnedRows = 10;
var query = 'select c1,c2,c3 from test_table where start_date = ?';

//to access data by name, do not use '.' or special characters in names or aliases
var args = new Array();
args[0] = order_date //or new Date();
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()),query,args,maxReturnedRows);

// gets a dataset with escape values; escape spaces (lines will not wrap); no multi-line markup; with pretty indentation; shows column names
var htmlTable = dataset.getAsHTML(true, true, false, true, true);

//assigns the dataset to a field and sets the display type to HTML_AREA
//assuming the html_field is a global text variable
globals.html_field = '<html>'+dataset.getAsHTML()+'</html>';

//Note: To display an HTML_AREA field as an HTML page, add HTML tags at the beginning '<html>' and at the end '</html>'.]]></sample>
          <parameters>
            <parameter name="escape_values" optional="true">
              <description><![CDATA[if true, replaces illegal HTML characters with corresponding valid escape sequences.]]></description>
            </parameter>
            <parameter name="escape_spaces" optional="true">
              <description><![CDATA[if true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.]]></description>
            </parameter>
            <parameter name="multi_line_markup" optional="true">
              <description><![CDATA[if true, multiLineMarkup will enforce new lines that are in the text; single new lines will be replaced by <br>, multiple new lines will be replaced by <p>]]></description>
            </parameter>
            <parameter name="pretty_indent" optional="true">
              <description><![CDATA[if true, adds indentation for more readable HTML code.]]></description>
            </parameter>
            <parameter name="add_column_names" optional="true">
              <description><![CDATA[if false, column headers will not be added to the table.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAsTableModel" deprecated="true">
          <argumentsTypes/>
          <description><![CDATA[Returns the dataset as a Swing tablemodel.]]></description>
          <summary><![CDATA[Returns the dataset as a Swing tablemodel.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var model = dataset.getAsTableModel() //gets a Java/Swing tablemodel to be used in beans
elements.inmemDatagridBean.setModel(model)]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDataSet" member="createDataSource"/>
          </sees>
        </function>
        <function name="getAsText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String formatted text.]]></return>
          <description><![CDATA[Get the dataset as formatted text.]]></description>
          <summary><![CDATA[Get the dataset as formatted text.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
//you can create csv or tab delimited results
var csv = dataset.getAsText(',','\n','"',true)
var tab = dataset.getAsText('\t','\n','"',true)]]></sample>
          <parameters>
            <parameter name="column_separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[any specified column separator; examples: tab '\t'; comma ','; semicolon ';'; space ' ' .]]></description>
            </parameter>
            <parameter name="row_separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified row separator; examples: new line '\n'.]]></description>
            </parameter>
            <parameter name="value_delimiter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified value delimiter; example: double quote '"'.]]></description>
            </parameter>
            <parameter name="add_column_names" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean if true column names will be added as a first row.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getColumnAsArray">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[Object array of data.]]></return>
          <description><![CDATA[Get the column data of a dataset as an Array.]]></description>
          <summary><![CDATA[Get the column data of a dataset as an Array.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var dataArray = dataset.getColumnAsArray(1); //puts the contents from the first column of the dataset into an array
//once you have it as an array you can loop through it or feed it to a custom valuelist for example]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getColumnName">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String column name.]]></return>
          <description><![CDATA[Get a column name based on index.]]></description>
          <summary><![CDATA[Get a column name based on index.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var firstColumName = dataset.getColumnName(1) //retrieves the first columnname into the variable firstColumName
//using a loop you can get all columnames in an array:
var query = 'select * from customers';
var dataset = databaseManager.getDataSetByQuery(databaseManager.getDataSourceServerName(controller.getDataSource()), query, null, 100);
var colArray = new Array()
for (var i = 1; i <= dataset.getMaxColumnIndex(); i++)
{
	colArray[i-1] = dataset.getColumnName(i)
	//note the -1, because an array is zero based and dataset is 1 based.
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getException">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.util.ServoyException" type="com.servoy.j2db.util.ServoyException"><![CDATA[ServoyException exception or null when not available.]]></return>
          <description><![CDATA[Get the database exception if an error occurred.]]></description>
          <summary><![CDATA[Get the database exception if an error occurred.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var dbException = dataset.getException();]]></sample>
        </function>
        <function name="getExceptionMsg" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[returns the contents of the database error message if an error occurred]]></description>
          <summary><![CDATA[returns the contents of the database error message if an error occurred]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getMaxColumnIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int number of columns.]]></return>
          <description><![CDATA[Get the number of columns in the dataset.]]></description>
          <summary><![CDATA[Get the number of columns in the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
for (var i = 1; i <= dataset.getMaxColumnIndex(); i++)
{
	colArray[i-1] = dataset.getColumnName(i)
	//have to subtract 1, because an array is zero based and a dataset is 1 based.
}]]></sample>
        </function>
        <function name="getMaxRowIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int number of rows.]]></return>
          <description><![CDATA[Get the number of rows in the dataset.]]></description>
          <summary><![CDATA[Get the number of rows in the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var totalRows = dataset.getMaxRowIndex();]]></sample>
        </function>
        <function name="getRowAsArray">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[Object array of data.]]></return>
          <description><![CDATA[Get the row data of a dataset as an Array.]]></description>
          <summary><![CDATA[Get the row data of a dataset as an Array.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var dataArray = dataset.getRowAsArray(1); //puts the contents from the first row of the dataset into an array
//once you have it as an array you can loop through it]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of row (1-based).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValue">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[Object value]]></return>
          <description><![CDATA[Get the value specified by row and column position from the dataset.]]></description>
          <summary><![CDATA[Get the value specified by row and column position from the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var dataAtRow2Col1 = dataset.getValue(2, 1);]]></sample>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number, 1-based]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hadMoreData">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean more data available]]></return>
          <description><![CDATA[Return true if there is more data in the resultset then specified by maxReturnedRows at query time.]]></description>
          <summary><![CDATA[Return true if there is more data in the resultset then specified by maxReturnedRows at query time.]]></summary>
          <sample><![CDATA[var ds = databaseManager.getDataSetByQuery('example_data', 'select order_id from orders', null, 10000)
if (ds.hadMoreData())
{
	// handle large result
}]]></sample>
        </function>
        <function name="removeColumn">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded, else false.]]></return>
          <description><![CDATA[Remove a column by index from the dataset.]]></description>
          <summary><![CDATA[Remove a column by index from the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
var success = dataset.removeColumn(1); // removes first column]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of column to remove (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeRow">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Remove a row from the dataset.]]></description>
          <summary><![CDATA[Remove a row from the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
dataset.removeRow(1); //removes the first row
dataset.removeRow(-1); //removes all rows]]></sample>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row index to remove, -1 for all rows]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValue">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the value specified by row and column position from the dataset.
Use row = -1, to set columnnames.]]></description>
          <summary><![CDATA[Set the value specified by row and column position from the dataset.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
dataset.getValue(2, 1,'data');]]></sample>
          <parameters>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[row number, 1-based]]></description>
            </parameter>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
            <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to be stored at the given row and column.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sort">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sort the dataset on the given column in ascending or descending.]]></description>
          <summary><![CDATA[Sort the dataset on the given column in ascending or descending.]]></summary>
          <sample><![CDATA[//assuming the variable dataset contains a dataset
dataset.sort(1,false)]]></sample>
          <parameters>
            <parameter name="col" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[column number, 1-based]]></description>
            </parameter>
            <parameter name="sort_direction" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean true for ascending, false for descending]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sort">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sort the dataset using a comparator function.
The comparator function is called to compare
two rows, that are passed as arguments, and
it will return -1/0/1 if the first row is less/equal/greater
then the second row.]]></description>
          <summary><![CDATA[Sort the dataset using a comparator function.]]></summary>
          <sample><![CDATA[dataset.sort(mySortFunction);
 
function mySortFunction(r1, r2)
{
	var o = 0;
	if(r1[0] < r2[0])
	{
		o = -1;
	}
	else if(r1[0] > r2[0])
	{
		o = 1;
	}
	return o;
}]]></sample>
          <parameters>
            <parameter name="rowComparator" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[function used to compare two rows]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSEvent" qualifiedName="com.servoy.j2db.scripting.JSEvent">
      <constants>
        <constant name="ACTION">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onAction event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
   // its an action event.
}]]></sample>
        </constant>
        <constant name="DATACHANGE">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDataChange event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.DATACHANGE) 
{
   // its a data change event
}]]></sample>
        </constant>
        <constant name="DOUBLECLICK">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDoubleClick event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.DOUBLECLICK) 
{
   // its a double click event.
}]]></sample>
        </constant>
        <constant name="FOCUSGAINED">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusGained or the forms onElementFocusGained event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FOCUSGAINED) 
{
   // its a focus gained event.
}]]></sample>
        </constant>
        <constant name="FOCUSLOST">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onFocusLost or the forms onElementFocusLost event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FOCUSLOST) 
{
   // its a focus lost event.
}]]></sample>
        </constant>
        <constant name="FORM">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to a form event (like onShow) or command (like onDeleteRecord)]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.FORM) 
{
   // its a form event or command
}]]></sample>
        </constant>
        <constant name="MODIFIER_ALT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the ALT modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_CTRL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the CTRL modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_META">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the META modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the META modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="MODIFIER_SHIFT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.getModifiers();]]></description>
          <summary><![CDATA[Constant for the SHIFT modifier that can be returned by JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSEvent" member="getModifiers"/>
          </sees>
        </constant>
        <constant name="NONE">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() if the event is not used in a known event or command.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.NONE) 
{
   // type is not set.
}]]></sample>
        </constant>
        <constant name="ONDRAG">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDrag event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAG) 
{
   // its an ondrag event
   if (event.getElementName() == 'todragelement')
   	return DRAGNDROP.COPY
}]]></sample>
        </constant>
        <constant name="ONDRAGEND">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDragEnd event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAGEND) 
{
   // its an on drag end event.
   // return true if the drop has been completed successfully
   return event.isDropSuccess(); 
}]]></sample>
        </constant>
        <constant name="ONDRAGOVER">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDragOver event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDRAGOVER) 
{
   // its an on drag over event.
   // return true if it over the right element.
   return event.getElementName() == 'candroponelement';
}]]></sample>
        </constant>
        <constant name="ONDROP">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onDrop event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ONDROP) 
{
   // its a on drop event.
   var element = elements[event.getElementName()];
   // do drop on element
   return true;
}]]></sample>
        </constant>
        <constant name="RIGHTCLICK">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Constant returned by JSEvent.getType() in a method that is attached to an onRightClick event.]]></description>
          <summary><![CDATA[Constant returned by JSEvent.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.RIGHTCLICK) 
{
   // its a right click event.
}]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="data">
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></description>
          <summary><![CDATA[A data object that specific events can set, a user can set data back to the system for events that supports this.]]></summary>
          <sample><![CDATA[// A client design method that handles ondrag
if (event.getType() == JSEvent.ONDRAG)
{
     // the data is the selected elements array
     var elements = event.data;
     // only start a client design drag when there is 1 element
     if (elements.length == 1)
     {
     	return true;
     }
}

// code for a data drag method
event.data = "drag me!";
return DRAGNDROP.COPY;

// code for a data drop method
var data = event.data;
elemements[event.getElementName()].setText(data);
return true;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getElementName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the element name.]]></return>
          <description><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></description>
          <summary><![CDATA[returns the name of the element, can be null if the form was the source of the event.]]></summary>
          <sample><![CDATA[if (event.getElementName() == 'myElement')
{
    elements[event.getElementName()].bgcolor = '#ff0000';
}]]></sample>
        </function>
        <function name="getFormName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the form name.]]></return>
          <description><![CDATA[returns the name of the form the element was placed on.]]></description>
          <summary><![CDATA[returns the name of the form the element was placed on.]]></summary>
          <sample><![CDATA[forms[event.getFormName()].myFormMethod();]]></sample>
        </function>
        <function name="getModifiers">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int which holds the modifiers as a bitset.]]></return>
          <description><![CDATA[Returns the modifiers of the event, see JSEvent.MODIFIER_XXXX for the modifiers that can be returned.]]></description>
          <summary><![CDATA[Returns the modifiers of the event, see JSEvent.]]></summary>
          <sample><![CDATA[//test if the SHIFT modifier is used.
if (event.getModifiers() & JSEvent.MODIFIER_SHIFT)
{
	//do shift action
}]]></sample>
        </function>
        <function name="getSource">
          <argumentsTypes/>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[an Object representing the source of this event.]]></return>
          <description><![CDATA[returns the source component/element of the event.
If it has a name the getElementName() is the name of this component.]]></description>
          <summary><![CDATA[returns the source component/element of the event.]]></summary>
          <sample><![CDATA[var sourceDataProvider = event.getSource().getDataProviderID();]]></sample>
        </function>
        <function name="getTimestamp">
          <argumentsTypes/>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[a Date when this event happened.]]></return>
          <description><![CDATA[Returns the time the event occurred.]]></description>
          <summary><![CDATA[Returns the time the event occurred.]]></summary>
          <sample><![CDATA[event.getTimestamp();]]></sample>
        </function>
        <function name="getType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the type of this event.]]></return>
          <description><![CDATA[returns the event type see the JSEvents constants what it can return.
Plugins can create events with there own types.]]></description>
          <summary><![CDATA[returns the event type see the JSEvents constants what it can return.]]></summary>
          <sample><![CDATA[if (event.getType() == JSEvent.ACTION) 
{
   // its an action event.
}]]></sample>
        </function>
        <function name="getX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int representing the X position.]]></return>
          <description><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          <summary><![CDATA[Returns the x position of the event, relative to the component that fired it, if applicable.]]></summary>
          <sample><![CDATA[var x = event.getX();
var xPrevious = previousEvent.getX();
var movedXPixels = x -xPrevious;]]></sample>
        </function>
        <function name="getY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int representing the Y position.]]></return>
          <description><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.
For example drag'n'drop events will set the x,y positions.]]></description>
          <summary><![CDATA[Returns the y position of the event, relative to the component that fired it, if applicable.]]></summary>
          <sample><![CDATA[var y = event.getY();
var yPrevious = previousEvent.getY();
var movedYPixels = y -yPrevious;]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSField" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSField">
      <constants>
        <constant name="CALENDAR">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the 
field to calendar. The field will show a formatted date and will have a button which
pops up a calendar for date selection.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);]]></sample>
        </constant>
        <constant name="CHECKS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to checkbox. The field will show a checkbox, or a list of checkboxes if the valuelist
property is also set.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var chk = form.newField('my_table_options', JSField.CHECKS, 10, 40, 100, 50);
chk.valuelist = vlist;]]></sample>
        </constant>
        <constant name="COMBOBOX">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to combobox.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
        </constant>
        <constant name="HTML_AREA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to HTML area. The field will display formatted HTML content.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var html = form.newField('my_table_html', JSField.HTML_AREA, 10, 130, 100, 50);]]></sample>
        </constant>
        <constant name="IMAGE_MEDIA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to image. The field will display images.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var img = form.newField('my_table_image', JSField.IMAGE_MEDIA, 10, 190, 100, 50);]]></sample>
        </constant>
        <constant name="PASSWORD">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
fiels to password. The field will allow the user to enter passwords, masking the typed
characters.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var pwd = form.newField('my_table_text', JSField.PASSWORD, 10, 250, 100, 20);]]></sample>
        </constant>
        <constant name="RADIOS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to radio buttons. The field will show a radio button, or a list of them if 
the valuelist property is also set.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var radio = form.newField('my_table_options', JSField.RADIOS, 10, 280, 100, 50);
radio.valuelist = vlist;]]></sample>
        </constant>
        <constant name="RTF_AREA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the 
field to RTF area. The field will display formatted RTF content.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var rtf = form.newField('my_table_rtf', JSField.RTF_AREA, 10, 340, 100, 50);]]></sample>
        </constant>
        <constant name="TEXT_AREA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to text area. The field will show text on multiple lines.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var tarea = form.newField('my_table_text', JSField.TEXT_AREA, 10, 400, 100, 50);]]></sample>
        </constant>
        <constant name="TEXT_FIELD">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to text field. The field will show regular text on a single line.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var tfield = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 460, 100, 20);]]></sample>
        </constant>
        <constant name="TYPE_AHEAD">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for specifying the display type of a JSField. Sets the display type of the
field to type ahead. The field will show regular text, but will have type ahead 
capabilities.]]></description>
          <summary><![CDATA[Constant for specifying the display type of a JSField.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var tahead = form.newField('my_table_text', JSField.TYPE_AHEAD, 10, 490, 100, 20);
tahead.valuelist = vlist;]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="dataProviderID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The dataprovider of the component.]]></description>
          <summary><![CDATA[The dataprovider of the component.]]></summary>
          <sample><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
        </property>
        <property name="displayType">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The type of display used by the field. Can be one of CALENDAR, CHECKS,
COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA,
TEXT_FIELD or TYPE_AHEAD.]]></description>
          <summary><![CDATA[The type of display used by the field.]]></summary>
          <sample><![CDATA[// The display type is specified when the field is created.
var cal = form.newField('my_table_date', JSField.CALENDAR, 10, 10, 100, 20);
// But it can be changed if needed.
cal.dataProviderID = 'my_table_text';
cal.displayType = JSField.TEXT_FIELD;]]></sample>
        </property>
        <property name="displaysTags">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[The dataprovider of the component.]]></description>
          <summary><![CDATA[The dataprovider of the component.]]></summary>
          <sample><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the content of the field can be edited or not. 
The default value of this flag is "true", that is the content can be edited.]]></description>
          <summary><![CDATA[Flag that tells if the content of the field can be edited or not.]]></summary>
          <sample><![CDATA[var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.editable = false;]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="format">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The format that should be applied when displaying the data in the component.
Some examples are "#%", "dd-MM-yyyy", "MM-dd-yyyy", etc.]]></description>
          <summary><![CDATA[The format that should be applied when displaying the data in the component.]]></summary>
          <sample><![CDATA[var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.format = '$#.00';]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="horizontalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          <summary><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
        </property>
        <property name="margin">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, right, bottom, left.]]></description>
          <summary><![CDATA[The margins of the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="onAction">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onDataChange">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[Method that is executed when the data in the component is successfully changed.]]></description>
          <summary><![CDATA[Method that is executed when the data in the component is successfully changed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var onDataChangeMethod = form.newFormMethod('function onDataChange(oldValue, newValue, event) { application.output("Data changed from " + oldValue + " to " + newValue + " at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onDataChange = onDataChangeMethod;
forms['someForm'].controller.show();]]></sample>
        </property>
        <property name="onFocusGained">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component gains focus.
NOTE: Do not call methods that will influence the focus itself.]]></description>
          <summary><![CDATA[The method that is executed when the component gains focus.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var onFocusLostMethod = form.newFormMethod('function onFocusLost(event) { application.output("Focus lost at " + event.getTimestamp()); }');
var onFocusGainedMethod = form.newFormMethod('function onFocusGained(event) { application.output("Focus gained at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onFocusGained = onFocusGainedMethod;
field.onFocusLost = onFocusLostMethod;
forms['someForm'].controller.show()]]></sample>
        </property>
        <property name="onFocusLost">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component looses focus.]]></description>
          <summary><![CDATA[The method that is executed when the component looses focus.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var onFocusLostMethod = form.newFormMethod('function onFocusLost(event) { application.output("Focus lost at " + event.getTimestamp()); }');
var onFocusGainedMethod = form.newFormMethod('function onFocusGained(event) { application.output("Focus gained at " + event.getTimestamp()); }');
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.onFocusGained = onFocusGainedMethod;
field.onFocusLost = onFocusLostMethod;
forms['someForm'].controller.show()]]></sample>
        </property>
        <property name="onRightClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is right clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="scrollbars">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          <summary><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          <sample><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;
var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;
var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
        </property>
        <property name="selectOnEnter">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the content of the field should be automatically selected
when the field receives focus. The default value of this field is "false".]]></description>
          <summary><![CDATA[Flag that tells if the content of the field should be automatically selected
when the field receives focus.]]></summary>
          <sample><![CDATA[// Create two fields and set one of them to have "selectOnEnter" true. As you tab
// through the fields you can notice how the text inside the second field gets
// automatically selected when the field receives focus.
var fieldNoSelect = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldSelect = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
fieldSelect.selectOnEnter = true;]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="text" deprecated="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSField" member="getDataProviderID"/>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataProviderValue"/>
          </sees>
        </property>
        <property name="titleText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text that is displayed in the column header associated with the component when the form
is in table view.]]></description>
          <summary><![CDATA[The text that is displayed in the column header associated with the component when the form
is in table view.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'my_table', 'null', false, 640, 480);
var field = form.newField('my_table_number', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.titleText = 'Column Title';
form.view = JSForm.LOCKED_TABLE_VIEW;
forms['someForm'].controller.show()]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example: 
<html>This includes<b>bolded text</b> and 
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          <summary><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="valuelist">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList" type="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
          <description><![CDATA[The valuelist that is used by this field when displaying data. Can be used
with fields of type CHECKS, COMBOBOX, RADIOS and TYPE_AHEAD.]]></description>
          <summary><![CDATA[The valuelist that is used by this field when displaying data.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = form.newField('my_table_options', JSField.COMBOBOX, 10, 100, 100, 20);
cmb.valuelist = vlist;]]></sample>
        </property>
        <property name="verticalAlignment" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          <summary><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="setOnActionMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="setOnDataChangeMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSField" member="getOnDataChange"/>
          </sees>
        </function>
        <function name="setOnFocusGainedMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSField" member="getOnFocusGained"/>
          </sees>
        </function>
        <function name="setOnFocusLostMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSField" member="getOnFocusLost"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSForm" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSForm">
      <constants>
        <constant name="LIST_VIEW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          <summary><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          <sample><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myListViewForm.view = JSForm.LIST_VIEW;

	var myLockedListViewForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', 'myStyleName', false, 800, 600);	
	myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;
	
	var myLockedRecordViewForm = solutionModel.newForm('newForm3', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

	var myLockedTableViewForm = solutionModel.newForm('newForm4', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;
	
	var myRecordViewForm = solutionModel.newForm('newForm5', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
        </constant>
        <constant name="LOCKED_LIST_VIEW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          <summary><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          <sample><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myListViewForm.view = JSForm.LIST_VIEW;

	var myLockedListViewForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', 'myStyleName', false, 800, 600);	
	myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;
	
	var myLockedRecordViewForm = solutionModel.newForm('newForm3', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

	var myLockedTableViewForm = solutionModel.newForm('newForm4', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;
	
	var myRecordViewForm = solutionModel.newForm('newForm5', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
        </constant>
        <constant name="LOCKED_RECORD_VIEW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          <summary><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          <sample><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myListViewForm.view = JSForm.LIST_VIEW;

	var myLockedListViewForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', 'myStyleName', false, 800, 600);	
	myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;
	
	var myLockedRecordViewForm = solutionModel.newForm('newForm3', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

	var myLockedTableViewForm = solutionModel.newForm('newForm4', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;
	
	var myRecordViewForm = solutionModel.newForm('newForm5', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
        </constant>
        <constant name="LOCKED_TABLE_VIEW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          <summary><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          <sample><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myListViewForm.view = JSForm.LIST_VIEW;

	var myLockedListViewForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', 'myStyleName', false, 800, 600);	
	myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;
	
	var myLockedRecordViewForm = solutionModel.newForm('newForm3', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

	var myLockedTableViewForm = solutionModel.newForm('newForm4', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;
	
	var myRecordViewForm = solutionModel.newForm('newForm5', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
        </constant>
        <constant name="RECORD_VIEW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The constants to set or get the view property of a JSForm. 
They are as follows: JSForm.LIST_VIEW, JSForm.LOCKED_LIST_VIEW, JSForm.LOCKED_RECORD_VIEW, JSForm.LOCKED_TABLE_VIEW, JSForm.RECORD_VIEW.]]></description>
          <summary><![CDATA[The constants to set or get the view property of a JSForm.]]></summary>
          <sample><![CDATA[var myListViewForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myListViewForm.view = JSForm.LIST_VIEW;

	var myLockedListViewForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', 'myStyleName', false, 800, 600);	
	myLockedListViewForm.view = JSForm.LOCKED_LIST_VIEW;
	
	var myLockedRecordViewForm = solutionModel.newForm('newForm3', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedRecordViewForm.view = JSForm.LOCKED_RECORD_VIEW;

	var myLockedTableViewForm = solutionModel.newForm('newForm4', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myLockedTableViewForm.view = JSForm.LOCKED_TABLE_VIEW;
	
	var myRecordViewForm = solutionModel.newForm('newForm5', 'myServer', 'myTable', 'myStyleName', false, 800, 600);
	myRecordViewForm.view = JSForm.RECORD_VIEW;]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="dataSource">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The names of the database server and table that this form is linked to.]]></description>
          <summary><![CDATA[The names of the database server and table that this form is linked to.]]></summary>
          <sample><![CDATA[var myForm = solutionModel.newForm('newForm', 'aServer', 'aTable', 'aStyleName', false, 800, 600)
	myForm.dataSource = 'db:/anotherServerName/anotherTableName']]></sample>
        </property>
        <property name="defaultPageFormat">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The default page format for the form.]]></description>
          <summary><![CDATA[The default page format for the form.]]></summary>
          <sample><![CDATA[var form = solutionModel.getForm("someForm");
application.output(form.defaultPageFormat);
//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
//It follows this convention: 
//Orientation (0-Landscape,1-Portrait, 2-Reverse Landscape); Width; Height; ImageableX; ImageableY; ImageableWidth; ImageableHeight
form.defaultPageFormat = 1;612.0;792.0;72.0;72.0;468.0;648.0]]></sample>
        </property>
        <property name="extendsForm">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <description><![CDATA[A JSForm instance representing the super form of this form, if this form has a super form.]]></description>
          <summary><![CDATA[A JSForm instance representing the super form of this form, if this form has a super form.]]></summary>
          <sample><![CDATA[var subForm = solutionModel.newForm('childForm','myServer','myTable',null,true,800,600);
var superForm = solutionModel.newForm('childForm','myServer','myTable',null,true,800,600);
subForm.extendsForm = superForm;]]></sample>
        </property>
        <property name="height" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSPart" member="getHeight"/>
          </sees>
        </property>
        <property name="initialSort">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The default sort order only when the form loads.
This is applied each time an internal SQL query is being executed (find, find-all, open form); and is only executed when no other manual sort has been performed on the foundset.]]></description>
          <summary><![CDATA[The default sort order only when the form loads.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,800,600);
form.initialSort = "column1 desc, column2 asc, column3 asc";]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the form.]]></description>
          <summary><![CDATA[The name of the form.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,800,600);
var formName = form.name;
application.output(formName);]]></sample>
        </property>
        <property name="namedFoundSet">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that tells the form to use a named foundset instead of the default foundset.
When "separate" as special value is specified the form will always create a copy of assigned foundset and therefor become separated from other foundsets]]></description>
          <summary><![CDATA[Property that tells the form to use a named foundset instead of the default foundset.]]></summary>
          <sample><![CDATA[var firstForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var secondForm = solutionModel.newForm('newForm2', 'myServer', 'myTable', null, true, 800, 600);
	forms['newForm2'].controller.find()
	forms['newForm2'].columnTextDataProvider = '=aSearchValue';
	forms['newForm2'].controller.search()
	var myFoundSet = forms['newForm2'].foundset
	firstForm.namedFoundSet = myFoundSet;]]></sample>
        </property>
        <property name="navigator">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <description><![CDATA[The navigator (previously named "controller")
that is used to control/navigate to the form. The navigator is shown at
the left or at the right side of the form, depending on the page orientation. 

The following options are available: 
-none- - no navigator is assigned. 
DEFAULT - the Servoy default navigator is assigned. 
IGNORE - the navigator last assigned to a previous form. 
Custom - a custom navigator based on a selected form.]]></description>
          <summary><![CDATA[The navigator (previously named "controller")
that is used to control/navigate to the form.]]></summary>
          <sample><![CDATA[var aForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
 // you can also use SM_DEFAULTS.INGORE to just reuse the navigator that is already set, or SM_DEFAULTS.DEFAULT to have the default servoy navigator.
 // here we assign an other new form as the navigator.
	var aNavigator = solutionModel.newForm('navForm', 'myServer', 'myTable', null, false, 800, 600);
 // set the navigators navigator to NONE
	aNavigator.navigator = SM_DEFAULTS.NONE; // Hide the navigator on the form. 
	myListViewForm.navigator = aNavigator;
	application.output(myListViewForm.navigator.name);]]></sample>
        </property>
        <property name="onDeleteAllRecordsCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Delete All. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Delete All.]]></summary>
          <sample><![CDATA[form.onNewRecordCmd = form.newFormMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newFormMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newFormMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newFormMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onDeleteRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Delete Record (or keyboard shortcut). 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Delete Record (or keyboard shortcut).]]></summary>
          <sample><![CDATA[form.onNewRecordCmd = form.newFormMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newFormMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newFormMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newFormMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onDrag">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></description>
          <summary><![CDATA[The method that is triggered when (non Design Mode) dragging occurs.]]></summary>
          <sample><![CDATA[form.onDrag = form.newFormMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newFormMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newFormMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newFormMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onDragEnd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></description>
          <summary><![CDATA[The method that is triggered when (non Design Mode) dragging end occurs.]]></summary>
          <sample><![CDATA[form.onDrag = form.newFormMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newFormMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newFormMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newFormMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onDragOver">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></description>
          <summary><![CDATA[The method that is triggered when (non Design Mode) dragging over a component occurs.]]></summary>
          <sample><![CDATA[form.onDrag = form.newFormMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newFormMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newFormMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newFormMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onDrop">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></description>
          <summary><![CDATA[The method that is triggered when (non Design Mode) dropping occurs.]]></summary>
          <sample><![CDATA[form.onDrag = form.newFormMethod('function onDrag(event) { application.output("onDrag intercepted from " + event.getSource()); }');
form.onDragEnd = form.newFormMethod('function onDragEnd(event) { application.output("onDragEnd intercepted from " + event.getSource()); }');
form.onDragOver = form.newFormMethod('function onDragOver(event) { application.output("onDragOver intercepted from " + event.getSource()); }');
form.onDrop = form.newFormMethod('function onDrop(event) { application.output("onDrop intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onDuplicateRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Duplicate Record (or keyboard shortcut).
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Duplicate Record (or keyboard shortcut).]]></summary>
          <sample><![CDATA[form.onNewRecordCmd = form.newFormMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newFormMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newFormMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newFormMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onElementFocusGained">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when focus is gained by a component inside the form.]]></description>
          <summary><![CDATA[The method that is triggered when focus is gained by a component inside the form.]]></summary>
          <sample><![CDATA[form.onElementFocusGained = form.newFormMethod('function onElementFocusGained(event) { application.output("onElementFocusGained intercepted from " + event.getSource()); }');
form.onElementFocusLost = form.newFormMethod('function onElementFocusLost(event) { application.output("onElementFocusLost intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onElementFocusLost">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that gets triggered when focus is lost by a component inside the form.]]></description>
          <summary><![CDATA[The method that gets triggered when focus is lost by a component inside the form.]]></summary>
          <sample><![CDATA[form.onElementFocusGained = form.newFormMethod('function onElementFocusGained(event) { application.output("onElementFocusGained intercepted from " + event.getSource()); }');
form.onElementFocusLost = form.newFormMethod('function onElementFocusLost(event) { application.output("onElementFocusLost intercepted from " + event.getSource()); }');]]></sample>
        </property>
        <property name="onFindCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Find (or keyboard shortcut) in Data (ready) mode. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Find (or keyboard shortcut) in Data (ready) mode.]]></summary>
          <sample><![CDATA[form.onFindCmd = form.newFormMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newFormMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newFormMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onHide">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when another form is being activated. 
NOTE: If the onHide method returns false, the form can be prevented from hiding. 
For example, when using onHide with showFormInDialog, the form will not close by clicking the dialog close box (X).]]></description>
          <summary><![CDATA[The method that is triggered when another form is being activated.]]></summary>
          <sample><![CDATA[form.onShow = form.newFormMethod('function onShow(firstShow, event) { application.output("onShow intercepted on " + event.getFormName() + ". first show? " + firstShow); return false; }');
form.onHide = form.newFormMethod('function onHide(event) { application.output("onHide blocked on " + event.getFormName()); return false; }');]]></sample>
        </property>
        <property name="onInvertRecordsCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Invert Records. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Invert Records.]]></summary>
          <sample><![CDATA[form.onOmitRecordCmd = form.newFormMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newFormMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newFormMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onLoad">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when a form is loaded/reloaded from the repository; used to alter elements, set globals, hide toolbars, 
etc; onShow method can also be assigned.
NOTE: onShow should be used to access current foundset dataproviders; onLoad cannot be used because the foundset data is not loaded until after the form is loaded. 
Also calls to loadRecords() should be done in the onShow method and not in the onLoad method
If you call loadRecords() in the onShow method, you may want to set the namedFoundSet property of the form to 'empty' to prevent the first default form query.
NOTE: the onLoad event bubbles down, meaning that the onLoad is first fired on the parent then on a tab in a tabpanel (and in tab of that tab panels if you are 3 deep)]]></description>
          <summary><![CDATA[The method that is triggered when a form is loaded/reloaded from the repository; used to alter elements, set globals, hide toolbars, 
etc; onShow method can also be assigned.]]></summary>
          <sample><![CDATA[form.onLoad = form.newFormMethod('function onLoad(event) { application.output("onLoad intercepted on " + event.getFormName()); }');
form.onUnLoad = form.newFormMethod('function onUnLoad(event) { application.output("onUnLoad intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onNewRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > New Record (or keyboard shortcut). 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > New Record (or keyboard shortcut).]]></summary>
          <sample><![CDATA[form.onNewRecordCmd = form.newFormMethod('function onNewRecordCmd(event) { application.output("onNewRecordCmd intercepted on " + event.getFormName()); }');
form.onDuplicateRecordCmd = form.newFormMethod('function onDuplicateRecordCmd(event) { application.output("onDuplicateRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteRecordCmd = form.newFormMethod('function onDeleteRecordCmd(event) { application.output("onDeleteRecordCmd intercepted on " + event.getFormName()); }');
form.onDeleteAllRecordsCmd = form.newFormMethod('function onDeleteAllRecordsCmd(event) { application.output("onDeleteAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onNextRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Next Record. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Next Record.]]></summary>
          <sample><![CDATA[form.onPreviousRecordCmd = form.newFormMethod('function onPreviousRecordCmd(event) { application.output("onPreviousRecordCmd intercepted on " + event.getFormName()); }');
form.onNextRecordCmd = form.newFormMethod('function onNextRecordCmd(event) { application.output("onNextRecordCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onOmitRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Omit Record. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Omit Record.]]></summary>
          <sample><![CDATA[form.onOmitRecordCmd = form.newFormMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newFormMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newFormMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onPreviousRecordCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Previous Record. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Previous Record.]]></summary>
          <sample><![CDATA[form.onPreviousRecordCmd = form.newFormMethod('function onPreviousRecordCmd(event) { application.output("onPreviousRecordCmd intercepted on " + event.getFormName()); }');
form.onNextRecordCmd = form.newFormMethod('function onNextRecordCmd(event) { application.output("onNextRecordCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onPrintPreviewCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item File > Print Preview. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item File > Print Preview.]]></summary>
          <sample><![CDATA[form.onPrintPreviewCmd = form.newFormMethod('function onPrintPreviewCmd(event) { application.output("onPrintPreviewCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onRecordEditStart">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when a user clicks into a column on the form.
NOTE: There is a small "e" displayed in the lower left side of the Servoy Client screen in the status area at the bottom of the window when the record is being edited.]]></description>
          <summary><![CDATA[The method that is triggered when a user clicks into a column on the form.]]></summary>
          <sample><![CDATA[form.onRecordEditStart = form.newFormMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newFormMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newFormMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onRecordEditStop">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when a record is being saved. 
A record is saved when a user clicks out of it (for example on an empty part of the layout or to another form); can return false (for example as part of a validation) where a condition must be changed to return true. 
NOTE: The name of this property has been changed from onRecordSave.]]></description>
          <summary><![CDATA[The method that is triggered when a record is being saved.]]></summary>
          <sample><![CDATA[form.onRecordEditStart = form.newFormMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newFormMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newFormMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onRecordSelection">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered each time a record is selected. 
If a form is in List view or Special table view - when the user clicks on it.
In Record view - after the user navigates to another record using the slider or clicks up or down for next/previous record. 
NOTE: Data and Servoy tag values are returned when the onRecordSelection method is executed.]]></description>
          <summary><![CDATA[The method that is triggered each time a record is selected.]]></summary>
          <sample><![CDATA[form.onRecordEditStart = form.newFormMethod('function onRecordEditStart(event) { application.output("onRecordEditStart intercepted on " + event.getFormName()); }');
form.onRecordEditStop = form.newFormMethod('function onRecordEditStop(record, event) { application.output("onRecordEditStop intercepted on " + event.getFormName() + ". record is: " + record); }');
form.onRecordSelection = form.newFormMethod('function onRecordSelection(event) { application.output("onRecordSelection intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onResize">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that gets triggered when resize occurs.]]></description>
          <summary><![CDATA[The method that gets triggered when resize occurs.]]></summary>
          <sample><![CDATA[form.onResize = form.newFormMethod('function onResize(event) { application.output("onResize intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onSearchCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Search (or keyboard shortcut) in Find mode. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Search (or keyboard shortcut) in Find mode.]]></summary>
          <sample><![CDATA[form.onFindCmd = form.newFormMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newFormMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newFormMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onShow">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered EVERY TIME the form is displayed; an argument must be passed to the method if this is the first time the form is displayed. 

NOTE: onShow can be used to access current foundset dataproviders; onLoad cannot be used because the foundset data is not loaded until after the form is loaded. 

NOTE: the onShow event bubbles down, meaning that the onShow event of a form displayed in a tabPanel is fired after the onShow event of the parent.]]></description>
          <summary><![CDATA[The method that is triggered EVERY TIME the form is displayed; an argument must be passed to the method if this is the first time the form is displayed.]]></summary>
          <sample><![CDATA[form.onShow = form.newFormMethod('function onShow(firstShow, event) { application.output("onShow intercepted on " + event.getFormName() + ". first show? " + firstShow); return false; }');
form.onHide = form.newFormMethod('function onHide(event) { application.output("onHide blocked on " + event.getFormName()); return false; }');]]></sample>
        </property>
        <property name="onShowAllRecordsCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Show All (or keyboard shortcut). 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Show All (or keyboard shortcut).]]></summary>
          <sample><![CDATA[form.onFindCmd = form.newFormMethod('function onFindCmd(event) { application.output("onFindCmd intercepted on " + event.getFormName()); }');
form.onSearchCmd = form.newFormMethod('function onSearchCmd(event) { application.output("onSearchCmd intercepted on " + event.getFormName()); }');
form.onShowAllRecordsCmd = form.newFormMethod('function onShowAllRecordsCmd(event) { application.output("onShowAllRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onShowOmittedRecordsCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Show Omitted Records. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Show Omitted Records.]]></summary>
          <sample><![CDATA[form.onOmitRecordCmd = form.newFormMethod('function onOmitRecordCmd(event) { application.output("onOmitRecordCmd intercepted on " + event.getFormName()); }');
form.onShowOmittedRecordsCmd = form.newFormMethod('function onShowOmittedRecordsCmd(event) { application.output("onShowOmittedRecordsCmd intercepted on " + event.getFormName()); }');
form.onInvertRecordsCmd = form.newFormMethod('function onInvertRecordsCmd(event) { application.output("onInvertRecordsCmd intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="onSortCmd">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that overrides the Servoy menu item Select > Sort. 
This property is automatically set to "DEFAULT" (no override) when the form is created.]]></description>
          <summary><![CDATA[The method that overrides the Servoy menu item Select > Sort.]]></summary>
          <sample><![CDATA[form.onSortCmd = form.newFormMethod('function onSortCmd(dataProviderID, asc, event) { application.output("onSortCmd intercepted on " + event.getFormName() + ". data provider: " + dataProviderID + ". asc: " + asc); }');]]></sample>
        </property>
        <property name="onUnLoad">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is triggered when a form is unloaded from the repository. 
NOTE: Forms can be prevented from being removed from memory by referencing the form object in a global variable or inside an array inside a global variable. Do take care using this technique.
Forms take up memory and if too many forms are in memory and cannot be unloaded, there is a possibility of running out of memory.]]></description>
          <summary><![CDATA[The method that is triggered when a form is unloaded from the repository.]]></summary>
          <sample><![CDATA[form.onLoad = form.newFormMethod('function onLoad(event) { application.output("onLoad intercepted on " + event.getFormName()); }');
form.onUnLoad = form.newFormMethod('function onUnLoad(event) { application.output("onUnLoad intercepted on " + event.getFormName()); }');]]></sample>
        </property>
        <property name="paperPrintScale">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The percentage value the printed page is enlarged or reduced to; the size of the printed form 
is inversely proportional. For example, if the paperPrintScale is 50, the printed form will be 
enlarged 200%.]]></description>
          <summary><![CDATA[The percentage value the printed page is enlarged or reduced to; the size of the printed form 
is inversely proportional.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,800,600);
if (form.paperPrintScale < 100)
	form.paperPrintScale = 100;]]></sample>
        </property>
        <property name="rowBGColorCalculation">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The calculation dataprovider used to add background color and highlight selected or alternate rows. 
The default is -none-.]]></description>
          <summary><![CDATA[The calculation dataprovider used to add background color and highlight selected or alternate rows.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,800,600);
//assign the global method as a string. Or use a calculation name as the string.
form.rowBGColorCalculation = "globals.calculationDataProvider";]]></sample>
        </property>
        <property name="scrollbars">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          <summary><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,1000,600);
form.scrollbars = SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER; 
forms['newForm1'].controller.show();]]></sample>
        </property>
        <property name="serverName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get the server name used by this form.]]></description>
          <summary><![CDATA[Get the server name used by this form.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,800,600);
form.serverName = 'anotherServerName';
var theServerName = form.getServerName();
application.output(theServerName);]]></sample>
        </property>
        <property name="showInMenu">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the form is displayed under the Window menu. 
If it is not set, the form will be 'hidden'. 
NOTE: This is only applicable for Servoy Client. Servoy Developer always shows all forms so that
developers have access to all forms within a solution during development.]]></description>
          <summary><![CDATA[When set, the form is displayed under the Window menu.]]></summary>
          <sample><![CDATA[var aForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var anotherForm= solutionModel.newForm('newForm2', 'myServer', 'myTable', null, true, 800, 600);
	//using 'anotherForm' as navigator for aForm
	anotherForm.showInMenu = false;
	anotherForm.navigator = null;
	aForm.navigator = anotherForm;
	application.output(aForm.navigator.name);]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The Cascading Style Sheet (CSS) class name applied to the form.]]></description>
          <summary><![CDATA[The Cascading Style Sheet (CSS) class name applied to the form.]]></summary>
          <sample><![CDATA[var aForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
if (aForm.styleClass == null)
	aForm.styleClass = someStyleClass;
else
	application.output("The Cascading Style Sheet (CSS) class name applied to this form is " + aForm.styleClass);]]></sample>
        </property>
        <property name="styleName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the Servoy style that is being used on the form.]]></description>
          <summary><![CDATA[The name of the Servoy style that is being used on the form.]]></summary>
          <sample><![CDATA[var aForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
if (aForm.styleName == null)
	aForm.styleName = someServoyStyleName;
else
	application.output("The name of the Servoy style that is being used on the form is " + aForm.styleName);]]></sample>
        </property>
        <property name="tableName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The [name of the table/SQL view].[the name of the database server connection] the form is based on.]]></description>
          <summary><![CDATA[The [name of the table/SQL view].]]></summary>
          <sample><![CDATA[var aForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	aForm.tableName = 'anotherTableOfMine'
	if (forms['newForm1'].controller.find())
	{
		columnTextDataProvider = '=aSearchedValue'
		columnNumberDataProvider = '>10';
		forms['newForm1'].controller.search()
	}]]></sample>
        </property>
        <property name="titleText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text that displays in the title bar of the form window. 
NOTE: Data tags and Servoy tags can be used as part of the title text.]]></description>
          <summary><![CDATA[The text that displays in the title bar of the form window.]]></summary>
          <sample><![CDATA[var myForm = solutionModel.newForm('newForm', 'aServer', 'aTable', 'aStyleName', false, 800, 600)
forms['newForm'].controller.show();
if (myForm.titleText == null)
{
	myForm.titleText = "My new title text should be really cool!"
	forms['newForm'].controller.recreateUI();
}
else
	application.output("My text text is already cool");]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the form is transparent.]]></description>
          <summary><![CDATA[When set, the form is transparent.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,1000,800);
	if (form.transparent == false)
	{
		var style = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
		style.text = style.text + 'field { background-color: blue; }';
		form.styleName = 'myStyle';
	}
	var field = form.newField('columnTextDataProvider',JSField.TEXT_FIELD,100,100,100,50);
	forms['myForm'].controller.show();]]></sample>
        </property>
        <property name="useSeparateFoundSet" deprecated="true">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getNamedFoundSet"/>
          </sees>
        </property>
        <property name="view">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The default form view mode. 

The view can be changed using a method at runtime. The following views are available: 
- Record view 
- List view 
- Record view (locked) 
- List view (locked) 
- Table View (locked) 

NOTE: Only Table View (locked) uses asynchronized related data loading. 
This feature defers all related foundset data loading to the background - enhancing 
the visual display of a related foundset.]]></description>
          <summary><![CDATA[The default form view mode.]]></summary>
          <sample><![CDATA[var myForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
myForm.view = JSForm.RECORD_VIEW;
forms['newForm1'].controller.show();]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width of the form in pixels.]]></description>
          <summary><![CDATA[The width of the form in pixels.]]></summary>
          <sample><![CDATA[var myForm = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	forms['newForm1'].controller.show();
	myForm.width = 120;
 forms['newForm1'].controller.recreateUI();]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getBodyPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Body part of the form.]]></return>
          <description><![CDATA[Retrieves the Body part of the form.]]></description>
          <summary><![CDATA[Retrieves the Body part of the form.]]></summary>
          <sample><![CDATA[form.getBodyPart().background = 'blue';]]></sample>
        </function>
        <function name="getButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSButton" type="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a JSButton object]]></return>
          <description><![CDATA[Returns a JSButton that has the given name.]]></description>
          <summary><![CDATA[Returns a JSButton that has the given name.]]></summary>
          <sample><![CDATA[var btn = myForm.getButton("hello");
application.output(btn.text);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the button]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getButtons">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;" type="com.servoy.j2db.scripting.solutionmodel.JSButton[]"><![CDATA[the list of all JSbuttons on this forms]]></return>
          <description><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></description>
          <summary><![CDATA[Returns all JSButtons of this form, including the ones without a name.]]></summary>
          <sample><![CDATA[var buttons = myForm.getButtons();
for (var b in buttons)
{
		if (buttons[b].name != null) 
			application.output(buttons[b].name);
		else
			application.output(buttons[b].text + " has no name ");
}]]></sample>
        </function>
        <function name="getComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent" type="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[a JSComponent object (might be a JSField, JSLabel, JSButton, JSPortal or JSTabPanel)]]></return>
          <description><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal or JSTabPanel.]]></description>
          <summary><![CDATA[Returns a JSComponent that has the given name; if found it will be a JSField, JSLabel, JSButton, JSPortal or JSTabPanel.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var cmp = frm.getComponent("componentName");
	application.output("Component type and name: " + cmp);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getComponents">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSComponent;" type="com.servoy.j2db.scripting.solutionmodel.JSComponent[]"><![CDATA[an array of all the JSComponents on the form.]]></return>
          <description><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal or JSTabPanel.]]></description>
          <summary><![CDATA[Returns a array of all the JSComponents that a form has; they are of type JSField,JSLabel,JSButton,JSPortal or JSTabPanel.]]></summary>
          <sample><![CDATA[var form = solutionModel.getForm("myForm");
	var components = form.getComponents();
	for (var i in components)
		application.output("Component type and name: " + components[i]);]]></sample>
        </function>
        <function name="getField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object]]></return>
          <description><![CDATA[The field with the specified name.]]></description>
          <summary><![CDATA[The field with the specified name.]]></summary>
          <sample><![CDATA[var form = solutionModel.getForm("myForm");
	var field = form.getField("myField");
	application.output(field.dataProviderID);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the field]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFields">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;" type="com.servoy.j2db.scripting.solutionmodel.JSField[]"><![CDATA[all JSField objects of this form]]></return>
          <description><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></description>
          <summary><![CDATA[Returns all JSField objects of this form, including the ones without a name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var fields = frm.getFields();
	for (var f in fields)
	{
		var fname = fields[f].name;
		if (fname != null)
			application.output(fname);
	}]]></sample>
        </function>
        <function name="getFooterPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Footer part of the form.]]></return>
          <description><![CDATA[Retrieves the Footer part of the form.]]></description>
          <summary><![CDATA[Retrieves the Footer part of the form.]]></summary>
          <sample><![CDATA[form.getFooterPart().background = 'magenta';]]></sample>
        </function>
        <function name="getFormMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod object (or null if the method with the specified name does not exist)]]></return>
          <description><![CDATA[Gets an existing form method for the given name.]]></description>
          <summary><![CDATA[Gets an existing form method for the given name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var method = frm.getFormMethod("myMethod");
	application.output(method.code);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFormMethods">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;" type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]"><![CDATA[all form methods for the form]]></return>
          <description><![CDATA[Returns all existing form methods for this form.]]></description>
          <summary><![CDATA[Returns all existing form methods for this form.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var methods = frm.getFormMethods();
	for (var m in methods)
		application.output(methods[m].getName());]]></sample>
        </function>
        <function name="getFormVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable" type="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <description><![CDATA[Gets an existing form variable for the given name.]]></description>
          <summary><![CDATA[Gets an existing form variable for the given name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var fvariable = frm.getFormVariable("myVarName");
	application.output(fvariable.name + " has the default value of " + fvariable.defaultValue);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFormVariables">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;" type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]"><![CDATA[an array of all variables on this form]]></return>
          <description><![CDATA[An array consisting of all form variables for this form.]]></description>
          <summary><![CDATA[An array consisting of all form variables for this form.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var variables = frm.getFormVariables();
	for (var i in variables)
		application.output(variables[i].name);]]></sample>
        </function>
        <function name="getHeaderPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Header part of the form.]]></return>
          <description><![CDATA[Retrieves the Header part of the form.]]></description>
          <summary><![CDATA[Retrieves the Header part of the form.]]></summary>
          <sample><![CDATA[form.getHeaderPart().background = 'orange';]]></sample>
        </function>
        <function name="getLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object (or null if the label with the specified name does not exist)]]></return>
          <description><![CDATA[Returns a JSLabel that has the given name.]]></description>
          <summary><![CDATA[Returns a JSLabel that has the given name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var label = frm.getLabel("myLabel");
	application.output(label.text);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the label]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getLabels">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;" type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]"><![CDATA[all JSLabels on this form]]></return>
          <description><![CDATA[Returns all JSLabels of this form, including the ones without a name.]]></description>
          <summary><![CDATA[Returns all JSLabels of this form, including the ones without a name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var labels = frm.getLabels();
	for (var i in labels)
	{
		var lname = labels[i].name;
		if (lname != null)
			application.output(lname);
	}]]></sample>
        </function>
        <function name="getLeadingGrandSummaryPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Leading Grand Summary part of the form.]]></return>
          <description><![CDATA[Retrieves the Leading Grand Summary part of the form.]]></description>
          <summary><![CDATA[Retrieves the Leading Grand Summary part of the form.]]></summary>
          <sample><![CDATA[form.getLeadingGrandSummaryPart().background = 'yellow';]]></sample>
        </function>
        <function name="getLeadingSubSummaryPart" deprecated="true">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getLeadingSubSummaryParts"/>
          </sees>
        </function>
        <function name="getLeadingSubSummaryParts">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;" type="com.servoy.j2db.scripting.solutionmodel.JSPart[]"><![CDATA[An array of JSPart instances corresponding to the Leading Subsummary parts of the form.]]></return>
          <description><![CDATA[Gets an array of the Leading Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></description>
          <summary><![CDATA[Gets an array of the Leading Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></summary>
          <sample><![CDATA[form.getLeadingSubSummaryParts()[0].background = 'green';]]></sample>
        </function>
        <function name="getPart" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance representing the retrieved form part.]]></return>
          <description><![CDATA[Gets a part of the form from the given type (see JSPart constants). 
Use the optional height if you want to get a specific LEADING_SUBSUMMARY or TRAILING_SUBSUMMARY.]]></description>
          <summary><![CDATA[Gets a part of the form from the given type (see JSPart constants).]]></summary>
          <sample><![CDATA[form.getPart(JSPart.HEADER).background = 'red';
form.getPart(JSPart.LEADING_SUBSUMMARY, 160).background = 'red';]]></sample>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part to retrieve.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int" optional="true">
              <description><![CDATA[The heigh of the part to retrieve. Use this parameter when retrieving one of multiple
 	                      Leading/Trailing Subsummary parts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getPartYOffset" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getPartYOffset">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[A number holding the Y offset of the specified form part.]]></return>
          <description><![CDATA[Returns the Y offset of a given part (see JSPart) of the form. This will include 
all the super forms parts if this form extends a form. Use the optional height for 
targetting one of multiple subsummary parts.]]></description>
          <summary><![CDATA[Returns the Y offset of a given part (see JSPart) of the form.]]></summary>
          <sample><![CDATA[// get the subform
var form = solutionModel.getForm('SubForm');
// get the start offset of the body
var height = form.getPartYOffset(JSPart.BODY);
// place a new button based on the start offset.
form.newButton('mybutton',50,50+height,80,20,solutionModel.getGlobalMethod('test'));]]></sample>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose Y offset will be returned.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int" optional="true">
              <description><![CDATA[The height of the part whose Y offset will be returned. This is used when
                        one of multiple Leading/Trailing Sumsummary parts is retrieved.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getParts">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;" type="com.servoy.j2db.scripting.solutionmodel.JSPart[]"><![CDATA[An array of JSPart instances corresponding to the parts of the form.]]></return>
          <description><![CDATA[Gets all the parts from the form, ordered by there height (lowerbound) property, from top == 0 to bottom.]]></description>
          <summary><![CDATA[Gets all the parts from the form, ordered by there height (lowerbound) property, from top == 0 to bottom.]]></summary>
          <sample><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
        </function>
        <function name="getPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal" type="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <description><![CDATA[Returns a JSPortal that has the given name.]]></description>
          <summary><![CDATA[Returns a JSPortal that has the given name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var portal = frm.getPortal("myPortal");
 portal.initialSort = 'my_table_text desc';]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the portal]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getPortals">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPortal;" type="com.servoy.j2db.scripting.solutionmodel.JSPortal[]"><![CDATA[an array of all JSPortal objects on this form]]></return>
          <description><![CDATA[Returns all JSPortal objects of this form, including the ones without a name.]]></description>
          <summary><![CDATA[Returns all JSPortal objects of this form, including the ones without a name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var portals = frm.getPortals();
	for (var i in portals)
	{
		var p = portals[i];
		if (p.name != null)
			application.output(p.name);
		else
			application.output("unnamed portal detected");
	}]]></sample>
        </function>
        <function name="getTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <description><![CDATA[Returns a JSTabPanel that has the given name.]]></description>
          <summary><![CDATA[Returns a JSTabPanel that has the given name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var tabPanel = frm.getTabPanel("myTabPanel"); 
	var tabs = tabPanel.getTabs(); 
	for (var i=0; i<tabs.length; i++) 
		application.output("Tab " + i + " has text " + tabs[i].text);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the tabpanel]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabPanels">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTabPanel;" type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel[]"><![CDATA[an array of all JSTabPanel objects on this form]]></return>
          <description><![CDATA[Returns all JSTabPanels of this form, including the ones without a name.]]></description>
          <summary><![CDATA[Returns all JSTabPanels of this form, including the ones without a name.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var tabPanels = frm.getTabPanels();
	for (var i in tabPanels)
	{
		var tp = tabPanels[i];
		if (tp.name != null)
			application.output("Tab " + tp.name + " has text " + tp.text);
		else
			application.output("Tab with text " + tp.text + " has no name");
	}]]></sample>
        </function>
        <function name="getTitleFooterPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Title Footer part of the form.]]></return>
          <description><![CDATA[Retrieves the Title Footer part of the form.]]></description>
          <summary><![CDATA[Retrieves the Title Footer part of the form.]]></summary>
          <sample><![CDATA[form.getTitleFooterPart().background = 'gray';]]></sample>
        </function>
        <function name="getTitleHeaderPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Title Header part of the form.]]></return>
          <description><![CDATA[Retrieves the Title Header part of the form.]]></description>
          <summary><![CDATA[Retrieves the Title Header part of the form.]]></summary>
          <sample><![CDATA[form.getTitleHeaderPart().background = 'red';]]></sample>
        </function>
        <function name="getTrailingGrandSummaryPart">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the Trailing Grand Summary part of the form.]]></return>
          <description><![CDATA[Retrieves the Trailing Grand Summary part of the form.]]></description>
          <summary><![CDATA[Retrieves the Trailing Grand Summary part of the form.]]></summary>
          <sample><![CDATA[form.getTrailingGrandSummaryPart().background = 'yellow';]]></sample>
        </function>
        <function name="getTrailingSubSummaryPart" deprecated="true">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getTrailingSubSummaryParts"/>
          </sees>
        </function>
        <function name="getTrailingSubSummaryParts">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSPart;" type="com.servoy.j2db.scripting.solutionmodel.JSPart[]"><![CDATA[An array of JSPart instances corresponding to the Trailing Subsummary parts of the form.]]></return>
          <description><![CDATA[Gets an array of the Trailing Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></description>
          <summary><![CDATA[Gets an array of the Trailing Subsummary parts of the form, ordered by their height from top == 0 to bottom.]]></summary>
          <sample><![CDATA[form.getTrailingSubSummaryParts()[0].background = 'green';]]></sample>
        </function>
        <function name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSButton" type="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[a new JSButton object]]></return>
          <description><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></description>
          <summary><![CDATA[Creates a new button on the form with the given text, place, size and JSMethod as the onAction event triggered action.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var method = solutionModel.newFormMethod('function onAction(event) { application.output("onAction intercepted on " + event.getFormName()); }');
	var button = solutionModel.newButton('myButton', 10, 10, 100, 30, method);
	application.output("The new button: " + button.name + " has the following onAction event handling method assigned " + button.onAction.getName());]]></sample>
          <parameters>
            <parameter name="text">
              <description><![CDATA[the text on the button]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y coordinate of the button location on the form]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the button]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the button]]></description>
            </parameter>
            <parameter name="jsmethod">
              <description><![CDATA[the method assigned to handle an onAction event]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CALENDAR]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of CALENDAR - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var calendar = form.newCalendar(myDataProvider, 100, 100, 200, 200);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of CHECK (checkbox)]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of CHECK (checkbox) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var calendar = form.newCheck(myDataProvider, 100, 100, 200, 200);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newComboBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of COMBOBOX]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of COMBOBOX - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var calendar = form.newComboBox(myDataProvider, 100, 100, 200, 200);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object (of the specified display type)]]></return>
          <description><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var variable = form.newFormVariable('myVar', JSVariable.TEXT);
	variable.defaultValue = "'This is a default value (with tripple quotes)!'";
	var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="displaytype">
              <description><![CDATA[the display type of the JSField object (see the Solution Model -> JSField node for display types)]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newFooterPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Footer form part.]]></return>
          <description><![CDATA[Creates a new Footer part on the form.]]></description>
          <summary><![CDATA[Creates a new Footer part on the form.]]></summary>
          <sample><![CDATA[var footer = form.newFooterPart(440);]]></sample>
        </function>
        <function name="newFormMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a new JSMethod object for this form]]></return>
          <description><![CDATA[Creates a new form JSMethod - based on the specified code.]]></description>
          <summary><![CDATA[Creates a new form JSMethod - based on the specified code.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var method = form.newFormMethod('function aMethod(event){application.output("Hello world!");}');
	var button = myListViewForm.newButton('Show message!',50,50,100,30,method);
 forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified code for the new method]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newFormVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable" type="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <description><![CDATA[Creates a new form JSVariable - based on the name of the variable object and the number type, uses the SolutionModel JSVariable constants.]]></description>
          <summary><![CDATA[Creates a new form JSVariable - based on the name of the variable object and the number type, uses the SolutionModel JSVariable constants.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var variable = form.newFormVariable('myVar', JSVariable.TEXT);
	variable.defaultValue = "'This is a default value (with tripple quotes)!'";
	var field = form.newField(variable, JSField.TEXT_FIELD, 100, 100, 200, 200);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the variable]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified type of the variable (see Solution Model -> JSVariable node constants)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newHeaderPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Header form part.]]></return>
          <description><![CDATA[Creates a new Header part on the form.]]></description>
          <summary><![CDATA[Creates a new Header part on the form.]]></summary>
          <sample><![CDATA[var header = form.newHeaderPart(80);]]></sample>
        </function>
        <function name="newHtmlArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object on the form with the displayType of HTML_AREA]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of HTML_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var textProvider = form.newFormVariable('myVar',JSVariable.TEXT);
	textProvider.defaultValue = "'This is a tripple quotted text!'";
	var htmlArea = myListViewForm.newHtmlArea(textProvider,100,100,100,100);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newImageMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of IMAGE_MEDIA]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of IMAGE_MEDIA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
 var myMediaVar = form.newFormVariable("media", JSVariable.MEDIA);
 var imageMedia = form.newImageMedia(myMediaVar,100,100,200,200)
 forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newLabel" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"/>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[a JSLabel object]]></return>
          <description><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and the optional JSMethod action such as the method for an onAction event.]]></description>
          <summary><![CDATA[Creates a new JSLabel object on the form - including the text of the label, the "x" and "y" position of the label object in pixels, the width and height of the label object in pixels and the optional JSMethod action such as the method for an onAction event.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var label = form.newLabel('The text on the label', 140, 140, 50, 20);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="text">
              <description><![CDATA[the specified text of the label object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the label object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the label object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the label object in pixels]]></description>
            </parameter>
            <parameter name="jsmethod" optional="true">
              <description><![CDATA[the event action JSMethod of the label object]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newLeadingGrandSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Leading Grand Summary form part.]]></return>
          <description><![CDATA[Creates a new Leading Grand Summary part on the form.]]></description>
          <summary><![CDATA[Creates a new Leading Grand Summary part on the form.]]></summary>
          <sample><![CDATA[var leadingGrandSummary = form.newLeadingGrandSummaryPart(120);]]></sample>
        </function>
        <function name="newLeadingSubSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Leading Subsummary form part.]]></return>
          <description><![CDATA[Creates a new Leading Subsummary part on the form.]]></description>
          <summary><![CDATA[Creates a new Leading Subsummary part on the form.]]></summary>
          <sample><![CDATA[var leadingSubsummary = form.newLeadingSubSummaryPart(160);]]></sample>
        </function>
        <function name="newPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created form part.]]></return>
          <description><![CDATA[Creates a new part on the form. The type of the new part (use one of the JSPart constants)
and its height must be specified.]]></description>
          <summary><![CDATA[Creates a new part on the form.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm', 'example_data', 'my_table', null, false, 1200, 800);
var header = form.newPart(JSPart.HEADER, 100);
header.background = 'yellow';
var body = form.newPart(JSPart.BODY, 700);
body.background = 'green';
var footer = form.newPart(JSPart.FOOTER, 800);
footer.background = 'orange';]]></sample>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the new part.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the new part]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a new JSField object on the form with the displayType of PASSWORD]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of PASSWORD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
 var pass = form.newPassword(globals.aVariable, 100, 100, 70, 30);
 forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newPortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPortal" type="com.servoy.j2db.scripting.solutionmodel.JSPortal"><![CDATA[a JSPortal object]]></return>
          <description><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSPortal object on the form - including the name of the JSPortal object; the relation the JSPortal object is based on, the "x" and "y" position of the JSPortal object in pixels, as well as the width and height of the JSPortal object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'server1', 'table1', null, true, 800, 600);
	var relation = solutionModel.newRelation('parentToChild','server1','table1','server2','table2',JSRelation.INNER_JOIN);
	relation.newRelationItem('another_parent_table_id', '=', 'another_child_table_parent_id');
	var portal = form.newPortal('portal',relation,200,200,300,300);
	portal.newField('someColumn',JSField.TEXT_FIELD,200,200,120);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal object]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the relation of the JSPortal object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSPortal object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSPortal object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RADIOS (radio buttons)]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of RADIOS (radio buttons) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1', 'myServer', 'myTable', null, true, 800, 600);
	var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES); 
	vlist.customValues = "value1\nvalue2\nvalue3"; 
	var radios = form.newRadios('columnDataProvider',100,100,200,200);
	radios.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRtfArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of RTF_AREA]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of RTF_AREA (enables more than one line of text to be displayed in a field) - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1','myServer','myTable',null,true,800,600);
	var rtf_area = form.newRtfArea('columnDataProvider',100,100,100,100);
 forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" type="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"><![CDATA[a JSTabPanel object]]></return>
          <description><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSTabPanel object on the form - including the name of the JSTabPanel object, the "x" and "y" position of the JSTabPanel object in pixels, as well as the width and height of the JSTabPanel object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('parentForm','theServer','parent_table',null,false,640,480); 
	var childOne = solutionModel.newForm('childOne','theServer','child_table',null,false,400,300);
	childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20); 
	var parentToChild = solutionModel.newRelation('parentToChild','theServer','parent_table','theServer','child_table',JSRelation.INNER_JOIN);
	parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
	var childTwo = solutionModel.newForm('childTwo','theServer','my_table',null,false,400,300);
	childTwo.newField('my_table_image', JSField.IMAGE_MEDIA,10,10,100,100); 
 var tabPanel = form.newTabPanel('tabs',10,10,620,460);
 tabPanel.newTab('tab1','Child One',childOne,parentToChild);
 tabPanel.newTab('tab2','Child Two',childTwo);
 forms['parentForm'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_AREA]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_AREA - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1','myServer','myTable',null,true,800,600);
	var globalVar = solutionModel.newGlobalVariable('myGlobal',JSVariable.TEXT);
	globalVar.defaultValue = "'Type your text in here'";
	var textArea = form.newTextArea(globalVar,100,100,300,150);
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSTabPanel object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSTabPanel object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TEXT_FIELD]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of TEXT_FIELD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1','myServer','myTable',null,true,800,600); 
	//choose the dataprovider or jsvariable you want for the Text Field
	var x = null;
	//global jsvariable as the dataprovider 
 //x = solutionModel.newGlobalVariable('myGlobal',JSVariable.TEXT);
	//x.defaultValue = "'Text from a global variable'";
	//or a form jsvariable as the dataprovider 
	//x = form.newFormVariable('myFormVar',JSVariable.TEXT);
	//x.defaultValue = "'Text from a form variable'";
	var textField = form.newTextField(x,100,100,200,50);
	//or a column data provider as the dataprovider
	//textField.dataProviderID = columnTextDataProvider;
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTitleFooterPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Title Footer form part.]]></return>
          <description><![CDATA[Creates a new Title Footer part on the form.]]></description>
          <summary><![CDATA[Creates a new Title Footer part on the form.]]></summary>
          <sample><![CDATA[var titleFooter = form.newTitleFooterPart(500);]]></sample>
        </function>
        <function name="newTitleHeaderPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Title Header form part.]]></return>
          <description><![CDATA[Creates a new Title Header part on the form.]]></description>
          <summary><![CDATA[Creates a new Title Header part on the form.]]></summary>
          <sample><![CDATA[var titleHeader = form.newTitleHeaderPart(40);]]></sample>
        </function>
        <function name="newTrailingGrandSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Trailing Grand Summary form part.]]></return>
          <description><![CDATA[Creates a new Trailing Grand Summary part on the form.]]></description>
          <summary><![CDATA[Creates a new Trailing Grand Summary part on the form.]]></summary>
          <sample><![CDATA[var trailingGrandSummary = form.newTrailingGrandSummaryPart(400);]]></sample>
        </function>
        <function name="newTrailingSubSummaryPart">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSPart" type="com.servoy.j2db.scripting.solutionmodel.JSPart"><![CDATA[A JSPart instance corresponding to the newly created Trailing Subsummary form part.]]></return>
          <description><![CDATA[Creates a new Trailing Subsummary part on the form.]]></description>
          <summary><![CDATA[Creates a new Trailing Subsummary part on the form.]]></summary>
          <sample><![CDATA[var trailingSubsummary = form.newTrailingSubSummaryPart(360);]]></sample>
        </function>
        <function name="newTypeAhead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[a JSField object with the displayType of TYPE_AHEAD]]></return>
          <description><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></description>
          <summary><![CDATA[Creates a new JSField object on the form with the displayType of TYPE_AHEAD - including the dataprovider/JSVariable of the JSField object, the "x" and "y" position of the JSField object in pixels, as well as the width and height of the JSField object in pixels.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newForm1','myServer','myTable',null,true,800,600);
	var vlist = solutionModel.newValueList('options',JSValueList.CUSTOM_VALUES);
	vlist.customValues = "value1\nvalue2\nvalue3";
	var typeAhead = form.newTypeAhead(columnTextDataProvider,100,100,300,200);
	typeAhead.valuelist = vlist;
	forms['newForm1'].controller.show();]]></sample>
          <parameters>
            <parameter name="dataprovidername/jsvariable">
              <description><![CDATA[the specified dataprovider name/JSVariable of the JSField object]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the horizontal "x" position of the JSfield object in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical "y" position of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the JSField object in pixels]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the JSField object in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the JSButton has been removed; false otherwise]]></return>
          <description><![CDATA[Removes a JSButton that has the specified name. Returns true if removal was successful, false otherwise.]]></description>
          <summary><![CDATA[Removes a JSButton that has the specified name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','myTable',null,true,800,600);
 var b1 = form.newButton('This is button1',100,100,200,50,null);
 b1.name = 'b1';
 var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeButton('b1') == true) application.output('Button has been removed ok'); else application.output('Button could not be deleted'); forms['newFormX'].controller.recreateUI();}");
 var b2 = form.newButton('Click here to remove button1',100,230,200,50,jsmethod);
 b2.name = 'b2';
 forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSButton to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if component has been successfully deleted; false otherwise]]></return>
          <description><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSTabpanel) that has the given name. It is the same as calling "if(!removeLabel(name) && !removeButton(name) ....)".
Returns true if removal was successful, false otherwise.]]></description>
          <summary><![CDATA[Removes a component (JSLabel, JSButton, JSField, JSPortal, JSTabpanel) that has the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','parentTable',null,true,1000,750);
var jsbutton = form.newButton('JSButton to delete',100,100,200,50,null);
jsbutton.name = 'jsb';
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsfield = form.newField('globals.myGlobalVariable',JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var relation = solutionModel.newRelation('parentToChild','myServer','parentTable','myServer','childTable',JSRelation.INNER_JOIN);
relation.newRelationItem('parent_table_id', '=', 'child_table_id');
var jsportal = form.newPortal('jsp',relation,100,400,300,300);
jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
var childOne = solutionModel.newForm('childOne','myServer','childTable',null,false,400,300);
childOne.newField('child_table_id', JSField.TEXT_FIELD,10,10,100,20);
var childTwo = solutionModel.newForm('childTwo','myServer','someOtherTable',null,false,400,300);
childTwo.newField('some_table_id', JSField.TEXT_FIELD,10,10,100,100); 
var jstabpanel = form.newTabPanel('jst',450,30,620,460);
jstabpanel.newTab('tab1','Child One',childOne,relation);
jstabpanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if ((form.removeComponent('jsb') == true) && (form.removeComponent('jsl') == true) && (form.removeComponent('jsf') == true) && (form.removeComponent('jsp') == true) & (form.removeComponent('jst') == true)) application.output('Components removed ok'); else application.output('Some component(s) could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove form components',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the component to be deleted]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true is the JSField has been successfully removed; false otherwise]]></return>
          <description><![CDATA[Removes a JSField that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          <summary><![CDATA[Removes a JSField that has the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','myTable',null,true,800,600);
var jsfield = form.newField(globals.myGlobalVariable,JSField.TEXT_FIELD,100,300,200,50);
jsfield.name = 'jsf';
var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsf') == true) application.output('Field has been removed ok'); else application.output('Field could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the field',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSField to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the JSLabel with the given name has successfully been removed; false otherwise]]></return>
          <description><![CDATA[Removes a JSLabel that has the given name. Returns true if removal successful, false otherwise]]></description>
          <summary><![CDATA[Removes a JSLabel that has the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','myTable',null,true,1000,750);
var jslabel = form.newLabel('JSLabel to delete',100,200,200,50,null);
jslabel.name = 'jsl';
jslabel.transparent = false;
jslabel.background = 'green';
var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX'); if (form.removeComponent('jsl') == true) application.output('Label has been removed'); else application.output('Label could not be deleted'); forms['newFormX'].controller.recreateUI();}");
var removerButton = form.newButton('Click here to remove the green label',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSLabel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removePart" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="removePart">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[True if the part is successfully removed, false otherwise.]]></return>
          <description><![CDATA[Removes a JSPart of the given type. Use the height parameter if you want to remove one of multiple
subsummary parts.]]></description>
          <summary><![CDATA[Removes a JSPart of the given type.]]></summary>
          <sample><![CDATA[form.removePart(JSPart.HEADER);
form.removePart(JSPart.LEADING_SUBSUMMARY, 160);]]></sample>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part that should be removed.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int" optional="true">
              <description><![CDATA[The height of the part that should be removed. Use this parameter when you want
                        to remove one of multiple Leading/Trailing Subsummary parts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removePortal">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the JSPortal has successfully been removed; false otherwise]]></return>
          <description><![CDATA[Removes a JSPortal that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          <summary><![CDATA[Removes a JSPortal that has the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','myTable',null,true,800,600);
	var relation = solutionModel.newRelation('parentToChild','myServer','myTable','myServer','myOtherTable',JSRelation.INNER_JOIN);
	relation.newRelationItem('parent_table_id', '=', 'child_table_id');
	var jsportal = form.newPortal('jsp',relation,100,400,300,300);
	jsportal.newField('child_table_id',JSField.TEXT_FIELD,200,200,120);
	var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jsp') == true) application.output('Portal removed ok'); else application.output('Portal could not be deleted'); forms['newFormX'].controller.recreateUI();}");
	var removerButton = form.newButton('Click here to remove the portal',450,500,250,50,jsmethod);
	removerButton.name = 'remover';
	forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSPortal to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeTabPanel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true is the JSTabPanel has been successfully removed, false otherwise]]></return>
          <description><![CDATA[Removes a JSTabPanel that has the given name. Returns true if removal was successful, false otherwise.]]></description>
          <summary><![CDATA[Removes a JSTabPanel that has the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('newFormX','myServer','parentTable',null,false,800,600);
var childOne = solutionModel.newForm('childOne','myServer','childTable',null,false,400,300);
childOne.newField('child_table_text', JSField.TEXT_FIELD,10,10,100,20); 
var parentToChild = solutionModel.newRelation('parentToChild','myServer','parentTable','myServer','childTable',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_id');
var childTwo = solutionModel.newForm('childTwo','myServer','anotherTable',null,false,400,300);
childTwo.newField('columnDataProvider', JSField.TEXT_FIELD,10,10,100,100);
var tabPanel = form.newTabPanel('jst',10,10,620,460);
tabPanel.newTab('tab1','Child One',childOne,parentToChild);
tabPanel.newTab('tab2','Child Two',childTwo);
var jsmethod = form.newFormMethod("function removeMe(event) { var form = solutionModel.getForm('newFormX');\n if (form.removeComponent('jst') == true)\n application.output('TabPanel has been removed ok');\n else\n application.output('TabPanel could not be deleted');\n forms['newFormX'].controller.recreateUI();\n}");
var removerButton = form.newButton('Click here to remove the tab panel',450,500,250,50,jsmethod);
removerButton.name = 'remover';
forms['newFormX'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the JSTabPanel to be removed]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setOnDeleteAllRecordsCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnDeleteAllRecordsCmd"/>
          </sees>
        </function>
        <function name="setOnDeleteRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnDeleteRecordCmd"/>
          </sees>
        </function>
        <function name="setOnDuplicateRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnDuplicateRecordCmd"/>
          </sees>
        </function>
        <function name="setOnFindCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnFindCmd"/>
          </sees>
        </function>
        <function name="setOnHideMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnHide"/>
          </sees>
        </function>
        <function name="setOnInvertRecordsCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnInvertRecordsCmd"/>
          </sees>
        </function>
        <function name="setOnLoadMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnLoad"/>
          </sees>
        </function>
        <function name="setOnNewRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnNewRecordCmd"/>
          </sees>
        </function>
        <function name="setOnNextRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnNextRecordCmd"/>
          </sees>
        </function>
        <function name="setOnOmitRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnOmitRecordCmd"/>
          </sees>
        </function>
        <function name="setOnPreviousRecordCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnPreviousRecordCmd"/>
          </sees>
        </function>
        <function name="setOnPrintPreviewCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnPrintPreviewCmd"/>
          </sees>
        </function>
        <function name="setOnRecordEditStartMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnRecordEditStart"/>
          </sees>
        </function>
        <function name="setOnRecordEditStopMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnRecordEditStop"/>
          </sees>
        </function>
        <function name="setOnRecordSelectionMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnRecordSelection"/>
          </sees>
        </function>
        <function name="setOnSearchCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnSearchCmd"/>
          </sees>
        </function>
        <function name="setOnShowAllRecordsCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnShowAllRecordsCmd"/>
          </sees>
        </function>
        <function name="setOnShowMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnShow"/>
          </sees>
        </function>
        <function name="setOnShowOmittedRecordsCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnShowOmittedRecordsCmd"/>
          </sees>
        </function>
        <function name="setOnSortCmdMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnSortCmd"/>
          </sees>
        </function>
        <function name="setOnUnLoadMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm" member="getOnUnLoad"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSFoundSetUpdater" qualifiedName="com.servoy.j2db.dataprocessing.JSFoundSetUpdater">
      <functions>
        <function name="next">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if proceeded to next record, false otherwise]]></return>
          <description><![CDATA[Go to next record in this updater, returns true if successful.]]></description>
          <summary><![CDATA[Go to next record in this updater, returns true if successful.]]></summary>
          <sample><![CDATA[controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
        </function>
        <function name="performUpdate">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded, false if failed.]]></return>
          <description><![CDATA[Do the actual update in the database, returns true if successful.
There are 3 types of possible use with the foundset updater
1) update entire foundset, not possible when the table of the foundset has tracking enabled, will fall back to 3.
2) update part of foundset, for example the first 4 row (starts with selected row)
3) safely loop through foundset (starts with selected row)]]></description>
          <summary><![CDATA[Do the actual update in the database, returns true if successful.]]></summary>
          <sample><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
        </function>
        <function name="resetIterator">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Start over with this iterator 'next' function (at the foundset selected record).]]></description>
          <summary><![CDATA[Start over with this iterator 'next' function (at the foundset selected record).]]></summary>
          <sample><![CDATA[controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',++count)
}
fsUpdater.resetIterator()
while(fsUpdater.next())
{
	fsUpdater.setColumn('max_flag',count)
}]]></sample>
        </function>
        <function name="setColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded, false if failed.]]></return>
          <description><![CDATA[Set the column value to update, returns true if successful.]]></description>
          <summary><![CDATA[Set the column value to update, returns true if successful.]]></summary>
          <sample><![CDATA[//1) update entire foundset
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',1)
fsUpdater.setColumn('my_flag',0)
fsUpdater.performUpdate()

//2) update part of foundset, for example the first 4 row (starts with selected row)
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
fsUpdater.setColumn('customer_type',new Array(1,2,3,4))
fsUpdater.setColumn('my_flag',new Array(1,0,1,0))
fsUpdater.performUpdate()

//3) safely loop through foundset (starts with selected row)
controller.setSelectedIndex(1)
var count = 0
var fsUpdater = databaseManager.getFoundSetUpdater(foundset)
while(fsUpdater.next())
{
	fsUpdater.setColumn('my_flag',count++)
}]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to update.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The new value to be stored in the specified column.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSFoundset" qualifiedName="com.servoy.j2db.dataprocessing.FoundSet">
      <properties>
        <property name="multiSelect">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Get or set the multiSelect flag of the foundset.]]></description>
          <summary><![CDATA[Get or set the multiSelect flag of the foundset.]]></summary>
          <sample><![CDATA[// allow user to select multiple rows.
%%prefix%%foundset.multiSelect = true;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addFoundSetFilterParam" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="addFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if adding the filter succeeded, false otherwise.]]></return>
          <description><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.
Use clear() or loadAllRecords() to make the filter effective.
When given a name, the filter can be removed again using removeFoundSetFilterParam(name).]]></description>
          <summary><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.addFoundSetFilterParam('customerid', '=', 'BLONP', 'custFilter');//possible to add multiple
%%prefix%%foundset.loadAllRecords();//to make param(s) effective
// Named filters can be removed using %%prefix%%foundset.removeFoundSetFilterParam(filterName)]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String column to filter on.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String operator: =, <, >, >=, <=, !=, (NOT) LIKE, (NOT) IN, (NOT) BETWEEN and IS (NOT) NULL]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object filter value (for in array and between an array with 2 elements)]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[String name, can be used to remove the filter again.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="clear">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Clear the foundset.]]></description>
          <summary><![CDATA[Clear the foundset.]]></summary>
          <sample><![CDATA[//Clear the foundset, including searches that may be on it
%%prefix%%foundset.clear();]]></sample>
        </function>
        <function name="clearFoundSet" deprecated="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Clears the foundset.]]></description>
          <summary><![CDATA[Clears the foundset.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="clear"/>
          </sees>
        </function>
        <function name="deleteAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <description><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></description>
          <summary><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.deleteAllRecords();]]></sample>
        </function>
        <function name="deleteRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <description><![CDATA[Delete current/parameter record or the record under the given index.
If the foundset is in multiselect mode, all selected records are deleted (when no parameter is used).]]></description>
          <summary><![CDATA[Delete current/parameter record or the record under the given index.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.deleteRecord();
//can return false incase of related foundset having records and orphans records are not allowed by the relation]]></sample>
          <parameters>
            <parameter name="index/record" optional="true">
              <description><![CDATA[index of record to delete or record itself.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="duplicateFoundSet">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.FoundSet" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[foundset duplicate.]]></return>
          <description><![CDATA[Get a duplicate of the foundset.]]></description>
          <summary><![CDATA[Get a duplicate of the foundset.]]></summary>
          <sample><![CDATA[var dupFoundset = %%prefix%%foundset.duplicateFoundSet();
%%prefix%%foundset.find();
//search some fields
var count = %%prefix%%foundset.search();
if (count == 0)
{
	plugins.dialogs.showWarningDialog('Alert', 'No records found','OK');
	controller.loadRecords(dupFoundset);
}]]></sample>
        </function>
        <function name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[true if succesful]]></return>
          <description><![CDATA[Duplicate current record or record at index in the foundset.]]></description>
          <summary><![CDATA[Duplicate current record or record at index in the foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[index of record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="location" optional="true">
              <description><![CDATA[a boolean or number when true the new record is added as the topmost record, when a number, the new record is added at specified index ; defaults to 1.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true the selection is changed to the duplicated record; defaults to true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="find">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the foundset is now in find mode, false otherwise.]]></return>
          <description><![CDATA[Set the foundset in find mode.

Before going into find mode, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
the foundset will not go into find mode.
Note: always make sure to check the result of the find() method.

When in find mode, columns can be assigned string expressions that are evaluated as:
General:
      c1||c2    (condition1 or condition2)
      c|format  (apply format on condition like 'x|dd-MM-yyyy')
      !c        (not condition)
      #c        (modify condition, depends on column type)
      ^         (is null)
      ^=        (is null or empty)
      &lt;x     (less than value x)
      &gt;x     (greater than value x)
      &lt;=x    (less than or equals value x)
      &gt;=x    (greater than or equals value x)
      x...y     (between values x and y, including values)
      x         (equals value x)

 Number fields:
      =x       (equals value x)
      ^=       (is null or zero)

 Date fields:
      #c       (equals value x, entire day)
      now      (equals now, date and or time)
      //       (equals today)
      today    (equals today)

 Text fields:
      #c	        (case insensitive condition)
      = x      (equals a space and 'x')
      ^=       (is null or empty)
      %x%      (contains 'x')
      %x_y%    (contains 'x' followed by any char and 'y')
      \%      (contains char '%')
      \_      (contains char '_')

Related columns can be assigned, they will result in related searches.
For example, "employees_to_department.location_id = headoffice" finds all employees in the specified location).

Searching on related aggregates is supported.
For example, "orders_to_details.total_amount = '&gt;1000'" finds all orders with total order details amount more than 1000.]]></description>
          <summary><![CDATA[Set the foundset in find mode.]]></summary>
          <sample><![CDATA[if (%%prefix%%foundset.find()) //find will fail if autosave is disabled and there are unsaved records
{
	columnTextDataProvider = 'a search value'
	columnNumberDataProvider = '>10'
	%%prefix%%foundset.search()
}]]></sample>
        </function>
        <function name="getCurrentSort">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String sort columns]]></return>
          <description><![CDATA[Get the current sort columns.]]></description>
          <summary><![CDATA[Get the current sort columns.]]></summary>
          <sample><![CDATA[//reverse the current sort

//the original sort "companyName asc, companyContact desc"
//the inversed sort "companyName desc, companyContact asc"
var foundsetSort = foundset.getCurrentSort()
var sortColumns = foundsetSort.split(',')
var newFoundsetSort = ''
for(var i=0; i<sortColumns.length; i++)
{
	var currentSort = sortColumns[i]
	var sortType = currentSort.substring(currentSort.length-3)
	if(sortType.equalsIgnoreCase('asc'))
	{
		newFoundsetSort += currentSort.replace(' asc', ' desc')
	}
	else
	{
		newFoundsetSort += currentSort.replace(' desc', ' asc')
	}
	if(i != sortColumns.length - 1)
	{
		newFoundsetSort += ','
	}
}
foundset.sort(newFoundsetSort)]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="sort"/>
          </sees>
        </function>
        <function name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[Object value]]></return>
          <description><![CDATA[Get a value based on a dataprovider name.]]></description>
          <summary><![CDATA[Get a value based on a dataprovider name.]]></summary>
          <sample><![CDATA[var val = %%prefix%%foundset.getDataProviderValue('contact_name');]]></sample>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataSource">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String data source.]]></return>
          <description><![CDATA[Get the datasource used.
The datasource is an url that describes the data source.]]></description>
          <summary><![CDATA[Get the datasource used.]]></summary>
          <sample><![CDATA[var dataSource = %%prefix%%foundset.getDataSource();]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getDataSourceServerName"/>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getDataSourceTableName"/>
          </sees>
        </function>
        <function name="getFoundSetFilterParams" undocumented="true">
          <argumentsTypes/>
          <return typecode="[[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[][]"/>
        </function>
        <function name="getFoundSetFilterParams">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[][]"><![CDATA[Array of filter definitions.]]></return>
          <description><![CDATA[Get the list of previously defined foundset filters.
The result is an array of:
 [ tableName, dataprovider, operator, value, name ]]]></description>
          <summary><![CDATA[Get the list of previously defined foundset filters.]]></summary>
          <sample><![CDATA[var params = foundset.getFoundSetFilterParams()
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('FoundSet filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          <parameters>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[name of the filters to retrieve, get all if not specified.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getMaxRecordIndex" deprecated="true">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get the number of records in this foundset.]]></description>
          <summary><![CDATA[Get the number of records in this foundset.]]></summary>
          <sample><![CDATA[for ( var i = 1 ; i <= %%prefix%%foundset.getMaxRecordIndex() ; i++ )
{
	%%prefix%%foundset.setSelectedIndex(i);
	//do some action per record
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getSize"/>
          </sees>
        </function>
        <function name="getRecord">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.IRecordInternal" type="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record record.]]></return>
          <description><![CDATA[Get the record object at the index.]]></description>
          <summary><![CDATA[Get the record object at the index.]]></summary>
          <sample><![CDATA[var record = %%prefix%%foundset.getRecord(index);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[int record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRecordIndex">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int index.]]></return>
          <description><![CDATA[Get the record index.]]></description>
          <summary><![CDATA[Get the record index.]]></summary>
          <sample><![CDATA[var index = %%prefix%%foundset.getRecordIndex(record);]]></sample>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[Record]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRelationName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String relation name when related.]]></return>
          <description><![CDATA[Gets the relation name (null if not a related foundset).]]></description>
          <summary><![CDATA[Gets the relation name (null if not a related foundset).]]></summary>
          <sample><![CDATA[var relName = %%prefix%%foundset.getRelationName();]]></sample>
        </function>
        <function name="getSelectedIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int current index (1-based)]]></return>
          <description><![CDATA[Get the current record index of the foundset.]]></description>
          <summary><![CDATA[Get the current record index of the foundset.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
        </function>
        <function name="getSelectedIndexes">
          <argumentsTypes/>
          <return typecode="[I" type="com.servoy.j2db.documentation.scripting.docs.Number[]"><![CDATA[Array current indexes (1-based)]]></return>
          <description><![CDATA[Get the selected records indexes.
When the founset is in multiSelect mode (see property multiSelect), selection can be a more than 1 index.]]></description>
          <summary><![CDATA[Get the selected records indexes.]]></summary>
          <sample><![CDATA[var current = %%prefix%%foundset.getSelectedIndexes();
var newSelection = new Array();
newSelection[0] = current[0];
%%prefix%%foundset.setSelectedIndexes(newSelection);]]></sample>
        </function>
        <function name="getSelectedRecord">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.IRecordInternal" type="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record record.]]></return>
          <description><![CDATA[Get the selected record.]]></description>
          <summary><![CDATA[Get the selected record.]]></summary>
          <sample><![CDATA[var selectedRecord = %%prefix%%foundset.getSelectedRecord();]]></sample>
        </function>
        <function name="getSelectedRecords">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;" type="com.servoy.j2db.dataprocessing.Record[]"><![CDATA[Array current records.]]></return>
          <description><![CDATA[Get the selected records.
When the founset is in multiSelect mode (see property multiSelect), selection can be a more than 1 record.]]></description>
          <summary><![CDATA[Get the selected records.]]></summary>
          <sample><![CDATA[var selectedRecords = %%prefix%%foundset.getSelectedRecords();]]></sample>
        </function>
        <function name="getServerName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets the name of the server used.]]></description>
          <summary><![CDATA[Gets the name of the server used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="getSize">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int current size.]]></return>
          <description><![CDATA[Get the number of records in this foundset.
This is the number of records loaded, note that when looping over a foundset, size() may
increase as more records are loaded.]]></description>
          <summary><![CDATA[Get the number of records in this foundset.]]></summary>
          <sample><![CDATA[var nrRecords = %%prefix%%foundset.getSize()

// to loop over foundset, recalculate size for each record
	for (var i = 1; i <= %%prefix%%foundset.getSize(); i++)
	{
		var rec = %%prefix%%foundset.getRecord(i);
	}]]></sample>
        </function>
        <function name="getTableName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets the name of the table used.]]></description>
          <summary><![CDATA[Gets the name of the table used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="invertRecords">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Invert the foundset against all rows of the current table.
All records that are not in the foundset will become the current foundset.]]></description>
          <summary><![CDATA[Invert the foundset against all rows of the current table.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.invertRecords();]]></sample>
        </function>
        <function name="isInFind">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean is in find mode.]]></return>
          <description><![CDATA[Check if this foundset is in find mode.]]></description>
          <summary><![CDATA[Check if this foundset is in find mode.]]></summary>
          <sample><![CDATA[//Returns true when find was called on this foundset and search has not been called yet
%%prefix%%foundset.isInFind();]]></sample>
        </function>
        <function name="loadAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <description><![CDATA[Loads all accessible records from the datasource into the foundset.
Filters on the foundset are applied.

Before loading the records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
records will not be loaded,]]></description>
          <summary><![CDATA[Loads all accessible records from the datasource into the foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.loadAllRecords();]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="addFoundSetFilterParam"/>
          </sees>
        </function>
        <function name="loadOmittedRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <description><![CDATA[Loads the records that are currently omitted as a foundset.

Before loading the omitted records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
omitted records will not be loaded,]]></description>
          <summary><![CDATA[Loads the records that are currently omitted as a foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.loadOmittedRecords();]]></sample>
        </function>
        <function name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Load records with primary key (dataset/number/uuid) or query.

Load records can be used in 5 different ways
1) to copy foundset data from another foundset
foundset.loadRecords(fs);

2) to load a primary key dataset, will remove related sort!
var dataset = databaseManager.getDataSetByQuery(...);
foundset.loadRecords(dataset);

3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
foundset.loadRecords(123);
foundset.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

4) to reload all last related records again, if for example when searched in tabpanel
foundset.loadRecords();

5) to load records in to the form based on a query (also known as 'Form by query')
foundset.loadRecords(sqlstring,parameters);
limitations/requirements for sqlstring are:
-must start with 'select'
-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
-can contain '?' which are replaced with values from the array supplied to parameters argument
if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
-must contain 'from' keyword
-the 'from' must be a comma separated list of table names
-must at least select from the table used in Servoy Form
-cannot contain 'group by', 'having' or 'union'
-all columns must be fully qualified like 'orders.order_id']]></description>
          <summary><![CDATA[Load records with primary key (dataset/number/uuid) or query.]]></summary>
          <sample><![CDATA[//Load records can be used in 5 different ways
//1) to copy foundset data from another foundset
//%%prefix%%foundset.loadRecords(fs);

//2) to load a primary key dataset, will remove related sort!
//var dataset = databaseManager.getDataSetByQuery(...);
// dataset must match the table primary key columns (alphabetically ordered)
//%%prefix%%foundset.loadRecords(dataset);

//3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
//%%prefix%%foundset.loadRecords(123);
//%%prefix%%foundset.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

//4) to reload all last related records again, if for example when searched in tabpanel
//%%prefix%%foundset.loadRecords();

//5) to load records in to the form based on a query (also known as 'Form by query')
//%%prefix%%foundset.loadRecords(sqlstring,parameters);
//limitations/requirements for sqlstring are:
//-must start with 'select'
//-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
//-can contain '?' which are replaced with values from the array supplied to parameters argument
//if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
//-must contain 'from' keyword
//-the 'from' must be a comma separated list of table names
//-must at least select from the table used in Servoy Form
//-cannot contain 'group by', 'having' or 'union'
//-all columns must be fully qualified like 'orders.order_id']]></sample>
          <parameters>
            <parameter name="input" optional="true">
              <description><![CDATA[foundset/pkdataset/single_pk/query]]></description>
            </parameter>
            <parameter name="queryArgumentsArray" optional="true">
              <description><![CDATA[used when input is a query]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int index of new record.]]></return>
          <description><![CDATA[Create a new record in the foundset.]]></description>
          <summary><![CDATA[Create a new record in the foundset.]]></summary>
          <sample><![CDATA[// foreign key data is only filled in for equals (=) relation items 
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure 
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          <parameters>
            <parameter name="location" optional="true">
              <description><![CDATA[a boolean or number when true the new record is added as the topmost record, when a number, the new record is added at specified index ; defaults to 1.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true the selection is changed to the new record; defaults to true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="omitRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be omitted.]]></return>
          <description><![CDATA[Omit current record or the record under the given index, to be shown with loadOmittedRecords.
If the foundset is in multiselect mode, all selected records are omitted (when no index parameter is used).

Note: The omitted records list is discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invertRecords()]]></description>
          <summary><![CDATA[Omit current record or the record under the given index, to be shown with loadOmittedRecords.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.omitRecord();]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[index of record to omit.]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="loadOmittedRecords"/>
          </sees>
        </function>
        <function name="relookup">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Perform a relookup for the current record or the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          <summary><![CDATA[Perform a relookup for the current record or the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.relookup(1);]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[record index (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if removing the filter succeeded, false otherwise.]]></return>
          <description><![CDATA[Remove a named foundset filter.
Use clear() or loadAllRecords() to make the filter effective.]]></description>
          <summary><![CDATA[Remove a named foundset filter.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.removeFoundSetFilterParam('custFilter');// removes all filters with this name
%%prefix%%foundset.loadAllRecords();//to make param(s) effective]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String filter name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="search">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int number of rows returned]]></return>
          <description><![CDATA[Perform a search and show the results.
Must be in find mode when running search (see find()).]]></description>
          <summary><![CDATA[Perform a search and show the results.]]></summary>
          <sample><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false);//to extend foundset]]></sample>
          <parameters>
            <parameter name="clearLastResults" optional="true">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
            <parameter name="reduceSearch" optional="true">
              <description><![CDATA[boolean, reduce (true) or extend (false) previous search results, default true]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="find"/>
          </sees>
        </function>
        <function name="selectRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded.]]></return>
          <description><![CDATA[Select the record based on pk data.
Note that if the foundset has not loaded the record with the pk, selectrecord will fail.

In case of a table with a composite key, the pk sequence must match the alphabetical 
ordering of the pk column names.]]></description>
          <summary><![CDATA[Select the record based on pk data.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.selectRecord(pkid1,pkid2,pkidn);//pks must be alphabetically set! It is also possible to use an array as parameter.]]></sample>
          <parameters>
            <parameter name="pkid1">
              <description><![CDATA[primary key]]></description>
            </parameter>
            <parameter name="pkid2" optional="true">
              <description><![CDATA[second primary key (in case of composite primary key)]]></description>
            </parameter>
            <parameter name="pkidn" optional="true">
              <description><![CDATA[nth primary key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set a value based on a dataprovider name.]]></description>
          <summary><![CDATA[Set a value based on a dataprovider name.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.setDataProviderValue('contact_name','mycompany');]]></sample>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[value to set]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the current record index.]]></description>
          <summary><![CDATA[Set the current record index.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index to set (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndexes">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the selected records indexes.]]></description>
          <summary><![CDATA[Set the selected records indexes.]]></summary>
          <sample><![CDATA[var current = %%prefix%%foundset.getSelectedIndexes();
var newSelection = new Array();
newSelection[0] = current[0];
%%prefix%%foundset.setSelectedIndexes(newSelection);]]></sample>
          <parameters>
            <parameter name="indexes" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[An array with indexes to set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sort">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sorts the foundset based on the given sort string or record comparator function.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order. 
The comparator function is called to compare
two records, that are passed as arguments, and
it will return -1/0/1 if the first record is less/equal/greater
then the second record.]]></description>
          <summary><![CDATA[Sorts the foundset based on the given sort string or record comparator function.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.sort('columnA desc,columnB asc');

%%prefix%%foundset.sort(mySortFunction);
 
function mySortFunction(r1, r2)
{
	var o = 0;
	if(r1.id < r2.id)
	{
		o = -1;
	}
	else if(r1.id > r2.id)
	{
		o = 1;
	}
	return o;
}]]></sample>
          <parameters>
            <parameter name="sortString/recordComparator">
              <description><![CDATA[the specified columns (and sort order) or record comparator function]]></description>
            </parameter>
            <parameter name="defer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true, the "sortString" will be just stored, without performing a query on the database (the actual sorting will be deferred until the next data loading action).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="unrelate">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[FoundSet unrelated foundset.]]></return>
          <description><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.
If the current foundset is not related, no copy will made.]]></description>
          <summary><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.unrelate();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSGraphicalComponent" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="dataProviderID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The dataprovider of the component.]]></description>
          <summary><![CDATA[The dataprovider of the component.]]></summary>
          <sample><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
        </property>
        <property name="displaysTags">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %%on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by%%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          <summary><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          <sample><![CDATA[var label = form.newLabel('You are viewing record no. %%parent_table_id%%. You are running on server %%serverURL%%.', 
					10, 10, 600, 100);
label.displaysTags = true;]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="horizontalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          <summary><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
        </property>
        <property name="imageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The image Media object that should be displayed inside the component.]]></description>
          <summary><![CDATA[The image Media object that should be displayed inside the component.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var label = form.newLabel('', 10, 10, 100, 100);
label.imageMedia = ballImage;]]></sample>
        </property>
        <property name="labelFor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Some components can be set to be labels of other components. This is useful in
two situations. In table view mode it is used for constructing the header of the
table. In record view mode, by setting mnemonics on the label, keyboard shortcuts
can be used to set the focus to fields.]]></description>
          <summary><![CDATA[Some components can be set to be labels of other components.]]></summary>
          <sample><![CDATA[var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O';]]></sample>
        </property>
        <property name="margin">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, right, bottom, left.]]></description>
          <summary><![CDATA[The margins of the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
        </property>
        <property name="mediaOptions">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Options to scale the image Media object that is displayed inside the component.
Can be set to one or a combination of CROP, REDUCE, ENLARGE and KEEPASPECT.

REDUCE will scale down the image if the component is smaller than the image.
REDUCE combined with KEEPASPECT will reduce the image, but keep its aspect ratio. 
This is useful when the component has other proportions than the image.

ENLARGE will scale up the image if the component is larger than the image.
ENLARGE combined with KEEPASPECT will scale up the image while keeping its aspect ratio.

CROP will leave the image at its original size. If the component is smaller than
the image this will result in only a part of the image showing up.]]></description>
          <summary><![CDATA[Options to scale the image Media object that is displayed inside the component.]]></summary>
          <sample><![CDATA[// Load two images, a big one and a small one.
var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
// Put the big image in several small labels, with different media options.
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
// Put the small image in several big labels, with different media options.
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
        </property>
        <property name="mnemonic">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The keyboard shortcut that activates this component. A letter must be specified, 
and the actual shortcut will be combination of ALT + the specified letter.

This property can be used in two ways. Normally the keyboard shortcut activates 
the onClick event of the component. But if the "labelFor" property is set for the
component, then the keyboard shortcut will move the focus to the component whose
label this component is.]]></description>
          <summary><![CDATA[The keyboard shortcut that activates this component.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var btn = form.newButton('I am a button', 10, 40, 200, 20, m);
btn.mnemonic = 'B'; // When ALT-B is pressed the mouse will respond as if clicked.
var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O'; // When ALT-O is pressed the focus will move to fieldOne.]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="onAction">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onDoubleClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is double clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is double clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onRightClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is right clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="rolloverCursor">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The cursor that is shown as the mouse is rolled over the component.
Possible options are DEFAULT and HAND.]]></description>
          <summary><![CDATA[The cursor that is shown as the mouse is rolled over the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
        </property>
        <property name="rolloverImageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The roll over image Media object used. When the mouse is moved over the component,
this image Media will be displayed. When the mouse is moved out of the component,
whatever text or image was being initially displayed will be restored.]]></description>
          <summary><![CDATA[The roll over image Media object used.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var mapBytes = plugins.file.readFile('d:/map.jpg');
var mapImage = solutionModel.newMedia('map.jpg', mapBytes);
var label = form.newLabel('', 10, 10, 200, 200);
label.imageMedia = mapImage;
label.rolloverImageMedia = ballImage;]]></sample>
        </property>
        <property name="rotation">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The rotation of the element. You can choose 0, 90, 180, or 270 and the label is rotated accordingly.  
This property also applies to buttons and images.]]></description>
          <summary><![CDATA[The rotation of the element.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 200, m);
label.rotation = 90;
var btn = form.newButton('And I am a button', 10, 220, 200, 20, m);
btn.rotation = 180;]]></sample>
        </property>
        <property name="showClick">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the element will show the clicked state when selected. 
Applies to labels and buttons and images only.]]></description>
          <summary><![CDATA[When set, the element will show the clicked state when selected.]]></summary>
          <sample><![CDATA[// Create a form method.
var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
// Create a label with the method attached to its onClick event.
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
// By default the label does not visually react to clicks, but we can enable this.
// Basically the label will now behave as a button does.
label.showClick = true;
// Create a button with the same method attached to its onClick event.
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
// By default the button visually reacts to onClick, but we can disable this.
// Then the button will behave like a label does.
btn.showClick = false;]]></sample>
        </property>
        <property name="showFocus">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set the text of an element will showfocus when selected.
Applies to labels and buttons only. 
The text property for the element MUST be filled in first. 

NOTE: The TAB key may also be used to select the element, depending 
on the operating system being used and the selected LAF.]]></description>
          <summary><![CDATA[When set the text of an element will showfocus when selected.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
label.showFocus = false;
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
btn.showFocus = false;]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text that is displayed inside the component.]]></description>
          <summary><![CDATA[The text that is displayed inside the component.]]></summary>
          <sample><![CDATA[// In general the text is specified when creating the component.
var label = form.newLabel('Initial text', 10, 10, 100, 20);
// But it can be changed later if needed.
label.text = 'Changed text';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example: 
<html>This includes<b>bolded text</b> and 
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          <summary><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="verticalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          <summary><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="setOnActionMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnAction"/>
          </sees>
        </function>
        <function name="setOnDoubleClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnDoubleClick"/>
          </sees>
        </function>
        <function name="setOnRightClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnRightClick"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSLabel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSLabel">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="dataProviderID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The dataprovider of the component.]]></description>
          <summary><![CDATA[The dataprovider of the component.]]></summary>
          <sample><![CDATA[// Normally the dataprovider is specified when a component is created.
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
// But it can be modified later if needed.
field.dataProviderID = 'parent_table_id';]]></sample>
        </property>
        <property name="displaysTags">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).
Tags (or placeholders) are words surrounded by %%on each side. There are data tags and
standard tags. Data tags consist in names of dataproviders surrounded by%%. Standard tags
are a set of predefined tags that are made available by the system.

See the "Merging data" section for more details about tags.

The default value of this flag is "false", that is merging of data is disabled by default.]]></description>
          <summary><![CDATA[Flag that enables or disables merging of data inside components using tags (placeholders).]]></summary>
          <sample><![CDATA[var label = form.newLabel('You are viewing record no. %%parent_table_id%%. You are running on server %%serverURL%%.', 
					10, 10, 600, 100);
label.displaysTags = true;]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="horizontalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Horizontal alignment of the text inside the component. Can be one of
LEFT, CENTER or RIGHT.

Note that this property does not refer to the horizontal alignment
of the component inside the form.]]></description>
          <summary><![CDATA[Horizontal alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var leftAlignedLabel = form.newLabel('LEFT', 10, 10, 300, 20);
leftAlignedLabel.horizontalAlignment = SM_ALIGNMENT.LEFT;
var hCenteredLabel = form.newLabel('CENTER', 10, 40, 300, 20);
hCenteredLabel.horizontalAlignment = SM_ALIGNMENT.CENTER;
var rightAlignedLabel = form.newLabel('RIGHT', 10, 70, 300, 20);
rightAlignedLabel.horizontalAlignment = SM_ALIGNMENT.RIGHT;]]></sample>
        </property>
        <property name="imageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The image Media object that should be displayed inside the component.]]></description>
          <summary><![CDATA[The image Media object that should be displayed inside the component.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var label = form.newLabel('', 10, 10, 100, 100);
label.imageMedia = ballImage;]]></sample>
        </property>
        <property name="labelFor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Some components can be set to be labels of other components. This is useful in
two situations. In table view mode it is used for constructing the header of the
table. In record view mode, by setting mnemonics on the label, keyboard shortcuts
can be used to set the focus to fields.]]></description>
          <summary><![CDATA[Some components can be set to be labels of other components.]]></summary>
          <sample><![CDATA[var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O';]]></sample>
        </property>
        <property name="margin">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The margins of the component. They are specified in this order, 
separated by commas: top, right, bottom, left.]]></description>
          <summary><![CDATA[The margins of the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Label', 10, 10, 150, 150);
label.background = 'yellow';
label.margin = '10,20,30,40';]]></sample>
        </property>
        <property name="mediaOptions">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Options to scale the image Media object that is displayed inside the component.
Can be set to one or a combination of CROP, REDUCE, ENLARGE and KEEPASPECT.

REDUCE will scale down the image if the component is smaller than the image.
REDUCE combined with KEEPASPECT will reduce the image, but keep its aspect ratio. 
This is useful when the component has other proportions than the image.

ENLARGE will scale up the image if the component is larger than the image.
ENLARGE combined with KEEPASPECT will scale up the image while keeping its aspect ratio.

CROP will leave the image at its original size. If the component is smaller than
the image this will result in only a part of the image showing up.]]></description>
          <summary><![CDATA[Options to scale the image Media object that is displayed inside the component.]]></summary>
          <sample><![CDATA[// Load two images, a big one and a small one.
var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
// Put the big image in several small labels, with different media options.
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
// Put the small image in several big labels, with different media options.
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
        </property>
        <property name="mnemonic">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The keyboard shortcut that activates this component. A letter must be specified, 
and the actual shortcut will be combination of ALT + the specified letter.

This property can be used in two ways. Normally the keyboard shortcut activates 
the onClick event of the component. But if the "labelFor" property is set for the
component, then the keyboard shortcut will move the focus to the component whose
label this component is.]]></description>
          <summary><![CDATA[The keyboard shortcut that activates this component.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var btn = form.newButton('I am a button', 10, 40, 200, 20, m);
btn.mnemonic = 'B'; // When ALT-B is pressed the mouse will respond as if clicked.
var labelOne = form.newLabel('Label One', 10, 10, 100, 20);
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 120, 10, 100, 20);
fieldOne.name = 'fieldOne';
labelOne.labelFor = 'fieldOne';
labelOne.mnemonic = 'O'; // When ALT-O is pressed the focus will move to fieldOne.]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="onAction">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onDoubleClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is double clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is double clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="onRightClick">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[The method that is executed when the component is right clicked.]]></description>
          <summary><![CDATA[The method that is executed when the component is right clicked.]]></summary>
          <sample><![CDATA[var doNothingMethod = form.newFormMethod('function doNothing() { application.output("Doing nothing."); }');
var onClickMethod = form.newFormMethod('function onClick(event) { application.output("I was clicked at " + event.getTimestamp()); }');
var onDoubleClickMethod = form.newFormMethod('function onDoubleClick(event) { application.output("I was double-clicked at " + event.getTimestamp()); }');
var onRightClickMethod = form.newFormMethod('function onRightClick(event) { application.output("I was right-clicked at " + event.getTimestamp()); }');
// At creation the button has the 'doNothing' method as onClick handler, but we'll change that later.
var btn = form.newButton('I am a button', 10, 40, 200, 20, doNothingMethod);
btn.onAction = onClickMethod;
btn.onDoubleClick = onDoubleClickMethod;
btn.onRightClick = onRightClickMethod;]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="rolloverCursor">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The cursor that is shown as the mouse is rolled over the component.
Possible options are DEFAULT and HAND.]]></description>
          <summary><![CDATA[The cursor that is shown as the mouse is rolled over the component.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Move the mouse over me', 10, 10, 200, 200);
label.rolloverCursor = SM_CURSOR.HAND_CURSOR;]]></sample>
        </property>
        <property name="rolloverImageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The roll over image Media object used. When the mouse is moved over the component,
this image Media will be displayed. When the mouse is moved out of the component,
whatever text or image was being initially displayed will be restored.]]></description>
          <summary><![CDATA[The roll over image Media object used.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
var mapBytes = plugins.file.readFile('d:/map.jpg');
var mapImage = solutionModel.newMedia('map.jpg', mapBytes);
var label = form.newLabel('', 10, 10, 200, 200);
label.imageMedia = mapImage;
label.rolloverImageMedia = ballImage;]]></sample>
        </property>
        <property name="rotation">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The rotation of the element. You can choose 0, 90, 180, or 270 and the label is rotated accordingly.  
This property also applies to buttons and images.]]></description>
          <summary><![CDATA[The rotation of the element.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 200, m);
label.rotation = 90;
var btn = form.newButton('And I am a button', 10, 220, 200, 20, m);
btn.rotation = 180;]]></sample>
        </property>
        <property name="showClick">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the element will show the clicked state when selected. 
Applies to labels and buttons and images only.]]></description>
          <summary><![CDATA[When set, the element will show the clicked state when selected.]]></summary>
          <sample><![CDATA[// Create a form method.
var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
// Create a label with the method attached to its onClick event.
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
// By default the label does not visually react to clicks, but we can enable this.
// Basically the label will now behave as a button does.
label.showClick = true;
// Create a button with the same method attached to its onClick event.
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
// By default the button visually reacts to onClick, but we can disable this.
// Then the button will behave like a label does.
btn.showClick = false;]]></sample>
        </property>
        <property name="showFocus">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set the text of an element will showfocus when selected.
Applies to labels and buttons only. 
The text property for the element MUST be filled in first. 

NOTE: The TAB key may also be used to select the element, depending 
on the operating system being used and the selected LAF.]]></description>
          <summary><![CDATA[When set the text of an element will showfocus when selected.]]></summary>
          <sample><![CDATA[var m = form.newFormMethod('function onClick() { application.output("I was clicked."); }');
var label = form.newLabel('I am a label', 10, 10, 200, 20, m);
label.showFocus = false;
var btn = form.newButton('And I am a button', 10, 40, 200, 20, m);
btn.showFocus = false;]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text that is displayed inside the component.]]></description>
          <summary><![CDATA[The text that is displayed inside the component.]]></summary>
          <sample><![CDATA[// In general the text is specified when creating the component.
var label = form.newLabel('Initial text', 10, 10, 100, 20);
// But it can be changed later if needed.
label.text = 'Changed text';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example: 
<html>This includes<b>bolded text</b> and 
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          <summary><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          <sample><![CDATA[var label = form.newLabel('Stop the mouse over me!', 10, 10, 200, 20);
label.toolTipText = 'I\'m the tooltip. Do you see me?';]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="verticalAlignment">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The vertical alignment of the text inside the component. Can be one of
TOP, CENTER or BOTTOM.

Note that this property does not refer to the vertical alignment of the
component inside the form.]]></description>
          <summary><![CDATA[The vertical alignment of the text inside the component.]]></summary>
          <sample><![CDATA[var topAlignedLabel = form.newLabel('TOP', 400, 10, 50, 300);
topAlignedLabel.verticalAlignment = SM_ALIGNMENT.TOP;
var vCenterAlignedLabel = form.newLabel('CENTER', 460, 10, 50, 300);
vCenterAlignedLabel.verticalAlignment = SM_ALIGNMENT.CENTER
var bottomAlignedLabel = form.newLabel('BOTTOM', 520, 10, 50, 300);
bottomAlignedLabel.verticalAlignment = SM_ALIGNMENT.BOTTOM;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="setOnActionMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnAction"/>
          </sees>
        </function>
        <function name="setOnDoubleClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnDoubleClick"/>
          </sees>
        </function>
        <function name="setOnRightClickMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent" member="getOnRightClick"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSMedia" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMedia">
      <properties>
        <property name="bytes">
          <return typecode="[B" type="byte[]"/>
          <description><![CDATA[A byte array holding the content of the Media object.]]></description>
          <summary><![CDATA[A byte array holding the content of the Media object.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
        </property>
        <property name="mimeType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The MIME type of the Media object.

Some examples are: 'image/jpg', 'image/png', etc.]]></description>
          <summary><![CDATA[The MIME type of the Media object.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[A String holding the name of this Media object.]]></return>
          <description><![CDATA[The name of the Media object.]]></description>
          <summary><![CDATA[The name of the Media object.]]></summary>
          <sample><![CDATA[var ballBytes = plugins.file.readFile('d:/ball.jpg');
var mapBytes = plugins.file.readFile('d:/map.png');
var ballImage = solutionModel.newMedia('ball.jpg', ballBytes);
application.output('original image name: ' + ballImage.getName());
ballImage.bytes = mapBytes;
ballImage.mimeType = 'image/png';
application.output('image name after change: ' + ballImage.getName()); // The name remains unchanged. Only the content (bytes) are changed.
application.output('image mime type: ' + ballImage.mimeType);
application.output('image size: ' + ballImage.bytes.length);]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSMethod" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMethod">
      <properties>
        <property name="code">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The full source code of this method (including doc and function declaration).]]></description>
          <summary><![CDATA[The full source code of this method (including doc and function declaration).]]></summary>
          <sample><![CDATA[var method = form.newFormMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
        </property>
        <property name="showInMenu">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the method appears or not in the "Methods" menu of Servoy Client.]]></description>
          <summary><![CDATA[Flag that tells if the method appears or not in the "Methods" menu of Servoy Client.]]></summary>
          <sample><![CDATA[var method = form.newFormMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getArguments">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[Array of the arguments, null if not specified.]]></return>
          <description><![CDATA[gets the argument array for this method if that is set for the specific action this method is taken from.
Will return null by default. This is only for reading, you can't alter the arguments through this array, 
for that you need to create a new object through solutionModel.newMethodWithArguments(..) and assign it again.]]></description>
          <summary><![CDATA[gets the argument array for this method if that is set for the specific action this method is taken from.]]></summary>
          <sample><![CDATA[var frm = solutionModel.getForm("myForm");
	var button = frm.getButton("button");
 // get the arguments from the button.
	var arguments = button.onAction.getArguments();
 if (arguments && arguments.length > 1 && arguments[1] == 10) { 
   // change the value and assign it back to the onAction.
   arguments[1] = 50;
   button.onAction = solutionModel.newMethodWithArguments(button.onAction,arguments);
 }]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[A String holding the name of this method.]]></return>
          <description><![CDATA[The name of the method.]]></description>
          <summary><![CDATA[The name of the method.]]></summary>
          <sample><![CDATA[var method = form.newFormMethod('function original() { application.output("Original function."); }');
application.output('original method name: ' + method.getName());
application.output('original method code: ' + method.code);
method.code = 'function changed() { application.output("This is another function."); }';
method.showInMenu = false;
var button = form.newButton('Click me!', 10, 10, 100, 30, method);]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSPart" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPart">
      <constants>
        <constant name="BODY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

This is the default part that is repeated for each record (being 
displayed and/or printed).]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var body = form.newPart(JSPart.BODY, 320);]]></sample>
        </constant>
        <constant name="FOOTER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts.

A footer is displayed at the bottom of each page when printed ad can
contain summaries of the current selection of records. In List view, the 
footer is displayed at the bottom of the list of records.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var footer = form.newPart(JSPart.FOOTER, 440);]]></sample>
        </constant>
        <constant name="HEADER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

A header is displayed at the top of each page when printed and can contain
summaries of the current selection of records. In List view the header is
displayed above the list of records.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var header = form.newPart(JSPart.HEADER, 80);]]></sample>
        </constant>
        <constant name="LEADING_GRAND_SUMMARY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

A Leading Grand Summary can be placed before the body part. It can contain
summary fields that will generate summaries for the entire foundset.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var leadingGrandSummary = form.newPart(JSPart.LEADING_GRAND_SUMMARY, 120);]]></sample>
        </constant>
        <constant name="LEADING_SUBSUMMARY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

A Leading Subsummary can be placed before the body part. There can be multiple Leading Subsummaries
per form. Each Subsummary part has a set of Group By fields which are used to group data together.
Each Subsummary part can contain summary fields, which will be printed once for each group of data.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);]]></sample>
        </constant>
        <constant name="TITLE_FOOTER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

Appears once on the first page of a printed report. If a Footer is available, it is
replaced by the Title Footer on the first page.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var titleFooter = form.newPart(JSPart.TITLE_FOOTER, 500);]]></sample>
        </constant>
        <constant name="TITLE_HEADER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

Appears only once on the first page of a printed report or on top of the first screen
of a foundset. If a Header is available it is replace by the Title Header on the first
page.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var titleHeader = form.newPart(JSPart.TITLE_HEADER, 40);]]></sample>
        </constant>
        <constant name="TRAILING_GRAND_SUMMARY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

A Trailing Grand Summary can be placed after the body part. It can contain
summary fields that will generate summaries for the entire foundset.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var trailingGrandSummary = form.newPart(JSPart.TRAILING_GRAND_SUMMARY, 400);]]></sample>
        </constant>
        <constant name="TRAILING_SUBSUMMARY">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant use for specifying the type of form parts. 

A Trailing Subsummary can be placed before the body part. There can be multiple Trailing Subsummaries
per form. Each Subsummary part has a set of Group By fields which are used to group data together.
Each Subsummary part can contain summary fields, which will be printed once for each group of data.]]></description>
          <summary><![CDATA[Constant use for specifying the type of form parts.]]></summary>
          <sample><![CDATA[var trailingSubsummary = form.newPart(JSPart.TRAILING_SUBSUMMARY, 360);]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="allowBreakAcrossPageBounds">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the remainder of a selected part that does not fit on the page currently 
being printed, will not be transported to the next page - it will break where the page 
ends and continue on the next page. 

NOTE: Make sure to set this option when you are printing more than one page per record.]]></description>
          <summary><![CDATA[When set, the remainder of a selected part that does not fit on the page currently 
being printed, will not be transported to the next page - it will break where the page 
ends and continue on the next page.]]></summary>
          <sample><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.allowBreakAcrossPageBounds = true;
body.discardRemainderAfterBreak = true;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the form part. 

NOTE: When no background color has been set, the default background 
color will be determined by the Look and Feel (LAF) that has been selected 
in Application Preferences.]]></description>
          <summary><![CDATA[The background color of the form part.]]></summary>
          <sample><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.background = 'green';]]></sample>
        </property>
        <property name="discardRemainderAfterBreak">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the remainder of a selected part that is broken due to the page 
ending will not be printed on the next page - it will be discarded.]]></description>
          <summary><![CDATA[When set, the remainder of a selected part that is broken due to the page 
ending will not be printed on the next page - it will be discarded.]]></summary>
          <sample><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.allowBreakAcrossPageBounds = true;
body.discardRemainderAfterBreak = true;]]></sample>
        </property>
        <property name="groupbyDataProviderIDs">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[For Leading Subsummary or Trailing Subsummary parts, one or more
dataproviders can be added as Break (GroupBy) dataproviders. The
Leading/Trailing Subsummary parts will be displayed once for each
resulted group of data.]]></description>
          <summary><![CDATA[For Leading Subsummary or Trailing Subsummary parts, one or more
dataproviders can be added as Break (GroupBy) dataproviders.]]></summary>
          <sample><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);
leadingSubsummary.groupbyDataProviderIDs = 'my_table_text';]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height of a selected part; specified in pixels. 

This height property is the lowerbound as its ending Y value (0 == top of the form).]]></description>
          <summary><![CDATA[The height of a selected part; specified in pixels.]]></summary>
          <sample><![CDATA[var part = form.newPart(JSPart.HEADER, 100);
part.height = 200;]]></sample>
        </property>
        <property name="pageBreakAfterOccurrence">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[A page break will be inserted after a specified number of occurences of a selected part.]]></description>
          <summary><![CDATA[A page break will be inserted after a specified number of occurences of a selected part.]]></summary>
          <sample><![CDATA[var body = form.newPart(JSPart.BODY, 320);
body.pageBreakAfterOccurrence = 2;]]></sample>
        </property>
        <property name="pageBreakBefore">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, a page break will be inserted before each occurrence of a selected part.]]></description>
          <summary><![CDATA[When set, a page break will be inserted before each occurrence of a selected part.]]></summary>
          <sample><![CDATA[var leadingSubsummary = form.newPart(JSPart.LEADING_SUBSUMMARY, 160);
leadingSubsummary.groupbyDataProviderIDs = 'my_table_text';
leadingSubsummary.pageBreakBefore = true;]]></sample>
        </property>
        <property name="restartPageNumber">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, page numbering will be restarted after each occurrence of a selected part.]]></description>
          <summary><![CDATA[When set, page numbering will be restarted after each occurrence of a selected part.]]></summary>
          <sample><![CDATA[var trailingSubsummary = form.newPart(JSPart.TRAILING_SUBSUMMARY, 360);
trailingSubsummary.groupbyDataProviderIDs = 'my_table_text';
trailingSubsummary.restartPageNumber = true;]]></sample>
        </property>
        <property name="sinkWhenLast">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the last part on a page (such as a Trailing Grand Summary part) will 
"sink" to the lowest part of the page when there is free space.]]></description>
          <summary><![CDATA[When set, the last part on a page (such as a Trailing Grand Summary part) will 
"sink" to the lowest part of the page when there is free space.]]></summary>
          <sample><![CDATA[var trailingGrandSummary = form.newPart(JSPart.TRAILING_GRAND_SUMMARY, 400);
trailingGrandSummary.sinkWhenLast = true;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getPartType">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[A number representing the type of the form part.]]></return>
          <description><![CDATA[The type of this part.]]></description>
          <summary><![CDATA[The type of this part.]]></summary>
          <sample><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
        </function>
        <function name="getPartYOffset">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[A number holding the Y offset of the form part.]]></return>
          <description><![CDATA[The Y offset of the part on the form, this will include all the super forms parts if this form extends a form.]]></description>
          <summary><![CDATA[The Y offset of the part on the form, this will include all the super forms parts if this form extends a form.]]></summary>
          <sample><![CDATA[var allParts = form.getParts()
for (var i=0; i<allParts.length; i++) {
	if (allParts[i].getPartType() == JSPart.BODY)
		application.output('body Y offset: ' + allParts[i].getPartYOffset());
}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSPortal" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPortal">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="initialSort">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The default sort order for the rows displayed in the portal.]]></description>
          <summary><![CDATA[The default sort order for the rows displayed in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',100,100,20);
childrenPortal.newTextField('child_table_parent_id', 200, 100, 20);
childrenPortal.initialSort = 'child_table_text desc';]]></sample>
        </property>
        <property name="multiLine">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, portal rows can have a custom layout of fields, buttons, etc. displayed for each 
matching row (rather than the default "grid").]]></description>
          <summary><![CDATA[When set, portal rows can have a custom layout of fields, buttons, etc.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
// Set the fields some distance apart horizontally. By default this distance
// is ignored and the components are put in a grid.
var idField = childrenPortal.newTextField('child_table_id', 0, 100, 20);
idField.background = 'yellow';
var textField = childrenPortal.newTextField('child_table_text',150,100,20);
textField.background = 'green';
var parentIdField = childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
parentIdField.background = 'orange';
// Disable the grid placing of components, and make the distance between components
// become active.
childrenPortal.multiLine = true;]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="relationName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the relationship between the table related to the currently active 
form and the table you want to show data from in the portal.]]></description>
          <summary><![CDATA[The name of the relationship between the table related to the currently active 
form and the table you want to show data from in the portal.]]></summary>
          <sample><![CDATA[// Create the portal based on one relation.
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var idField = childrenPortal.newTextField('child_table_id', 0, 100, 20);
var textField = childrenPortal.newTextField('child_table_text',150,100,20);
var parentIdField = childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Now make the portal be based on another relation.
childrenPortal.relationName = 'parent_to_smaller_children';]]></sample>
        </property>
        <property name="reorderable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the portal rows can be re-ordered by dragging the column headers.]]></description>
          <summary><![CDATA[When set, the portal rows can be re-ordered by dragging the column headers.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.reorderable = true;]]></sample>
        </property>
        <property name="resizeble">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set the portal rows can be resized by users.]]></description>
          <summary><![CDATA[When set the portal rows can be resized by users.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Make the columns resizeable. By default they are not resizeable.
childrenPortal.resizeble = true;]]></sample>
        </property>
        <property name="rowBGColorCalculation">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The calculation dataprovider (such as servoy_row_bgcolor) used to add background 
color and highlight selected or alternate portal rows.]]></description>
          <summary><![CDATA[The calculation dataprovider (such as servoy_row_bgcolor) used to add background 
color and highlight selected or alternate portal rows.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
// Set the row background color calculation. The name should be of a calculation that
// exists in the table.
childrenPortal.rowBGColorCalculation = 'row_color';]]></sample>
        </property>
        <property name="rowHeight">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height of each row in pixels. If 0 or not set, the height defaults to 10.]]></description>
          <summary><![CDATA[The height of each row in pixels.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.rowHeight = 30;]]></sample>
        </property>
        <property name="scrollbars">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Scrollbar options for the vertical and horizontal scrollbars. Each of the
vertical and horizontal scrollbars can be configured to display all the time,
to display only when needed or to never display.]]></description>
          <summary><![CDATA[Scrollbar options for the vertical and horizontal scrollbars.]]></summary>
          <sample><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;
var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;
var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
        </property>
        <property name="showHorizontalLines">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, the portal displays horizontal lines between the rows. 

NOTE: 
In a multi-line portal, a horizontal line is only displayed 
in the selected row; to display a horizontal line in all rows, add a 
line to the portal.]]></description>
          <summary><![CDATA[When set, the portal displays horizontal lines between the rows.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.showHorizontalLines = true;
childrenPortal.showVerticalLines = true;]]></sample>
        </property>
        <property name="showVerticalLines">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set the portal displays vertical lines between the columns. 

NOTE: 
In a multi-line portal, a vertical line is only displayed 
in the selected row; to display a vertical line in all rows, add 
a line to the portal.]]></description>
          <summary><![CDATA[When set the portal displays vertical lines between the columns.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.showHorizontalLines = true;
childrenPortal.showVerticalLines = true;]]></sample>
        </property>
        <property name="sortable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[When set, users can sort the contents of the portal by clicking on the column headings.]]></description>
          <summary><![CDATA[When set, users can sort the contents of the portal by clicking on the column headings.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',150,100,20);
childrenPortal.newTextField('child_table_parent_id', 300, 100, 20);
childrenPortal.sortable = true;]]></sample>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSButton" type="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[A JSButton instance that corresponds to the button with the specified name.]]></return>
          <description><![CDATA[Retrieves a button from the portal based on the name of the button.]]></description>
          <summary><![CDATA[Retrieves a button from the portal based on the name of the button.]]></summary>
          <sample><![CDATA[var clickMethod = form.newFormMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var btn = childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);
btn.name = 'clickMeBtn'; // Give a name to the button, so we can retrieve it by name later.
// Retrieve the button by name and do something with it.
var btnBack = childrenPortal.getButton('clickMeBtn');
btnBack.background = 'yellow';
// Retrieve the button through the array of all buttons and do something with it.
var allButtons = childrenPortal.getButtons();
var btnBackAgain = allButtons[0];
btnBackAgain.foreground = 'red';]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the button to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getButtons">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSButton;" type="com.servoy.j2db.scripting.solutionmodel.JSButton[]"><![CDATA[An array with all buttons in the portal.]]></return>
          <description><![CDATA[Retrieves an array with all buttons in the portal.]]></description>
          <summary><![CDATA[Retrieves an array with all buttons in the portal.]]></summary>
          <sample><![CDATA[var clickMethod = form.newFormMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
var btn = childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);
btn.name = 'clickMeBtn'; // Give a name to the button, so we can retrieve it by name later.
// Retrieve the button by name and do something with it.
var btnBack = childrenPortal.getButton('clickMeBtn');
btnBack.background = 'yellow';
// Retrieve the button through the array of all buttons and do something with it.
var allButtons = childrenPortal.getButtons();
var btnBackAgain = allButtons[0];
btnBackAgain.foreground = 'red';]]></sample>
        </function>
        <function name="getField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance corresponding to the field with the specified name.]]></return>
          <description><![CDATA[Retrieves a field from this portal based on the name of the field.]]></description>
          <summary><![CDATA[Retrieves a field from this portal based on the name of the field.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 60, 60, 20);
tfield.name = 'textField'; // Give a name to the field so we can retrieve it later by name.
// Retrieve the text field by its name and do something with it.
var textFieldBack = childrenPortal.getField('textField');
textFieldBack.background = 'yellow';
// Retrieve the calendar field through the array of all fields and do something with it.
var allFields = childrenPortal.getFields();
var calFieldBack = allFields[0];
calFieldBack.foreground = 'red';]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the field to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFields">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSField;" type="com.servoy.j2db.scripting.solutionmodel.JSField[]"><![CDATA[An array with JSField instances corresponding to all fields in the portal.]]></return>
          <description><![CDATA[Retrieves an array with all fields in a portal.]]></description>
          <summary><![CDATA[Retrieves an array with all fields in a portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 60, 60, 20);
tfield.name = 'textField'; // Give a name to the field so we can retrieve it later by name.
// Retrieve the text field by its name and do something with it.
var textFieldBack = childrenPortal.getField('textField');
textFieldBack.background = 'yellow';
// Retrieve the calendar field through the array of all fields and do something with it.
var allFields = childrenPortal.getFields();
var calFieldBack = allFields[0];
calFieldBack.foreground = 'red';]]></sample>
        </function>
        <function name="getIntercellSpacing">
          <argumentsTypes/>
          <return typecode="java.awt.Dimension" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[A java.awt.Dimension object holding the horizontal and vertical intercell spacing.]]></return>
          <description><![CDATA[The additional spacing between cell rows. Is composed from the horizontal spacing
and the vertical spacing.]]></description>
          <summary><![CDATA[The additional spacing between cell rows.]]></summary>
          <sample><![CDATA[var spacing = childrenPortal.getIntercellSpacing();
application.output("horizontal spacing: " + spacing.width);
application.output("vertical spacing: " + spacing.height);]]></sample>
        </function>
        <function name="getLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[A JSLabel instance corresponding to the label with the specified name.]]></return>
          <description><![CDATA[Retrieves a label from this portal based on the name of the label.]]></description>
          <summary><![CDATA[Retrieves a label from this portal based on the name of the label.]]></summary>
          <sample><![CDATA[var calLabel = childrenPortal.newLabel('Date', 120, 60, 20);
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20);
textLabel.name = 'textLabel'; // Give a name to this label, so we can retrieve it by name.
// Retrieve the second label by name.
var textLabelBack = childrenPortal.getLabel('textLabel');
textLabelBack.background = 'yellow';
// Retrieve the first label through the array of all labels.
var allLabels = childrenPortal.getLabels();
var calLabelBack = allLabels[0];
calLabelBack.foreground = 'red';]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the label to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getLabels">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSLabel;" type="com.servoy.j2db.scripting.solutionmodel.JSLabel[]"><![CDATA[An array of JSLabel instances corresponding to all labels in the portal.]]></return>
          <description><![CDATA[Retrieves all labels from the portal.]]></description>
          <summary><![CDATA[Retrieves all labels from the portal.]]></summary>
          <sample><![CDATA[var calLabel = childrenPortal.newLabel('Date', 120, 60, 20);
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20);
textLabel.name = 'textLabel'; // Give a name to this label, so we can retrieve it by name.
// Retrieve the second label by name.
var textLabelBack = childrenPortal.getLabel('textLabel');
textLabelBack.background = 'yellow';
// Retrieve the first label through the array of all labels.
var allLabels = childrenPortal.getLabels();
var calLabelBack = allLabels[0];
calLabelBack.foreground = 'red';]]></sample>
        </function>
        <function name="newButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSButton" type="com.servoy.j2db.scripting.solutionmodel.JSButton"><![CDATA[A JSButton instance representing the newly created button.]]></return>
          <description><![CDATA[Creates a new button on the portal with the given text, place, size and JSMethod as the onClick action.]]></description>
          <summary><![CDATA[Creates a new button on the portal with the given text, place, size and JSMethod as the onClick action.]]></summary>
          <sample><![CDATA[var clickMethod = form.newFormMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_child', 10, 10, 620, 460);
childrenPortal.newButton('Click me!', 400, 100, 20, clickMethod);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text to be displayed on the button.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the button. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the button.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the button. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The JSMethod object that should be executed when the button is clicked.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newCalendar">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created calendar.]]></return>
          <description><![CDATA[Creates a new calendar field in the portal. It is equivalent to calling "newField" 
with the type JSField.CALENDAR.]]></description>
          <summary><![CDATA[Creates a new calendar field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var cal = childrenPortal.newCalendar('my_table_date', 0, 60, 20);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newCheck">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created checkbox field.]]></return>
          <description><![CDATA[Creates a new checkbox field in the portal. It is equivalent to calling "newField" 
with the type JSField.CHECKS.]]></description>
          <summary><![CDATA[Creates a new checkbox field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var chk = childrenPortal.newCheck('my_table_options', 60, 60, 50);
chk.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newComboBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created combobox field.]]></return>
          <description><![CDATA[Creates a new combobox field in the portal. It is equivalent to calling "newField" 
with the type JSField.COMBOBOX.]]></description>
          <summary><![CDATA[Creates a new combobox field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var cmb = childrenPortal.newComboBox('my_table_options', 120, 160, 20);
cmb.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created field.]]></return>
          <description><![CDATA[Creates a new field on this form. The type of the field is specified by 
using one of the JSField constants like JSField.TEXT_FIELD.]]></description>
          <summary><![CDATA[Creates a new field on this form.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);

var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";

var cal = childrenPortal.newField('my_table_date', JSField.CALENDAR, 0, 60, 20);
var chk = childrenPortal.newField('my_table_options', JSField.CHECKS, 60, 60, 50);
chk.valuelist = vlist;
var cmb = childrenPortal.newField('my_table_options', JSField.COMBOBOX, 120, 160, 20);
cmb.valuelist = vlist;
var html = childrenPortal.newField('my_table_html', JSField.HTML_AREA, 180, 60, 50);
var img = childrenPortal.newField('my_table_image', JSField.IMAGE_MEDIA, 240, 60, 50);
var pwd = childrenPortal.newField('my_table_text', JSField.PASSWORD, 300, 60, 20);
var radio = childrenPortal.newField('my_table_options', JSField.RADIOS, 360, 60, 50);
radio.valuelist = vlist;
var rtf = childrenPortal.newField('my_table_rtf', JSField.RTF_AREA, 420, 60, 50);
var tarea = childrenPortal.newField('my_table_text', JSField.TEXT_AREA, 480, 60, 50);
var tfield = childrenPortal.newField('my_table_text', JSField.TEXT_FIELD, 540, 60, 20);
var tahead = childrenPortal.newField('my_table_text', JSField.TYPE_AHEAD, 600, 60, 20);
tahead.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="displaytype" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The display type of the field. Use constants from JSField for this parameter.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newHtmlArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created HTML Area field.]]></return>
          <description><![CDATA[Creates a new HTML Area field in the portal. It is equivalent to calling "newField" 
with the type JSField.HTML_AREA.]]></description>
          <summary><![CDATA[Creates a new HTML Area field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var html = childrenPortal.newHtmlArea('my_table_html', 180, 60, 50);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newImageMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created Image Media field.]]></return>
          <description><![CDATA[Creates a new Image Media field in the portal. It is equivalent to calling "newField" 
with the type JSField.IMAGE_MEDIA.]]></description>
          <summary><![CDATA[Creates a new Image Media field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var img = childrenPortal.newImageMedia('my_table_image', 240, 60, 50);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newLabel" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"/>
          <parameters>
            <parameter name="txt" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="newLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSLabel" type="com.servoy.j2db.scripting.solutionmodel.JSLabel"><![CDATA[A JSLabel instance that represents the newly created label.]]></return>
          <description><![CDATA[Creates a new label on the form, with the given text, place, size and an optional JSMethod as the onClick action.]]></description>
          <summary><![CDATA[Creates a new label on the form, with the given text, place, size and an optional JSMethod as the onClick action.]]></summary>
          <sample><![CDATA[var clickMethod = form.newFormMethod('function clickMe() { application.output("I was clicked!"); }');
var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var calLabel = childrenPortal.newLabel('Date', 120, 60, 20); 
// This will result in a button being actually created, because we specify an action.
var textLabel = childrenPortal.newLabel('Text', 180, 60, 20, clickMethod);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text that will be displayed in the label.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the label. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the label.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the label. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object" optional="true">
              <description><![CDATA[The JSMethod object that should be executed when the label is clicked.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created password field.]]></return>
          <description><![CDATA[Creates a new password field in the portal. It is equivalent to calling "newField" 
with the type JSField.PASSWORD.]]></description>
          <summary><![CDATA[Creates a new password field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var pwd = childrenPortal.newPassword('my_table_text', 300, 60, 20);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRadios">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created radio buttons.]]></return>
          <description><![CDATA[Creates a new radio buttons field in the portal. It is equivalent to calling "newField" 
with the type JSField.RADIOS.]]></description>
          <summary><![CDATA[Creates a new radio buttons field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var radio = childrenPortal.newRadios('my_table_options', 360, 60, 50);
radio.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRtfArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created RTF Area field.]]></return>
          <description><![CDATA[Creates a new RTF Area field in the portal. It is equivalent to calling "newField" 
with the type JSField.RTF_AREA.]]></description>
          <summary><![CDATA[Creates a new RTF Area field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var rtf = childrenPortal.newRtfArea('my_table_rtf', 420, 60, 50);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTextArea">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created text area field.]]></return>
          <description><![CDATA[Creates a new text area field in the portal. It is equivalent to calling "newField" 
with the type JSField.TEXT_AREA.]]></description>
          <summary><![CDATA[Creates a new text area field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var tarea = childrenPortal.newTextArea('my_table_text', 480, 60, 50);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTextField">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created text field.]]></return>
          <description><![CDATA[Creates a new text field in the portal. It is equivalent to calling "newField" 
with the type JSField.TEXT_FIELD.]]></description>
          <summary><![CDATA[Creates a new text field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var tfield = childrenPortal.newTextField('my_table_text', 540, 60, 20);]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newTypeAhead">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSField" type="com.servoy.j2db.scripting.solutionmodel.JSField"><![CDATA[A JSField instance that corresponds to the newly created type ahead field.]]></return>
          <description><![CDATA[Creates a new type ahead field in the portal. It is equivalent to calling "newField" 
with the type JSField.TYPE_AHEAD.]]></description>
          <summary><![CDATA[Creates a new type ahead field in the portal.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp', 'parent_to_my_table', 10, 10, 1180, 780);
var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
var tahead = childrenPortal.newTypeAhead('my_table_text', 600, 60, 20);
tahead.valuelist = vlist;]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The data provider for this field. Can be either a column name, or an instance of JSVariable.]]></description>
            </parameter>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The x coordinate of the field. If the portal does not have the "multiLine" property set, then the x coordinates are used only for determining the order of the columns in the grid. If the portal has the "multiLine" property set, then the components are actually displayed at the specified coordinates.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The width of the field.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The height of the field. In a portal the height of all components is set to the height of the first component, unless the "multiLine" property is set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setIntercellSpacing">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[The additional spacing between cell rows. Is composed from the horizontal spacing
and the vertical spacing.]]></description>
          <summary><![CDATA[The additional spacing between cell rows.]]></summary>
          <sample><![CDATA[var childrenPortal = form.newPortal('pp',rel,10,10,620,460);
childrenPortal.newTextField('child_table_id', 0, 100, 20);
childrenPortal.newTextField('child_table_text',100,100,20);
childrenPortal.newTextField('child_table_parent_id', 200, 100, 20);
childrenPortal.setIntercellSpacing(5,10);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The horizontal spacing between cells.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The vertical spacing between cells.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSRecord" qualifiedName="com.servoy.j2db.dataprocessing.Record">
      <properties>
        <property name="exception">
          <return typecode="java.lang.Exception" type="com.servoy.j2db.util.ServoyException"><![CDATA[The occurred exception.]]></return>
          <description><![CDATA[Returns last occurred exception on this record (or null).]]></description>
          <summary><![CDATA[Returns last occurred exception on this record (or null).]]></summary>
          <sample><![CDATA[var exception = record.exception;]]></sample>
        </property>
        <property name="foundset">
          <return typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[The parent foundset of the record.]]></return>
          <description><![CDATA[Returns parent foundset of the record.]]></description>
          <summary><![CDATA[Returns parent foundset of the record.]]></summary>
          <sample><![CDATA[var parent = record.foundset;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="deleteRecord" deprecated="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Delete this record from the Foundset and the underlying datasource.]]></description>
          <summary><![CDATA[Delete this record from the Foundset and the underlying datasource.]]></summary>
          <sample><![CDATA[var record= %%prefix%%foundset.getRecord(index);
record.deleteRecord();]]></sample>
        </function>
        <function name="getChangedData">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[a JSDataSet with the changed data of this record.]]></return>
          <description><![CDATA[Returns a JSDataSet with outstanding (not saved) changed data of this record.
column1 is the column name, colum2 is the old data and column3 is the new data.

NOTE: To return an array of records with outstanding changed data, see the function databaseManager.getEditedRecords().]]></description>
          <summary><![CDATA[Returns a JSDataSet with outstanding (not saved) changed data of this record.]]></summary>
          <sample><![CDATA[var dataset = record.getChangedData()
for( var i = 1 ; i <= dataset.getMaxRowIndex() ; i++ )
{
	application.output(dataset.getValue(i,1) +' '+ dataset.getValue(i,2) +' '+ dataset.getValue(i,3));
}]]></sample>
        </function>
        <function name="getPKs">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[an Array with the pk values.]]></return>
          <description><![CDATA[Returns an array with the primary key values of the record.]]></description>
          <summary><![CDATA[Returns an array with the primary key values of the record.]]></summary>
          <sample><![CDATA[var pks = foundset.getSelectedRecord().getPKs() // also foundset.getRecord can be used]]></sample>
        </function>
        <function name="isEditing">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean when in edit.]]></return>
          <description><![CDATA[Returns true or false if the record is being edited or not.]]></description>
          <summary><![CDATA[Returns true or false if the record is being edited or not.]]></summary>
          <sample><![CDATA[var isEditing = foundset.getSelectedRecord().isEditing() // also foundset.getRecord can be used]]></sample>
        </function>
        <function name="rollbackChanges">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[If this record exists in underlying datasource it will do a re-query to fetch the latest data from the datasource.
NOTE: If you use transactions then it will be the data of your last update of this record in the transaction,
not the latest committed data of that record in the datasource.]]></description>
          <summary><![CDATA[If this record exists in underlying datasource it will do a re-query to fetch the latest data from the datasource.]]></summary>
          <sample><![CDATA[var record= %%prefix%%foundset.getSelectedRecord();
record.rollbackChanges();]]></sample>
        </function>
        <function name="save" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the save was done without an error.]]></return>
          <description><![CDATA[Saves this record to the datasource if it had changes.]]></description>
          <summary><![CDATA[Saves this record to the datasource if it had changes.]]></summary>
          <sample><![CDATA[var record= %%prefix%%foundset.getSelectedRecord();
record.save();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSRelation" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelation">
      <constants>
        <constant name="INNER_JOIN">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for set/get the joinType of a JSRelation. It is also used in solutionModel.newRelation(...).]]></description>
          <summary><![CDATA[Constant for set/get the joinType of a JSRelation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;]]></sample>
        </constant>
        <constant name="LEFT_OUTER_JOIN">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for set/get the joinType of a JSRelation. It is also used in solutionModel.newRelation(...).]]></description>
          <summary><![CDATA[Constant for set/get the joinType of a JSRelation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="allowCreationRelatedRecords">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if related records can be created through this relation.

The default value of this flag is "false".]]></description>
          <summary><![CDATA[Flag that tells if related records can be created through this relation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.allowCreationRelatedRecords = true;]]></sample>
        </property>
        <property name="allowParentDeleteWhenHavingRelatedRecords">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the parent record can be deleted while it has related records.

The default value of this flag is "true".]]></description>
          <summary><![CDATA[Flag that tells if the parent record can be deleted while it has related records.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.allowParentDeleteWhenHavingRelatedRecords = false;]]></sample>
        </property>
        <property name="deleteRelatedRecords">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if related records should be deleted or not when a parent record is deleted.

The default value of this flag is "false".]]></description>
          <summary><![CDATA[Flag that tells if related records should be deleted or not when a parent record is deleted.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.deleteRelatedRecords = true;]]></sample>
        </property>
        <property name="foreignDataSource">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Qualified name of the foreign data source. Contains both the name of the foreign
server and the name of the foreign table.]]></description>
          <summary><![CDATA[Qualified name of the foreign data source.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryDataSource = 'db:/user_data/another_parent_table';
relation.foreignDataSource = 'db:/user_data/another_child_table';]]></sample>
        </property>
        <property name="foreignServerName" deprecated="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the server where the foreign table is located.]]></description>
          <summary><![CDATA[The name of the server where the foreign table is located.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryTableName = 'another_parent_table';
relation.primaryServerName = 'user_data';
relation.foreignTableName = 'another_child_table';
relation.foreignServerName = 'user_data';]]></sample>
        </property>
        <property name="foreignTableName" deprecated="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the foreign table.]]></description>
          <summary><![CDATA[The name of the foreign table.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryTableName = 'another_parent_table';
relation.primaryServerName = 'user_data';
relation.foreignTableName = 'another_child_table';
relation.foreignServerName = 'user_data';]]></sample>
        </property>
        <property name="initialSort">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String which specified a set of sort options for the initial sorting of data
retrieved through this relation.

Has the form "column_name asc, another_column_name desc, ...".]]></description>
          <summary><![CDATA[A String which specified a set of sort options for the initial sorting of data
retrieved through this relation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.initialSort = 'another_child_table_text asc';]]></sample>
        </property>
        <property name="joinType">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The join type that is performed between the primary table and the foreign table.
Can be "inner join" or "left outer join".]]></description>
          <summary><![CDATA[The join type that is performed between the primary table and the foreign table.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.joinType = JSRelation.LEFT_OUTER_JOIN;]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the relation.]]></description>
          <summary><![CDATA[The name of the relation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.name = 'anotherName';
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.relationName = relation.name;]]></sample>
        </property>
        <property name="primaryDataSource">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Qualified name of the primary data source. Contains both the name of the primary server
and the name of the primary table.]]></description>
          <summary><![CDATA[Qualified name of the primary data source.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryDataSource = 'db:/user_data/another_parent_table';
relation.foreignDataSource = 'db:/user_data/another_child_table';]]></sample>
        </property>
        <property name="primaryServerName" deprecated="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the server where the primary table is located.]]></description>
          <summary><![CDATA[The name of the server where the primary table is located.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryTableName = 'another_parent_table';
relation.primaryServerName = 'user_data';
relation.foreignTableName = 'another_child_table';
relation.foreignServerName = 'user_data';]]></sample>
        </property>
        <property name="primaryTableName" deprecated="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the primary table.]]></description>
          <summary><![CDATA[The name of the primary table.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.primaryTableName = 'another_parent_table';
relation.primaryServerName = 'user_data';
relation.foreignTableName = 'another_child_table';
relation.foreignServerName = 'user_data';]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getRelationItems">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSRelationItem;" type="com.servoy.j2db.scripting.solutionmodel.JSRelationItem[]"><![CDATA[An array of JSRelationItem instances representing the relation criteria of this relation.]]></return>
          <description><![CDATA[Returns an array of JSRelationItem objects representing the relation criteria defined for this relation.]]></description>
          <summary><![CDATA[Returns an array of JSRelationItem objects representing the relation criteria defined for this relation.]]></summary>
          <sample><![CDATA[var criteria = relation.getRelationItems();
for (var i=0; i<criteria.length; i++)
{
	var item = criteria[i];
	application.output('relation item no. ' + i);
	application.output('primary column: ' + item.primaryDataProviderID);
	application.output('operator: ' + item.operator);
	application.output('foreign column: ' + item.foreignColumnName);
}]]></sample>
        </function>
        <function name="newRelationItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSRelationItem" type="com.servoy.j2db.scripting.solutionmodel.JSRelationItem"><![CDATA[A JSRelationItem instance representing the newly added relation item.]]></return>
          <description><![CDATA[Creates a new relation item for this relation. The primary dataprovider, the foreign data provider 
and one relation operators (like '=' '!=' '>' '<') must be provided.]]></description>
          <summary><![CDATA[Creates a new relation item for this relation.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
relation.newRelationItem('another_parent_table_id', '=', 'another_child_table_parent_id');]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the primary dataprovider.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The operator used to relate the primary and the foreign dataproviders.]]></description>
            </parameter>
            <parameter name="foreinColumnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the foreign dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSRelationItem" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelationItem">
      <properties>
        <property name="foreignColumnName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the column from the destination table
that this relation item is based on.]]></description>
          <summary><![CDATA[The name of the column from the destination table
that this relation item is based on.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
        </property>
        <property name="operator">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The operator that defines the relationship between the primary dataprovider
and the foreign column.]]></description>
          <summary><![CDATA[The operator that defines the relationship between the primary dataprovider
and the foreign column.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
        </property>
        <property name="primaryDataProviderID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the column from the source table 
that this relation item is based on.]]></description>
          <summary><![CDATA[The name of the column from the source table 
that this relation item is based on.]]></summary>
          <sample><![CDATA[var relation = solutionModel.newRelation('parentToChild', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
var criteria = relation.newRelationItem('parent_table_id', '=', 'child_table_parent_id');
criteria.primaryDataProviderID = 'parent_table_text';
criteria.foreignColumnName = 'child_table_text';
criteria.operator = '<';]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="JSServer" qualifiedName="com.servoy.j2db.dataprocessing.JSServer">
      <functions>
        <function name="createNewTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSTableObject" type="com.servoy.j2db.dataprocessing.JSTableObject"><![CDATA[JSTableObject created table.]]></return>
          <description><![CDATA[Creates in this server a new table with the specified name.]]></description>
          <summary><![CDATA[Creates in this server a new table with the specified name.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("new_table");
	if (table) {
		table.createNewColumn("new_table_id", JSColumn.INTEGER, 0, false, true);
		if (server.synchronizeWithDB(table))
			application.output("New table created in the database.");
		else
			application.output("New table not created in database.");
	}
	else application.output("New table not created at all.");
}]]></sample>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to create.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="dropTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean success.]]></return>
          <description><![CDATA[Drops the table with the specified name from this server.]]></description>
          <summary><![CDATA[Drops the table with the specified name from this server.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var result = server.dropTable("new_table");
	if (result)
		application.output("Table dropped.");
	else
	application.output("Table not dropped.");
}]]></sample>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to drop.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSTableObject" type="com.servoy.j2db.dataprocessing.JSTableObject"><![CDATA[JSTableObject table.]]></return>
          <description><![CDATA[Returns a JSTable instance corresponding to the table with the specified name from this server.]]></description>
          <summary><![CDATA[Returns a JSTable instance corresponding to the table with the specified name from this server.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var table = server.getTable("employees");
	if (table) {
		var colNames = table.getColumnNames()
		application.output("Table has " + colNames.length + " columns.");
		for (var i=0; i<colNames.length; i++)
			application.output("Column " + i + ": " + colNames[i]);
	}
}]]></sample>
          <parameters>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the table to retrieve.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTableNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[Array of String table names.]]></return>
          <description><![CDATA[Returns an array with the names of all tables in this server.]]></description>
          <summary><![CDATA[Returns an array with the names of all tables in this server.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var tableNames = server.getTableNames();
	application.output("There are " + tableNames.length + " tables.");
	for (var i=0; i<tableNames.length; i++)
		application.output("Table " + i + ": " + tableNames[i]);
	}
else {
	plugins.dialogs.showInfoDialog("Attention","Server 'example_data' cannot be found.","OK");
}]]></sample>
        </function>
        <function name="isValid">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean valid state.]]></return>
          <description><![CDATA[Get valid state for the server.]]></description>
          <summary><![CDATA[Get valid state for the server.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (!server.isValid()) {
			application.output("Server not valid!");
}]]></sample>
        </function>
        <function name="reloadDataModel">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Reloads the datamodel from the database, if changed externally or via rawSQL plugin.

This call is not needed after a call to synchronizeWithDB().]]></description>
          <summary><![CDATA[Reloads the datamodel from the database, if changed externally or via rawSQL plugin.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
var result = plugins.rawSQL.executeSQL("example_data", null, 'CREATE TABLE raw_table (raw_table_id INTEGER)');
if (result) {
	application.output("Table created through rawSQL plugin.");
	if (server) {
		server.reloadDataModel();
		// All existing JSTableObject/JSColumn object references are invalid now! Use getTable to get new ones.
		var table = server.getTable("raw_table");
		if (table) {
			var colNames = table.getColumnNames()
			application.output("Table has " + colNames.length + " columns.");
			for (var i=0; i<colNames.length; i++)
				application.output("Column " + i + ": " + colNames[i]);
		}
	}
}
else {
	application.output("Raw table creation failed: " + plugins.rawSQL.getException());
}]]></sample>
        </function>
        <function name="synchronizeWithDB">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.JSTableObject"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean success.]]></return>
          <description><![CDATA[Synchronizes a JSTable instance with the database. If columns were added to or removed from the JSTable instance, all these changes will now be persisted to the database.]]></description>
          <summary><![CDATA[Synchronizes a JSTable instance with the database.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("new_table");
	if (table) {
		table.createNewColumn("new_table_id", JSColumn.INTEGER, 0, false, true);
		if (server.synchronizeWithDB(table))
			application.output("New table created in the database.");
		else
			application.output("New table not created in database.");
	}
	else application.output("New table not created at all.");
}]]></sample>
          <parameters>
            <parameter name="table" type="com.servoy.j2db.dataprocessing.JSTableObject" typecode="com.servoy.j2db.dataprocessing.JSTableObject">
              <description><![CDATA[A JSTableObject instance that should be synchronized.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSStyle" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSStyle">
      <properties>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The textual content of the style.]]></description>
          <summary><![CDATA[The textual content of the style.]]></summary>
          <sample><![CDATA[var st = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
st.text = st.text + 'field { background-color: blue; }';
form.styleName = 'myStyle';
application.output('Style name is: ' + st.getName());]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[A String holding the name of the style.]]></return>
          <description><![CDATA[Gets the name of the style.]]></description>
          <summary><![CDATA[Gets the name of the style.]]></summary>
          <sample><![CDATA[var st = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
st.text = st.text + 'field { background-color: blue; }';
form.styleName = 'myStyle';
application.output('Style name is: ' + st.getName());]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSTab" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTab">
      <properties>
        <property name="background" deprecated="true" undocumented="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </property>
        <property name="containsForm">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <description><![CDATA[The name of the form displayed in the tab.]]></description>
          <summary><![CDATA[The name of the form displayed in the tab.]]></summary>
          <sample><![CDATA[var childForm = solutionModel.newForm('childForm', 'example_data', 'child_table', 'null', false, 400, 300);
var anotherChildForm = solutionModel.newForm('anotherChildForm', 'example_data', 'child_table', 'null', false, 400, 300);
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.containsForm = anotherChildForm;]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the tab.]]></description>
          <summary><![CDATA[The foreground color of the tab.]]></summary>
          <sample><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.foreground = '#FF0000';]]></sample>
        </property>
        <property name="height" deprecated="true" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </property>
        <property name="imageMedia">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
          <description><![CDATA[The name of the image Media file used.]]></description>
          <summary><![CDATA[The name of the image Media file used.]]></summary>
          <sample><![CDATA[var bytes = plugins.file.readFile('d:/ball.jpg');
var ballImage = solutionModel.newMedia('ball.jpg', bytes);
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.imageMedia = ballImage;]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the tab.]]></description>
          <summary><![CDATA[The name of the tab.]]></summary>
          <sample><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.name = 'firstTabRenamed';]]></sample>
        </property>
        <property name="relationName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the relation that links the form which contains the tab 
with the form displayed in the tab.]]></description>
          <summary><![CDATA[The name of the relation that links the form which contains the tab 
with the form displayed in the tab.]]></summary>
          <sample><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm);
firstTab.relationName = 'parent_table_to_child_table';]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text on the tab.]]></description>
          <summary><![CDATA[The text on the tab.]]></summary>
          <sample><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.text = 'Better Title';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The text displayed when hovering over the component with a mouse cursor.

NOTE:
HTML should be used for multi-line tooltips; you can also use any
valid HTML tags to format tooltip text. For example: 
<html>This includes<b>bolded text</b> and 
<font color='blue'>BLUE</font> text as well.</html>]]></description>
          <summary><![CDATA[The text displayed when hovering over the component with a mouse cursor.]]></summary>
          <sample><![CDATA[var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.toolTipText = 'Tooltip';]]></sample>
        </property>
        <property name="width" deprecated="true" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The X coordinate of the tab. This influences the order in which the tabs are displayed. 
The tabs are displayed in increasing order of the X coordinate. If two tabs have the 
same X coordinate, then they are displayed in increasing order of the Y coordinate.]]></description>
          <summary><![CDATA[The X coordinate of the tab.]]></summary>
          <sample><![CDATA[// Create two tabs, then make the second one be displayed to the left of the first
// by setting their X coordinates in the needed order.
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.x = 10;
var secondTab = tabs.newTab('secondTab', 'Another Child Form', anotherChildForm);
secondTab.x = 0;]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Y coordinate of the tab. Together with the X coordinate, this influences the order 
in which the tabs are displayed. The tabs are displayed in increasing order of the X coordinate,
and if two tabs have the same X coordinate, then they are displayed in increasing order 
of the Y coordinate.]]></description>
          <summary><![CDATA[The Y coordinate of the tab.]]></summary>
          <sample><![CDATA[// Create two tabs, then make the second one be displayed to the left of the first
// by setting their X to the same value and Y coordinates in the needed order. 
var firstTab = tabs.newTab('firstTab', 'Child Form', childForm, relation);
firstTab.x = 0;
firstTab.y = 10;
var secondTab = tabs.newTab('secondTab', 'Another Child Form', anotherChildForm);
secondTab.x = 0;
secondTab.y = 0;]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="JSTabPanel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTabPanel">
      <properties>
        <property name="anchors">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized. 

If opposite anchors are activated then the component with grow or 
shrink with the window. For example if Top and Bottom are activated, 
then the component will grow/shrink when the window is vertically 
resized. If Left and Right are activated then the component
will grow/shrink when the window is horizontally resized. 

If opposite anchors are not activated, then the component will 
keep a constant distance from the sides of the window which
correspond to the activated anchors.]]></description>
          <summary><![CDATA[Enables a component to stick to a specific side of form and/or to 
grow or shrink when a window is resized.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('mediaForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var strechAllDirectionsLabel = form.newLabel('Strech all directions', 10, 10, 380, 280);
strechAllDirectionsLabel.background = 'red';
strechAllDirectionsLabel.anchors = SM_ANCHOR.ALL;	
var strechVerticallyLabel = form.newLabel('Strech vertically', 10, 10, 190, 280);
strechVerticallyLabel.background = 'green';
strechVerticallyLabel.anchors = SM_ANCHOR.WEST | SM_ANCHOR.NORTH | SM_ANCHOR.SOUTH;
var strechHorizontallyLabel = form.newLabel('Strech horizontally', 10, 10, 380, 140);
strechHorizontallyLabel.background = 'blue';
strechHorizontallyLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST | SM_ANCHOR.EAST;
var stickToTopLeftCornerLabel = form.newLabel('Stick to top-left corner', 10, 10, 200, 100);
stickToTopLeftCornerLabel.background = 'orange';
stickToTopLeftCornerLabel.anchors = SM_ANCHOR.NORTH | SM_ANCHOR.WEST; // This is equivalent to SM_ANCHOR.DEFAULT 
var stickToBottomRightCornerLabel = form.newLabel('Stick to bottom-right corner', 190, 190, 200, 100);
stickToBottomRightCornerLabel.background = 'pink';
stickToBottomRightCornerLabel.anchors = SM_ANCHOR.SOUTH | SM_ANCHOR.EAST;]]></sample>
        </property>
        <property name="background">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The background color of the component.]]></description>
          <summary><![CDATA[The background color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var greenLabel = form.newLabel('Green',10,10,100,50);
greenLabel.background = 'green'; // Use generic names for colors.	
var redField = form.newField('parent_table_text',JSField.TEXT_FIELD,10,110,100,30);
redField.background = '#FF0000'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="borderType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The type, color and style of border of the component.]]></description>
          <summary><![CDATA[The type, color and style of border of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var field = form.newField('my_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
field.borderType = 'LineBorder,2,#FF0000';]]></sample>
        </property>
        <property name="closeOnTabs" deprecated="true" undocumented="true">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
        </property>
        <property name="fontType">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The font type of the component.]]></description>
          <summary><![CDATA[The font type of the component.]]></summary>
          <sample><![CDATA[//HINT: To know exactly the notation of this property set it in the designer and then read it once out through the solution model.
var label = form.newLabel('Text here', 10, 50, 100, 20);
label.fontType = 'Times New Roman,1,14';]]></sample>
        </property>
        <property name="foreground">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The foreground color of the component.]]></description>
          <summary><![CDATA[The foreground color of the component.]]></summary>
          <sample><![CDATA[// This property can be used on all types of components.
// Here it is illustrated only for labels and fields.
var labelWithBlueText = form.newLabel('Blue text', 10, 10, 100, 30);
labelWithBlueText.foreground = 'blue'; // Use generic names for colors.
var fieldWithYellowText = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
fieldWithYellowText.foreground = '#FFFF00'; // Use RGB codes for colors.]]></sample>
        </property>
        <property name="formIndex">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The Z index of this component. If two components overlap,
then the component with higher Z index is displayed above
the component with lower Z index.]]></description>
          <summary><![CDATA[The Z index of this component.]]></summary>
          <sample><![CDATA[var labelBelow = form.newLabel('Green', 10, 10, 100, 50);
labelBelow.background = 'green';	
labelBelow.formIndex = 10;
var fieldAbove = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 30);
fieldAbove.background = '#FF0000';
fieldAbove.formIndex = 20;]]></sample>
        </property>
        <property name="groupID">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing a group ID for this component. If several
components have the same group ID then they belong to the same
group of components. Using the group itself, all components can
be disabled/enabled or made invisible/visible.
The group id should be a javascript compatible identifier to allow access of the group in scripting.]]></description>
          <summary><![CDATA[A String representing a group ID for this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var label = form.newLabel('Green', 10, 10, 100, 20);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
label.groupID = 'someGroup';
field.groupID = 'someGroup';	
forms['someForm'].elements.someGroup.enabled = false;]]></sample>
        </property>
        <property name="height">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The height in pixels of the component.]]></description>
          <summary><![CDATA[The height in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the component. Through this name it can also accessed in methods.]]></description>
          <summary><![CDATA[The name of the component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('someForm', 'example_data', 'parent_table', 'null', false, 620, 300);
var label = form.newLabel('Label', 10, 10, 150, 150);
label.name = 'myLabel'; // Give a name to the component.
forms['someForm'].controller.show()
// Now use the name to access the component.
forms['someForm'].elements['myLabel'].text = 'Updated text';]]></sample>
        </property>
        <property name="onTabChange">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[Method to be executed when the selected tab is changed in the tab panel.]]></description>
          <summary><![CDATA[Method to be executed when the selected tab is changed in the tab panel.]]></summary>
          <sample><![CDATA[var onTabChangeMethod = form.newFormMethod('function onTabChange(previousIndex, event) { application.output("Tab changed from previous index " + previousIndex + " at " + event.getTimestamp()); }');
var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.onTabChange = onTabChangeMethod;]]></sample>
        </property>
        <property name="printSliding">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Enables an element to resize based on its content and/or move when printing.
The component can move horizontally or vertically and can grow or shrink in 
height and width, based on its content and the content of neighboring 
components.]]></description>
          <summary><![CDATA[Enables an element to resize based on its content and/or move when printing.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var slidingLabel = form.newLabel('Some long text here', 10, 10, 5, 5);
slidingLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT | SM_PRINT_SLIDING.GROW_WIDTH;
slidingLabel.background = 'gray';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </property>
        <property name="printable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component should be printed or not when the form is printed.

By default components are printable.]]></description>
          <summary><![CDATA[Flag that tells if the component should be printed or not when the form is printed.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var printedField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var notPrintedField = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 40, 100, 20);
notPrintedField.printable = false; // This field won't show up in print preview and won't be printed.
forms['printForm'].controller.showPrintPreview()]]></sample>
        </property>
        <property name="scrollTabs">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells how to arrange the tabs if they don't fit on a single line.
If this flag is set, then the tabs will stay on a single line, but there will
be the possibility to scroll them to the left and to the right. If this flag
is not set, then the tabs will be arranged on multiple lines.]]></description>
          <summary><![CDATA[Flag that tells how to arrange the tabs if they don't fit on a single line.]]></summary>
          <sample><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 200, 200);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.scrollTabs = true;]]></sample>
        </property>
        <property name="selectedTabColor" deprecated="true" undocumented="true">
          <return typecode="java.awt.Color" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </property>
        <property name="styleClass">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the style class that should be applied to this component.

When defining style classes for specific component types, their names
must be prefixed according to the type of the component. For example 
in order to define a class names 'fancy' for fields, in the style
definition the class must be named 'field.fancy'. If it would be 
intended for labels, then it would be named 'label.fancy'. When specifying
the class name for a component, the prefix is dropped however. Thus the
field or the label will have its styleClass property set to 'fancy' only.]]></description>
          <summary><![CDATA[The name of the style class that should be applied to this component.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
var style = solutionModel.newStyle('myStyle','field.fancy { background-color: yellow; }');
form.styleName = 'myStyle'; // First set the style on the form.
field.styleClass = 'fancy'; // Then set the style class on the field.]]></sample>
        </property>
        <property name="tabOrientation">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The position of the tabs related to the tab panel. Can be one of TOP, RIGHT, BOTTOM, LEFT,
HIDE, SPLIT_HORIZONTAL, SPLIT_VERTICAL. The HIDE option makes the tabs invisible, SPLIT_HORIZONTAL
makes the tab panel horizontal split pane, SPLIT_VERTICAL makes the tab panel vertical split pane.]]></description>
          <summary><![CDATA[The position of the tabs related to the tab panel.]]></summary>
          <sample><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);
// The SM_ALIGNMENT constants TOP, RIGHT, BOTTOM and LEFT can be used to put the
// tabs into the needed position. Use SM_DEFAULTS.NONE to hide the tabs.
// The SM_ALIGNMENT constants SPLIT_HORIZONTAL, SPLIT_VERTICAL can be used to create a split pane
// where the first tab will be left component and the second tab will the right component. 
tabPanel.tabOrientation = SM_ALIGNMENT.BOTTOM;]]></sample>
        </property>
        <property name="tabSeq">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[An index that specifies the position of the component in the tab sequence. The components 
are put into the tab sequence in increasing order of this property. A value of 0 means
to use the default mechanism of building the tab sequence (based on their location on the form).
A value of -2 means to remove the component from the tab sequence.]]></description>
          <summary><![CDATA[An index that specifies the position of the component in the tab sequence.]]></summary>
          <sample><![CDATA[// Create three fields. Based on how they are placed, by default they will come one
// after another in the tab sequence.
var fieldOne = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 10, 100, 20);
var fieldTwo = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 40, 100, 20);
var fieldThree = form.newField('parent_table_id', JSField.TEXT_FIELD, 10, 70, 100, 20);
// Set the third field come before the first in the tab sequence, and remove the 
// second field from the tab sequence.
fieldOne.tabSeq = 2;
fieldTwo.tabSeq = SM_DEFAULTS.IGNORE;
fieldThree.tabSeq = 1;]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the component is transparent or not.

The default value is "false", that is the components 
are not transparent.]]></description>
          <summary><![CDATA[Flag that tells if the component is transparent or not.]]></summary>
          <sample><![CDATA[// Load an image from disk an create a Media object based on it.
var imageBytes = plugins.file.readFile('d:/ball.jpg');
var media = solutionModel.newMedia('ball.jpg', imageBytes);
// Put on the form a label with the image.
var image = form.newLabel('', 10, 10, 100, 100);
image.imageMedia = media;
// Put two fields over the image. The second one will be transparent and the
// image will shine through.
var nonTransparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 20, 100, 20);
var transparentField = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 50, 100, 20);
transparentField.transparent = true;]]></sample>
        </property>
        <property name="width">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The width in pixels of the component.]]></description>
          <summary><![CDATA[The width in pixels of the component.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original width: ' + field.width);
application.output('original height: ' + field.height);
field.width = 200;
field.height = 100;
application.output('modified width: ' + field.width);
application.output('modified height: ' + field.height);]]></sample>
        </property>
        <property name="x">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The x coordinate of the component on the form.]]></description>
          <summary><![CDATA[The x coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
        <property name="y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The y coordinate of the component on the form.]]></description>
          <summary><![CDATA[The y coordinate of the component on the form.]]></summary>
          <sample><![CDATA[var field = form.newField('parent_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
application.output('original location: ' + field.x + ', ' + field.y);
field.x = 90;
field.y = 90;
application.output('changed location: ' + field.x + ', ' + field.y);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSTab" type="com.servoy.j2db.scripting.solutionmodel.JSTab"><![CDATA[A JSTab instance represented the requested tab.]]></return>
          <description><![CDATA[Returns a JSTab instance representing the tab which has the specified name.]]></description>
          <summary><![CDATA[Returns a JSTab instance representing the tab which has the specified name.]]></summary>
          <sample><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
tabPanel.getTab('tab2').text = 'Child Two Changed';]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the tab that should be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabs">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSTab;" type="com.servoy.j2db.scripting.solutionmodel.JSTab[]"><![CDATA[An array of JSTab instances representing all tabs of this tabpanel.]]></return>
          <description><![CDATA[Returns an array of JSTab instances holding the tabs of the tab panel.]]></description>
          <summary><![CDATA[Returns an array of JSTab instances holding the tabs of the tab panel.]]></summary>
          <sample><![CDATA[var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne);
tabPanel.newTab('tab2', 'Child Two', childTwo);
var tabs = tabPanel.getTabs();
for (var i=0; i<tabs.length; i++)
	application.output("Tab " + i + " has text " + tabs[i].text);]]></sample>
        </function>
        <function name="newTab" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSTab" type="com.servoy.j2db.scripting.solutionmodel.JSTab"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="form" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </parameters>
        </function>
        <function name="newTab">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSTab" type="com.servoy.j2db.scripting.solutionmodel.JSTab"><![CDATA[A JSTab instance representing the newly created and added tab.]]></return>
          <description><![CDATA[Adds a new tab with the text label and JSForm and JSRelation (can be null for unrelated).]]></description>
          <summary><![CDATA[Adds a new tab with the text label and JSForm and JSRelation (can be null for unrelated).]]></summary>
          <sample><![CDATA[// Create a parent form.
var form = solutionModel.newForm('parentForm', 'example_data', 'parent_table', 'null', false, 640, 480);
// Create a first child form.
var childOne = solutionModel.newForm('childOne', 'example_data', 'child_table', 'null', false, 400, 300);
childOne.newField('child_table_text', JSField.TEXT_FIELD, 10, 10, 100, 20);
// Create a relation to link the parent form to the first child form.
var parentToChild = solutionModel.newRelation('parentToChild','example_data','parent_table','example_data','child_table',JSRelation.INNER_JOIN);
parentToChild.newRelationItem('parent_table_id','=','child_table_parent_id');
// Create a second child form.
var childTwo = solutionModel.newForm('childTwo', 'example_data', 'my_table', 'null', false, 400, 300);
childTwo.newField('my_table_image', JSField.IMAGE_MEDIA, 10, 10, 100, 100);
// Create a tab panel and add two tabs to it, with the two child forms.
var tabPanel = form.newTabPanel('tabs', 10, 10, 620, 460);
tabPanel.newTab('tab1', 'Child Two', childOne, parentToChild); // The first form uses the relation.
tabPanel.newTab('tab2', 'Child Two', childTwo);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new tab.]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The text to be displayed on the new tab.]]></description>
            </parameter>
            <parameter name="form" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm">
              <description><![CDATA[The JSForm instance that should be displayed in the new tab.]]></description>
            </parameter>
            <parameter name="relation" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object" optional="true">
              <description><![CDATA[A JSRelation object that relates the parent form with the form
                          that will be displayed in the new tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setOnTabChangeMethod" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSTabPanel" member="getOnTabChange"/>
          </sees>
        </function>
      </functions>
    </object>
    <object publicName="JSTable" qualifiedName="com.servoy.j2db.dataprocessing.JSTable">
      <functions>
        <function name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSColumn" type="com.servoy.j2db.dataprocessing.JSColumn"><![CDATA[JSColumn column.]]></return>
          <description><![CDATA[Returns a JSColumn for the named column.]]></description>
          <summary><![CDATA[Returns a JSColumn for the named column.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var jsColumn = jsTable.getColumn('campaign_name')]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to return the value from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getColumnNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[String array of column names.]]></return>
          <description><![CDATA[Returns an array containing the names of all table columns.]]></description>
          <summary><![CDATA[Returns an array containing the names of all table columns.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var columnNames = jsTable.getColumnNames()]]></sample>
        </function>
        <function name="getQuotedSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String table name, quoted if needed.]]></return>
          <description><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></description>
          <summary><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></summary>
          <sample><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where is_active = ?', [1])]]></sample>
        </function>
        <function name="getRowIdentifierColumnNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[String array of row identifier column names.]]></return>
          <description><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></description>
          <summary><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var identifierColumnNames = jsTable.getRowIdentifierColumnNames()]]></sample>
        </function>
        <function name="getSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String table name.]]></return>
          <description><![CDATA[Returns the table name.]]></description>
          <summary><![CDATA[Returns the table name.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var tableNameForDisplay = jsTable.getSQLName()]]></sample>
        </function>
        <function name="getServerName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String server name.]]></return>
          <description><![CDATA[Returns the Servoy server name.]]></description>
          <summary><![CDATA[Returns the Servoy server name.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var serverName = jsTable.getServerName()]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSTableObject" qualifiedName="com.servoy.j2db.dataprocessing.JSTableObject">
      <functions>
        <function name="createNewColumn">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSColumn" type="com.servoy.j2db.dataprocessing.JSColumn"/>
          <description><![CDATA[Creates a new column in this table. The name, type and length of the new column must be specified. For specifying the
type of the column, use the JSColumn constants. The column is not actually created in the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method. The "allowNull" optional argument specifies if the
column accepts null values (by default it does). The "pkColumn" optional argument specifies if the column is a primary key column (by default it is not).
The method returns a JSColumn instance that corresponds to the newly created column. If any error occurs and the column cannot be created, then the method
returns null.]]></description>
          <summary><![CDATA[Creates a new column in this table.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server)
{
	var table = server.createNewTable("users");
	if (table)
	{
		table.createNewColumn("id", JSColumn.INTEGER, 0, false, true);
		table.createNewColumn("name", JSColumn.TEXT, 100);
		table.createNewColumn("age", JSColumn.INTEGER, 0);
		table.createNewColumn("last_login", JSColumn.DATETIME, 0);
		var result = server.synchronizeWithDB(table);
		if (result) application.output("Table successfully created.");
		else application.output("Table not created.");
	}
}]]></sample>
          <parameters>
            <parameter name="columnName"/>
            <parameter name="type"/>
            <parameter name="length"/>
            <parameter name="allowNull"/>
            <parameter name="pkColumn"/>
          </parameters>
        </function>
        <function name="deleteColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Deletes the column with the specified name from this table. The column is not actually deleted from the database until this
table is synchronized with the database using the JSServer.synchronizeWithDB method.]]></description>
          <summary><![CDATA[Deletes the column with the specified name from this table.]]></summary>
          <sample><![CDATA[var server = plugins.maintenance.getServer("example_data");
if (server) {
	var table = server.getTable("users");
	if (table) {
		table.deleteColumn("last_login");
		server.synchronizeWithDB(table);
	}
}]]></sample>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSColumn" type="com.servoy.j2db.dataprocessing.JSColumn"><![CDATA[JSColumn column.]]></return>
          <description><![CDATA[Returns a JSColumn for the named column.]]></description>
          <summary><![CDATA[Returns a JSColumn for the named column.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var jsColumn = jsTable.getColumn('campaign_name')]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the column to return the value from.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getColumnNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[String array of column names.]]></return>
          <description><![CDATA[Returns an array containing the names of all table columns.]]></description>
          <summary><![CDATA[Returns an array containing the names of all table columns.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var columnNames = jsTable.getColumnNames()]]></sample>
        </function>
        <function name="getQuotedSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String table name, quoted if needed.]]></return>
          <description><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></description>
          <summary><![CDATA[Returns a quoted version of the table name, if necessary, as defined by the actual database used.]]></summary>
          <sample><![CDATA[//use with the raw SQL plugin:
//if the table name contains characters that are illegal in sql, the table name will be quoted
var jsTable = databaseManager.getTable('udm', 'campaigns')
var quotedTableName = jsTable.getQuotedSQLName()
plugins.rawSQL.executeSQL('udm',  quotedTableName,  'select * from ' + quotedTableName + ' where is_active = ?', [1])]]></sample>
        </function>
        <function name="getRowIdentifierColumnNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[String array of row identifier column names.]]></return>
          <description><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></description>
          <summary><![CDATA[Returns an array containing the names of the identifier (PK) column(s).]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var identifierColumnNames = jsTable.getRowIdentifierColumnNames()]]></sample>
        </function>
        <function name="getSQLName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String table name.]]></return>
          <description><![CDATA[Returns the table name.]]></description>
          <summary><![CDATA[Returns the table name.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var tableNameForDisplay = jsTable.getSQLName()]]></sample>
        </function>
        <function name="getServerName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String server name.]]></return>
          <description><![CDATA[Returns the Servoy server name.]]></description>
          <summary><![CDATA[Returns the Servoy server name.]]></summary>
          <sample><![CDATA[var jsTable = databaseManager.getTable('udm', 'campaigns')
var serverName = jsTable.getServerName()]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSUnit" scriptingName="jsunit" qualifiedName="com.servoy.j2db.scripting.JSUnitAssertFunctions">
      <functions>
        <function name="assertEquals">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.]]></description>
          <summary><![CDATA[Asserts that two values are equal.]]></summary>
          <sample><![CDATA[// Asserts that two values are equal. AssertionFailedError is thrown if the actual value does not match the regular expression.
jsunit.assertEquals("Solution name test", "someSolution", application.getSolutionName());
jsunit.assertEquals("Simple math test", 2, 1 + 1);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expected">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertFalse">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.]]></description>
          <summary><![CDATA[Asserts that a condition is false.]]></summary>
          <sample><![CDATA[// Asserts that a condition is false. AssertionFailedError is thrown if the evaluation was not false.
jsunit.assertFalse("False test", application.isLastPrintPreviewPrinted());]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="boolean_condition">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertFloatEquals">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.]]></description>
          <summary><![CDATA[Asserts that two floating point values are equal to within a given tolerance.]]></summary>
          <sample><![CDATA[// Asserts that two floating point values are equal to within a given tolerance. AssertionFailedError is thrown if the expected value is not within the tolerance of the actual one.
jsunit.assertFloatEquals("Float equals test", 3.12, 3.121, 0.0015);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expectedFloat">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actualFloat">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
            <parameter name="tolerance" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[tolerance when comparing.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertMatches">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          <summary><![CDATA[Asserts that a regular expression matches a string.]]></summary>
          <sample><![CDATA[// Asserts that a regular expression matches a string. AssertionFailedError is thrown if the expected value is not the actual one.
jsunit.assertMatches("Match test", new RegExp("gr(a|e)y"), "gray");]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="regularExpression">
              <description><![CDATA[the regular expression used for matching.]]></description>
            </parameter>
            <parameter name="actualString">
              <description><![CDATA[the actual value to be matched.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertNotNull">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.]]></description>
          <summary><![CDATA[Asserts that an object is not null.]]></summary>
          <sample><![CDATA[// Asserts that an object is not null. AssertionFailedError is thrown if the object is not null.
var a; // this is undefined, not null
jsunit.assertNotNull("Not null test", a);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="object">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertNotSame">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.]]></description>
          <summary><![CDATA[Asserts that two values are not the same.]]></summary>
          <sample><![CDATA[// Asserts that two values are not the same. AssertionFailedError is thrown if the expected value is the actual one.
var a = new Date(1990, 1, 1);
var b = new Date(1990, 1, 1);
jsunit.assertNotSame("Not same test", a, b);
jsunit.assertEquals("But equals", a, b);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="notExpected">
              <description><![CDATA[the value that is not expected.]]></description>
            </parameter>
            <parameter name="actual">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertNotUndefined">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.]]></description>
          <summary><![CDATA[Asserts that an object is not undefined.]]></summary>
          <sample><![CDATA[// Asserts that an object is not undefined. AssertionFailedError is thrown if the object is undefined.
var a = 0;
jsunit.assertNotUndefined("Not undefined test", a);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="definedObject">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertNull">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that an object is null. AssertionFailedError is thrown if the object is not null.]]></description>
          <summary><![CDATA[Asserts that an object is null.]]></summary>
          <sample><![CDATA[// Asserts that an object is null. AssertionFailedError is thrown if the object is not null.
jsunit.assertNull("Null test", null);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="nullValue">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertSame">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.]]></description>
          <summary><![CDATA[Asserts that two values are the same.]]></summary>
          <sample><![CDATA[// Asserts that two values are the same. AssertionFailedError is thrown if the expected value is not the actual one.
var a = new Date(1990, 1, 1);
var b = a;
jsunit.assertSame("Same test", a, b);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="expected">
              <description><![CDATA[the expected value.]]></description>
            </parameter>
            <parameter name="actual">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertTrue">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.]]></description>
          <summary><![CDATA[Asserts that a condition is true.]]></summary>
          <sample><![CDATA[// Asserts that a condition is true. AssertionFailedError is thrown if the evaluation was not true.
jsunit.assertTrue("True test", application.isLastPrintPreviewPrinted());]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="boolean_condition">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="assertUndefined">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.]]></description>
          <summary><![CDATA[Asserts that an object is undefined.]]></summary>
          <sample><![CDATA[// Asserts that an object is undefined. AssertionFailedError is thrown if the object is defined.
jsunit.assertUndefined("Undefined test", thisIsUndefined);]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message.]]></description>
            </parameter>
            <parameter name="undefinedValue">
              <description><![CDATA[the actual value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="fail">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Fails a test. AssertionFailedError is always thrown.]]></description>
          <summary><![CDATA[Fails a test.]]></summary>
          <sample><![CDATA[// Fails a test. AssertionFailedError is always thrown.
jsunit.fail("Fail test");
jsunit.fail("test", null, "Fail"); // 2nd param is not used in Servoy, params 3 and 1 get merged to form a message. The result is the same as in the line above.]]></sample>
          <parameters>
            <parameter name="message" optional="true">
              <description><![CDATA[The test description/message. This is usually the only parameter specified when calling this method.]]></description>
            </parameter>
            <parameter name="instanceOfCallStack" optional="true">
              <description><![CDATA[an internal JSUnit call stack. Use null for this if you want to get to the next optional parameter. Usually not specified.]]></description>
            </parameter>
            <parameter name="userMessage" optional="true">
              <description><![CDATA[an user message. Usually not specified.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSValueList" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSValueList">
      <constants>
        <constant name="CUSTOM_VALUES">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to set the valueListType of a JSValueList.
Sets the value list to use a custom list of values.
Also used in solutionModel.newValueList(...) to create new valuelists]]></description>
          <summary><![CDATA[Constant to set the valueListType of a JSValueList.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.valueListType = JSValueList.CUSTOM_VALUES; // Change the type to custom values.
vlist.customValues = "one\ntwo\nthree\nfour";]]></sample>
        </constant>
        <constant name="DATABASE_VALUES">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to set the valueListType of a JSValueList.
Sets the value list to use values loaded from a database.
Also used in solutionModel.newValueList(...) to create new valuelists]]></description>
          <summary><![CDATA[Constant to set the valueListType of a JSValueList.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </constant>
        <constant name="EMPTY_VALUE_ALWAYS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></description>
          <summary><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_ALWAYS;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
        </constant>
        <constant name="EMPTY_VALUE_NEVER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></description>
          <summary><![CDATA[Constant to set/get the addEmptyValue property of a JSValueList.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_NEVER;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="addEmptyValue">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Property that tells if an empty value must be shown next to the items in the value list.]]></description>
          <summary><![CDATA[Property that tells if an empty value must be shown next to the items in the value list.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.customValues = "one\ntwo\nthree\nfour";
vlist.addEmptyValue = JSValueList.EMPTY_VALUE_NEVER;
var cmb = form.newComboBox('my_table_text', 10, 10, 100, 20);
cmb.valuelist = vlist;]]></sample>
        </property>
        <property name="customValues">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A string with the elements in the valuelist. The elements 
can be separated by linefeeds (custom1
custom2), optional with realvalues ((custom1|1
custom2|2)).]]></description>
          <summary><![CDATA[A string with the elements in the valuelist.]]></summary>
          <sample><![CDATA[var vl1 = solutionModel.newValueList("customtext",JSValueList.CUSTOM_VALUES);
vl1.customValues = "customvalue1\ncustomvalue2";
var vl2 = solutionModel.newValueList("customid",JSValueList.CUSTOM_VALUES);
vl2.customValues = "customvalue1|1\ncustomvalue2|2";
var form = solutionModel.newForm("customvaluelistform",controller.getDataSource(),null,true,300,300);
var combo1 = form.newComboBox("globals.text",10,10,120,20);
combo1.valuelist = vl1;
var combo2 = form.newComboBox("globals.id",10,60,120,20);
combo2.valuelist = vl2;]]></sample>
        </property>
        <property name="dataSource">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Compact representation of the names of the server and table that 
are used for loading the data from the database.]]></description>
          <summary><![CDATA[Compact representation of the names of the server and table that 
are used for loading the data from the database.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text');]]></sample>
        </property>
        <property name="globalMethod">
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          <description><![CDATA[A global method that provides the data for the valuelist. The global method must provided the data 
as a JSDataSet.]]></description>
          <summary><![CDATA[A global method that provides the data for the valuelist.]]></summary>
          <sample><![CDATA[var listProvider = solutionModel.newGlobalMethod('function myValueListProvider(displayValue, realValue, record, valueListName) {' +
		'	var result = databaseManager.createEmptyDataSet(0, 1);' +
		'	result.addRow(["one"]);' +
		'	result.addRow(["three"]);' +
		'	result.addRow(["five"]);' +
		'	return result;' +
		'}');
var vlist = solutionModel.newValueList('vlist', JSValueList.CUSTOM_VALUES);
vlist.globalMethod = listProvider;]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the value list.

It is relevant when the "useTableFilter" property is set.]]></description>
          <summary><![CDATA[The name of the value list.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.serverName = 'example_data';
vlist.tableName = 'valuelists';
vlist.setDisplayDataProviderIds('valuelist_data');
vlist.setReturnDataProviderIds('valuelist_data');
vlist.useTableFilter = true;
vlist.name = 'two';]]></sample>
        </property>
        <property name="relationNMName" deprecated="true" undocumented="true">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
        </property>
        <property name="relationName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the relation that is used for loading data from the database.]]></description>
          <summary><![CDATA[The name of the relation that is used for loading data from the database.]]></summary>
          <sample><![CDATA[var rel = solutionModel.newRelation('parent_to_child', 'example_data', 'parent_table', 'example_data', 'child_table', JSRelation.INNER_JOIN);
rel.newRelationItem('parent_table_id', '=', 'child_table_parent_id');

var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.relationName = 'parent_to_child';
vlist.setDisplayDataProviderIds('child_table_text');
vlist.setReturnDataProviderIds('child_table_text');]]></sample>
        </property>
        <property name="separator">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[A String representing the separator that should be used when multiple
display dataproviders are set, when the value list has the type set to
database values.]]></description>
          <summary><![CDATA[A String representing the separator that should be used when multiple
display dataproviders are set, when the value list has the type set to
database values.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </property>
        <property name="serverName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the database server that is used for loading the values when 
the value list has the type set to database values.]]></description>
          <summary><![CDATA[The name of the database server that is used for loading the values when 
the value list has the type set to database values.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </property>
        <property name="sortOptions">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Sort options that are applied when the valuelist loads its data
from the database.]]></description>
          <summary><![CDATA[Sort options that are applied when the valuelist loads its data
from the database.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </property>
        <property name="tableName">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the database table that is used for loading the values when 
the value list has the type set to database values.]]></description>
          <summary><![CDATA[The name of the database table that is used for loading the values when 
the value list has the type set to database values.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </property>
        <property name="useTableFilter">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Flag that tells if the name of the valuelist should be applied as a filter on the
'valuelist_name' column when retrieving the data from the database.]]></description>
          <summary><![CDATA[Flag that tells if the name of the valuelist should be applied as a filter on the
'valuelist_name' column when retrieving the data from the database.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.serverName = 'example_data';
vlist.tableName = 'valuelists';
vlist.setDisplayDataProviderIds('valuelist_data');
vlist.setReturnDataProviderIds('valuelist_data');
vlist.useTableFilter = true;
vlist.name = 'two';]]></sample>
        </property>
        <property name="valueListType">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The type of the valuelist. Can be either custom values or database values.]]></description>
          <summary><![CDATA[The type of the valuelist.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getDisplayDataProviderIds">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[An array of Strings representing the names of the display dataproviders.]]></return>
          <description><![CDATA[Returns an array of the dataproviders that will be used to display the valuelist value.]]></description>
          <summary><![CDATA[Returns an array of the dataproviders that will be used to display the valuelist value.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text', 'parent_table_id');
vlist.setReturnDataProviderIds('parent_table_text');
var dispDP = vlist.getDisplayDataProviderIds();
for (var i=0; i<dispDP.length; i++)
	application.output(dispDP[i]);
var retDP = vlist.getReturnDataProviderIds();
for (var i=0; i<retDP.length; i++)
	application.output(retDP[i]);]]></sample>
        </function>
        <function name="getReturnDataProviderIds">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[An array of Strings representing the names of the return dataprovider.]]></return>
          <description><![CDATA[Returns an array of the dataproviders that will be used to define the valuelist value that is saved.]]></description>
          <summary><![CDATA[Returns an array of the dataproviders that will be used to define the valuelist value that is saved.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.DATABASE_VALUES);
vlist.dataSource = 'db:/example_data/parent_table';
vlist.setDisplayDataProviderIds('parent_table_text', 'parent_table_id');
vlist.setReturnDataProviderIds('parent_table_text');
var dispDP = vlist.getDisplayDataProviderIds();
for (var i=0; i<dispDP.length; i++)
	application.output(dispDP[i]);
var retDP = vlist.getReturnDataProviderIds();
for (var i=0; i<retDP.length; i++)
	application.output(retDP[i]);]]></sample>
        </function>
        <function name="setDisplayDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the display dataproviders. There can be at most 3 of them, combined with the return dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be displayed
by the valuelist.]]></description>
          <summary><![CDATA[Set the display dataproviders.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          <parameters>
            <parameter name="dataprovider1">
              <description><![CDATA[The first display dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" optional="true">
              <description><![CDATA[The second display dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider3" optional="true">
              <description><![CDATA[The third display dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setReturnDataProviderIds">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the return dataprovers. There can be at most 3 of them, combined with the display dataproviders.
The values taken from these dataproviders, in order, separated by the separator, will be returned
by the valuelist.]]></description>
          <summary><![CDATA[Set the return dataprovers.]]></summary>
          <sample><![CDATA[var vlist = solutionModel.newValueList('options', JSValueList.CUSTOM_VALUES);
vlist.valueListType = JSValueList.DATABASE_VALUES; // Change the type to database values.
vlist.serverName = 'example_data';
vlist.tableName = 'parent_table';
vlist.setDisplayDataProviderIds('parent_table_text');
vlist.setReturnDataProviderIds('parent_table_text', 'parent_table_id');
vlist.separator = ' ## ';
vlist.sortOptions = 'parent_table_text desc';]]></sample>
          <parameters>
            <parameter name="dataprovider1">
              <description><![CDATA[The first return dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider2" optional="true">
              <description><![CDATA[The second return dataprovider.]]></description>
            </parameter>
            <parameter name="dataprovider3" optional="true">
              <description><![CDATA[The third return dataprovider.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSVariable" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSVariable">
      <constants>
        <constant name="DATETIME">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          <summary><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          <sample><![CDATA[var dateVar = solutionModel.newGlobalVariable('gDate', JSVariable.DATETIME);
dateVar.defaultValue = 'now';
application.output(globals.gDate); // Prints the current date and time.]]></sample>
        </constant>
        <constant name="INTEGER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          <summary><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          <sample><![CDATA[var intVar = solutionModel.newGlobalVariable('gInt', JSVariable.INTEGER);
intVar.defaultValue = 997;
application.output(globals.gInt); // Prints 997]]></sample>
        </constant>
        <constant name="MEDIA">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          <summary><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          <sample><![CDATA[var mediaVar = solutionModel.newGlobalVariable('gMedia', JSVariable.MEDIA);
mediaVar.defaultValue = 'new Array(1, 2, 3, 4)';
application.output(globals.gMedia); // Prints out the array with four elements.]]></sample>
        </constant>
        <constant name="NUMBER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          <summary><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          <sample><![CDATA[var numberVar = solutionModel.newGlobalVariable('gNumber', JSVariable.NUMBER);
numberVar.defaultValue = 192.334;
application.output(globals.gNumber); // Prints 192.334]]></sample>
        </constant>
        <constant name="TEXT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></description>
          <summary><![CDATA[Constant to be used when the type of a variable needs to be specified.]]></summary>
          <sample><![CDATA[var txtVar = solutionModel.newGlobalVariable('gText', JSVariable.TEXT);
txtVar.defaultValue = '"some text"'; // Use two pairs of quotes if you want to assing a String as default value.
application.output(globals.gText); // Prints 'some text' (without quotes).]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="defaultValue">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The default value of the variable. 

It is interpreted as a JS expression.

For INTEGER variables it can be an integer constant, like 10 for example.
For NUMBER variables it can be a real constant, like 22.41. For DATETIME
variables it can be "now", or a JS expression like "new Date()". For TEXT 
variables it can be any string surrounded with quotes, like 'some text'.]]></description>
          <summary><![CDATA[The default value of the variable.]]></summary>
          <sample><![CDATA[var intVar = solutionModel.newGlobalVariable('gInt', JSVariable.INTEGER);
intVar.defaultValue = 997;
application.output(globals.gInt); // Prints 997
var numberVar = solutionModel.newGlobalVariable('gNumber', JSVariable.NUMBER);
numberVar.defaultValue = 192.334;
application.output(globals.gNumber); // Prints 192.334
var dateVar = solutionModel.newGlobalVariable('gDate', JSVariable.DATETIME);
dateVar.defaultValue = 'now';
application.output(globals.gDate); // Prints the current date and time.
var txtVar = solutionModel.newGlobalVariable('gText', JSVariable.TEXT);
txtVar.defaultValue = '"some text"'; // Use two pairs of quotes if you want to assing a String as default value.
application.output(globals.gText); // Prints 'some text' (without quotes).
var mediaVar = solutionModel.newGlobalVariable('gMedia', JSVariable.MEDIA);
mediaVar.defaultValue = 'new Array(1, 2, 3, 4)';
application.output(globals.gMedia); // Prints out the array with four elements.]]></sample>
        </property>
        <property name="name">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[The name of the variable.]]></description>
          <summary><![CDATA[The name of the variable.]]></summary>
          <sample><![CDATA[var gVar = solutionModel.newGlobalVariable('gtext', JSVariable.TEXT);
gVar.name = 'anotherName';
gVar.defaultValue = '"default text"';
// The next two lines will print the same output.
application.output(globals[gVar.name]);
application.output(globals.anotherName);]]></sample>
        </property>
        <property name="variableType">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[The type of the variable. Can be one of: TEXT, INTEGER, NUMBER, DATETIME or MEDIA.]]></description>
          <summary><![CDATA[The type of the variable.]]></summary>
          <sample><![CDATA[var g = solutionModel.newGlobalVariable('gtext',JSVariable.TEXT);
globals.gtext = 'some text';
g.variableType = JSVariable.DATETIME;
globals.gtext = 'another text'; // This will raise an error now, because the variable is not longer of type text.]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="JSWindow" qualifiedName="com.servoy.j2db.scripting.JSWindowImpl$JSWindow">
      <constants>
        <constant name="DEFAULT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Value used for x, y, width, height of initial bounds when you want the window to auto-determine bounds when shown for the first time.]]></description>
          <summary><![CDATA[Value used for x, y, width, height of initial bounds when you want the window to auto-determine bounds when shown for the first time.]]></summary>
          <sample><![CDATA[// show a dialog that self-determines bounds the first time it it open, then remembers last bounds for future show operations 
var win = application.createWindow("myName", JSWindow.DIALOG);
win.setInitialBounds(JSWindow.DEFAULT, JSWindow.DEFAULT, JSWindow.DEFAULT, JSWindow.DEFAULT); // will be shown initially centred and with preferred size
forms.myForm.show(win);]]></sample>
        </constant>
        <constant name="DIALOG">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Window type constant that identifies a non-modal dialog type.
Non-modal dialogs will allow the user to interact with parent windows, but are less independent then windows with WINDOW type.
Dialogs will stay on top of parent windows and are less accessible through the OS window manager. In web-client dialogs will not
open in a separate browser window.]]></description>
          <summary><![CDATA[Window type constant that identifies a non-modal dialog type.]]></summary>
          <sample><![CDATA[// create a non-modal dialog on top of current active form's window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.DIALOG);
forms.myForm.show(myWindow);]]></sample>
        </constant>
        <constant name="FULL_SCREEN">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Value that can be used for bounds in order to specify that a dialog/window should completely fill the screen.]]></description>
          <summary><![CDATA[Value that can be used for bounds in order to specify that a dialog/window should completely fill the screen.]]></summary>
          <sample><![CDATA[// create and show a window, with specified title, full screen
var win = application.createWindow("windowName", JSWindow.WINDOW);
win.setInitialBounds(JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN, JSWindow.FULL_SCREEN);
win.setTitle("This is a window");
controller.show(win);]]></sample>
        </constant>
        <constant name="MODAL_DIALOG">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Window type constant that identifies a modal dialog type. Modal dialogs will not allow the user to interact with the parent window(s) until closed.
Dialogs will stay on top of parent windows and are less accessible through the OS window manager. In web-client dialogs will not
open in a separate browser window. NOTE: no code is executed in Smart Client after a modal dialog is shown (the show operation blocks) until this dialog closes.]]></description>
          <summary><![CDATA[Window type constant that identifies a modal dialog type.]]></summary>
          <sample><![CDATA[// create a modal dialog on top of current active form's window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.MODAL_DIALOG);
forms.myForm.show(myWindow);]]></sample>
        </constant>
        <constant name="WINDOW">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Window type constant that identifies a window type. WINDOW type is the most independent type of window. It will be more accessible through the OS window
manager, it can appear both in front of and under other windows and it doesn't block user interaction for other windows. In web-client windows will
open in a separate browser window.]]></description>
          <summary><![CDATA[Window type constant that identifies a window type.]]></summary>
          <sample><![CDATA[// create a window and show a form inside it
var myWindow = application.createWindow("myName", JSWindow.WINDOW);
forms.myForm.show(myWindow);]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="title">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the title text.]]></return>
          <description><![CDATA[Returns the title text.]]></description>
          <summary><![CDATA[Returns the title text.]]></summary>
          <sample><![CDATA[]]></sample>
        </property>
      </properties>
      <functions>
        <function name="close">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[Boolean true if the window was successfully closed and false otherwise.]]></return>
          <description><![CDATA[Closes (hides) the window. It can be shown again using window.show(), controller.show() or controller.showRecords().
The main application window cannot be closed.]]></description>
          <summary><![CDATA[Closes (hides) the window.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="destroy">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Frees the resources allocated by this window. If window is visible, it will close it first.
The window will no longer be available with application.getWindow('windowName') and will no longer be usable.

The main application window cannot be destroyed.]]></description>
          <summary><![CDATA[Frees the resources allocated by this window.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the height.]]></return>
          <description><![CDATA[Returns the height.]]></description>
          <summary><![CDATA[Returns the height.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the window name.]]></return>
          <description><![CDATA[Returns the window name. It will be null in case of main application frame.]]></description>
          <summary><![CDATA[Returns the window name.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getParent">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.JSWindowImpl$JSWindow" type="com.servoy.j2db.scripting.JSWindowImpl$JSWindow"><![CDATA[the parent JSWindow, if available. If there is no parent JSWindow, it will return null.]]></return>
          <description><![CDATA[Returns the parent JSWindow, if available.]]></description>
          <summary><![CDATA[Returns the parent JSWindow, if available.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getType">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the window type. Can be one of JSWindow.DIALOG, JSWindow.MODAL_DIALOG, JSWindow.WINDOW.]]></return>
          <description><![CDATA[Returns the window type.]]></description>
          <summary><![CDATA[Returns the window type.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the width.]]></return>
          <description><![CDATA[Returns the width.]]></description>
          <summary><![CDATA[Returns the width.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the x coordinate.]]></return>
          <description><![CDATA[Returns the x coordinate.]]></description>
          <summary><![CDATA[Returns the x coordinate.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="getY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the y coordinate.]]></return>
          <description><![CDATA[Returns the y coordinate.]]></description>
          <summary><![CDATA[Returns the y coordinate.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="isVisible">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the window is visible, false otherwise.]]></return>
          <description><![CDATA[Returns true if the window is visible, false otherwise.]]></description>
          <summary><![CDATA[Returns true if the window is visible, false otherwise.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="setInitialBounds">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the initial window bounds.
The initial bounds are only used the first time this window is shown.]]></description>
          <summary><![CDATA[Sets the initial window bounds.]]></summary>
          <sample><![CDATA[var win = application.createWindow("myName", JSWindow.DIALOG);
win.setInitialBounds(20, 10, 300, 200);
forms.myForm.show(win);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial x coordinate of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial y coordinate of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial width of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the initial height of the window. Can be JSWindow.DEFAULT, JSWindow.FULL_SCREEN.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setResizable">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set whether or not this window can be resized by the user.]]></description>
          <summary><![CDATA[Set whether or not this window can be resized by the user.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="resizable" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true or false.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="show">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Shows the given form in this window.]]></description>
          <summary><![CDATA[Shows the given form in this window.]]></summary>
          <sample><![CDATA[win.show(forms.myForm);
// win.show("myForm");]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the form that will be shown inside this window. It can be a form name or a form object (actual form or JSFrom).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showTextToolbar">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets whether or not this window should have a text tool bar. Has no effect on web client or smart client main application frame.]]></description>
          <summary><![CDATA[Sets whether or not this window should have a text tool bar.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="showTextToolbar" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if you want a text tool bar to be added to this window, false otherwise.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="toBack">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Shows this window behind other windows, if possible.]]></description>
          <summary><![CDATA[Shows this window behind other windows, if possible.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="toFront">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Bring this window in front of other windows, if possible.]]></description>
          <summary><![CDATA[Bring this window in front of other windows, if possible.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="LOGGINGLEVEL" qualifiedName="com.servoy.j2db.scripting.info.LOGGINGLEVEL">
      <constants>
        <constant name="DEBUG">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Logging level.]]></description>
          <summary><![CDATA[Logging level.]]></summary>
          <sample><![CDATA[application.output('my message',APP_LOG_LEVEL.DEBUG)]]></sample>
        </constant>
        <constant name="ERROR">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Logging level.]]></description>
          <summary><![CDATA[Logging level.]]></summary>
          <sample><![CDATA[application.output('my message',APP_LOG_LEVEL.ERROR)]]></sample>
        </constant>
        <constant name="FATAL">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Logging level.]]></description>
          <summary><![CDATA[Logging level.]]></summary>
          <sample><![CDATA[application.output('my message',APP_LOG_LEVEL.FATAL)]]></sample>
        </constant>
        <constant name="INFO">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Logging level.]]></description>
          <summary><![CDATA[Logging level.]]></summary>
          <sample><![CDATA[application.output('my message',APP_LOG_LEVEL.INFO)]]></sample>
        </constant>
        <constant name="WARNING">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Logging level.]]></description>
          <summary><![CDATA[Logging level.]]></summary>
          <sample><![CDATA[application.output('my message',APP_LOG_LEVEL.WARNING)]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="Label" qualifiedName="com.servoy.j2db.ui.IScriptScriptLabelMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="mnemonic">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image. 

Modifiers key values: 
1 SHIFT 
2 CTRL 
4 Meta/CMD (Macintosh)
8 ALT(Windows, Unix); OPTION (Macintosh) 

NOTE: A mnemonic is usually a single key used with/without the CTRL, CMD, SHIFT, ALT, or OPTION key(s) to activate a menu item or command - depending, in part on whether the menmonic applies in a command line or graphic interface. For one description, you can refer to this web page: http://msdn.microsoft.com/en-us/library/bb158536.aspx or perform a search in a web browser search engine using the criteria "mnemonic".
NOTE2: Mnemonic is only supported in Smart Client.]]></description>
          <summary><![CDATA[Gets or sets the specified character(s) - typically an underlined letter- used with/without the modifier key(s) for the label, button or image.]]></summary>
          <sample><![CDATA[//gets the mnemonic of the element
var my_mnemoic = %%prefix%%%%elementName%%.mnemonic;

//sets the mnemonic of the element
%%prefix%%%%elementName%%.mnemonic = 'f';]]></sample>
        </property>
        <property name="text">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the text that is displayed on the label, button or image.

NOTE: The .text property applies to labels, buttons, or images ONLY.]]></description>
          <summary><![CDATA[Gets or sets the text that is displayed on the label, button or image.]]></summary>
          <sample><![CDATA[//gets the text of the element
var my_text = %%prefix%%%%elementName%%.text;

//sets the text of the element
%%prefix%%%%elementName%%.text = my_text + 'is cool';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The label for property (String).]]></return>
          <description><![CDATA[Gets the label for property of a label. This property is used to link a label to a certain element (by default used for tableview header, form security, can be used for custom purposes ).]]></description>
          <summary><![CDATA[Gets the label for property of a label.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getLabelForElementName();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getParameterValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The parameter value as String.]]></return>
          <description><![CDATA[Gets the http request parameter for a submit within html label.]]></description>
          <summary><![CDATA[Gets the http request parameter for a submit within html label.]]></summary>
          <sample><![CDATA[var param = %%prefix%%%%elementName%%.getParameterValue('my_parameter');]]></sample>
          <parameters>
            <parameter name="param" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Parameter that was sent in request.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getThumbnailJPGImage">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="[B" type="byte[]"><![CDATA[An array of bytes.]]></return>
          <description><![CDATA[Returns the image data in .jpg format from an icon; thumbnailing only works in record view. 

Syntax
elements.elementName.getThumbnailJPGImage([width],[height])]]></description>
          <summary><![CDATA[Returns the image data in .]]></summary>
          <sample><![CDATA[var jpgData = %%prefix%%%%elementName%%.getThumbnailJPGImage(50,50);
application.writeFile("mypicture.jpg", jpgData);]]></sample>
          <parameters>
            <parameter name="width" optional="true">
              <description><![CDATA[The target width, if not specified original image width will be used.]]></description>
            </parameter>
            <parameter name="height" optional="true">
              <description><![CDATA[The target height, if not specified original image width will be used.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setImageURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the image displayed on a button or label; based on URL. 

Syntax 
elements.elementName.setImageURL(String)]]></description>
          <summary><![CDATA[Sets the image displayed on a button or label; based on URL.]]></summary>
          <sample><![CDATA[//dynamically sets an image displayed on a button or label
%%prefix%%%%elementName%%.setImageURL("http://www.servoy.com/images/test.gif");

//sets an image from your own image library
%%prefix%%%%elementName%%.setImageURL("media:///arrow.gif");

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.setImageURL('media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2');]]></sample>
          <parameters>
            <parameter name="url">
              <description><![CDATA[the specified URL.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setRolloverImageURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the image displayed on a button or label roll over; based on URL. 

Syntax 
elements.elementName.setRolloverImageURL(String)]]></description>
          <summary><![CDATA[Sets the image displayed on a button or label roll over; based on URL.]]></summary>
          <sample><![CDATA[//dynamically sets a roll over image displayed on a button or label
%%prefix%%%%elementName%%.setRolloverImageURL("http://www.servoy.com/images/test.gif");

//sets an image from your own image library
%%prefix%%%%elementName%%.setRolloverImageURL("media:///arrow.gif");

//loads an image (BLOB) from a field in a selected record into HTML
%%prefix%%%%elementName%%.setRolloverImageURL('media:///servoy_blobloader?datasource='+controller.getDataSource()+'&dataprovider=image_data&mimetype=image/jpeg&rowid1=2');]]></sample>
          <parameters>
            <parameter name="url">
              <description><![CDATA[the specified URL.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="MEDIAOPTION" qualifiedName="com.servoy.j2db.scripting.solutionmodel.MEDIAOPTION">
      <constants>
        <constant name="CROP">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be displayed at its original size. If the component is smaller
than the image, then only a part of the image will show up.]]></description>
          <summary><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          <sample><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var smallLabelWithBigImageCrop = form.newLabel('', 130, 10, 50, 50);
smallLabelWithBigImageCrop.imageMedia = bigImage;
smallLabelWithBigImageCrop.background = 'yellow';	
smallLabelWithBigImageCrop.mediaOptions = SM_MEDIAOPTION.CROP;
var bigLabelWithSmallImageCrop = form.newLabel('', 10, 290, 200, 100);
bigLabelWithSmallImageCrop.imageMedia = smallImage;
bigLabelWithSmallImageCrop.background = 'yellow';
bigLabelWithSmallImageCrop.mediaOptions = SM_MEDIAOPTION.CROP; // This does not do any cropping actually if the label is larger than the image.]]></sample>
        </constant>
        <constant name="ENLARGE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be scaled up to fit the size of the component, if the component is
larger than the image. Can be used in combination with KEEPASPECT in order to preserve
the aspect ratio of the image.

It can also be used in combination with REDUCE, to cover all possibilities when
the size of the component is not known upfront.]]></description>
          <summary><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          <sample><![CDATA[var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeNoAspect = form.newLabel('', 10, 180, 200, 100);
bigLabelWithSmallImageEnlargeNoAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeNoAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeNoAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE;]]></sample>
        </constant>
        <constant name="KEEPASPECT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting the media option for components which display images.
Can be used in combination with REDUCE and/or ENLARGE, to maintain the aspect
ratio of the image while it is scaled down or up.]]></description>
          <summary><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          <sample><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallBytes = plugins.file.readFile('d:/small.jpg');
var smallImage = solutionModel.newMedia('small.jpg', smallBytes);
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var bigLabelWithSmallImageEnlargeKeepAspect = form.newLabel('', 10, 70, 200, 100);
bigLabelWithSmallImageEnlargeKeepAspect.imageMedia = smallImage;
bigLabelWithSmallImageEnlargeKeepAspect.background = 'yellow';
bigLabelWithSmallImageEnlargeKeepAspect.mediaOptions = SM_MEDIAOPTION.ENLARGE | SM_MEDIAOPTION.KEEPASPECT;]]></sample>
        </constant>
        <constant name="REDUCE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant used when setting the media option for components which display images.
Makes the image be scaled down to fit the size of the component, if the component
is smaller than the image. It can be used in combination with KEEPASPECT in order
to preserve the aspect ratio of the image.

It can also be used in combination with ENLARGE, to cover all possibilities when
the size of the component is not known upfront.]]></description>
          <summary><![CDATA[Constant used when setting the media option for components which display images.]]></summary>
          <sample><![CDATA[var bigBytes = plugins.file.readFile('d:/big.jpg');
var bigImage = solutionModel.newMedia('big.jpg', bigBytes);
var smallLabelWithBigImageReduceKeepAspect = form.newLabel('', 10, 10, 50, 50);
smallLabelWithBigImageReduceKeepAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceKeepAspect.background = 'yellow';	
smallLabelWithBigImageReduceKeepAspect.mediaOptions = SM_MEDIAOPTION.REDUCE | SM_MEDIAOPTION.KEEPASPECT;
var smallLabelWithBigImageReduceNoAspect = form.newLabel('', 70, 10, 50, 50);
smallLabelWithBigImageReduceNoAspect.imageMedia = bigImage;
smallLabelWithBigImageReduceNoAspect.background = 'yellow';	
smallLabelWithBigImageReduceNoAspect.mediaOptions = SM_MEDIAOPTION.REDUCE;]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="PARTS" qualifiedName="com.servoy.j2db.scripting.solutionmodel.PARTS" deprecated="true">
      <constants>
        <constant name="BODY" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="FOOTER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="HEADER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LEADING_GRAND_SUMMARY" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LEADING_SUBSUMMARY" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TITLE_FOOTER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TITLE_HEADER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TRAILING_GRAND_SUMMARY" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TRAILING_SUBSUMMARY" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="PRINTSLIDING" qualifiedName="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING">
      <constants>
        <constant name="ALLOW_MOVE_MIN_X" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING" member="ALLOW_MOVE_X"/>
          </sees>
        </constant>
        <constant name="ALLOW_MOVE_MIN_Y" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING" member="ALLOW_MOVE_Y"/>
          </sees>
        </constant>
        <constant name="ALLOW_MOVE_PLUS_X" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING" member="ALLOW_MOVE_X"/>
          </sees>
        </constant>
        <constant name="ALLOW_MOVE_PLUS_Y" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING" member="ALLOW_MOVE_Y"/>
          </sees>
        </constant>
        <constant name="ALLOW_MOVE_X">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will move horizontally to align with its left neighbor,
if that left neighbor moves or increases/decreases its size.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var growHorizLabel = form.newLabel('Grow horizontal -- long text', 10, 30, 30, 20);
growHorizLabel.printSliding = SM_PRINT_SLIDING.GROW_WIDTH;
growHorizLabel.background = 'blue';
var moveHorizRightLabel = form.newLabel('Move horizontal right', 50, 30, 100, 20);
moveHorizRightLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_X;
moveHorizRightLabel.background = 'pink';
var shrinkHorizLabel = form.newLabel('Short', 10, 50, 100, 20);
shrinkHorizLabel.printSliding = SM_PRINT_SLIDING.SHRINK_WIDTH;
shrinkHorizLabel.background = 'green';
var moveHorizLeftLabel = form.newLabel('Move horizontal left', 100, 50, 150, 20);
moveHorizLeftLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_X;
moveHorizLeftLabel.background = 'magenta';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="ALLOW_MOVE_Y">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will move vertically to align with its top neighbor,
if that neighbor moves or increases/decreases its size.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var growVertLabel = form.newLabel('Grow vertical', 10, 70, 100, 5);
growVertLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT;
growVertLabel.background = 'orange';
var moveVertDownLabel = form.newLabel('Move vertical down', 10, 75, 100, 20);
moveVertDownLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_Y;
moveVertDownLabel.background = 'cyan';
var shrinkVertLabel = form.newLabel('Shrink vertical', 10, 110, 100, 40);
shrinkVertLabel.printSliding = SM_PRINT_SLIDING.SHRINK_HEIGHT;
shrinkVertLabel.background = 'yellow';
var moveVertUpLabel = form.newLabel('Move vertical up', 10, 160, 100, 20);
moveVertUpLabel.printSliding = SM_PRINT_SLIDING.ALLOW_MOVE_Y;
moveVertUpLabel.background = 'purple';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="GROW_HEIGHT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will increase its height to adapt its content, if
the content is too large.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var growVertLabel = form.newLabel('Grow vertical', 10, 70, 100, 5);
growVertLabel.printSliding = SM_PRINT_SLIDING.GROW_HEIGHT;
growVertLabel.background = 'orange';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="GROW_WIDTH">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will increase its width to adapt its content, if the 
content is too large.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var growHorizLabel = form.newLabel('Grow horizontal -- long text', 10, 30, 30, 20);
growHorizLabel.printSliding = SM_PRINT_SLIDING.GROW_WIDTH;
growHorizLabel.background = 'blue';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="NO_SLIDING">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
Makes the component not slide during printing. The component will
maintain its designtime location and size.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var noSlidingLabel = form.newLabel('No sliding -- long text', 10, 10, 30, 20);
noSlidingLabel.printSliding = SM_PRINT_SLIDING.NO_SLIDING;
noSlidingLabel.background = 'red';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="SHRINK_HEIGHT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will decrease its height to adapt its content, if
the content is too small.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var shrinkVertLabel = form.newLabel('Shrink vertical', 10, 110, 100, 40);
shrinkVertLabel.printSliding = SM_PRINT_SLIDING.SHRINK_HEIGHT;
shrinkVertLabel.background = 'yellow';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
        <constant name="SHRINK_WIDTH">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant to be used when specifiying the print sliding for components.
The component will decrease its width to adapt its content, if the
content is too small.]]></description>
          <summary><![CDATA[Constant to be used when specifiying the print sliding for components.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('printForm', 'example_data', 'parent_table', 'null', false, 400, 300);
var shrinkHorizLabel = form.newLabel('Short', 10, 50, 100, 20);
shrinkHorizLabel.printSliding = SM_PRINT_SLIDING.SHRINK_WIDTH;
shrinkHorizLabel.background = 'green';
forms['printForm'].controller.showPrintPreview();]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="Password" qualifiedName="com.servoy.j2db.ui.IScriptDataPasswordMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Portal" qualifiedName="com.servoy.j2db.ui.IScriptPortalComponentMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="recordIndex" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get record index.]]></description>
          <summary><![CDATA[Get record index.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getSelectedIndex"/>
          </sees>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="deleteRecord">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></description>
          <summary><![CDATA[Deletes the currently selected portal row in the foundset of the specified portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.deleteRecord();]]></sample>
        </function>
        <function name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></description>
          <summary><![CDATA[Duplicates the currently selected portal row in the foundset of the specified portal.]]></summary>
          <sample><![CDATA[//adds the duplicated record on top
%%prefix%%%%elementName%%.duplicateRecord(true);]]></sample>
          <parameters>
            <parameter name="addOnTop" optional="true">
              <description><![CDATA[adds the duplicated record as the topmost record of the foundset, default value is true]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getMaxRecordIndex" deprecated="true">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getSize"/>
          </sees>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getScrollX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x scroll location in pixels.]]></return>
          <description><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
        </function>
        <function name="getScrollY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y scroll location in pixels.]]></return>
          <description><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
        </function>
        <function name="getSelectedIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The selected index (integer).]]></return>
          <description><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></description>
          <summary><![CDATA[Gets the selected record index in the current cached foundset in the specified portal.]]></summary>
          <sample><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
        </function>
        <function name="getSortColumns">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[array with column names]]></return>
          <description><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></description>
          <summary><![CDATA[Returns the sort columns names of the current portal (as comma separated string).]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getSortColumns();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="newRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></description>
          <summary><![CDATA[Creates a new portal row in the foundset of the specified portal.]]></summary>
          <sample><![CDATA[// foreign key data is only filled in for equals (=) relation items 
//adds the new record on top
%%prefix%%%%elementName%%.newRecord(true);]]></sample>
          <parameters>
            <parameter name="addOnTop" optional="true">
              <description><![CDATA[adds the new portal record as the topmost row of the foundset, default value is true]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the scroll location of a portal. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for a portal where the height of the portal is greater than the height of the portal filed(s).

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of a portal; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:
 
//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the scroll location of a portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></description>
          <summary><![CDATA[Sets the selected record index in the current cached foundset in the specified portal.]]></summary>
          <sample><![CDATA[//gets the selected record index in the foundset
var current = %%prefix%%%%elementName%%.getSelectedIndex();

//sets the next record index in the foundset
%%prefix%%%%elementName%%.setSelectedIndex(current+1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="RTF Area, HTML Area" qualifiedName="com.servoy.j2db.ui.IScriptTextEditorMethods">
      <properties>
        <property name="URL">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only. 

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the relative URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          <sample><![CDATA[//sets the relative URL of the HTML_AREA field
%%prefix%%%%elementName%%.URL = "http://www.examples.com/icon.gif";

//gets the relative URL of the HTML_AREA field
var theURL = %%prefix%%%%elementName%%.URL;]]></sample>
        </property>
        <property name="baseURL">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></description>
          <summary><![CDATA[Gets or sets the absolute base URL for the URL string contained in a field with a design time display property of HTML_AREA only.]]></summary>
          <sample><![CDATA[//gets the base URL of theField when display is HTML_AREA
var baseURL = %%prefix%%%%elementName%%.baseURL;

//sets the base URL of theField when display is HTML_AREA
%%prefix%%%%elementName%%.baseURL = "http://www.examples.com";]]></sample>
        </property>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="caretPosition">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></description>
          <summary><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          <sample><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getAsPlainText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the plain text]]></return>
          <description><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only.

NOTE: As of Servoy 4.x (and higher) you can also get/set the relative or absolute URL for an HTML_AREA field element. For more detail, see the .URL and .baseURL field element runtime properties earlier in this section.

NOTE: For information about field element design time properties, see the section on Field elements in the Forms chapter of the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets the plain text for the formatted HTML/RTF text of a specified field element with a design time display property of HTML_AREA/RTF only.]]></summary>
          <sample><![CDATA[var my_text = %%prefix%%%%elementName%%.getAsPlainText();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getScrollX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x scroll location in pixels.]]></return>
          <description><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
        </function>
        <function name="getScrollY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y scroll location in pixels.]]></return>
          <description><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
        </function>
        <function name="getSelectedText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The selected text from the component.]]></return>
          <description><![CDATA[Returns the currently selected text in the specified field. 

NOTE: This function is for field elements only.]]></description>
          <summary><![CDATA[Returns the currently selected text in the specified field.]]></summary>
          <sample><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          <summary><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          <sample><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="selectAll">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Selects all the contents of a field.]]></description>
          <summary><![CDATA[Selects all the contents of a field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the scroll location of a portal. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for a portal where the height of the portal is greater than the height of the portal filed(s).

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of a portal; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:
 
//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the scroll location of a portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="RadioButton" qualifiedName="com.servoy.j2db.ui.IScriptChoiceMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getScrollX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x scroll location in pixels.]]></return>
          <description><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
        </function>
        <function name="getScrollY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y scroll location in pixels.]]></return>
          <description><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
        </function>
        <function name="getSelectedElements">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[]"><![CDATA[array with selected values]]></return>
          <description><![CDATA[Gets the selected values (real values from valuelist) as array.]]></description>
          <summary><![CDATA[Gets the selected values (real values from valuelist) as array.]]></summary>
          <sample><![CDATA[var values = %%prefix%%%%elementName%%.getSelectedElements();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getValueListName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The valuelist name.]]></return>
          <description><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          <summary><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the scroll location of a portal. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for a portal where the height of the portal is greater than the height of the portal filed(s).

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of a portal; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:
 
//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the scroll location of a portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist). 
Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.]]></description>
          <summary><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          <sample><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          <parameters>
            <parameter name="dataset">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Rectangle" qualifiedName="com.servoy.j2db.ui.IScriptRectMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Relation" qualifiedName="com.servoy.j2db.dataprocessing.RelatedFoundSet">
      <properties>
        <property name="multiSelect">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Get or set the multiSelect flag of the foundset.]]></description>
          <summary><![CDATA[Get or set the multiSelect flag of the foundset.]]></summary>
          <sample><![CDATA[// allow user to select multiple rows.
%%prefix%%foundset.multiSelect = true;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addFoundSetFilterParam" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
        </function>
        <function name="addFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if adding the filter succeeded, false otherwise.]]></return>
          <description><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.
Use clear() or loadAllRecords() to make the filter effective.
When given a name, the filter can be removed again using removeFoundSetFilterParam(name).]]></description>
          <summary><![CDATA[Add a filter parameter that is permanent per user session to limit a specified foundset of records.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.addFoundSetFilterParam('customerid', '=', 'BLONP', 'custFilter');//possible to add multiple
%%prefix%%foundset.loadAllRecords();//to make param(s) effective
// Named filters can be removed using %%prefix%%foundset.removeFoundSetFilterParam(filterName)]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String column to filter on.]]></description>
            </parameter>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String operator: =, <, >, >=, <=, !=, (NOT) LIKE, (NOT) IN, (NOT) BETWEEN and IS (NOT) NULL]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Object filter value (for in array and between an array with 2 elements)]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[String name, can be used to remove the filter again.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="clear">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Clear the foundset.]]></description>
          <summary><![CDATA[Clear the foundset.]]></summary>
          <sample><![CDATA[//Clear the foundset, including searches that may be on it
%%prefix%%foundset.clear();]]></sample>
        </function>
        <function name="clearFoundSet" deprecated="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Clears the foundset.]]></description>
          <summary><![CDATA[Clears the foundset.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="clear"/>
          </sees>
        </function>
        <function name="deleteAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <description><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></description>
          <summary><![CDATA[Delete all records in foundset, resulting in empty foundset.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.deleteAllRecords();]]></sample>
        </function>
        <function name="deleteRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be deleted.]]></return>
          <description><![CDATA[Delete current/parameter record or the record under the given index.
If the foundset is in multiselect mode, all selected records are deleted (when no parameter is used).]]></description>
          <summary><![CDATA[Delete current/parameter record or the record under the given index.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.deleteRecord();
//can return false incase of related foundset having records and orphans records are not allowed by the relation]]></sample>
          <parameters>
            <parameter name="index/record" optional="true">
              <description><![CDATA[index of record to delete or record itself.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="duplicateFoundSet">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.FoundSet" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[foundset duplicate.]]></return>
          <description><![CDATA[Get a duplicate of the foundset.]]></description>
          <summary><![CDATA[Get a duplicate of the foundset.]]></summary>
          <sample><![CDATA[var dupFoundset = %%prefix%%foundset.duplicateFoundSet();
%%prefix%%foundset.find();
//search some fields
var count = %%prefix%%foundset.search();
if (count == 0)
{
	plugins.dialogs.showWarningDialog('Alert', 'No records found','OK');
	controller.loadRecords(dupFoundset);
}]]></sample>
        </function>
        <function name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[true if succesful]]></return>
          <description><![CDATA[Duplicate current record or record at index in the foundset.]]></description>
          <summary><![CDATA[Duplicate current record or record at index in the foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.duplicateRecord();
%%prefix%%foundset.duplicateRecord(false); //duplicate the current record, adds at bottom
%%prefix%%foundset.duplicateRecord(1,2); //duplicate the first record as second record
//duplicates the record (record index 3), adds on top and selects the record
%%prefix%%foundset.duplicateRecord(3,true,true);]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[index of record to duplicate; defaults to currently selected index. Ignored if first given parameter is a boolean value.]]></description>
            </parameter>
            <parameter name="location" optional="true">
              <description><![CDATA[a boolean or number when true the new record is added as the topmost record, when a number, the new record is added at specified index ; defaults to 1.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true the selection is changed to the duplicated record; defaults to true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="find">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the foundset is now in find mode, false otherwise.]]></return>
          <description><![CDATA[Set the foundset in find mode.

Before going into find mode, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
the foundset will not go into find mode.
Note: always make sure to check the result of the find() method.

When in find mode, columns can be assigned string expressions that are evaluated as:
General:
      c1||c2    (condition1 or condition2)
      c|format  (apply format on condition like 'x|dd-MM-yyyy')
      !c        (not condition)
      #c        (modify condition, depends on column type)
      ^         (is null)
      ^=        (is null or empty)
      &lt;x     (less than value x)
      &gt;x     (greater than value x)
      &lt;=x    (less than or equals value x)
      &gt;=x    (greater than or equals value x)
      x...y     (between values x and y, including values)
      x         (equals value x)

 Number fields:
      =x       (equals value x)
      ^=       (is null or zero)

 Date fields:
      #c       (equals value x, entire day)
      now      (equals now, date and or time)
      //       (equals today)
      today    (equals today)

 Text fields:
      #c	        (case insensitive condition)
      = x      (equals a space and 'x')
      ^=       (is null or empty)
      %x%      (contains 'x')
      %x_y%    (contains 'x' followed by any char and 'y')
      \%      (contains char '%')
      \_      (contains char '_')

Related columns can be assigned, they will result in related searches.
For example, "employees_to_department.location_id = headoffice" finds all employees in the specified location).

Searching on related aggregates is supported.
For example, "orders_to_details.total_amount = '&gt;1000'" finds all orders with total order details amount more than 1000.]]></description>
          <summary><![CDATA[Set the foundset in find mode.]]></summary>
          <sample><![CDATA[if (%%prefix%%foundset.find()) //find will fail if autosave is disabled and there are unsaved records
{
	columnTextDataProvider = 'a search value'
	columnNumberDataProvider = '>10'
	%%prefix%%foundset.search()
}]]></sample>
        </function>
        <function name="getCurrentSort">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String sort columns]]></return>
          <description><![CDATA[Get the current sort columns.]]></description>
          <summary><![CDATA[Get the current sort columns.]]></summary>
          <sample><![CDATA[//reverse the current sort

//the original sort "companyName asc, companyContact desc"
//the inversed sort "companyName desc, companyContact asc"
var foundsetSort = foundset.getCurrentSort()
var sortColumns = foundsetSort.split(',')
var newFoundsetSort = ''
for(var i=0; i<sortColumns.length; i++)
{
	var currentSort = sortColumns[i]
	var sortType = currentSort.substring(currentSort.length-3)
	if(sortType.equalsIgnoreCase('asc'))
	{
		newFoundsetSort += currentSort.replace(' asc', ' desc')
	}
	else
	{
		newFoundsetSort += currentSort.replace(' desc', ' asc')
	}
	if(i != sortColumns.length - 1)
	{
		newFoundsetSort += ','
	}
}
foundset.sort(newFoundsetSort)]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="sort"/>
          </sees>
        </function>
        <function name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[Object value]]></return>
          <description><![CDATA[Get a value based on a dataprovider name.]]></description>
          <summary><![CDATA[Get a value based on a dataprovider name.]]></summary>
          <sample><![CDATA[var val = %%prefix%%foundset.getDataProviderValue('contact_name');]]></sample>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataSource">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String data source.]]></return>
          <description><![CDATA[Get the datasource used.
The datasource is an url that describes the data source.]]></description>
          <summary><![CDATA[Get the datasource used.]]></summary>
          <sample><![CDATA[var dataSource = %%prefix%%foundset.getDataSource();]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getDataSourceServerName"/>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getDataSourceTableName"/>
          </sees>
        </function>
        <function name="getFoundSetFilterParams" undocumented="true">
          <argumentsTypes/>
          <return typecode="[[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[][]"/>
        </function>
        <function name="getFoundSetFilterParams">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[[Ljava.lang.Object;" type="com.servoy.j2db.documentation.scripting.docs.Object[][]"><![CDATA[Array of filter definitions.]]></return>
          <description><![CDATA[Get the list of previously defined foundset filters.
The result is an array of:
 [ tableName, dataprovider, operator, value, name ]]]></description>
          <summary><![CDATA[Get the list of previously defined foundset filters.]]></summary>
          <sample><![CDATA[var params = foundset.getFoundSetFilterParams()
for (var i = 0; params != null && i < params.length; i++)
{
	application.output('FoundSet filter on table ' + params[i][0]+ ': '+ params[i][1]+ ' '+params[i][2]+ ' '+params[i][3] +(params[i][4] == null ? ' [no name]' : ' ['+params[i][4]+']'))
}]]></sample>
          <parameters>
            <parameter name="filterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[name of the filters to retrieve, get all if not specified.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getMaxRecordIndex" deprecated="true">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get the number of records in this foundset.]]></description>
          <summary><![CDATA[Get the number of records in this foundset.]]></summary>
          <sample><![CDATA[for ( var i = 1 ; i <= %%prefix%%foundset.getMaxRecordIndex() ; i++ )
{
	%%prefix%%foundset.setSelectedIndex(i);
	//do some action per record
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getSize"/>
          </sees>
        </function>
        <function name="getRecord">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.IRecordInternal" type="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record record.]]></return>
          <description><![CDATA[Get the record object at the index.]]></description>
          <summary><![CDATA[Get the record object at the index.]]></summary>
          <sample><![CDATA[var record = %%prefix%%foundset.getRecord(index);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[int record index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRecordIndex">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IRecordInternal"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int index.]]></return>
          <description><![CDATA[Get the record index.]]></description>
          <summary><![CDATA[Get the record index.]]></summary>
          <sample><![CDATA[var index = %%prefix%%foundset.getRecordIndex(record);]]></sample>
          <parameters>
            <parameter name="record" type="com.servoy.j2db.dataprocessing.Record" typecode="com.servoy.j2db.dataprocessing.IRecordInternal">
              <description><![CDATA[Record]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRelationName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[String relation name when related.]]></return>
          <description><![CDATA[Gets the relation name (null if not a related foundset).]]></description>
          <summary><![CDATA[Gets the relation name (null if not a related foundset).]]></summary>
          <sample><![CDATA[var relName = %%prefix%%foundset.getRelationName();]]></sample>
        </function>
        <function name="getSelectedIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int current index (1-based)]]></return>
          <description><![CDATA[Get the current record index of the foundset.]]></description>
          <summary><![CDATA[Get the current record index of the foundset.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
        </function>
        <function name="getSelectedIndexes">
          <argumentsTypes/>
          <return typecode="[I" type="com.servoy.j2db.documentation.scripting.docs.Number[]"><![CDATA[Array current indexes (1-based)]]></return>
          <description><![CDATA[Get the selected records indexes.
When the founset is in multiSelect mode (see property multiSelect), selection can be a more than 1 index.]]></description>
          <summary><![CDATA[Get the selected records indexes.]]></summary>
          <sample><![CDATA[var current = %%prefix%%foundset.getSelectedIndexes();
var newSelection = new Array();
newSelection[0] = current[0];
%%prefix%%foundset.setSelectedIndexes(newSelection);]]></sample>
        </function>
        <function name="getSelectedRecord">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.IRecordInternal" type="com.servoy.j2db.dataprocessing.Record"><![CDATA[Record record.]]></return>
          <description><![CDATA[Get the selected record.]]></description>
          <summary><![CDATA[Get the selected record.]]></summary>
          <sample><![CDATA[var selectedRecord = %%prefix%%foundset.getSelectedRecord();]]></sample>
        </function>
        <function name="getSelectedRecords">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.dataprocessing.IRecordInternal;" type="com.servoy.j2db.dataprocessing.Record[]"><![CDATA[Array current records.]]></return>
          <description><![CDATA[Get the selected records.
When the founset is in multiSelect mode (see property multiSelect), selection can be a more than 1 record.]]></description>
          <summary><![CDATA[Get the selected records.]]></summary>
          <sample><![CDATA[var selectedRecords = %%prefix%%foundset.getSelectedRecords();]]></sample>
        </function>
        <function name="getServerName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets the name of the server used.]]></description>
          <summary><![CDATA[Gets the name of the server used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="getSize">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int current size.]]></return>
          <description><![CDATA[Get the number of records in this foundset.
This is the number of records loaded, note that when looping over a foundset, size() may
increase as more records are loaded.]]></description>
          <summary><![CDATA[Get the number of records in this foundset.]]></summary>
          <sample><![CDATA[var nrRecords = %%prefix%%foundset.getSize()

// to loop over foundset, recalculate size for each record
	for (var i = 1; i <= %%prefix%%foundset.getSize(); i++)
	{
		var rec = %%prefix%%foundset.getRecord(i);
	}]]></sample>
        </function>
        <function name="getTableName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets the name of the table used.]]></description>
          <summary><![CDATA[Gets the name of the table used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="invertRecords">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Invert the foundset against all rows of the current table.
All records that are not in the foundset will become the current foundset.]]></description>
          <summary><![CDATA[Invert the foundset against all rows of the current table.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.invertRecords();]]></sample>
        </function>
        <function name="isInFind">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean is in find mode.]]></return>
          <description><![CDATA[Check if this foundset is in find mode.]]></description>
          <summary><![CDATA[Check if this foundset is in find mode.]]></summary>
          <sample><![CDATA[//Returns true when find was called on this foundset and search has not been called yet
%%prefix%%foundset.isInFind();]]></sample>
        </function>
        <function name="loadAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <description><![CDATA[Loads all accessible records from the datasource into the foundset.
Filters on the foundset are applied.

Before loading the records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
records will not be loaded,]]></description>
          <summary><![CDATA[Loads all accessible records from the datasource into the foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.loadAllRecords();]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="addFoundSetFilterParam"/>
          </sees>
        </function>
        <function name="loadOmittedRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if records are loaded, false otherwise.]]></return>
          <description><![CDATA[Loads the records that are currently omitted as a foundset.

Before loading the omitted records, all unsaved records will be saved in the database.
If this fails (due to validation failures or sql errors) or is not allowed (autosave off), 
omitted records will not be loaded,]]></description>
          <summary><![CDATA[Loads the records that are currently omitted as a foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.loadOmittedRecords();]]></sample>
        </function>
        <function name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Load records with primary key (dataset/number/uuid) or query.

Load records can be used in 5 different ways
1) to copy foundset data from another foundset
foundset.loadRecords(fs);

2) to load a primary key dataset, will remove related sort!
var dataset = databaseManager.getDataSetByQuery(...);
foundset.loadRecords(dataset);

3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
foundset.loadRecords(123);
foundset.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

4) to reload all last related records again, if for example when searched in tabpanel
foundset.loadRecords();

5) to load records in to the form based on a query (also known as 'Form by query')
foundset.loadRecords(sqlstring,parameters);
limitations/requirements for sqlstring are:
-must start with 'select'
-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
-can contain '?' which are replaced with values from the array supplied to parameters argument
if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
-must contain 'from' keyword
-the 'from' must be a comma separated list of table names
-must at least select from the table used in Servoy Form
-cannot contain 'group by', 'having' or 'union'
-all columns must be fully qualified like 'orders.order_id']]></description>
          <summary><![CDATA[Load records with primary key (dataset/number/uuid) or query.]]></summary>
          <sample><![CDATA[//Load records can be used in 5 different ways
//1) to copy foundset data from another foundset
//%%prefix%%foundset.loadRecords(fs);

//2) to load a primary key dataset, will remove related sort!
//var dataset = databaseManager.getDataSetByQuery(...);
// dataset must match the table primary key columns (alphabetically ordered)
//%%prefix%%foundset.loadRecords(dataset);

//3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
//%%prefix%%foundset.loadRecords(123);
//%%prefix%%foundset.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

//4) to reload all last related records again, if for example when searched in tabpanel
//%%prefix%%foundset.loadRecords();

//5) to load records in to the form based on a query (also known as 'Form by query')
//%%prefix%%foundset.loadRecords(sqlstring,parameters);
//limitations/requirements for sqlstring are:
//-must start with 'select'
//-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
//-can contain '?' which are replaced with values from the array supplied to parameters argument
//if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
//-must contain 'from' keyword
//-the 'from' must be a comma separated list of table names
//-must at least select from the table used in Servoy Form
//-cannot contain 'group by', 'having' or 'union'
//-all columns must be fully qualified like 'orders.order_id']]></sample>
          <parameters>
            <parameter name="input" optional="true">
              <description><![CDATA[foundset/pkdataset/single_pk/query]]></description>
            </parameter>
            <parameter name="queryArgumentsArray" optional="true">
              <description><![CDATA[used when input is a query]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int index of new record.]]></return>
          <description><![CDATA[Create a new record in the foundset.]]></description>
          <summary><![CDATA[Create a new record in the foundset.]]></summary>
          <sample><![CDATA[// foreign key data is only filled in for equals (=) relation items 
var idx = %%prefix%%foundset.newRecord(false); // add as last record
// %%prefix%%foundset.newRecord(); // adds as first record
// %%prefix%%foundset.newRecord(2); //adds as second record
if (idx >= 0) // returned index is -1 in case of failure 
{
	%%prefix%%foundset.some_column = "some text";
	application.output("added on position " + idx);
	// when adding at the end of the foundset, the returned index
	// corresponds with the size of the foundset
}]]></sample>
          <parameters>
            <parameter name="location" optional="true">
              <description><![CDATA[a boolean or number when true the new record is added as the topmost record, when a number, the new record is added at specified index ; defaults to 1.]]></description>
            </parameter>
            <parameter name="changeSelection" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true the selection is changed to the new record; defaults to true.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="omitRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[boolean true if all records could be omitted.]]></return>
          <description><![CDATA[Omit current record or the record under the given index, to be shown with loadOmittedRecords.
If the foundset is in multiselect mode, all selected records are omitted (when no index parameter is used).

Note: The omitted records list is discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invertRecords()]]></description>
          <summary><![CDATA[Omit current record or the record under the given index, to be shown with loadOmittedRecords.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.omitRecord();]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[index of record to omit.]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="loadOmittedRecords"/>
          </sees>
        </function>
        <function name="relookup">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Perform a relookup for the current record or the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          <summary><![CDATA[Perform a relookup for the current record or the record under the given index
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.relookup(1);]]></sample>
          <parameters>
            <parameter name="index" optional="true">
              <description><![CDATA[record index (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeFoundSetFilterParam">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if removing the filter succeeded, false otherwise.]]></return>
          <description><![CDATA[Remove a named foundset filter.
Use clear() or loadAllRecords() to make the filter effective.]]></description>
          <summary><![CDATA[Remove a named foundset filter.]]></summary>
          <sample><![CDATA[var success = %%prefix%%foundset.removeFoundSetFilterParam('custFilter');// removes all filters with this name
%%prefix%%foundset.loadAllRecords();//to make param(s) effective]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[String filter name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="search">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[int number of rows returned]]></return>
          <description><![CDATA[Perform a search and show the results.
Must be in find mode when running search (see find()).]]></description>
          <summary><![CDATA[Perform a search and show the results.]]></summary>
          <sample><![CDATA[var recordCount = %%prefix%%foundset.search();
//var recordCount = %%prefix%%foundset.search(false,false);//to extend foundset]]></sample>
          <parameters>
            <parameter name="clearLastResults" optional="true">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
            <parameter name="reduceSearch" optional="true">
              <description><![CDATA[boolean, reduce (true) or extend (false) previous search results, default true]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="find"/>
          </sees>
        </function>
        <function name="selectRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succeeded.]]></return>
          <description><![CDATA[Select the record based on pk data.
Note that if the foundset has not loaded the record with the pk, selectrecord will fail.

In case of a table with a composite key, the pk sequence must match the alphabetical 
ordering of the pk column names.]]></description>
          <summary><![CDATA[Select the record based on pk data.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.selectRecord(pkid1,pkid2,pkidn);//pks must be alphabetically set! It is also possible to use an array as parameter.]]></sample>
          <parameters>
            <parameter name="pkid1">
              <description><![CDATA[primary key]]></description>
            </parameter>
            <parameter name="pkid2" optional="true">
              <description><![CDATA[second primary key (in case of composite primary key)]]></description>
            </parameter>
            <parameter name="pkidn" optional="true">
              <description><![CDATA[nth primary key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set a value based on a dataprovider name.]]></description>
          <summary><![CDATA[Set a value based on a dataprovider name.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.setDataProviderValue('contact_name','mycompany');]]></sample>
          <parameters>
            <parameter name="dataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[data provider name]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[value to set]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the current record index.]]></description>
          <summary><![CDATA[Set the current record index.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%foundset.getSelectedIndex();
//sets the next record in the foundset
%%prefix%%foundset.setSelectedIndex(current+1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index to set (1-based)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndexes">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the selected records indexes.]]></description>
          <summary><![CDATA[Set the selected records indexes.]]></summary>
          <sample><![CDATA[var current = %%prefix%%foundset.getSelectedIndexes();
var newSelection = new Array();
newSelection[0] = current[0];
%%prefix%%foundset.setSelectedIndexes(newSelection);]]></sample>
          <parameters>
            <parameter name="indexes" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[An array with indexes to set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sort">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sorts the foundset based on the given sort string or record comparator function.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order. 
The comparator function is called to compare
two records, that are passed as arguments, and
it will return -1/0/1 if the first record is less/equal/greater
then the second record.]]></description>
          <summary><![CDATA[Sorts the foundset based on the given sort string or record comparator function.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.sort('columnA desc,columnB asc');

%%prefix%%foundset.sort(mySortFunction);
 
function mySortFunction(r1, r2)
{
	var o = 0;
	if(r1.id < r2.id)
	{
		o = -1;
	}
	else if(r1.id > r2.id)
	{
		o = 1;
	}
	return o;
}]]></sample>
          <parameters>
            <parameter name="sortString/recordComparator">
              <description><![CDATA[the specified columns (and sort order) or record comparator function]]></description>
            </parameter>
            <parameter name="defer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[when true, the "sortString" will be just stored, without performing a query on the database (the actual sorting will be deferred until the next data loading action).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="unrelate">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal" type="com.servoy.j2db.dataprocessing.FoundSet"><![CDATA[FoundSet unrelated foundset.]]></return>
          <description><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.
If the current foundset is not related, no copy will made.]]></description>
          <summary><![CDATA[Create a new unrelated foundset that is a copy of the current foundset.]]></summary>
          <sample><![CDATA[%%prefix%%foundset.unrelate();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="SCROLLBAR" qualifiedName="com.servoy.j2db.scripting.solutionmodel.SCROLLBAR">
      <constants>
        <constant name="HORIZONTAL_SCROLLBAR_ALWAYS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are always displayed.]]></description>
          <summary><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are always displayed.]]></summary>
          <sample><![CDATA[var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
        </constant>
        <constant name="HORIZONTAL_SCROLLBAR_AS_NEEDED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are displayed only when needed.]]></description>
          <summary><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are displayed only when needed.]]></summary>
          <sample><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;]]></sample>
        </constant>
        <constant name="HORIZONTAL_SCROLLBAR_NEVER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are never displayed.]]></description>
          <summary><![CDATA[Used to set the horizontal scroll bar policy so that horizontal scrollbars are never displayed.]]></summary>
          <sample><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;]]></sample>
        </constant>
        <constant name="SCROLLBARS_WHEN_NEEDED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the horizontal and vertical scroll bar policy so that both scrollbars are displayed
only when needed.]]></description>
          <summary><![CDATA[Used to set the horizontal and vertical scroll bar policy so that both scrollbars are displayed
only when needed.]]></summary>
          <sample><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
// This is the default option, but if you really want you can set it explicitly.
neededScrollbars.scrollbars = SM_SCROLLBAR.SCROLLBARS_WHEN_NEEDED;]]></sample>
        </constant>
        <constant name="VERTICAL_SCROLLBAR_ALWAYS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are always displayed.]]></description>
          <summary><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are always displayed.]]></summary>
          <sample><![CDATA[var alwaysScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 230, 10, 100, 100);
alwaysScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_ALWAYS | SM_SCROLLBAR.VERTICAL_SCROLLBAR_ALWAYS;]]></sample>
        </constant>
        <constant name="VERTICAL_SCROLLBAR_AS_NEEDED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are displayed only when needed.]]></description>
          <summary><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are displayed only when needed.]]></summary>
          <sample><![CDATA[var neededScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 120, 10, 100, 100);
neededScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_AS_NEEDED | SM_SCROLLBAR.VERTICAL_SCROLLBAR_AS_NEEDED;]]></sample>
        </constant>
        <constant name="VERTICAL_SCROLLBAR_NEVER">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are never displayed.]]></description>
          <summary><![CDATA[Used to set the vertical scroll bar policy so that vertical scrollbars are never displayed.]]></summary>
          <sample><![CDATA[var noScrollbars = form.newField('my_table_text', JSField.TEXT_AREA, 10, 10, 100, 100);
noScrollbars.scrollbars = SM_SCROLLBAR.HORIZONTAL_SCROLLBAR_NEVER | SM_SCROLLBAR.VERTICAL_SCROLLBAR_NEVER;]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="SQL_ACTION_TYPES" qualifiedName="com.servoy.j2db.scripting.info.SQL_ACTION_TYPES">
      <constants>
        <constant name="DELETE_ACTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the "delete" SQL action.]]></description>
          <summary><![CDATA[Constant for the "delete" SQL action.]]></summary>
          <sample><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
		application.output("it was an insert");
	else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
		application.output("it was a delete");
	else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
		application.output("it was an update");
	else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
		application.output("it was a select");
	else if (action == SQL_ACTION_TYPES.NO_ACTION)
		application.output("it was nothing");
	else
		application.output("what was this?");]]></sample>
        </constant>
        <constant name="INSERT_ACTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the "insert" SQL action.]]></description>
          <summary><![CDATA[Constant for the "insert" SQL action.]]></summary>
          <sample><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
		application.output("it was an insert");
	else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
		application.output("it was a delete");
	else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
		application.output("it was an update");
	else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
		application.output("it was a select");
	else if (action == SQL_ACTION_TYPES.NO_ACTION)
		application.output("it was nothing");
	else
		application.output("what was this?");]]></sample>
        </constant>
        <constant name="NO_ACTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant expressing that no SQL action took place.]]></description>
          <summary><![CDATA[Constant expressing that no SQL action took place.]]></summary>
          <sample><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
		application.output("it was an insert");
	else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
		application.output("it was a delete");
	else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
		application.output("it was an update");
	else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
		application.output("it was a select");
	else if (action == SQL_ACTION_TYPES.NO_ACTION)
		application.output("it was nothing");
	else
		application.output("what was this?");]]></sample>
        </constant>
        <constant name="SELECT_ACTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the "select" SQL action.]]></description>
          <summary><![CDATA[Constant for the "select" SQL action.]]></summary>
          <sample><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
		application.output("it was an insert");
	else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
		application.output("it was a delete");
	else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
		application.output("it was an update");
	else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
		application.output("it was a select");
	else if (action == SQL_ACTION_TYPES.NO_ACTION)
		application.output("it was nothing");
	else
		application.output("what was this?");]]></sample>
        </constant>
        <constant name="UPDATE_ACTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant for the "update" SQL action.]]></description>
          <summary><![CDATA[Constant for the "update" SQL action.]]></summary>
          <sample><![CDATA[if (action == SQL_ACTION_TYPES.INSERT_ACTION)
		application.output("it was an insert");
	else if (action == SQL_ACTION_TYPES.DELETE_ACTION)
		application.output("it was a delete");
	else if (action == SQL_ACTION_TYPES.UPDATE_ACTION)
		application.output("it was an update");
	else if (action == SQL_ACTION_TYPES.SELECT_ACTION)
		application.output("it was a select");
	else if (action == SQL_ACTION_TYPES.NO_ACTION)
		application.output("it was nothing");
	else
		application.output("what was this?");]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="Security" scriptingName="security" qualifiedName="com.servoy.j2db.scripting.JSSecurity">
      <constants>
        <constant name="ACCESSIBLE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the accessible flag for form security.]]></description>
          <summary><![CDATA[Constant representing the accessible flag for form security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="DELETE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the delete flag for table security.]]></description>
          <summary><![CDATA[Constant representing the delete flag for table security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="INSERT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the insert flag for table security.]]></description>
          <summary><![CDATA[Constant representing the insert flag for table security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="READ">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the read flag for table security.]]></description>
          <summary><![CDATA[Constant representing the read flag for table security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="TRACKING">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the tracking flag for table security.]]></description>
          <summary><![CDATA[Constant representing the tracking flag for table security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="UPDATE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the update flag for table security.]]></description>
          <summary><![CDATA[Constant representing the update flag for table security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
        <constant name="VIEWABLE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Constant representing the viewable flag for form security.]]></description>
          <summary><![CDATA[Constant representing the viewable flag for form security.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
        </constant>
      </constants>
      <functions>
        <function name="addUserToGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if added]]></return>
          <description><![CDATA[Adds an user to a named group.]]></description>
          <summary><![CDATA[Adds an user to a named group.]]></summary>
          <sample><![CDATA[var userUID = security.getUserUID();
security.addUserToGroup(userUID, 'groupname');]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to be added]]></description>
            </parameter>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the group to add to]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="authenticate" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <parameters>
            <parameter name="authenticator_solution" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="authenticate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[authentication result from authenticator solution or boolean in case of servoy built-in authentication]]></return>
          <description><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.

Note: this method should be called from a login solution.]]></description>
          <summary><![CDATA[Authenticate to the Servoy Server using one of the installed authenticators or the Servoy default authenticator.]]></summary>
          <sample><![CDATA[// create the credentials object as expected by the authenticator solution
var ok =  security.authenticate('myldap_authenticator', 'login', [globals.userName, globals.passWord])
if (!ok)
{
	plugins.dialogs.showErrorDialog('Login failed', 'OK')
}

// if no authenticator name is used, the credentials are checked using the Servoy built-in user management
ok = security.authenticate(null, null, [globals.userName, globals.passWord])]]></sample>
          <parameters>
            <parameter name="authenticator_solution" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator solution installed on the Servoy Server, null for servoy built-in authentication]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[authenticator method, null for servoy built-in authentication]]></description>
            </parameter>
            <parameter name="credentials" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;" optional="true">
              <description><![CDATA[array whose elements are passed as arguments to the authenticator method, in case of servoy built-in authentication this should be [username, password]]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="canDelete" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="canDelete">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if allowed]]></return>
          <description><![CDATA[Returns a boolean value for security rights.]]></description>
          <summary><![CDATA[Returns a boolean value for security rights.]]></summary>
          <sample><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="canInsert" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="canInsert">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if allowed]]></return>
          <description><![CDATA[Returns a boolean value for security rights.]]></description>
          <summary><![CDATA[Returns a boolean value for security rights.]]></summary>
          <sample><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="canRead" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="canRead">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if allowed]]></return>
          <description><![CDATA[Returns a boolean value for security rights.]]></description>
          <summary><![CDATA[Returns a boolean value for security rights.]]></summary>
          <sample><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="canUpdate" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="canUpdate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if allowed]]></return>
          <description><![CDATA[Returns a boolean value for security rights.]]></description>
          <summary><![CDATA[Returns a boolean value for security rights.]]></summary>
          <sample><![CDATA[var dataSource = controller.getDataSource();
var canDelete = security.canDelete(dataSource);
var canInsert = security.canInsert(dataSource);
var canUpdate = security.canUpdate(dataSource);
var canRead = security.canRead(dataSource);
application.output("Can delete? " + canDelete);
application.output("Can insert? " + canInsert);
application.output("Can update? " + canUpdate);
application.output("Can read? " + canRead);]]></sample>
          <parameters>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the datasource]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="changeGroupName">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if changed]]></return>
          <description><![CDATA[Changes the groupname of a group.]]></description>
          <summary><![CDATA[Changes the groupname of a group.]]></summary>
          <sample><![CDATA[security.changeGroupName('oldGroup', 'newGroup');]]></sample>
          <parameters>
            <parameter name="oldGroupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the old name]]></description>
            </parameter>
            <parameter name="newGroupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="changeUserName">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if changed]]></return>
          <description><![CDATA[Changes the username of the specified userUID.]]></description>
          <summary><![CDATA[Changes the username of the specified userUID.]]></summary>
          <sample><![CDATA[if(security.changeUserName(security.getUserUID('name1'), 'name2'))
{
	application.output('Username changed');
}]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to work on]]></description>
            </parameter>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new username]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="checkPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if password oke]]></return>
          <description><![CDATA[Returns true if the password for that userUID is correct, else false.]]></description>
          <summary><![CDATA[Returns true if the password for that userUID is correct, else false.]]></summary>
          <sample><![CDATA[if(security.checkPassword(security.getUserUID(), 'password1'))
{
	security.setPassword(security.getUserUID(), 'password2')
}
else
{
	application.output('wrong password')
}]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to check the password for]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the created groupname]]></return>
          <description><![CDATA[Creates a group, returns the groupname (or null when group couldn't be created).]]></description>
          <summary><![CDATA[Creates a group, returns the groupname (or null when group couldn't be created).]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the group name to create]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createUser">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[the userUID the created userUID, will be same if provided]]></return>
          <description><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).]]></description>
          <summary><![CDATA[Creates a new user, returns new uid (or null when group couldn't be created or user alreay exist).]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="username">
              <description><![CDATA[the username]]></description>
            </parameter>
            <parameter name="password">
              <description><![CDATA[the user password]]></description>
            </parameter>
            <parameter name="userUID" optional="true">
              <description><![CDATA[the userUID to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="deleteGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if deleted]]></return>
          <description><![CDATA[Deletes a group, returns true if no error was reported.]]></description>
          <summary><![CDATA[Deletes a group, returns true if no error was reported.]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the name of the group to delete]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="deleteUser">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if the user is successfully deleted.]]></return>
          <description><![CDATA[Deletes an user. returns true if no error was reported.]]></description>
          <summary><![CDATA[Deletes an user.]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[The UID of the user to be deleted.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getClientID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the clientId as seen on the server admin page]]></return>
          <description><![CDATA[Returns the client ID.]]></description>
          <summary><![CDATA[Returns the client ID.]]></summary>
          <sample><![CDATA[var clientId = security.getClientID()]]></sample>
        </function>
        <function name="getElementUUIDs">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with element info]]></return>
          <description><![CDATA[Returns the form elements UUID's as dataset, the one with no name is the form itself.]]></description>
          <summary><![CDATA[Returns the form elements UUID's as dataset, the one with no name is the form itself.]]></summary>
          <sample><![CDATA[var formElementsUUIDDataSet = security.getElementUUIDs('orders_form');]]></sample>
          <parameters>
            <parameter name="formname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the formname to retieve the dataset for]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getGroupId" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[Returns the Group ID for the specified group (name)]]></description>
          <summary><![CDATA[Returns the Group ID for the specified group (name)]]></summary>
          <sample><![CDATA[//returns the groupid for the admin group in the variable
//var groupIDForAdmin = security.getGroupId('admin')]]></sample>
        </function>
        <function name="getGroups">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with all the groups]]></return>
          <description><![CDATA[Get all the groups (returns a dataset).
first id column is depricated!, use only the group name column.]]></description>
          <summary><![CDATA[Get all the groups (returns a dataset).]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
        </function>
        <function name="getSystemUserName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the os user name]]></return>
          <description><![CDATA[Retrieves the username of the currently logged in user on operating system level.]]></description>
          <summary><![CDATA[Retrieves the username of the currently logged in user on operating system level.]]></summary>
          <sample><![CDATA[//gets the current os username
var osUserName = security.getSystemUserName();]]></sample>
        </function>
        <function name="getUserGroups" undocumented="true">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"/>
        </function>
        <function name="getUserGroups">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with groupnames]]></return>
          <description><![CDATA[Get all the groups of the current user, finds the goups for given user UID if passed as parameter.]]></description>
          <summary><![CDATA[Get all the groups of the current user, finds the goups for given user UID if passed as parameter.]]></summary>
          <sample><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
          <parameters>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object" optional="true">
              <description><![CDATA[to retrieve the user groups]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUserId" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSSecurity" member="getUserUID"/>
          </sees>
        </function>
        <function name="getUserName">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the user name]]></return>
          <description><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></description>
          <summary><![CDATA[Get the current user name (null if not logged in), finds the user name for given user UID if passed as parameter.]]></summary>
          <sample><![CDATA[//gets the current loggedIn username
var userName = security.getUserName();]]></sample>
          <parameters>
            <parameter name="userUID" optional="true">
              <description><![CDATA[to retrieve the name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUserUID">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the userUID]]></return>
          <description><![CDATA[Get the current user UID (null if not logged in), finds the userUID for given user_name if passed as parameter.]]></description>
          <summary><![CDATA[Get the current user UID (null if not logged in), finds the userUID for given user_name if passed as parameter.]]></summary>
          <sample><![CDATA[//gets the current loggedIn username
var userName = security.getUserName(); 
//gets the uid of the given username
var userUID = security.getUserUID(userName);
//is the same as above 
//var my_userUID = security.getUserUID();]]></sample>
          <parameters>
            <parameter name="username" optional="true">
              <description><![CDATA[the username to find the userUID for]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUsers">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[dataset with all the users]]></return>
          <description><![CDATA[Get all the users in the security settings (returns a dataset).]]></description>
          <summary><![CDATA[Get all the users in the security settings (returns a dataset).]]></summary>
          <sample><![CDATA[//get all the users in the security settings (Returns a JSDataset)
var dsUsers = security.getUsers()

//loop through each user to get their group
//The getValue call is (row,column) where column 1 == id and 2 == name
for(var i=1 ; i<=dsUsers.getMaxRowIndex() ; i++)
{
	//print to the output debugger tab: "user: " and the username
	application.output("user:" + dsUsers.getValue(i,2));

	//set p to the user group for the current user
	var p = security.getUserGroups(dsUsers.getValue(i,1));

	for(k=1;k<=p.getMaxRowIndex();k++)
	{
		//print to the output debugger tab: "group" and the group(s)
		//the user belongs to
		application.output("group: " + p.getValue(k,2));
	}
}]]></sample>
        </function>
        <function name="isUserMemberOfGroup" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="isUserMemberOfGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[dataset with groupnames]]></return>
          <description><![CDATA[Check whatever the current user, or the user specified as parameter is part of the specified group]]></description>
          <summary><![CDATA[Check whatever the current user, or the user specified as parameter is part of the specified group]]></summary>
          <sample><![CDATA[//check whatever user is part of the Administrators group
if(security.isUserMemberOfGroup('Administrators'))
{
		// do administration stuff
}]]></sample>
          <parameters>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[name of the group to check]]></description>
            </parameter>
            <parameter name="userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object" optional="true">
              <description><![CDATA[UID of the user to check]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="login">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if loggedin]]></return>
          <description><![CDATA[Login to be able to leave the solution loginForm.

Example: Group names may be received from LDAP (Lightweight Directory Access Protocol) - a standard protocol used in web browsers and email applications to enable lookup queries that access a directory listing.]]></description>
          <summary><![CDATA[Login to be able to leave the solution loginForm.]]></summary>
          <sample><![CDATA[var groups = new Array()
groups[0] = 'Administrators'; //normally these groups are for example received from LDAP
var user_uid = globals.email; //also this uid might be received from external authentication method
var ok =  security.login(globals.username, user_uid , groups)
if (!ok)
{
	plugins.dialogs.showErrorDialog('Login failure',  'Already logged in? or no user_uid/groups specified?', 'OK')
}]]></sample>
          <parameters>
            <parameter name="display_username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user display name, like 'James Webb']]></description>
            </parameter>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to process login for]]></description>
            </parameter>
            <parameter name="groups" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the groups array]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="logout">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Logout the current user.]]></description>
          <summary><![CDATA[Logout the current user.]]></summary>
          <sample><![CDATA[var groups = new Array();
	groups[0] = 'testgroup';
	var ok =  security.login('user1', security.getUserUID('user1') , groups)
	if (!ok) 
	{
		plugins.dialogs.showErrorDialog('Login failure',  'Already logged in? or no user_uid/groups specified?', 'OK')
 	}
	else 
	{ 
 		plugins.dialogs.showInfoDialog('Logged in','Logged in','OK') 
	} 
	security.logout();
	//security.logout('solution_name');//log out and open solution 'solution_name'
	//security.logout('solution_name','global_method_name','my_argument');//log out, open solution 'solution_name', call global method 'global_method_name' with argument 'my_argument'
	//note: specifying a solution will not work in developer due to debugger dependencies]]></sample>
          <parameters>
            <parameter name="solutionToLoad" optional="true">
              <description><![CDATA[the solution to load after logout]]></description>
            </parameter>
            <parameter name="method" optional="true">
              <description><![CDATA[the method to run in the solution to load]]></description>
            </parameter>
            <parameter name="argument" optional="true">
              <description><![CDATA[the argument to pass to the method to run]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeUserFromGroup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if removed]]></return>
          <description><![CDATA[Removes an user from a group.]]></description>
          <summary><![CDATA[Removes an user from a group.]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the user UID to be removed]]></description>
            </parameter>
            <parameter name="groupName" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the group to remove from]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setPassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if changed]]></return>
          <description><![CDATA[Set a new password for the given userUID.]]></description>
          <summary><![CDATA[Set a new password for the given userUID.]]></summary>
          <sample><![CDATA[if(security.checkPassword(security.getUserUID(), 'password1'))
{
	security.setPassword(security.getUserUID(), 'password2')
}
else
{
	application.output('wrong password')
}]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to set the new password for]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSecuritySettings">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the security settings; the entries contained in the given dataset will override those contained in the current security settings.

NOTE: The security.getElementUUIDs and security.setSecuritySettings functions can be used to define custom security that overrides Servoy security. 
For additional information see the function security.getElementUUIDs.]]></description>
          <summary><![CDATA[Sets the security settings; the entries contained in the given dataset will override those contained in the current security settings.]]></summary>
          <sample><![CDATA[var colNames = new Array();
colNames[0] = 'uuid';
colNames[1] = 'flags';
var dataset = databaseManager.createEmptyDataSet(0,colNames);

var row = new Array();
row[0] = '413a4d69-becb-4ae4-8fdd-980755d6a7fb';//normally retreived via security.getElementUUIDs(...)
row[1] = JSSecurity.VIEWABLE|JSSecurity.ACCESSIBLE; // use bitwise 'or' for both
dataset.addRow(row);//setting element security

row = new Array();
row[0] = 'example_data.orders';
row[1] = JSSecurity.READ|JSSecurity.INSERT|JSSecurity.UPDATE|JSSecurity.DELETE|JSSecurity.TRACKING; //use bitwise 'or' for multiple flags
dataset.addRow(row);//setting table security

security.setSecuritySettings(dataset);//to be called in solution startup method]]></sample>
          <parameters>
            <parameter name="dataset" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the dataset with security settings]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setUserId" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSSecurity" member="setUserUID"/>
          </sees>
        </function>
        <function name="setUserUID">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if changed]]></return>
          <description><![CDATA[Set a new userUID for the given userUID.]]></description>
          <summary><![CDATA[Set a new userUID for the given userUID.]]></summary>
          <sample><![CDATA[var removeUser = true;
//create a user
var uid = security.createUser('myusername', 'mypassword');
if (uid) //test if user was created
{
	// Get all the groups
	var set = security.getGroups();
	for(var p = 1 ; p <= set.getMaxRowIndex() ; p++)
	{
		// output name of the group
		application.output(set.getValue(p, 2));
		// add user to group
		security.addUserToGroup(uid, set.getValue(p,2));
	}
	// if not remove user, remove user from all the groups
	if(!removeUser)
	{
		// get now all the groups that that users has (all if above did go well)
		var set =security.getUserGroups(uid);
		for(var p = 1;p<=set.getMaxRowIndex();p++)
		{
			// output name of the group
			application.output(set.getValue(p, 2));
			// remove the user from the group
			security.removeUserFromGroup(uid, set.getValue(p,2));
		}
	}
	else
	{
		// delete the user (the user will be removed from the groups)
		security.deleteUser(uid);
	}
}]]></sample>
          <parameters>
            <parameter name="a_userUID" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the userUID to set the new user UID for]]></description>
            </parameter>
            <parameter name="newUserUID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new user UID]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
      <returnTypes>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.FORMSECURITY"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.info.TABLESECURITY"/>
      </returnTypes>
    </object>
    <object publicName="ServoyException" scriptingName="ServoyException" qualifiedName="com.servoy.j2db.util.ServoyException">
      <constants>
        <constant name="ABSTRACT_FORM">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for ABSTRACT_FORM.]]></description>
          <summary><![CDATA[Exception code for ABSTRACT_FORM.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="ACQUIRE_LOCK_FAILURE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.]]></description>
          <summary><![CDATA[Exception code for ACQUIRE_LOCK_FAILURE.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="BAD_SQL_SYNTAX">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for BAD_SQL_SYNTAX.]]></description>
          <summary><![CDATA[Exception code for BAD_SQL_SYNTAX.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="CLIENT_NOT_AUTHORIZED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.]]></description>
          <summary><![CDATA[Exception code for CLIENT_NOT_AUTHORIZED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="DATA_ACCESS_RESOURCE_FAILURE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.]]></description>
          <summary><![CDATA[Exception code for DATA_ACCESS_RESOURCE_FAILURE.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="DATA_INTEGRITY_VIOLATION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.]]></description>
          <summary><![CDATA[Exception code for DATA_INTEGRITY_VIOLATION.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="DEADLOCK">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for DEADLOCK.]]></description>
          <summary><![CDATA[Exception code for DEADLOCK.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="DELETE_NOT_GRANTED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for DELETE_NOT_GRANTED.]]></description>
          <summary><![CDATA[Exception code for DELETE_NOT_GRANTED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="EXECUTE_PROGRAM_FAILED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.]]></description>
          <summary><![CDATA[Exception code for EXECUTE_PROGRAM_FAILED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="INCORRECT_LOGIN">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for INCORRECT_LOGIN.]]></description>
          <summary><![CDATA[Exception code for INCORRECT_LOGIN.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="INVALID_INPUT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for INVALID_INPUT.]]></description>
          <summary><![CDATA[Exception code for INVALID_INPUT.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="INVALID_INPUT_FORMAT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for INVALID_INPUT_FORMAT.]]></description>
          <summary><![CDATA[Exception code for INVALID_INPUT_FORMAT.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="INVALID_RESULTSET_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.]]></description>
          <summary><![CDATA[Exception code for INVALID_RESULTSET_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="MAINTENANCE_MODE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for MAINTENANCE_MODE.]]></description>
          <summary><![CDATA[Exception code for MAINTENANCE_MODE.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_ACCESS.]]></description>
          <summary><![CDATA[Exception code for NO_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_CREATE_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_CREATE_ACCESS.]]></description>
          <summary><![CDATA[Exception code for NO_CREATE_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_DELETE_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_DELETE_ACCESS.]]></description>
          <summary><![CDATA[Exception code for NO_DELETE_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_LICENSE">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_LICENSE.]]></description>
          <summary><![CDATA[Exception code for NO_LICENSE.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_MODIFY_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_MODIFY_ACCESS.]]></description>
          <summary><![CDATA[Exception code for NO_MODIFY_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_PARENT_DELETE_WITH_RELATED_RECORDS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.]]></description>
          <summary><![CDATA[Exception code for NO_PARENT_DELETE_WITH_RELATED_RECORDS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="NO_RELATED_CREATE_ACCESS">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.]]></description>
          <summary><![CDATA[Exception code for NO_RELATED_CREATE_ACCESS.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="PERMISSION_DENIED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for PERMISSION_DENIED.]]></description>
          <summary><![CDATA[Exception code for PERMISSION_DENIED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="RECORD_LOCKED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for RECORD_LOCKED.]]></description>
          <summary><![CDATA[Exception code for RECORD_LOCKED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="RECORD_VALIDATION_FAILED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for RECORD_VALIDATION_FAILED.]]></description>
          <summary><![CDATA[Exception code for RECORD_VALIDATION_FAILED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="SAVE_FAILED">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for SAVE_FAILED.]]></description>
          <summary><![CDATA[Exception code for SAVE_FAILED.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="UNEXPECTED_UPDATE_COUNT">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.]]></description>
          <summary><![CDATA[Exception code for UNEXPECTED_UPDATE_COUNT.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
        <constant name="UNKNOWN_DATABASE_EXCEPTION">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.]]></description>
          <summary><![CDATA[Exception code for UNKNOWN_DATABASE_EXCEPTION.]]></summary>
          <sample><![CDATA[]]></sample>
        </constant>
      </constants>
      <functions>
        <function name="getErrorCode">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></return>
          <description><![CDATA[Returns the error code for this ServoyException. Can be one of the constants declared in ServoyException.]]></description>
          <summary><![CDATA[Returns the error code for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="getMessage">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string message for this ServoyException.]]></return>
          <description><![CDATA[Returns the string message for this ServoyException.]]></description>
          <summary><![CDATA[Returns the string message for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="getStackTrace">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string stack trace for this ServoyException.]]></return>
          <description><![CDATA[Returns the stack trace for this ServoyException.]]></description>
          <summary><![CDATA[Returns the stack trace for this ServoyException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
        <function name="isServoyException" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true.]]></return>
          <description><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></description>
          <summary><![CDATA[Always true; it makes the distinction between ServoyException and DataException.]]></summary>
          <sample><![CDATA[//this sample script should be attached to onError method handler in the solution settings
application.output("Exception Object: "+ex)
application.output("MSG: "+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output("is a ServoyException")
	application.output("Errorcode: "+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
		plugins.dialogs.showErrorDialog( "Error",  "It seems you did not fill in a required field", 'OK');
		//Get the failed records after a save
		var array = databaseManager.getFailedRecords()
		for( var i = 0 ; i < array.length ; i++ )
		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output("SQL: "+record.exception.getSQL())
				application.output("SQLState: "+record.exception.getSQLState())
				application.output("VendorErrorCode: "+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></sample>
        </function>
      </functions>
      <returnTypes>
        <returnType qualifiedName="com.servoy.j2db.dataprocessing.DataException"/>
      </returnTypes>
    </object>
    <object publicName="SolutionModel" scriptingName="solutionModel" qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSSolutionModel">
      <functions>
        <function name="cloneComponent" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent" type="com.servoy.j2db.scripting.solutionmodel.JSComponent"/>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="component" type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"/>
          </parameters>
        </function>
        <function name="cloneComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent" type="com.servoy.j2db.scripting.solutionmodel.JSComponent"><![CDATA[the exact copy of the given component]]></return>
          <description><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel), gives it a new name and optionally moves it to a new parent form.]]></description>
          <summary><![CDATA[Makes an exact copy of the given component (JSComponent/JSField/JSLabel), gives it a new name and optionally moves it to a new parent form.]]></summary>
          <sample><![CDATA[// get an existing field to clone.
var field = solutionModel.getForm("formWithField").getField("fieldName");
// get the target form for the copied/cloned field
var form = solutionModel.getForm("targetForm");
// make a clone/copy of the field and re parent it to the target form.
var clone = solutionModel.cloneComponent("clonedField",field,form);
// show it
forms["targetForm"].controller.show();]]></sample>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name of the cloned component]]></description>
            </parameter>
            <parameter name="component" type="com.servoy.j2db.scripting.solutionmodel.JSComponent" typecode="com.servoy.j2db.scripting.solutionmodel.JSComponent">
              <description><![CDATA[the component to clone]]></description>
            </parameter>
            <parameter name="newParentForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" optional="true">
              <description><![CDATA[the new parent form]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="cloneForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm]]></return>
          <description><![CDATA[Makes an exact copy of the given form and gives it the new name.]]></description>
          <summary><![CDATA[Makes an exact copy of the given form and gives it the new name.]]></summary>
          <sample><![CDATA[// get an existing form
var form = solutionModel.getForm("existingForm")
// make a clone/copy from it
var clone = solutionModel.cloneForm("clonedForm", form)
// add a new label to the clone
clone.newLabel("added label",50,50,80,20);
// show it
forms["clonedForm"].controller.show();]]></sample>
          <parameters>
            <parameter name="newName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new name for the form clone]]></description>
            </parameter>
            <parameter name="jsForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm">
              <description><![CDATA[the form to be cloned]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <description><![CDATA[Get an existing calculation for the given name and datasource.]]></description>
          <summary><![CDATA[Get an existing calculation for the given name and datasource.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the calculation]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource the calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getCalculations">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <description><![CDATA[Gets all the calculations for the given datasource.]]></description>
          <summary><![CDATA[Gets all the calculations for the given datasource.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource the calculations belong to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm]]></return>
          <description><![CDATA[Gets the specified form object and returns information about the form (see JSForm node).]]></description>
          <summary><![CDATA[Gets the specified form object and returns information about the form (see JSForm node).]]></summary>
          <sample><![CDATA[var myForm = solutionModel.getForm('existingFormName');
//get the style of the form (for all other properties see JSForm node)
var styleName = myForm.styleName;]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getForms" undocumented="true">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;" type="com.servoy.j2db.scripting.solutionmodel.JSForm[]"/>
        </function>
        <function name="getForms" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;" type="com.servoy.j2db.scripting.solutionmodel.JSForm[]"/>
          <parameters>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getForms">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSForm;" type="com.servoy.j2db.scripting.solutionmodel.JSForm[]"><![CDATA[an array of JSForm type elements]]></return>
          <description><![CDATA[Get an array of forms, that are all based on datasource/servername or tablename.]]></description>
          <summary><![CDATA[Get an array of forms, that are all based on datasource/servername or tablename.]]></summary>
          <sample><![CDATA[var forms = solutionModel.getForms(datasource)
for (var i in forms)
		application.output(forms[i].name)]]></sample>
          <parameters>
            <parameter name="server" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[the datasource or servername]]></description>
            </parameter>
            <parameter name="tablename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String" optional="true">
              <description><![CDATA[the tablename]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod]]></return>
          <description><![CDATA[Gets an existing global method by the specified name.]]></description>
          <summary><![CDATA[Gets an existing global method by the specified name.]]></summary>
          <sample><![CDATA[var method = solutionModel.getGlobalMethod("nameOfGlobalMethod"); 
	if (method != null) application.output(method.code);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the specified global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getGlobalMethods">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMethod;" type="com.servoy.j2db.scripting.solutionmodel.JSMethod[]"><![CDATA[an array of JSMethod type elements]]></return>
          <description><![CDATA[The list of all global methods.]]></description>
          <summary><![CDATA[The list of all global methods.]]></summary>
          <sample><![CDATA[var methods = solutionModel.getGlobalMethods(); 
	if (methods != null)
		for (var x in methods) 
			application.output(methods[x].getName());]]></sample>
        </function>
        <function name="getGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable" type="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable]]></return>
          <description><![CDATA[Gets an existing global variable by the specified name.]]></description>
          <summary><![CDATA[Gets an existing global variable by the specified name.]]></summary>
          <sample><![CDATA[var globalVariable = solutionModel.getGlobalVariable('globalVariableName');
	application.output(globalVariable.name + " has the default value of " + globalVariable.defaultValue);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the global variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getGlobalVariables">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSVariable;" type="com.servoy.j2db.scripting.solutionmodel.JSVariable[]"><![CDATA[an array of JSVariable type elements]]></return>
          <description><![CDATA[Gets an array of all global variables.]]></description>
          <summary><![CDATA[Gets an array of all global variables.]]></summary>
          <sample><![CDATA[var globalVariables = solutionModel.getGlobalVariables();
	for (var i in globalVariables)
		application.output(globalVariables[i].name + " has the default value of " + globalVariables[i].defaultValue);]]></sample>
        </function>
        <function name="getMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"><![CDATA[a JSMedia element]]></return>
          <description><![CDATA[Gets the specified media object; can be assigned to a button/label.]]></description>
          <summary><![CDATA[Gets the specified media object; can be assigned to a button/label.]]></summary>
          <sample><![CDATA[var myMedia = solutionModel.getMedia('button01.gif')
//now set the imageMedia property of your label or button
//myButton.imageMedia = myMedia
// OR
//myLabel.imageMedia = myMedia]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the media object]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getMediaList">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSMedia;" type="com.servoy.j2db.scripting.solutionmodel.JSMedia[]"><![CDATA[a list with all the media objects.]]></return>
          <description><![CDATA[Gets the list of all media objects.]]></description>
          <summary><![CDATA[Gets the list of all media objects.]]></summary>
          <sample><![CDATA[var mediaList = solutionModel.getMediaList();
	if (mediaList.length != 0 && mediaList != null) {
		for (var x in mediaList) {
			application.output(mediaList[x]);
		}
	}]]></sample>
        </function>
        <function name="getRelation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation" type="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation]]></return>
          <description><![CDATA[Gets an existing relation by the specified name and returns a JSRelation Object.]]></description>
          <summary><![CDATA[Gets an existing relation by the specified name and returns a JSRelation Object.]]></summary>
          <sample><![CDATA[var relation = solutionModel.getRelation('name');
	application.output("The primary server name is " + relation.primaryServerName);
	application.output("The primary table name is " + relation.primaryTableName); 
	application.output("The foreign table name is " + relation.foreignTableName); 
	application.output("The relation items are " + relation.getRelationItems());]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the relation]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRelations">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSRelation;" type="com.servoy.j2db.scripting.solutionmodel.JSRelation[]"><![CDATA[an array of all relations (all elements in the array are of type JSRelation)]]></return>
          <description><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></description>
          <summary><![CDATA[Gets an array of all relations; or an array of all global relations if the specified table is NULL.]]></summary>
          <sample><![CDATA[var relations = solutionModel.getRelations('server_name','table_name');
	if (relations.length != 0)
		for (var i in relations)
			application.output(relations[i].name);]]></sample>
          <parameters>
            <parameter name="primary_server_name/primary_data_source" optional="true">
              <description><![CDATA[the specified name of the server or datasource for the specified table]]></description>
            </parameter>
            <parameter name="primary_table_name" optional="true">
              <description><![CDATA[the specified name of the table]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSStyle" type="com.servoy.j2db.scripting.solutionmodel.JSStyle"><![CDATA[a JSStyle]]></return>
          <description><![CDATA[Gets the style specified by the given name.]]></description>
          <summary><![CDATA[Gets the style specified by the given name.]]></summary>
          <sample><![CDATA[var style = solutionModel.getStyle('my_existing_style')
	style.content = 'combobox { color: #0000ff;font: italic 10pt "Verdana";}']]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the style]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValueList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList" type="com.servoy.j2db.scripting.solutionmodel.JSValueList"><![CDATA[a JSValueList object]]></return>
          <description><![CDATA[Gets an existing valuelist by the specified name and returns a JSValueList Object that can be assigned to a field.]]></description>
          <summary><![CDATA[Gets an existing valuelist by the specified name and returns a JSValueList Object that can be assigned to a field.]]></summary>
          <sample><![CDATA[var myValueList = solutionModel.getValueList('myValueListHere')
//now set the valueList property of your field
//myField.valuelist = myValueList]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the valuelist]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getValueLists">
          <argumentsTypes/>
          <return typecode="[Lcom.servoy.j2db.scripting.solutionmodel.JSValueList;" type="com.servoy.j2db.scripting.solutionmodel.JSValueList[]"><![CDATA[an array of JSValueList objects]]></return>
          <description><![CDATA[Gets an array of all valuelists for the currently active solution.]]></description>
          <summary><![CDATA[Gets an array of all valuelists for the currently active solution.]]></summary>
          <sample><![CDATA[var valueLists = solutionModel.getValueLists();
	if (valueLists != null && valueLists.length != 0)
		for (var i in valueLists)
			application.output(valueLists[i].name);]]></sample>
        </function>
        <function name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <description><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></description>
          <summary><![CDATA[Creates a new calculation for the given code and the type, if it builds on a column (name is a column name) then type will be ignored.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the calculation, one of the JSVariable types.]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource this calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newCalculation">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <description><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.TEXT;]]></description>
          <summary><![CDATA[Creates a new calculation for the given code, the type will be the column where it could be build on (if name is a column name),
else it will default to JSVariable.]]></summary>
          <sample><![CDATA[]]></sample>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The code of the calculation, this must be a full function declaration.]]></description>
            </parameter>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The datasource this calculation belongs to.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newForm">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a new JSForm object]]></return>
          <description><![CDATA[Creates a new JSForm Object.

NOTE: See the JSForm node for more information about form objects that can be added to the new form.]]></description>
          <summary><![CDATA[Creates a new JSForm Object.]]></summary>
          <sample><![CDATA[var myForm = solutionModel.newForm('newForm', 'myServer', 'myTable', 'myStyleName', false, 800, 600)
//now you can add stuff to the form (under JSForm node)
//add a label
myForm.newLabel('Name', 20, 20, 120, 30)
//add a "normal" text entry field
myForm.newTextField('dataProviderNameHere', 140, 20, 140,20)]]></sample>
          <parameters>
            <parameter name="name">
              <description><![CDATA[the specified name of the form]]></description>
            </parameter>
            <parameter name="server_name|data_source">
              <description><![CDATA[the specified name of the server or datasource for the specified table]]></description>
            </parameter>
            <parameter name="table_name" optional="true">
              <description><![CDATA[the specified name of the table]]></description>
            </parameter>
            <parameter name="style">
              <description><![CDATA[the specified style]]></description>
            </parameter>
            <parameter name="show_in_menu">
              <description><![CDATA[if true show the name of the new form in the menu; or false for not showing]]></description>
            </parameter>
            <parameter name="width">
              <description><![CDATA[the width of the form in pixels]]></description>
            </parameter>
            <parameter name="height">
              <description><![CDATA[the height of the form in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newForm" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="toclonefrom" type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </parameters>
        </function>
        <function name="newForm" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="styleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="show_in_menu" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="newForm" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="styleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="show_in_menu" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="newGlobalMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod object]]></return>
          <description><![CDATA[Creates a new global method with the specified code.]]></description>
          <summary><![CDATA[Creates a new global method with the specified code.]]></summary>
          <sample><![CDATA[var method = solutionModel.newGlobalMethod('function myglobalmethod(){currentcontroller.newRecord()}')]]></sample>
          <parameters>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified code for the global method]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newGlobalVariable">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSVariable" type="com.servoy.j2db.scripting.solutionmodel.JSVariable"><![CDATA[a JSVariable object]]></return>
          <description><![CDATA[Creates a new global variable with the specified name and number type.

NOTE: The global variable number type is based on the value assigned from the SolutionModel-JSVariable node; for example: JSVariable.INTEGER.]]></description>
          <summary><![CDATA[Creates a new global variable with the specified name and number type.]]></summary>
          <sample><![CDATA[var myGlobalVariable = solutionModel.newGlobalVariable('newGlobalVariable',JSVariable.INTEGER); 
	myGlobalVariable.defaultValue = 12;]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name for the global variable]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified number type for the global variable]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newMedia">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMedia" type="com.servoy.j2db.scripting.solutionmodel.JSMedia"><![CDATA[a JSMedia object]]></return>
          <description><![CDATA[Creates a new media object that can be assigned to a label or a button.]]></description>
          <summary><![CDATA[Creates a new media object that can be assigned to a label or a button.]]></summary>
          <sample><![CDATA[var myMedia = solutionModel.newMedia('button01.gif',bytes)
//now set the imageMedia property of your label or button
//myButton.imageMedia = myMedia
// OR
//myLabel.imageMedia = myMedia]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the new media]]></description>
            </parameter>
            <parameter name="bytes" type="byte[]" typecode="[B">
              <description><![CDATA[The content]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newMethodWithArguments">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod" type="com.servoy.j2db.scripting.solutionmodel.JSMethod"><![CDATA[a JSMethod]]></return>
          <description><![CDATA[Get a JSMethod instance with arguments to be assigned to an event.]]></description>
          <summary><![CDATA[Get a JSMethod instance with arguments to be assigned to an event.]]></summary>
          <sample><![CDATA[var str = "John's Bookstore"
var form = solutionModel.getForm('orders')
var button = form.getButton('abutton')
var method = form.getFormMethod('doit') // has 4 arguments: event (fixed), boolean, number and string
// string arguments have to be quoted, they are interpreted before the method is called
var quotedString = "'"+utils.stringReplace(str, "'", "\\'")+"'"
// list all arguments the method has, use nulls for fixed arguments (like event)
button.onAction = solutionModel.newMethodWithArguments(method, null, true, 42, quotedString)]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod">
              <description><![CDATA[JSMethod to be assigned to an event]]></description>
            </parameter>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[positional arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newRelation">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSRelation" type="com.servoy.j2db.scripting.solutionmodel.JSRelation"><![CDATA[a JSRelation object]]></return>
          <description><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary datasource, optional table name, foreign datasource, optional foreign table name, and the type of join for the new relation.]]></description>
          <summary><![CDATA[Creates a new JSRelation Object with a specified name; includes the primary datasource, optional table name, foreign datasource, optional foreign table name, and the type of join for the new relation.]]></summary>
          <sample><![CDATA[var rel = solutionModel.newRelation('myRelation','myPrimaryServerName','myPrimaryTableName','myForeignServerName','myForeignTableName',JSRelation.INNER_JOIN);
application.output(rel.getRelationItems());]]></sample>
          <parameters>
            <parameter name="name">
              <description><![CDATA[the specified name of the new relation]]></description>
            </parameter>
            <parameter name="primary_server_name|primary_data_source">
              <description><![CDATA[the specified name of the primary server or datasource]]></description>
            </parameter>
            <parameter name="primary_table_name" optional="true">
              <description><![CDATA[the specified name of the primary table]]></description>
            </parameter>
            <parameter name="foreign_server_name|foreign_data_source">
              <description><![CDATA[the specified name of the foreign server or datasource]]></description>
            </parameter>
            <parameter name="foreign_table_name" optional="true">
              <description><![CDATA[the specified name of the foreign table]]></description>
            </parameter>
            <parameter name="join_type">
              <description><![CDATA[the type of join for the new relation; JSRelation.INNER_JOIN, JSRelation.LEFT_OUTER_JOIN]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newStyle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSStyle" type="com.servoy.j2db.scripting.solutionmodel.JSStyle"><![CDATA[a JSStyle object]]></return>
          <description><![CDATA[Creates a new style with the given css content string under the given name.

NOTE: Will throw an exception if a style with that name already exists.]]></description>
          <summary><![CDATA[Creates a new style with the given css content string under the given name.]]></summary>
          <sample><![CDATA[var form = solutionModel.newForm('myForm','myServer','myTable',null,true,1000,800);
	if (form.transparent == false)
	{
		var style = solutionModel.newStyle('myStyle','form { background-color: yellow; }');
		style.text = style.text + 'field { background-color: blue; }';
		form.styleName = 'myStyle';
	}
	var field = form.newField('columnTextDataProvider',JSField.TEXT_FIELD,100,100,100,50);
	forms['myForm'].controller.show();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the new style]]></description>
            </parameter>
            <parameter name="content" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the css content of the new style]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="newValueList">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSValueList" type="com.servoy.j2db.scripting.solutionmodel.JSValueList"><![CDATA[a JSValueList object]]></return>
          <description><![CDATA[Creates a new valuelist with the specified name and number type.]]></description>
          <summary><![CDATA[Creates a new valuelist with the specified name and number type.]]></summary>
          <sample><![CDATA[var vl1 = solutionModel.newValueList("customText",JSValueList.CUSTOM_VALUES);
vl1.customValues = "customvalue1\ncustomvalue2";
var vl2 = solutionModel.newValueList("customid",JSValueList.CUSTOM_VALUES);
vl2.customValues = "customvalue1|1\ncustomvalue2|2";
var form = solutionModel.newForm("customValueListForm",controller.getDataSource(),null,true,300,300);
var combo1 = form.newComboBox("globals.text",10,10,120,20);
combo1.valuelist = vl1;
var combo2 = form.newComboBox("globals.id",10,60,120,20);
combo2.valuelist = vl2;]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name for the valuelist]]></description>
            </parameter>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the specified number type for the valuelist; may be JSValueList.CUSTOM_VALUES, JSValueList.DATABASE_VALUES, JSValueList.EMPTY_VALUE_ALWAYS, JSValueList.EMPTY_VALUE_NEVER]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true is form has been removed, false if form could not be removed]]></return>
          <description><![CDATA[Removes the specified form during the persistent connected client session.

NOTE: Make sure you call history.remove first in your Servoy method (script).]]></description>
          <summary><![CDATA[Removes the specified form during the persistent connected client session.]]></summary>
          <sample><![CDATA[//first remove it from the current history, to destroy any active form instance
var success = history.removeForm('myForm')
//removes the named form from this session, please make sure you called history.remove() first
if(success)
{
	solutionModel.removeForm('myForm')
}]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="revertForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="com.servoy.j2db.scripting.solutionmodel.JSForm" type="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[a JSForm object]]></return>
          <description><![CDATA[Reverts the specified form to the original (blueprint) version of the form; will result in an exception error if the form is not an original form.

NOTE: Make sure you call history.remove first in your Servoy method (script) or call form.controller.recreateUI() before the script ends.]]></description>
          <summary><![CDATA[Reverts the specified form to the original (blueprint) version of the form; will result in an exception error if the form is not an original form.]]></summary>
          <sample><![CDATA[// revert the form to the original solution form, removing any changes done to it through the solution model.
 var revertedForm = solutionModel.revertForm('myForm')
 // add a label on a random place.
 revertedForm.newLabel("MyLabel",Math.random()*100,Math.random()*100,80,20);
 // make sure that the ui is up to date.
 forms.myForm.controller.recreateUI();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified name of the form to revert]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
      <returnTypes>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.ALIGNMENT"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.ANCHOR"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.CURSOR"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.DEFAULTS"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.DISPLAYTYPE"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JOINTYPE"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSButton"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSCalculation"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSComponent"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSField"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSLabel"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMedia"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPart"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSPortal"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelation"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSRelationItem"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSStyle"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTab"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSTabPanel"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSValueList"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.JSVariable"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.MEDIAOPTION"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.PARTS"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.PRINTSLIDING"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.SCROLLBAR"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.VALUELIST"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.VARIABLETYPE"/>
        <returnType qualifiedName="com.servoy.j2db.scripting.solutionmodel.VIEW"/>
      </returnTypes>
    </object>
    <object publicName="SplitPane" qualifiedName="com.servoy.j2db.ui.IScriptSplitPaneMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="continuousLayout">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets if the components should continuously be redrawn as the divider changes position.]]></description>
          <summary><![CDATA[Gets or sets if the components should continuously be redrawn as the divider changes position.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.continuousLayout = true;]]></sample>
        </property>
        <property name="dividerLocation">
          <return typecode="double" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets divider location.
If location is less then 1 then the location will be considered at (location * 100) percent of the split pane from left,
otherwise it will represent the pixels from left.]]></description>
          <summary><![CDATA[Gets or sets divider location.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.dividerLocation = 0.75;]]></sample>
        </property>
        <property name="dividerSize">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets divider size in pixels.]]></description>
          <summary><![CDATA[Gets or sets divider size in pixels.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.dividerSize = 10;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="leftFormMinSize">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets left form minimum size in pixels.]]></description>
          <summary><![CDATA[Gets or sets left form minimum size in pixels.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.leftFormMinSize = 100;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="resizeWeight">
          <return typecode="double" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Specifies how to distribute extra space when the size of the split pane changes.
A value of 0, the default, indicates the right/bottom component gets all the extra space (the left/top component acts fixed),
where as a value of 1 specifies the left/top component gets all the extra space (the right/bottom component acts fixed).
Specifically, the left/top component gets (weight * diff) extra space and the right/bottom component gets (1 - weight) * diff extra space]]></description>
          <summary><![CDATA[Specifies how to distribute extra space when the size of the split pane changes.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.resizeWeight = 0.5;]]></sample>
        </property>
        <property name="rightFormMinSize">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets right form minimum size in pixels.]]></description>
          <summary><![CDATA[Gets or sets right form minimum size in pixels.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.rightFormMinSize = 100;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLeftForm">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.FormScope" type="com.servoy.j2db.FormController$JSForm"><![CDATA[left form of the split pane]]></return>
          <description><![CDATA[Returns the left form of the split pane.]]></description>
          <summary><![CDATA[Returns the left form of the split pane.]]></summary>
          <sample><![CDATA[var leftForm = %%prefix%%%%elementName%%.getLeftForm();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getRightForm">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.FormScope" type="com.servoy.j2db.FormController$JSForm"><![CDATA[right form of the split pane]]></return>
          <description><![CDATA[Returns the right form of the split pane.]]></description>
          <summary><![CDATA[Returns the right form of the split pane.]]></summary>
          <sample><![CDATA[var rightForm = %%prefix%%%%elementName%%.getRightForm();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLeftForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <description><![CDATA[Set a relationless or related form as left panel.]]></description>
          <summary><![CDATA[Set a relationless or related form as left panel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLeftForm(forms.orders,'orders_to_order_details');]]></sample>
          <parameters>
            <parameter name="form/formname">
              <description><![CDATA[the specified form/formname you wish to add as left panel]]></description>
            </parameter>
            <parameter name="relatedfoundset/relationname">
              <description><![CDATA[the specified name of the related foundset or null for relationless]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setRightForm">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <description><![CDATA[Set a relationless or related form as right panel.]]></description>
          <summary><![CDATA[Set a relationless or related form as right panel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setRightForm(forms.orders,'orders_to_order_details');]]></sample>
          <parameters>
            <parameter name="form/formname">
              <description><![CDATA[the specified form/formname you wish to add as right panel]]></description>
            </parameter>
            <parameter name="relatedfoundset/relationname">
              <description><![CDATA[the specified name of the related foundset or null for relationless]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="TABLESECURITY" qualifiedName="com.servoy.j2db.scripting.info.TABLESECURITY" deprecated="true">
      <constants>
        <constant name="DELETE" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="INSERT" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="READ" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TRACKING" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="UPDATE" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="TabPanel" qualifiedName="com.servoy.j2db.ui.IDepricatedScriptTabPanelMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="tabIndex">
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[Gets or sets the selected tab index for the specified tabpanel.
When setting the value either the tab index or the tab name can be used.
When getting the value, the tab index (not the name) will be returned all the time.]]></description>
          <summary><![CDATA[Gets or sets the selected tab index for the specified tabpanel.]]></summary>
          <sample><![CDATA[//gets the selected tab index of the tabpanel
var current = %%prefix%%%%elementName%%.tabIndex;

//sets (goes to) the selected tabIndex of the tabpanel
%%prefix%%%%elementName%%.tabIndex = current + 1;

//or sets (goes to) the tab with the specified name
%%prefix%%%%elementName%%.tabIndex = 'tab_name';]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addTab">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean value indicating if tab was successfully added]]></return>
          <description><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></description>
          <summary><![CDATA[Adds a relationless or related form as a tab in a specified tabpanel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.addTab(forms.orders,'ordersTab','Orders',null,null,'#000000','#BBCCEE');]]></sample>
          <parameters>
            <parameter name="form/formname">
              <description><![CDATA[the specified form/form name you wish to add as a tab]]></description>
            </parameter>
            <parameter name="name" optional="true">
              <description><![CDATA[the specified name for the tab or NULL (default is null)]]></description>
            </parameter>
            <parameter name="tabText" optional="true">
              <description><![CDATA[the specified text for the tab (default is null)]]></description>
            </parameter>
            <parameter name="tooltip" optional="true">
              <description><![CDATA[a specified tooltip for the tab (default is null)]]></description>
            </parameter>
            <parameter name="iconURL" optional="true">
              <description><![CDATA[a specified icon image or icon URL for the tab (default is null)]]></description>
            </parameter>
            <parameter name="fg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal foreground color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="bg" optional="true">
              <description><![CDATA[the HTML RGB Hexadecimal background color for the tab (default is null)]]></description>
            </parameter>
            <parameter name="relatedfoundset/relationname" optional="true">
              <description><![CDATA[the specified name of the related foundset (default is null)]]></description>
            </parameter>
            <parameter name="index" optional="true">
              <description><![CDATA[the specified index of a tab, default is -1, will add tab to the end]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getMaxTabIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[maximum tab index (number)]]></return>
          <description><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></description>
          <summary><![CDATA[Returns the maximum tab index for a specified tabpanel.]]></summary>
          <sample><![CDATA[var max = %%prefix%%%%elementName%%.getMaxTabIndex();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getSelectedTabFormName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.ui.IScriptTabPanelMethods" member="getTabFormNameAt"/>
          </sees>
        </function>
        <function name="getTabBGColorAt" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[color as hexadecimal RGB string]]></return>
          <description><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></description>
          <summary><![CDATA[Returns the foreground color for a specified tab of a tabpanel.]]></summary>
          <sample><![CDATA[var color = %%prefix%%%%elementName%%.getTabFGColorAt(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabFormNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the name of the form]]></return>
          <description><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></description>
          <summary><![CDATA[Returns the form name for a specified tab of a tabpanel.]]></summary>
          <sample><![CDATA[var formName = %%prefix%%%%elementName%%.getSelectedTabFormName(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The tab name]]></return>
          <description><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></description>
          <summary><![CDATA[Returns the name - the "name" design time property value - for a specified tab of a tabpanel.]]></summary>
          <sample><![CDATA[var tabName = %%prefix%%%%elementName%%.getTabNameAt(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabRelationNameAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[relation name]]></return>
          <description><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></description>
          <summary><![CDATA[Returns the relation name for a specified tab of a tabpanel.]]></summary>
          <sample><![CDATA[var relName = %%prefix%%%%elementName%%.getTabRelationNameAt(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[index of the tab]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The tab text.]]></return>
          <description><![CDATA[Returns the text for a specified tab of a tabpanel.]]></description>
          <summary><![CDATA[Returns the text for a specified tab of a tabpanel.]]></summary>
          <sample><![CDATA[var tabText = %%prefix%%%%elementName%%.getTabTextAt(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="isTabEnabled" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.ui.IScriptTabPanelMethods" member="isTabEnabledAt"/>
          </sees>
        </function>
        <function name="isTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[True if tab is enabled, false otherwise.]]></return>
          <description><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></description>
          <summary><![CDATA[Returns the enabled status of a specified tab in a tabpanel.]]></summary>
          <sample><![CDATA[var status = %%prefix%%%%elementName%%.isTabEnabledAt(3);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeAllTabs">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean value indicating if tabs were successfully removed]]></return>
          <description><![CDATA[Removes all tabs for a specified tabpanel.]]></description>
          <summary><![CDATA[Removes all tabs for a specified tabpanel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.removeAllTabs();]]></sample>
        </function>
        <function name="removeTabAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[a boolean value indicating if tab was successfully removed]]></return>
          <description><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.

NOTE: In Servoy 4.x (and higher), the addTab function applies to relationless or related tabs in a tabpanel.]]></description>
          <summary><![CDATA[Removes a specified tab in a tabpanel; can be based on a relation or relationless.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.removeTabAt(3);]]></sample>
          <parameters>
            <parameter name="index">
              <description><![CDATA[The index of the tab to remove.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTabBGColorAt" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setTabEnabled" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.ui.IScriptTabPanelMethods" member="setTabEnabledAt"/>
          </sees>
        </function>
        <function name="setTabEnabledAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the status of a specified tab in a tabpanel.]]></description>
          <summary><![CDATA[Sets the status of a specified tab in a tabpanel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setTabEnabledAt(3,true);]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab.]]></description>
            </parameter>
            <parameter name="b" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if enabled; or false if disabled.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTabFGColorAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></description>
          <summary><![CDATA[Sets the foreground color for a specified tab in a tabpanel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setTabFGColorAt(3,'#000000');]]></sample>
          <parameters>
            <parameter name="i" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the hexadecimal RGB color value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTabTextAt">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the text for a specified tab in a tabpanel.]]></description>
          <summary><![CDATA[Sets the text for a specified tab in a tabpanel.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setTabTextAt(3,'newTitle');]]></sample>
          <parameters>
            <parameter name="index">
              <description><![CDATA[the number of the specified tab]]></description>
            </parameter>
            <parameter name="text">
              <description><![CDATA[the text to be set for the specified tab]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="TextArea" qualifiedName="com.servoy.j2db.ui.IScriptTextAreaMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="caretPosition">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></description>
          <summary><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          <sample><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getScrollX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x scroll location in pixels.]]></return>
          <description><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollX() can be used with getScrollY() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getScrollX();]]></sample>
        </function>
        <function name="getScrollY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y scroll location in pixels.]]></return>
          <description><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).

NOTE: getScrollY() can be used with getScrollX() to set the scroll location of a portal using the setScroll function. For Example:

//returns the X and Y scroll coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new scroll location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y scroll location of the current portal or specified portal - only for a portal where the height of the portal is greater than the height of the portal field(s).]]></summary>
          <sample><![CDATA[var y = %%prefix%%%%elementName%%.getScrollY();]]></sample>
        </function>
        <function name="getSelectedText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The selected text from the component.]]></return>
          <description><![CDATA[Returns the currently selected text in the specified field. 

NOTE: This function is for field elements only.]]></description>
          <summary><![CDATA[Returns the currently selected text in the specified field.]]></summary>
          <sample><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          <summary><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          <sample><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="selectAll">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Selects all the contents of a field.]]></description>
          <summary><![CDATA[Selects all the contents of a field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setScroll">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the scroll location of a portal. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen - only for a portal where the height of the portal is greater than the height of the portal filed(s).

NOTE: getScrollX() can be used with getScrollY() to return the current scroll location of a portal; then use the X and Y coordinates with the setScroll function to set a new scroll location. For Example:
 
//returns the X and Y coordinates
var x = forms.company.elements.portal50.getScrollX();
var y = forms.company.elements.portal50.getScrollY();

//sets the new location
forms.company.elements.portal50.setScroll(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the scroll location of a portal.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setScroll(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the portal scroll location in pixels]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the portal scroll location in pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="TextField" qualifiedName="com.servoy.j2db.ui.IScriptFieldMethods">
      <properties>
        <property name="bgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the background color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the background color of a field.]]></summary>
          <sample><![CDATA[//sets the background color of the field
%%prefix%%%%elementName%%.bgcolor = "#FFFFFF";
//gets the background color of the field
var c = %%prefix%%%%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="caretPosition">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></description>
          <summary><![CDATA[Gets or sets the number value (position) of the text caret (text "I" bar) in a field.]]></summary>
          <sample><![CDATA[//get the current caretposition
var caretPos = %%prefix%%%%elementName%%.caretPosition;
//add one and set it
%%prefix%%%%elementName%%.caretPosition = caretPos+1;]]></sample>
        </property>
        <property name="editable">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.

NOTE the "!" operator can be used to invert the editable state.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - editable; false - read-only.]]></summary>
          <sample><![CDATA[var currentState = %%prefix%%%%elementName%%.editable;
%%prefix%%%%elementName%%.editable = !currentState;]]></sample>
        </property>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".
true - enabled; false - not enabled; ! - the enabled state is inverted (the opposite).

NOTE: A disabled element cannot be selected by clicking the element (or by pressing the TAB key even if this option is supported by the operating system).

NOTE: A label or button element will not disable if the "displayType" design time property for a field is set to HTML_AREA.

NOTE: The disabled "grayed" color is dependent on the LAF set in the Servoy Client Application Preferences. For more information see Preferences: Look And Feel in the Servoy Developer User's Guide.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a specified field, also known as "grayed".]]></summary>
          <sample><![CDATA[//gets the enabled state of the field
var currState = %%prefix%%%%elementName%%.enabled;

//sets the enabled state of the field
%%prefix%%%%elementName%%.enabled = !currentState;]]></sample>
        </property>
        <property name="fgcolor">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the foreground color of a field. The color has to be set using the hexadecimal RGB value as used in HTML.]]></description>
          <summary><![CDATA[Gets or sets the foreground color of a field.]]></summary>
          <sample><![CDATA[//sets the foreground color of the field
%%prefix%%%%elementName%%.fgcolor = "#000000";

//gets the foreground color of the field
var c = %%prefix%%%%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="format">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></description>
          <summary><![CDATA[Gets or sets the display formatting of a field for number and text values; does not affect the actual value stored in the database column.]]></summary>
          <sample><![CDATA[//sets the display formatting of the field
%%prefix%%%%elementName%%.format = '###';

//gets the display formatting of the field
var format = %%prefix%%%%elementName%%.format;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite). 

NOTE: A field set as read-only can be selected by clicking (or pressing the TAB key if this option is supported by the operating system) and the field data can be copied.]]></description>
          <summary><![CDATA[Gets or sets the editable/read-only state of a field; true - read-only; false - editable; ! - the editable/read-only state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//gets the editable/read-only state of the field
var currentState = %%prefix%%%%elementName%%.readOnly;

//sets the editable/read-only state of the field
%%prefix%%%%elementName%%.readOnly = !currentState;]]></sample>
        </property>
        <property name="toolTipText">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element. 
 
 NOTE: HTML should be used for multi-line tooltips; you can also use any valid HTML tags to format tooltip text.]]></description>
          <summary><![CDATA[Gets or sets the tool tip text of an element; text displays when the mouse cursor hovers over an element.]]></summary>
          <sample><![CDATA[//gets the tooltip text of the element
var toolTip = %%prefix%%%%elementName%%.toolTipText;

//sets the tooltip text of the element
%%prefix%%%%elementName%%.toolTipText = "New tip";
%%prefix%%%%elementName%%.toolTipText = "<html>This includes <b>bolded text</b> and <font color='blue'>BLUE</font> text as well.";]]></sample>
        </property>
        <property name="transparent">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.
 
NOTE: transparency can be inverted using ! operator: elements.elementName.transparent = !elements.elementName.transparent;

NOTE: transparency will be mostly used for background color, a transparent element will receive the background of the element "beneath" it, a non transparent one will use its own background color]]></description>
          <summary><![CDATA[Gets or sets the transparency of an element; true - transparent; false - not transparent.]]></summary>
          <sample><![CDATA[//gets the transparency of the element
var currentState = %%prefix%%%%elementName%%.transparent;

//sets the transparency of the element
%%prefix%%%%elementName%%.transparent = !currentState;]]></sample>
        </property>
        <property name="visible">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).

NOTE: The visibility of an element is not persistent; the state of visibility only applies to the current user in his/her current session.]]></description>
          <summary><![CDATA[Gets or sets the visibility of an element; true - visible; false - not visible; ! - the visibility state is inverted (the opposite).]]></summary>
          <sample><![CDATA[//sets the element as visible
forms.company.elements.faxBtn.visible = true;

//gets the visibility of the element
var currentState = forms.company.elements.faxBtn.visible;

//sets the element as not visible when the current state is visible
forms.company.elements.faxBtn.visible = !currentState;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getAbsoluteFormLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the form in pixels.]]></return>
          <description><![CDATA[Returns the absolute form (designed) Y location.]]></description>
          <summary><![CDATA[Returns the absolute form (designed) Y location.]]></summary>
          <sample><![CDATA[var absolute_y = %%prefix%%%%elementName%%.getAbsoluteFormLocationY();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[The value of the property for specified key.]]></return>
          <description><![CDATA[Gets the specified client property for the element based on a key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[var property = %%prefix%%%%elementName%%.getClientProperty('ToolTipText');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderID">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The data provider as String.]]></return>
          <description><![CDATA[Get the data provider this UI element (display) is showing.]]></description>
          <summary><![CDATA[Get the data provider this UI element (display) is showing.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.getDataProviderID();]]></sample>
        </function>
        <function name="getElementType">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The display type of the element as String.]]></return>
          <description><![CDATA[Returns the type of a specified element.]]></description>
          <summary><![CDATA[Returns the type of a specified element.]]></summary>
          <sample><![CDATA[var et = %%prefix%%%%elementName%%.getElementType();]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The height of the element in pixels.]]></return>
          <description><![CDATA[Returns the height of the current element. 
NOTE: getHeight() can be used with getWidth() to set the size of an element using the setSize function. For example:

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();
 
//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the height of the current element.]]></summary>
          <sample><![CDATA[var ht = %%prefix%%%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLabelForElementNames">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[An array with element names.]]></return>
          <description><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></description>
          <summary><![CDATA[Returns an Array of label element names that has this field filled in as the labelFor.]]></summary>
          <sample><![CDATA[var array =elements.name_first.getLabelForElementNames();
for (var i =0; i<array.length;i++)
{
	elements[array[i]].fgcolor = "#ff00ff";
}]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The x location of the element in pixels.]]></return>
          <description><![CDATA[Returns the x location of the current element. 

NOTE: getLocationX() can be used with getLocationY() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();
 
//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the x location of the current element.]]></summary>
          <sample><![CDATA[var x = %%prefix%%%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The y location of the element in pixels.]]></return>
          <description><![CDATA[Returns the y location of the current element. 

NOTE: getLocationY() can be used with getLocationX() to set the location of an element using the setLocation function. For Example:

//returns the X and Y coordinates
var x = forms.company.elements.faxBtn.getLocationX();
var y = forms.company.elements.faxBtn.getLocationY();

//sets the new location 10 px to the right; 10 px down from the current location
forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Returns the y location of the current element.]]></summary>
          <sample><![CDATA[var y =  %%prefix%%%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The name of the element.]]></return>
          <description><![CDATA[Returns the name of an element. (may be null as well)]]></description>
          <summary><![CDATA[Returns the name of an element.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getName();]]></sample>
        </function>
        <function name="getSelectedText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The selected text from the component.]]></return>
          <description><![CDATA[Returns the currently selected text in the specified field. 

NOTE: This function is for field elements only.]]></description>
          <summary><![CDATA[Returns the currently selected text in the specified field.]]></summary>
          <sample><![CDATA[var my_text = %%prefix%%%%elementName%%.getSelectedText();]]></sample>
        </function>
        <function name="getTitleText">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The title text.]]></return>
          <description><![CDATA[Get the title text.]]></description>
          <summary><![CDATA[Get the title text.]]></summary>
          <sample><![CDATA[var titleText = %%prefix%%%%elementName%%.getTitleText();]]></sample>
        </function>
        <function name="getValueListName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[The valuelist name.]]></return>
          <description><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></description>
          <summary><![CDATA[Returns the current valuelist name for the specified field; returns NULL if no valuelist.]]></summary>
          <sample><![CDATA[var name = %%prefix%%%%elementName%%.getValueListName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[The width of the element in pixels.]]></return>
          <description><![CDATA[Returns the width of the current element. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example:

 //returns the width (w) and height (h)
 var w = forms.company.elements.faxBtn.getWidth();
 var h = forms.company.elements.faxBtn.getHeight();
 
 //sets the new size
 forms.company.elements.faxBtn.setSize(w,h);
 
 //sets the new size and adds 1 px to both the width and height
 forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Returns the width of the current element.]]></summary>
          <sample><![CDATA[var w = %%prefix%%%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.

NOTE: Depending on the operating system, a user interface property name may be available.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.putClientProperty('ToolTipText','some text');]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[user interface key (depends on operating system)]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a predefined value for the key]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="replaceSelectedText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.

NOTE: replaceSelectedText applies to text fields and all XXX_AREA displayType text - RTF_AREA, HTML_AREA, or TEXT_AREA.]]></description>
          <summary><![CDATA[Replaces the selected text; if no text has been selected, the replaced value will be inserted at the last cursor position.]]></summary>
          <sample><![CDATA[//returns the current selected text
var my_text = %%prefix%%%%elementName%%.getSelectedText();

//replaces the current selected text
%%prefix%%%%elementName%%.replaceSelectedText('John');]]></sample>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The replacement text.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="requestFocus">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false). 
When focus is requested on a text field, a text cursor will be displayed in the specified field.

NOTE: This function is for field elements only; for more information about the optional parameter, see the onFocusGained design time property in the section on Fields.]]></description>
          <summary><![CDATA[Requests the focus for an element; can skip the onFocusGained event for an element by using requestFocus(false).]]></summary>
          <sample><![CDATA[//requests the focus for the element
//prevents the onFocusGained method from executing
%%prefix%%%%elementName%%.requestFocus(false);]]></sample>
          <parameters>
            <parameter name="mustExecuteOnFocusGainedMethod" optional="true">
              <description><![CDATA[true - to execute the onFocusGained method;  false - to prevent the onFocusGained method from executing, default is true (if not specified).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="selectAll">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Selects all the contents of a field.]]></description>
          <summary><![CDATA[Selects all the contents of a field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.selectAll();]]></sample>
        </function>
        <function name="setBorder">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the border attribute(s) of a specified element. 

The border attributes:

borderType - EmptyBorder, EtchedBorder, BevelBorder, LineBorder, TitleBorder, MatteBorder, SpecialMatteBorder.
size - (numeric value) for: bottom, left, right, top.
color - (hexadecimal value) for: bottom, left, right, top.
dash pattern - (numeric value) for selected side(s).
rounding radius - (numeric value) for selected side(s).

NOTE: Use the same value(s) and order of attribute(s) from the element design time property "borderType".]]></description>
          <summary><![CDATA[Sets the border attribute(s) of a specified element.]]></summary>
          <sample><![CDATA[//sets the border type to "LineBorder"
//sets a 1 px line width for the bottom and left side of the border
//sets the hexadecimal color of the border to "#ccffcc"
var b = %%prefix%%%%elementName%%.setBorder('LineBorder,1,#ccffcc');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the border attributes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the font name, style, and size of an element. 

font name - the name of the font family.
style - the type of the font. (plain = 0; bold = 1; italic = 2; bold-italic = 3).
size - the size of the font (in points).]]></description>
          <summary><![CDATA[Sets the font name, style, and size of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setFont('Tahoma,1,11');]]></sample>
          <parameters>
            <parameter name="spec" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font name, style, size]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the location of an element. It takes as input the X (horizontal) and Y (vertical) coordinates - starting from the TOP LEFT side of the screen.

NOTE: getLocationX() can be used with getLocationY() to return the current location of an element; then use the X and Y coordinates with the setLocation function to set a new location. For Example:

 //returns the X and Y coordinates
 var x = forms.company.elements.faxBtn.getLocationX();
 var y = forms.company.elements.faxBtn.getLocationY();
 
 //sets the new location 10 px to the right; 10 px down from the current location
 forms.company.elements.faxBtn.setLocation(x+10,y+10);]]></description>
          <summary><![CDATA[Sets the location of an element.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setLocation(200,200);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the X coordinate of the element in pixels.]]></description>
            </parameter>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the Y coordinate of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the size of the field. It takes as input the width and the height. 

NOTE: getWidth() can be used with getHeight() to set the size of an element using the setSize function. For Example: 

//returns the width (w) and height (h)
var w = forms.company.elements.faxBtn.getWidth();
var h = forms.company.elements.faxBtn.getHeight();

//sets the new size
forms.company.elements.faxBtn.setSize(w,h);

//sets the new size and adds 1 px to both the width and height
forms.company.elements.faxBtn.setSize(w+1,h+1);]]></description>
          <summary><![CDATA[Sets the size of the field.]]></summary>
          <sample><![CDATA[%%prefix%%%%elementName%%.setSize(20,30);]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the width of the element in pixels.]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the height of the element in pixels.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setValueListItems">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist). 
Should receive a dataset parameter, first column is for display values, second column (optional) is for real values.]]></description>
          <summary><![CDATA[Sets the display/real values to the custom valuelist of the element (if element has custom valuelist).]]></summary>
          <sample><![CDATA[var dataset = databaseManager.createEmptyDataSet(0,new Array('display_values','optional_real_values'));
dataset.addRow(['aa',1]);
dataset.addRow(['bb',2]);
dataset.addRow(['cc',3]);
// %%prefix%%%%elementName%% should have a valuelist attached
%%prefix%%%%elementName%%.setValueListItems(dataset);]]></sample>
          <parameters>
            <parameter name="dataset">
              <description><![CDATA[first column is display value, second column is real value]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="UICONSTANTS" qualifiedName="com.servoy.j2db.scripting.info.UICONSTANTS">
      <constants>
        <constant name="DATE_FORMATTERS_LENIENT">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using application.setUIProperty() or element.putClientProperty().

If set on application it will affect all date formatted fields. CAUTION: this property must be set on application before the fields are created (for example in solution onOpen handler). Changing it after fields were created will not affect these existing fields.
If set on an element it will affect only that date formatted element/field (with priority over the application property).
Value can be true/false/null.

If set to false, date formatted fields will not allow input of out-of-bounds values (like 62 minutes means 2 minutes and +1 hour).
DEFAULT: true.]]></description>
          <summary><![CDATA[Property that can be set using application.]]></summary>
          <sample><![CDATA[// make all date formatted fields (created after this line is executed) not use lenient mode
application.setUIProperty(APP_UI_PROPERTY.DATE_FORMATTERS_LENIENT, false);
// make one date formatted field use lenient mode - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_LENIENT, true);]]></sample>
        </constant>
        <constant name="DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using application.setUIProperty() or element.putClientProperty(). It is used only in Smart Client.

If set on application it will affect all date formatted fields. If set on an element it will affect only that date formatted element/field (with priority over the application property).
Value can be true/false/null.

If set to true, only selected part of the date will be affected when using up/down keys to cycle through values. (for example, pressing up when cursor is on minutes and minutes shows 59 will not result in hour change)
DEFAULT: false.]]></description>
          <summary><![CDATA[Property that can be set using application.]]></summary>
          <sample><![CDATA[// make all date formatted fields use roll instead of add
application.setUIProperty(APP_UI_PROPERTY.DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD, true);
// make one date formatted field use add instead of roll - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.DATE_FORMATTERS_ROLL_INSTEAD_OF_ADD, false);]]></sample>
        </constant>
        <constant name="DIALOG_FULL_SCREEN" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Value that can be used to specify that a dialog should completely fill the screen.]]></description>
          <summary><![CDATA[Value that can be used to specify that a dialog should completely fill the screen.]]></summary>
          <sample><![CDATA[application.showFormInDialog('customers',APP_UI_PROPERTY.DIALOG_FULL_SCREEN,APP_UI_PROPERTY.DIALOG_FULL_SCREEN,
     APP_UI_PROPERTY.DIALOG_FULL_SCREEN,APP_UI_PROPERTY.DIALOG_FULL_SCREEN,'My Title',true,true,'customers_dialog',true)]]></sample>
        </constant>
        <constant name="FULL_SCREEN" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Value that can be used to specify that a dialog/window should completely fill the screen.]]></description>
          <summary><![CDATA[Value that can be used to specify that a dialog/window should completely fill the screen.]]></summary>
          <sample><![CDATA[application.showFormInDialog('customers',APP_UI_PROPERTY.FULL_SCREEN,APP_UI_PROPERTY.FULL_SCREEN,
     APP_UI_PROPERTY.FULL_SCREEN,APP_UI_PROPERTY.FULL_SCREEN,'My Title',true,true,'customers_dialog',true)]]></sample>
        </constant>
        <constant name="TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using application.setUIProperty() or element.putClientProperty().

If set on application it will affect all TYPE-AHEAD fields. If set on an element it will affect only that TYPE-AHEAD element/field (with priority over the application property).
Value can be true/false/null.

If set to true, the affected TYPE_AHEAD(s) will not show the pop-up when gaining focus.
DEFAULT: true.]]></description>
          <summary><![CDATA[Property that can be set using application.]]></summary>
          <sample><![CDATA[// make all TYPE-AHEAD fields not show the pop-up when gaining focus
application.setUIProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN, false);
// make one TYPE-AHEAD field show the pop-up when gaining focus - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN, true);]]></sample>
        </constant>
        <constant name="TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using application.setUIProperty() or element.putClientProperty().

If set on application it will affect all TYPE-AHEAD fields. If set on an element it will affect only that TYPE-AHEAD element/field (with priority over the application property).
Value can be true/false/null.

If set to true, the affected TYPE_AHEAD(s) will not show the pop-up when the field content is empty.
DEFAULT: true.]]></description>
          <summary><![CDATA[Property that can be set using application.]]></summary>
          <sample><![CDATA[// make all TYPE-AHEAD fields not show the pop-up when there is empty content in the field
application.setUIProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY, false);
// make one TYPE-AHEAD field show the pop-up when there is empty content in the field - overrides the application property set
forms.someForm.elements.typeAheadElement.putClientProperty(APP_UI_PROPERTY.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY, true);]]></sample>
        </constant>
        <constant name="USE_SYSTEM_PRINT_DIALOG">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property than can be set using application.setUIProperty().

If set to true, the system standard Printing dialog will be used when printing is needed.
If set to false, the Servoy Printing dialog will be used.

The value can be true/false/null.
DEFAULT: false]]></description>
          <summary><![CDATA[Property than can be set using application.]]></summary>
          <sample><![CDATA[application.setUIProperty(APP_UI_PROPERTY.USE_SYSTEM_PRINT_DIALOG, true)]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="UUID" qualifiedName="com.servoy.j2db.util.UUID">
      <functions>
        <function name="toBytes">
          <argumentsTypes/>
          <return typecode="[B" type="byte[]"><![CDATA[the byte array representation of the UUID.]]></return>
          <description><![CDATA[Get the byte array representation of the UUID.]]></description>
          <summary><![CDATA[Get the byte array representation of the UUID.]]></summary>
          <sample><![CDATA[uuid.toBytes();]]></sample>
        </function>
        <function name="toString">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string representation of the UUID.]]></return>
          <description><![CDATA[Get the string representation of the UUID.]]></description>
          <summary><![CDATA[Get the string representation of the UUID.]]></summary>
          <sample><![CDATA[uuid.toString();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Utils" scriptingName="utils" qualifiedName="com.servoy.j2db.scripting.JSUtils">
      <functions>
        <function name="dateFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[the date as text or date object]]></return>
          <description><![CDATA[Format a date object to a text representation or a parses a datestring to a date object.]]></description>
          <summary><![CDATA[Format a date object to a text representation or a parses a datestring to a date object.]]></summary>
          <sample><![CDATA[var parsedDate = utils.dateFormat(datestring,'EEE, d MMM yyyy HH:mm:ss'); 

var formattedDateString = utils.dateFormat(dateobject,'EEE, d MMM yyyy HH:mm:ss');]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the date as text or date object]]></description>
            </parameter>
            <parameter name="format" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the format to output or parse the to date]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUnicodeCharacter">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a string containing the unicode character]]></return>
          <description><![CDATA[Returns a string containing the character for the unicode number.]]></description>
          <summary><![CDATA[Returns a string containing the character for the unicode number.]]></summary>
          <sample><![CDATA[//returns a big dot
var dot = utils.getUnicodeCharacter(9679);]]></sample>
          <parameters>
            <parameter name="unicodeCharacterNumber" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the number indicating the unicode character]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="hasChildRecords" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSUtils" member="hasRecords"/>
          </sees>
        </function>
        <function name="hasRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if exists]]></return>
          <description><![CDATA[Returns true if the (related)foundset exists and has records.
Another use is, to pass a record and qualified relations string to test multiple relations/foundset at once]]></description>
          <summary><![CDATA[Returns true if the (related)foundset exists and has records.]]></summary>
          <sample><![CDATA[//test the orders_to_orderitems foundset 
if (%%elementName%%.hasRecords(orders_to_orderitems))
{
	//do work on relatedFoundSet
}
//test the orders_to_orderitems.orderitems_to_products foundset to be reached from the current record 
//if (%%elementName%%.hasRecords(foundset.getSelectedRecord(),'orders_to_orderitems.orderitems_to_products'))
//{
//	//do work on deeper relatedFoundSet
//}]]></sample>
          <parameters>
            <parameter name="foundset_or_record">
              <description><![CDATA[the foundset or record to be tested]]></description>
            </parameter>
            <parameter name="qualifiedRelationString" optional="true">
              <description><![CDATA[the qualified relation string to reach a related foundset if a record is passes as first paramter]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isMondayFirstDayOfWeek">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if Monday is first day of the week in current locale]]></return>
          <description><![CDATA[Returns true when Monday is the first day of the week for your current locale setting.]]></description>
          <summary><![CDATA[Returns true when Monday is the first day of the week for your current locale setting.]]></summary>
          <sample><![CDATA[if(utils.isMondayFirstDayOfWeek())
{
//a date calculation
}]]></sample>
        </function>
        <function name="numberFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the resulting number in text]]></return>
          <description><![CDATA[Format a number to specification (or to have a defined fraction).]]></description>
          <summary><![CDATA[Format a number to specification (or to have a defined fraction).]]></summary>
          <sample><![CDATA[var textalNumber = utils.numberFormat(16.749, 2); //returns 16.75
var textalNumber2 = utils.numberFormat(100006.749, '#,###.00'); //returns 100,006.75]]></sample>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the number to format]]></description>
            </parameter>
            <parameter name="digitsOrFormat" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the format or digits]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringEscapeMarkup">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the escaped text]]></return>
          <description><![CDATA[Returns the escaped markup text (HTML/XML).]]></description>
          <summary><![CDATA[Returns the escaped markup text (HTML/XML).]]></summary>
          <sample><![CDATA[var escapedText = utils.stringEscapeMarkup('<html><body>escape me</body></html>')]]></sample>
          <parameters>
            <parameter name="textString">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="escapeSpaces" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[indicating to escape spaces]]></description>
            </parameter>
            <parameter name="convertToHtmlUnicodeEscapes" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[indicating to use unicode escapes]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringFormat">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the formatted text]]></return>
          <description><![CDATA[Formats a string according to format specifiers and arguments.]]></description>
          <summary><![CDATA[Formats a string according to format specifiers and arguments.]]></summary>
          <sample><![CDATA[// the  format specifier has the syntax: %[argument_index$][flags][width][.precision]conversion
// argument index is 1$, 2$ ...
// flags is a set of characters that modify the output format
// typical values: '+'(The result will always include a sign), ','(The result will include locale-specific grouping separators)
// width is a non-negative decimal integer indicating the minimum number of characters to be written to the output
// precision is a non-negative decimal integer usually used to restrict the number of characters
// conversion is a character indicating how the argument should be formatted
// typical conversion values: b(boolean), s(string), c(character), d(decimal integer), f(floating number), t(prefix for date and time)
// Date/Time Conversions (used after 't' prefix): 
		// 'H' 	Hour of the day for the 24-hour clock, formatted as two digits with a leading zero as necessary i.e. 00 - 23. 
		// 'I' 	Hour for the 12-hour clock, formatted as two digits with a leading zero as necessary, i.e. 01 - 12. 
		// 'k' 	Hour of the day for the 24-hour clock, i.e. 0 - 23. 
		// 'l' 	Hour for the 12-hour clock, i.e. 1 - 12. 
		// 'M' 	Minute within the hour formatted as two digits with a leading zero as necessary, i.e. 00 - 59. 
		// 'S' 	Seconds within the minute, formatted as two digits with a leading zero as necessary, i.e. 00 - 60 ("60" is a special value required to support leap seconds).
		// 'L' 	Millisecond within the second formatted as three digits with leading zeros as necessary, i.e. 000 - 999.
		// 'p' 	Locale-specific morning or afternoon marker in lower case, e.g."am" or "pm". Use of the conversion prefix 'T' forces this output to upper case. 
		// 'z' 	RFC 822 style numeric time zone offset from GMT, e.g. -0800.
		// 'Z' 	A string representing the abbreviation for the time zone.
		// 'B' 	Locale-specific full month name, e.g. "January", "February".
		// 'b' 	Locale-specific abbreviated month name, e.g. "Jan", "Feb". 
		// 'h' 	Same as 'b'. 
		// 'A' 	Locale-specific full name of the day of the week, e.g. "Sunday", "Monday" 
		// 'a' 	Locale-specific short name of the day of the week, e.g. "Sun", "Mon" 
		// 'C' 	Four-digit year divided by 100, formatted as two digits with leading zero as necessary, i.e. 00 - 99 
		// 'Y' 	Year, formatted as at least four digits with leading zeros as necessary, e.g. 0092 equals 92 CE for the Gregorian calendar. 
		// 'y' 	Last two digits of the year, formatted with leading zeros as necessary, i.e. 00 - 99.
		// 'j' 	Day of year, formatted as three digits with leading zeros as necessary, e.g. 001 - 366 for the Gregorian calendar. 
		// 'm' 	Month, formatted as two digits with leading zeros as necessary, i.e. 01 - 13. 
		// 'd' 	Day of month, formatted as two digits with leading zeros as necessary, i.e. 01 - 31 
		// 'e' 	Day of month, formatted as two digits, i.e. 1 - 31.

		// common compositions for date/time conversion
		// 'R' 	Time formatted for the 24-hour clock as "%tH:%tM" 
		// 'T' 	Time formatted for the 24-hour clock as "%tH:%tM:%tS". 
		// 'r' 	Time formatted for the 12-hour clock as "%tI:%tM:%tS %Tp". The location of the morning or afternoon marker ('%Tp') may be locale-dependent. 
		// 'D' 	Date formatted as "%tm/%td/%ty". 
		// 'F' 	ISO 8601 complete date formatted as "%tY-%tm-%td". 
		// 'c' 	Date and time formatted as "%ta %tb %td %tT %tZ %tY", e.g. "Sun Jul 20 16:17:00 EDT 1969".

utils.stringFormat('%s Birthday: %2$tm %2$te,%2$tY',new Array('My',new Date(2009,0,1))) // returns My Birthday: 01 1,2009
utils.stringFormat('The time is: %1$tH:%1$tM:%1$tS',new Array(new Date(2009,0,1,12,0,0))) // returns The time is: 12:00:00
utils.stringFormat('My %s: %2$.0f, my float: %2$.2f',new Array('integer',10)) // returns My integer: 10, my float: 10.00
utils.stringFormat('Today is: %1$tc',new Array(new Date())) // returns current date/time as:  Today is: Fri Feb 20 14:15:54 EET 2009
utils.stringFormat('Today is: %tF',new Array(new Date())) // returns current date as: Today is: 2009-02-20]]></sample>
          <parameters>
            <parameter name="text_to_format" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to format]]></description>
            </parameter>
            <parameter name="parameters_array" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the array with parameters]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringIndexReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the changed text string]]></return>
          <description><![CDATA[Replaces a portion of a string with replacement text from a specfied index.]]></description>
          <summary><![CDATA[Replaces a portion of a string with replacement text from a specfied index.]]></summary>
          <sample><![CDATA[//returns 'this was a test'
var retval = utils.stringIndexReplace('this is a test',6,2,'was');]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the start index to work from]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the size of the text to replace]]></description>
            </parameter>
            <parameter name="replacement_text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the replacement text]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringInitCap">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the changed text]]></return>
          <description><![CDATA[Returns all words starting with capital chars.]]></description>
          <summary><![CDATA[Returns all words starting with capital chars.]]></summary>
          <sample><![CDATA[//returns 'This Is A Test'
var retval = utils.stringInitCap('This is A test');]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringLeft">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the result text string]]></return>
          <description><![CDATA[Returns a string with the requested number of characters, starting from the left.]]></description>
          <summary><![CDATA[Returns a string with the requested number of characters, starting from the left.]]></summary>
          <sample><![CDATA[//returns 'this i'
var retval = utils.stringLeft('this is a test',6);]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringLeftWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string with number of words form the left]]></return>
          <description><![CDATA[Returns the number of words, starting from the left.]]></description>
          <summary><![CDATA[Returns the number of words, starting from the left.]]></summary>
          <sample><![CDATA[//returns 'this is a'
var retval = utils.stringLeftWords('this is a test',3);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringMD5HashBase16">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the resulting hashString]]></return>
          <description><![CDATA[Returns the md5 hash (encoded as base16) for specified text.

NOTE: MD5 (Message-Digest Algorythm 5) is a hash function with a 128-bit hash value, for more info see: http://en.wikipedia.org/wiki/MD5]]></description>
          <summary><![CDATA[Returns the md5 hash (encoded as base16) for specified text.]]></summary>
          <sample><![CDATA[var hashed_password = utils.stringMD5HashBase16(user_password)]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringMD5HashBase64">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the resulting hashString]]></return>
          <description><![CDATA[Returns the md5 hash (encoded as base64) for specified text.

NOTE: MD5 (Message-Digest Algorythm 5) is a hash function with a 128-bit hash value, for more info see: http://en.wikipedia.org/wiki/MD5]]></description>
          <summary><![CDATA[Returns the md5 hash (encoded as base64) for specified text.]]></summary>
          <sample><![CDATA[var hashed_password = utils.stringMD5HashBase64(user_password)]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringMiddle">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the result text string]]></return>
          <description><![CDATA[Returns a substring from the original string.]]></description>
          <summary><![CDATA[Returns a substring from the original string.]]></summary>
          <sample><![CDATA[//returns 'his'
var retval = utils.stringMiddle('this is a test',2,3);]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the start index to work from]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringMiddleWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string with number of words form the left and]]></return>
          <description><![CDATA[Returns a substring from the original string.]]></description>
          <summary><![CDATA[Returns a substring from the original string.]]></summary>
          <sample><![CDATA[//returns 'is a'
var retval = utils.stringMiddleWords('this is a test',2,2);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[start word index]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the word count to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringPatternCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the occurrenceCount that the search string is found in the text]]></return>
          <description><![CDATA[Returns the number of times searchString appears in textString.]]></description>
          <summary><![CDATA[Returns the number of times searchString appears in textString.]]></summary>
          <sample><![CDATA[//returns 2 as count
var count = utils.stringPatternCount('this is a test','is');]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="searchString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the string to search]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringPosition">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the position]]></return>
          <description><![CDATA[Returns the position of the string to seach for, from a certain start position and occurrence.]]></description>
          <summary><![CDATA[Returns the position of the string to seach for, from a certain start position and occurrence.]]></summary>
          <sample><![CDATA[//returns 4 as position
var pos = utils.stringPosition('This is a test','s',1,1)]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="searchString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the string to search]]></description>
            </parameter>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the start index to search from]]></description>
            </parameter>
            <parameter name="i_occurrence" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the occurrence]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringReplace">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the changed text string]]></return>
          <description><![CDATA[Replaces a portion of a string with replacement text.]]></description>
          <summary><![CDATA[Replaces a portion of a string with replacement text.]]></summary>
          <sample><![CDATA[//returns 'these are cow 1 and cow 2.'
var retval = utils.stringReplace('these are test 1 and test 2.','test','cow');]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="search_text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the string to search]]></description>
            </parameter>
            <parameter name="replacement_text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the replacement text]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringReplaceTags">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the text with replaced tags]]></return>
          <description><![CDATA[Returns the text with % %tags%% replaced, based on provided record or foundset.]]></description>
          <summary><![CDATA[Returns the text with % %tags%% replaced, based on provided record or foundset.]]></summary>
          <sample><![CDATA[//Next line places a string in variable x, whereby the tag(% %TAG%%) is filled with the value of the database column 'company_name' of the selected record.
var x = utils.stringReplaceTags("The companyName of the selected record is % %company_name%% ", foundset)
//var otherExample = utils.stringReplaceTags("The amount of the related order line % %amount%% ", order_to_orderdetails);
//var recordExample = utils.stringReplaceTags("The amount of the related order line % %amount%% ", order_to_orderdetails.getRecord(i);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text tags to work with]]></description>
            </parameter>
            <parameter name="foundset_or_record" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the foundset or record to be used to fill in the tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringRight">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the result text string]]></return>
          <description><![CDATA[Returns a string with the requested number of characters, starting from the right.]]></description>
          <summary><![CDATA[Returns a string with the requested number of characters, starting from the right.]]></summary>
          <sample><![CDATA[//returns 'a test'
var retval = utils.stringLeft('this is a test',6);]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the size of the text to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringRightWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the string with number of words form the right]]></return>
          <description><![CDATA[Returns the number of words, starting from the right.]]></description>
          <summary><![CDATA[Returns the number of words, starting from the right.]]></summary>
          <sample><![CDATA[//returns 'is a test'
var retval = utils.stringRightWords('this is a test',3);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to process]]></description>
            </parameter>
            <parameter name="numberof_words" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[to return]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringToNumber">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="double" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the resulting number]]></return>
          <description><![CDATA[Filters characters out of from a string and leaves digits, returns the number.]]></description>
          <summary><![CDATA[Filters characters out of from a string and leaves digits, returns the number.]]></summary>
          <sample><![CDATA[//returns '65567'
var retval = utils.stringToNumber('fg65gf567');]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringTrim">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the resulting trimmed string]]></return>
          <description><![CDATA[Returns the string without leading or trailing spaces.]]></description>
          <summary><![CDATA[Returns the string without leading or trailing spaces.]]></summary>
          <sample><![CDATA[//returns 'text'
var retval = utils.stringTrim('   text   ');]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stringWordCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the word count]]></return>
          <description><![CDATA[Returns the number of words in the text string.]]></description>
          <summary><![CDATA[Returns the number of words in the text string.]]></summary>
          <sample><![CDATA[//returns '4' as result
var retval = utils.stringWordCount('this is a test');]]></sample>
          <parameters>
            <parameter name="textString" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text to process]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="timestampToDate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="java.util.Date" type="com.servoy.j2db.documentation.scripting.docs.Date"><![CDATA[the stripped date object]]></return>
          <description><![CDATA[Returns a datestamp from the timestamp (sets hours,minutes,seconds and milliseconds to 0).]]></description>
          <summary><![CDATA[Returns a datestamp from the timestamp (sets hours,minutes,seconds and milliseconds to 0).]]></summary>
          <sample><![CDATA[var date = utils.timestampToDate(application.getTimeStamp());]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[object to be stripped from its time elements]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="VALUELIST" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VALUELIST" deprecated="true">
      <constants>
        <constant name="CUSTOM_VALUES" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="DATABASE_VALUES" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="EMPTY_VALUE_ALWAYS" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="EMPTY_VALUE_NEVER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="VARIABLETYPE" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VARIABLETYPE" deprecated="true">
      <constants>
        <constant name="DATETIME" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="INTEGER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="MEDIA" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="NUMBER" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="TEXT" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="VIEW" qualifiedName="com.servoy.j2db.scripting.solutionmodel.VIEW" deprecated="true">
      <constants>
        <constant name="LIST_VIEW" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LOCKED_LIST_VIEW" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LOCKED_RECORD_VIEW" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="LOCKED_TABLE_VIEW" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
        <constant name="RECORD_VIEW" undocumented="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
        </constant>
      </constants>
    </object>
    <object publicName="WEBCONSTANTS" qualifiedName="com.servoy.j2db.scripting.info.WEBCONSTANTS">
      <constants>
        <constant name="WEBCLIENT_TEMPLATES_DIR">
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Property that can be set using application.setUIProperty(), it sets the servoy_web_client_default.css location directory in the templates dir for this client]]></description>
          <summary><![CDATA[Property that can be set using application.]]></summary>
          <sample><![CDATA[// set this if you want to set the css path to the servoy_web_client_default.css file that you can specify per client
// by default this file resides in '/servoy-webclient/templates/default/servoy_web_client_default.css'
// and you will override the 'default' in that url so setting it to myclient1 will result in:
// by default this file resides in '/servoy-webclient/templates/myclient1/servoy_web_client_default.css'
application.setUIProperty(APP_WEB_PROPERTY.WEBCLIENT_TEMPLATES_DIR, 'myclient1');]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="controller" scriptingName="controller" qualifiedName="com.servoy.j2db.FormController$JSForm">
      <properties>
        <property name="enabled">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the enabled state of a form; also known as "grayed-out".

Notes:
-A disabled element(s) cannot be selected by clicking the form.
-The disabled "grayed" color is dependent on the LAF set in the Servoy Smart Client Application Preferences.]]></description>
          <summary><![CDATA[Gets or sets the enabled state of a form; also known as "grayed-out".]]></summary>
          <sample><![CDATA[//gets the enabled state of the form
var state = %%prefix%%controller.enabled;
//enables the form for input
%%prefix%%controller.enabled = true;]]></sample>
        </property>
        <property name="readOnly">
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Gets or sets the read-only state of a form; also known as "editable"

Note: The field(s) in a form set as read-only can be selected and the field data can be copied to clipboard.]]></description>
          <summary><![CDATA[Gets or sets the read-only state of a form; also known as "editable"

Note: The field(s) in a form set as read-only can be selected and the field data can be copied to clipboard.]]></summary>
          <sample><![CDATA[//gets the read-only state of the form
var state = %%prefix%%controller.readOnly;
//sets the read-only state of the form
%%prefix%%controller.readOnly = true]]></sample>
        </property>
        <property name="recordIndex" deprecated="true">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getSelectedIndex"/>
          </sees>
        </property>
        <property name="view">
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get/Set the current type of view of this form.]]></description>
          <summary><![CDATA[Get/Set the current type of view of this form.]]></summary>
          <sample><![CDATA[//gets the type of view for this form
var view = %%prefix%%controller.view;
//sets the form to Record view
%%prefix%%controller.view = 0;//RECORD_VIEW
//sets the form to List view
%%prefix%%controller.view = 1;//LIST_VIEW]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addFoundSetFilterParam" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[Add a filter parameter to limit the foundset permanently]]></description>
          <summary><![CDATA[Add a filter parameter to limit the foundset permanently]]></summary>
          <sample><![CDATA[var success = %%prefix%%controller.addFoundSetFilterParam('customerid', '=', 'BLONP');//possible to add multiple
%%prefix%%controller.loadAllRecords();//to make param(s) effective]]></sample>
          <parameters>
            <parameter name="column_dataprovider_id"/>
            <parameter name="operator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="addFoundSetFilterParam"/>
          </sees>
        </function>
        <function name="copyAllRecords" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Copy all records from foundset to variable and clipboard]]></description>
          <summary><![CDATA[Copy all records from foundset to variable and clipboard]]></summary>
          <sample><![CDATA[var recorddata = %%prefix%%controller.copyAllRecords();]]></sample>
        </function>
        <function name="copyRecord" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Copy current record to variable and clipboard.]]></description>
          <summary><![CDATA[Copy current record to variable and clipboard.]]></summary>
          <sample><![CDATA[var recorddata = %%prefix%%controller.copyRecord();]]></sample>
        </function>
        <function name="deleteAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[false incase of related foundset having records and orphans records are not allowed by the relation]]></return>
          <description><![CDATA[Deletes all records in foundset, resulting in empty foundset.]]></description>
          <summary><![CDATA[Deletes all records in foundset, resulting in empty foundset.]]></summary>
          <sample><![CDATA[var success = %%prefix%%controller.deleteAllRecords();]]></sample>
        </function>
        <function name="deleteRecord">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[false incase of related foundset having records and orphans records are not allowed by the relation]]></return>
          <description><![CDATA[Delete current selected record, deletes mulitple selected records incase the foundset is using multiselect.]]></description>
          <summary><![CDATA[Delete current selected record, deletes mulitple selected records incase the foundset is using multiselect.]]></summary>
          <sample><![CDATA[var success = %%prefix%%controller.deleteRecord();]]></sample>
        </function>
        <function name="duplicateFoundSet" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"/>
          <description><![CDATA[Get duplicate of current foundset, can be used by loadRecords again]]></description>
          <summary><![CDATA[Get duplicate of current foundset, can be used by loadRecords again]]></summary>
          <sample><![CDATA[var dupFoundset = %%prefix%%controller.duplicateFoundSet();
%%prefix%%controller.find();
//search some fields
var count = %%prefix%%controller.search();
if (count == 0)
{
	plugins.dialogs.showWarningDialog('Alert', 'No records found','OK');
	controller.loadRecords(dupFoundset);
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="duplicateFoundSet"/>
          </sees>
        </function>
        <function name="duplicateRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succesful]]></return>
          <description><![CDATA[Duplicate current record or record at index in the form foundset.]]></description>
          <summary><![CDATA[Duplicate current record or record at index in the form foundset.]]></summary>
          <sample><![CDATA[%%prefix%%controller.duplicateRecord(); //duplicate the current record, adds on top
//%%prefix%%controller.duplicateRecord(false); //duplicate the current record, adds at bottom
//%%prefix%%controller.duplicateRecord(1,2); //duplicate the first record as second record]]></sample>
          <parameters>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[true adds the new record as the topmost record, or adds at specified index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="find">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful, will return false if autosave is disabled and there are unsaved records.]]></return>
          <description><![CDATA[Start a find request, use the "search" function to perform/exit the find.
Make sure the operator and the data (value) are part of the string passed to dataprovider (included inside a pair of quotation marks).

When in find mode, columns can be assigned string expressions that are evaluated as:
General:
      c1||c2    (condition1 or condition2)
      c|format  (apply format on condition like 'x|dd-MM-yyyy')
      !c        (not condition)
      #c        (modify condition, depends on column type)
      ^         (is null)
      ^=        (is null or empty)
      &lt;x     (less than value x)
      &gt;x     (greater than value x)
      &lt;=x    (less than or equals value x)
      &gt;=x    (greater than or equals value x)
      x...y     (between values x and y, including values)
      x         (equals value x)

 Number fields:
      =x       (equals value x)
      ^=       (is null or zero)

 Date fields:
      #c       (equals value x, entire day)
      now      (equals now, date and or time)
      //       (equals today)
      today    (equals today)

 Text fields:
      #c	        (case insensitive condition)
      = x      (equals a space and 'x')
      ^=       (is null or empty)
      %x%      (contains 'x')
      %x_y%    (contains 'x' followed by any char and 'y')
      \%      (contains char '%')
      \_      (contains char '_')

Related columns can be assigned, they will result in related searches.
For example, "employees_to_department.location_id = headoffice" finds all employees in the specified location).

Searching on related aggregates is supported.
For example, "orders_to_details.total_amount = '&gt;1000'" finds all orders with total order details amount more than 1000.]]></description>
          <summary><![CDATA[Start a find request, use the "search" function to perform/exit the find.]]></summary>
          <sample><![CDATA[if (%%prefix%%controller.find()) //find will fail if autosave is disabled and there are unsaved records
{
	columnTextDataProvider = '=a search value';
	columnNumberDataProvider = '>10';
	columnDateDataProvider = '>=10-03-2009|dd-MM-yyyy';
	%%prefix%%controller.search()
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.FormController$JSForm" member="search"/>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="setAutoSave"/>
          </sees>
        </function>
        <function name="focusField">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets focus to a field specified by its name. 
If the second parameter is set to true, then readonly fields will be skipped 
(the focus will be set to the first non-readonly field located after the field with the specified name; the tab sequence is respected when searching for the non-readonly field).]]></description>
          <summary><![CDATA[Sets focus to a field specified by its name.]]></summary>
          <sample><![CDATA[var tabseq = %%prefix%%controller.getTabSequence();
if (tabseq.length > 1) {
	// If there is more than one field in the tab sequence, 
	// focus the second one and skip over readonly fields.
	%%prefix%%controller.focusField(tabseq[1], true);
}
else {
	// If there is at most one field in the tab sequence, then focus
	// whatever field is first, and don't bother to skip over readonly fields.
	%%prefix%%controller.focusField(null, false);
}]]></sample>
          <parameters>
            <parameter name="fieldName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the field to be focussed]]></description>
            </parameter>
            <parameter name="skipReadonly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean indication to skip read only fields, if the named field happens to be read only]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="focusFirstField">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets focus to the first field of the form; based on tab order sequence.]]></description>
          <summary><![CDATA[Sets focus to the first field of the form; based on tab order sequence.]]></summary>
          <sample><![CDATA[%%prefix%%controller.focusFirstField();]]></sample>
          <sees>
            <see object="com.servoy.j2db.FormController$JSForm" member="focusField"/>
          </sees>
        </function>
        <function name="getContainerName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the name of the window/dialog this form is displayed in. If the form is not showing in a window or dialog (other then main application frame), it returns null.]]></return>
          <description><![CDATA[Get the name of the window/dialog this form is displayed in.]]></description>
          <summary><![CDATA[Get the name of the window/dialog this form is displayed in.]]></summary>
          <sample><![CDATA[var dialogOrWindowName = %%prefix%%controller.getContainerName();
	if (dialogOrWindowName != null) {
		application.closeForm(dialogOrWindowName);
	}]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="showFormInDialog"/>
            <see object="com.servoy.j2db.scripting.JSApplication" member="showFormInWindow"/>
          </sees>
        </function>
        <function name="getDataProviderMaxLength">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the length]]></return>
          <description><![CDATA[Returns the maximum length allowed in the specified dataprovider.]]></description>
          <summary><![CDATA[Returns the maximum length allowed in the specified dataprovider.]]></summary>
          <sample><![CDATA[%%prefix%%controller.getDataProviderMaxLength('name');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.Object" type="com.servoy.j2db.documentation.scripting.docs.Object"><![CDATA[the dataprovider value (null if unknown dataprovider)]]></return>
          <description><![CDATA[Gets a value based on the specified dataprovider name.]]></description>
          <summary><![CDATA[Gets a value based on the specified dataprovider name.]]></summary>
          <sample><![CDATA[var val = %%prefix%%controller.getDataProviderValue('contact_name');]]></sample>
          <parameters>
            <parameter name="dataProvider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name to retieve the value for]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataSource">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the datasource]]></return>
          <description><![CDATA[Get the used datasource.]]></description>
          <summary><![CDATA[Get the used datasource.]]></summary>
          <sample><![CDATA[var dataSource = %%prefix%%controller.getDataSource();]]></sample>
        </function>
        <function name="getDesignMode">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[the design mode state (true/fase)]]></return>
          <description><![CDATA[Returns the state of this form designmode.]]></description>
          <summary><![CDATA[Returns the state of this form designmode.]]></summary>
          <sample><![CDATA[var success = %%prefix%%controller.getDesignMode();]]></sample>
        </function>
        <function name="getFormContext">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[the dataset with form context]]></return>
          <description><![CDATA[Gets the forms context where it resides, returns a dataset of its structure to the main controller.
Note: can't be called in onload, because no context is yet available at this time.]]></description>
          <summary><![CDATA[Gets the forms context where it resides, returns a dataset of its structure to the main controller.]]></summary>
          <sample><![CDATA[var dataset = %%prefix%%controller.getFormContext();
if (dataset.getMaxRowIndex() > 1) 
{
	// form is in a tabpanel
	//dataset columns: [containername(1),formname(2),tabpanel or beanname(3),tabname(4),tabindex(5)]
	//dataset rows: mainform(1) -> parent(2)  -> current form(3) (when 3 forms deep)
	var parentFormName = dataset.getValue(1,2)
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDataSet"/>
          </sees>
        </function>
        <function name="getFormWidth">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the width in pixels]]></return>
          <description><![CDATA[Gets the form width in pixels.]]></description>
          <summary><![CDATA[Gets the form width in pixels.]]></summary>
          <sample><![CDATA[var width = %%prefix%%controller.getFormWidth();]]></sample>
        </function>
        <function name="getMaxRecordIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the max record index]]></return>
          <description><![CDATA[Returns the current cached record count of the current foundset. 
To return the full foundset count, use: databaseManager.getFoundSetCount(...) 
Tip: get the the table count of all rows in a table, use: databaseManager.getTableCount(...)]]></description>
          <summary><![CDATA[Returns the current cached record count of the current foundset.]]></summary>
          <sample><![CDATA[for ( var i = 1 ; i <= %%prefix%%controller.getMaxRecordIndex() ; i++ )
{
	%%prefix%%controller.setSelectedIndex(i);
	//do some action per record
}]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="getFoundSetCount"/>
          </sees>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the name]]></return>
          <description><![CDATA[Get the name of this form.]]></description>
          <summary><![CDATA[Get the name of this form.]]></summary>
          <sample><![CDATA[var formName = %%prefix%%controller.getName();]]></sample>
        </function>
        <function name="getPartHeight">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the part height in pixels]]></return>
          <description><![CDATA[Gets the part height in pixels.]]></description>
          <summary><![CDATA[Gets the part height in pixels.]]></summary>
          <sample><![CDATA[var height = %%prefix%%controller.getPartHeight(JSPart.BODY);]]></sample>
          <parameters>
            <parameter name="partType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose height will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getPartYOffset">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[A number holding the Y offset of the specified form part.]]></return>
          <description><![CDATA[Returns the Y offset of a given part of the form.]]></description>
          <summary><![CDATA[Returns the Y offset of a given part of the form.]]></summary>
          <sample><![CDATA[var offset = %%prefix%%controller.getPartYOffset(JSPart.BODY);]]></sample>
          <parameters>
            <parameter name="partType" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[The type of the part whose Y offset will be returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getSelectedIndex">
          <argumentsTypes/>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the index]]></return>
          <description><![CDATA[Gets the current record index of the current foundset.]]></description>
          <summary><![CDATA[Gets the current record index of the current foundset.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%controller.getSelectedIndex();
//sets the next record in the foundset, will be reflected in UI
%%prefix%%controller.setSelectedIndex(current+1);]]></sample>
        </function>
        <function name="getServerName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get the name of the server used.]]></description>
          <summary><![CDATA[Get the name of the server used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="getTabSequence">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[array of names]]></return>
          <description><![CDATA[Get an array with the names of the components that are part of the tab sequence. 
The order of the names respects the order of the tab sequence. 
Components that are not named will not appear in the returned array, although they may be in the tab sequence.]]></description>
          <summary><![CDATA[Get an array with the names of the components that are part of the tab sequence.]]></summary>
          <sample><![CDATA[var tabseq = %%prefix%%controller.getTabSequence();
if (tabseq.length > 1) {
	// If there is more than one field in the tab sequence, 
	// focus the second one and skip over readonly fields.
	%%prefix%%controller.focusField(tabseq[1], true);
}
else {
	// If there is at most one field in the tab sequence, then focus
	// whatever field is first, and don't bother to skip over readonly fields.
	%%prefix%%controller.focusField(null, false);
}]]></sample>
        </function>
        <function name="getTableName" deprecated="true">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get the name of the table used.]]></description>
          <summary><![CDATA[Get the name of the table used.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="getDataSource"/>
          </sees>
        </function>
        <function name="getWindow">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.scripting.JSWindowImpl$JSWindow" type="com.servoy.j2db.scripting.JSWindowImpl$JSWindow"><![CDATA[the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></return>
          <description><![CDATA[Returns the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></description>
          <summary><![CDATA[Returns the JSWindow that the form is shown in, or null if the form is not currently showing in a window.]]></summary>
          <sample><![CDATA[]]></sample>
        </function>
        <function name="invertRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Inverts the current foundset against all rows of the current table; all records that are not in the foundset will become the current foundset.]]></description>
          <summary><![CDATA[Inverts the current foundset against all rows of the current table; all records that are not in the foundset will become the current foundset.]]></summary>
          <sample><![CDATA[%%prefix%%controller.invertRecords();]]></sample>
        </function>
        <function name="loadAllRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Loads all accessible records from the datasource into the form foundset.
When the form contains a related foundset it will be replaced by a default foundset on same datasource.

Notes: 
-the default foundset is always limited by filters, if databaseManager.addFoundSetFilterParam function is used.
-typical use is loading the normal foundset again after form usage in a related tabpanel]]></description>
          <summary><![CDATA[Loads all accessible records from the datasource into the form foundset.]]></summary>
          <sample><![CDATA[%%prefix%%controller.loadAllRecords();]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="addTableFilterParam"/>
          </sees>
        </function>
        <function name="loadOmittedRecords">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Loads the records that are currently omitted in the form foundset.]]></description>
          <summary><![CDATA[Loads the records that are currently omitted in the form foundset.]]></summary>
          <sample><![CDATA[%%prefix%%controller.loadOmittedRecords();]]></sample>
        </function>
        <function name="loadRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Load records via a (related) foundset, primary key (dataset/number/uuid) or query into the form.

Load records can be used in 5 different ways
1) to load a (related)foundset into the form.
the form will no longer share the default foundset with forms of the same datasource, use loadAllRecords to restore the default foundset 
controller.loadRecords(order_to_orderdetails);

2) to load a primary key dataset, will remove related sort!
var dataset = databaseManager.getDataSetByQuery(...);
controller.loadRecords(dataset);

3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
controller.loadRecords(123);
or
controller.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

4) to reload all last related records again, if for example after a search in related tabpanel
controller.loadRecords();

5) to load records in to the form based on a query (also known as 'Form by query')
controller.loadRecords(sqlstring,parameters);
limitations/requirements for sqlstring are:
-must start with 'select'
-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
-can contain '?' which are replaced with values from the array supplied to parameters argument
 if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
-must contain 'from' keyword
-the 'from' must be a comma separated list of table names
-must at least select from the table used in Servoy Form
-cannot contain 'group by', 'having' or 'union'
-all columns must be fully qualified like 'orders.order_id']]></description>
          <summary><![CDATA[Load records via a (related) foundset, primary key (dataset/number/uuid) or query into the form.]]></summary>
          <sample><![CDATA[//Load records can be used in 5 different ways
//1) to load a (related)foundset into the form.
//the form will no longer share the default foundset with forms of the same datasource, use loadAllRecords to restore the default foundset 
//%%prefix%%controller.loadRecords(order_to_orderdetails);

//2) to load a primary key dataset, will remove related sort!
//var dataset = databaseManager.getDataSetByQuery(...);
// dataset must match the table primary key columns (alphabetically ordered)
//%%prefix%%controller.loadRecords(dataset);

//3) to load a single record by primary key, will remove related sort! (pk should be a number or UUID)
//%%prefix%%controller.loadRecords(123);
//%%prefix%%controller.loadRecords(application.getUUID('6b5e2f5d-047e-45b3-80ee-3a32267b1f20'));

//4) to reload all last related records again, if for example after a search in related tabpanel
//%%prefix%%controller.loadRecords();

//5) to load records in to the form based on a query (also known as 'Form by query')
//%%prefix%%controller.loadRecords(sqlstring,parameters);
//limitations/requirements for sqlstring are:
//-must start with 'select'
//-the selected columns must be the (Servoy Form) table primary key columns (alphabetically ordered like 'select a_id, b_id,c_id ...')
//-can contain '?' which are replaced with values from the array supplied to parameters argument
// if the sqlstring contains an 'order by' clause, the records will be sorted accordingly and additional constraints apply:
//-must contain 'from' keyword
//-the 'from' must be a comma separated list of table names
//-must at least select from the table used in Servoy Form
//-cannot contain 'group by', 'having' or 'union'
//-all columns must be fully qualified like 'orders.order_id']]></sample>
          <parameters>
            <parameter name="data" optional="true">
              <description><![CDATA[the foundset/pkdataset/singlenNmber_pk/UUIDpk/queryString to load]]></description>
            </parameter>
            <parameter name="queryArgumentsArray" optional="true">
              <description><![CDATA[the arguments to replace the questions marks in the queryString]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="loadRecords"/>
          </sees>
        </function>
        <function name="newRecord">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if succesful]]></return>
          <description><![CDATA[Create a new record in the form foundset.]]></description>
          <summary><![CDATA[Create a new record in the form foundset.]]></summary>
          <sample><![CDATA[// foreign key data is only filled in for equals (=) relation items 
%%prefix%%controller.newRecord();//default adds on top
//%%prefix%%controller.newRecord(false); //adds at bottom
//%%prefix%%controller.newRecord(2); //adds as second record]]></sample>
          <parameters>
            <parameter name="location" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[true adds the new record as the topmost record, or adds at specified index]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="omitRecord">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Omit current record in form foundset, to be shown with loadOmittedRecords.

Note: The omitted records are discarded when these functions are executed: loadAllRecords, loadRecords(dataset), loadRecords(sqlstring), invert]]></description>
          <summary><![CDATA[Omit current record in form foundset, to be shown with loadOmittedRecords.]]></summary>
          <sample><![CDATA[var success = %%prefix%%controller.omitRecord();]]></sample>
          <sees>
            <see object="com.servoy.j2db.FormController$JSForm" member="loadOmittedRecords"/>
          </sees>
        </function>
        <function name="print">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Print this form with current foundset, without preview.]]></description>
          <summary><![CDATA[Print this form with current foundset, without preview.]]></summary>
          <sample><![CDATA[//print this form (with foundset records)
%%prefix%%controller.print();
//print only current record (no printerSelectDialog) to pdf plugin printer
//%%prefix%%controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          <parameters>
            <parameter name="printCurrentRecordOnly" optional="true">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="showPrinterSelectDialog" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean" optional="true">
              <description><![CDATA[to show the printer select dialog (default printer is normally used)]]></description>
            </parameter>
            <parameter name="printerJob" optional="true">
              <description><![CDATA[print to plugin printer job, see pdf printer plugin for example]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="printPreview" deprecated="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.FormController$JSForm" member="showPrintPreview"/>
          </sees>
        </function>
        <function name="printXML">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[the XML]]></return>
          <description><![CDATA[Print this form with current foundset records to xml format.]]></description>
          <summary><![CDATA[Print this form with current foundset records to xml format.]]></summary>
          <sample><![CDATA[//TIP: see also plugins.file.writeXMLFile(...)
var xml = %%prefix%%controller.printXML();
//print only current record 
//var xml = %%prefix%%controller.printXML(true);]]></sample>
          <parameters>
            <parameter name="printCurrentRecordOnly" optional="true">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="recreateUI">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"><![CDATA[true if successful]]></return>
          <description><![CDATA[Recreates the forms UI components, to reflect the latest solution model.
Use this after altering the elements via solutionModel at the JSForm of this form.]]></description>
          <summary><![CDATA[Recreates the forms UI components, to reflect the latest solution model.]]></summary>
          <sample><![CDATA[// get the solution model JSForm 
var form = solutionModel.getForm("myForm");
// get the JSField of the form 
var field = form.getField("myField");
// alter the field
field.x = field.x + 10;
// recreate the runtime forms ui to reflect the changes.
%%prefix%%controller.recreateUI();]]></sample>
          <sees>
            <see object="com.servoy.j2db.scripting.solutionmodel.JSForm"/>
          </sees>
        </function>
        <function name="relookup">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Performs a relookup for the current foundset record dataproviders.
Lookups are defined in the dataprovider (columns) auto-enter setting and are normally performed over a relation upon record creation.]]></description>
          <summary><![CDATA[Performs a relookup for the current foundset record dataproviders.]]></summary>
          <sample><![CDATA[%%prefix%%controller.relookup();]]></sample>
        </function>
        <function name="saveData" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.JSDatabaseManager" member="saveData"/>
          </sees>
        </function>
        <function name="search">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[the recordCount]]></return>
          <description><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.

Note: Omitted records are automatically excluded when performing a search - meaning that the foundset result by default will not include omitted records.]]></description>
          <summary><![CDATA[Start the database search and use the results, returns the number of records, make sure you did "find" function first.]]></summary>
          <sample><![CDATA[var recordCount = %%prefix%%controller.search();
//var recordCount = %%prefix%%controller.search(false,false); //to extend foundset]]></sample>
          <parameters>
            <parameter name="clearLastResults" optional="true">
              <description><![CDATA[boolean, clear previous search, default true]]></description>
            </parameter>
            <parameter name="reduceSearch" optional="true">
              <description><![CDATA[boolean, reduce (true) or extend (false) previous search results, default true]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.FormController$JSForm" member="find"/>
          </sees>
        </function>
        <function name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value based on a specified dataprovider name.]]></description>
          <summary><![CDATA[Sets the value based on a specified dataprovider name.]]></summary>
          <sample><![CDATA[%%prefix%%controller.setDataProviderValue('contact_name','mycompany');]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider name to set the value for]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to set in the dataprovider]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets this form in designmode with one or more callback methods.]]></description>
          <summary><![CDATA[Sets this form in designmode with one or more callback methods.]]></summary>
          <sample><![CDATA[//Set the current form in designmode with callbacks
%%prefix%%controller.setDesignMode(onDragMethod,onDropMethod,onSelectMethod,onResizeMethod);

//Set the current form out of designmode (to normal browse mode)
%%prefix%%controller.setDesignMode(false);]]></sample>
          <parameters>
            <parameter name="ondrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="com.servoy.j2db.documentation.scripting.docs.Function" optional="true">
              <description><![CDATA[onDrag method reference]]></description>
            </parameter>
            <parameter name="ondrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="com.servoy.j2db.documentation.scripting.docs.Function" optional="true">
              <description><![CDATA[onDrop method reference]]></description>
            </parameter>
            <parameter name="onselect" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="com.servoy.j2db.documentation.scripting.docs.Function" optional="true">
              <description><![CDATA[onSelect method reference]]></description>
            </parameter>
            <parameter name="onresize" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="com.servoy.j2db.documentation.scripting.docs.Function" optional="true">
              <description><![CDATA[onResize method reference]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDesignMode">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets this form in designmode with param true, false will return to normal browse/edit mode.]]></description>
          <summary><![CDATA[Sets this form in designmode with param true, false will return to normal browse/edit mode.]]></summary>
          <sample><![CDATA[//Set the current form in designmode with no callbacks
%%prefix%%controller.setDesignMode(true);

//Set the current form out of designmode (to normal browse)
%%prefix%%controller.setDesignMode(false);]]></sample>
          <parameters>
            <parameter name="designMode" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[boolean sets form in design mode if true, false ends design mode.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setPageFormat">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the page format to use when printing.

Orientation values:
0 - Landscape mode
1 - Portrait mode

Units values:
0 - millimeters
1 - inches
2 - pixels

Note: The unit specified for width, height and all margins MUST be the same.]]></description>
          <summary><![CDATA[Set the page format to use when printing.]]></summary>
          <sample><![CDATA[//Set page format to a custom size of 100x200 pixels with 10 pixel margins on all sides in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 10, 10, 10, 10);

//Set page format to a custom size of 100x200 mm in landscape mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, 0, 0);

//Set page format to a custom size of 100x200 inch in portrait mode
%%prefix%%controller.setPageFormat(100, 200, 0, 0, 0, 0, 1, 1);]]></sample>
          <parameters>
            <parameter name="width">
              <description><![CDATA[the specified width of the page to be printed.]]></description>
            </parameter>
            <parameter name="height">
              <description><![CDATA[the specified height of the page to be printed.]]></description>
            </parameter>
            <parameter name="leftmargin">
              <description><![CDATA[the specified left margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="rightmargin">
              <description><![CDATA[the specified right margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="topmargin">
              <description><![CDATA[the specified top margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="bottommargin">
              <description><![CDATA[the specified bottom margin of the page to be printed.]]></description>
            </parameter>
            <parameter name="orientation" optional="true">
              <description><![CDATA[the specified orientation of the page to be printed; the default is Portrait mode]]></description>
            </parameter>
            <parameter name="units" optional="true">
              <description><![CDATA[the specified units for the width and height of the page to be printed; the default is pixels]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setPreferredPrinter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the preferred printer name to use when printing.]]></description>
          <summary><![CDATA[Set the preferred printer name to use when printing.]]></summary>
          <sample><![CDATA[%%prefix%%controller.setPreferredPrinter('HP Laser 2200');]]></sample>
          <parameters>
            <parameter name="printerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The name of the printer to be used when printing.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setSelectedIndex">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the current record index of the current foundset.]]></description>
          <summary><![CDATA[Sets the current record index of the current foundset.]]></summary>
          <sample><![CDATA[//gets the current record index in the current foundset
var current = %%prefix%%controller.getSelectedIndex();
//sets the next record in the foundset, will be reflected in UI
%%prefix%%controller.setSelectedIndex(current+1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index to select]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTabSequence">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set the tab order sequence programatically, by passing the elements references in a javascript array.]]></description>
          <summary><![CDATA[Set the tab order sequence programatically, by passing the elements references in a javascript array.]]></summary>
          <sample><![CDATA[%%prefix%%controller.setTabSequence([%%prefix%%elements.fld_order_id, %%prefix%%elements.fld_order_amount]);]]></sample>
          <parameters>
            <parameter name="arrayOfElements" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array containing the element references]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="show">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Shows the form (makes the form visible), optionally showing it in the specified JSWindow.
This function does not affect the form foundset in any way.]]></description>
          <summary><![CDATA[Shows the form (makes the form visible), optionally showing it in the specified JSWindow.]]></summary>
          <sample><![CDATA[// show the form in the current window/dialog
%%prefix%%controller.show();
// show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.show(w);
// show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.show(w);
//show the form in the main window
//%%prefix%%controller.show(null);]]></sample>
          <parameters>
            <parameter name="window" optional="true">
              <description><![CDATA[the window in which this form should be shown. If it is unspecified the current window will be used.]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="createWindow"/>
            <see object="com.servoy.j2db.scripting.JSApplication" member="getWindow"/>
          </sees>
        </function>
        <function name="showAllRecords" deprecated="true">
          <argumentsTypes/>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show all records in database.]]></description>
          <summary><![CDATA[Show all records in database.]]></summary>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="loadAllRecords"/>
          </sees>
        </function>
        <function name="showOmittedRecords" deprecated="true">
          <argumentsTypes/>
          <return typecode="boolean" type="com.servoy.j2db.documentation.scripting.docs.Boolean"/>
          <description><![CDATA[]]></description>
          <sample><![CDATA[]]></sample>
          <sees>
            <see object="com.servoy.j2db.dataprocessing.FoundSet" member="loadOmittedRecords"/>
          </sees>
        </function>
        <function name="showPrintPreview">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show this form in print preview.]]></description>
          <summary><![CDATA[Show this form in print preview.]]></summary>
          <sample><![CDATA[//shows this form (with foundset records) in print preview
%%prefix%%controller.showPrintPreview();
//to print preview current record only
//%%prefix%%controller.showPrintPreview(true);
//to print preview current record only with 125% zoom factor; 
//%%prefix%%controller.showPrintPreview(true, null, 125);]]></sample>
          <parameters>
            <parameter name="printCurrentRecordOnly" optional="true">
              <description><![CDATA[to print the current record only]]></description>
            </parameter>
            <parameter name="printerJob" optional="true">
              <description><![CDATA[print to plugin printer job, see pdf printer plugin for example (incase print is used from printpreview)]]></description>
            </parameter>
            <parameter name="zoomFactor" optional="true">
              <description><![CDATA[a specified number value from 10-400]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showRecords">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></description>
          <summary><![CDATA[Load data into the form and shows the form, is a shortcut for the functions 'loadRecords' and 'show'.]]></summary>
          <sample><![CDATA[%%prefix%%controller.showRecords(foundset);
// load foundset & show the form in newly created named modal dialog
var w = application.createWindow("mydialog", JSWindow.MODAL_DIALOG);
%%prefix%%controller.showRecords(foundset, w);
// load foundset & show the form in an existing window/dialog
var w = application.getWindow("mydialog"); // use null name for main app. window
%%prefix%%controller.showRecords(foundset, w);]]></sample>
          <parameters>
            <parameter name="data">
              <description><![CDATA[the foundset/pkdataset/singleNumber_pk/UUIDpk to load before showing the form.]]></description>
            </parameter>
            <parameter name="window" optional="true">
              <description><![CDATA[the window in which this form should be shown.]]></description>
            </parameter>
          </parameters>
          <sees>
            <see object="com.servoy.j2db.scripting.JSApplication" member="createWindow"/>
            <see object="com.servoy.j2db.scripting.JSApplication" member="getWindow"/>
            <see object="com.servoy.j2db.FormController$JSForm" member="loadRecords"/>
            <see object="com.servoy.j2db.FormController$JSForm" member="show"/>
          </sees>
        </function>
        <function name="showRelatedRecords" deprecated="true" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <parameters>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="sort">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sorts the form foundset based on the given sort string. 
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          <summary><![CDATA[Sorts the form foundset based on the given sort string.]]></summary>
          <sample><![CDATA[%%prefix%%controller.sort('columnA desc,columnB asc');]]></sample>
          <parameters>
            <parameter name="sortString">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
            <parameter name="defer" optional="true">
              <description><![CDATA[the "sortString" will be just stored, without performing a query on the database (the actual sorting will be deferred until the next data loading action).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sortDialog">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Show the sort dialog to the user a preselection sortString can be passed, to sort the form foundset.
TIP: You can use the Copy button in the developer Select Sorting Fields dialog to get the needed syntax string for the desired sort fields/order.]]></description>
          <summary><![CDATA[Show the sort dialog to the user a preselection sortString can be passed, to sort the form foundset.]]></summary>
          <sample><![CDATA[%%prefix%%controller.sortDialog('columnA desc,columnB asc');]]></sample>
          <parameters>
            <parameter name="sortString" optional="true">
              <description><![CDATA[the specified columns (and sort order)]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="elements" scriptingName="elements" qualifiedName="com.servoy.j2db.documentation.scripting.docs.FormElements">
      <properties>
        <property name="['name']">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <description><![CDATA[Get an element of the form by its name.]]></description>
          <summary><![CDATA[Get an element of the form by its name.]]></summary>
          <sample><![CDATA[for (var i=0; i<%%prefix%%elements.allnames.length; i++)
{
	var name = %%prefix%%elements.allnames[i];
	var elem = %%prefix%%elements[name];
	application.output(name + ": " + elem.getDataProviderID());	
}]]></sample>
        </property>
        <property name="[index]">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Number" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get an element of the form by its index.]]></description>
          <summary><![CDATA[Get an element of the form by its index.]]></summary>
          <sample><![CDATA[for (var i=0; i<%%prefix%%elements.length; i++)
{
	var elem = %%prefix%%elements[i];
	application.output(elem.getName() + ": " + elem.getDataProviderID());
}]]></sample>
        </property>
        <property name="allnames" special="true">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Array" type="com.servoy.j2db.documentation.scripting.docs.Array"/>
          <description><![CDATA[Get the names of all elements of the form, as an array.]]></description>
          <summary><![CDATA[Get the names of all elements of the form, as an array.]]></summary>
          <sample><![CDATA[for (var i=0; i<%%prefix%%elements.allnames.length; i++)
{
	var name = %%prefix%%elements.allnames[i];
	var elem = %%prefix%%elements[name];
	application.output(name + ": " + elem.getDataProviderID());	
}]]></sample>
        </property>
        <property name="length">
          <return typecode="com.servoy.j2db.documentation.scripting.docs.Number" type="com.servoy.j2db.documentation.scripting.docs.Number"/>
          <description><![CDATA[Get the number of elements of the form.]]></description>
          <summary><![CDATA[Get the number of elements of the form.]]></summary>
          <sample><![CDATA[for (var i=0; i<%%prefix%%elements.length; i++)
{
	var elem = %%prefix%%elements[i];
	application.output(elem.getName() + ": " + elem.getDataProviderID());
}]]></sample>
        </property>
      </properties>
    </object>
    <object publicName="i18n" scriptingName="i18n" qualifiedName="com.servoy.j2db.scripting.JSI18N">
      <functions>
        <function name="getCurrentCountry">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the current country.]]></return>
          <description><![CDATA[Gets the current country; based on the current locale settings in the Servoy Client Locale preferences. 

NOTE: For more information on i18n, see the chapter on Internationalization (i18n) in the Servoy Developer User's Guide, beginning with the Introduction to i18n]]></description>
          <summary><![CDATA[Gets the current country; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          <sample><![CDATA[var currCountry = i18n.getCurrentCountry();]]></sample>
        </function>
        <function name="getCurrentLanguage">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the current language.]]></return>
          <description><![CDATA[Gets the current language; based on the current locale settings in the Servoy Client Locale preferences. 

NOTE: For more information on i18n, see the chapter on Internationalization (i18n) in the Servoy Developer User's Guide, beginning with the Introduction to i18n]]></description>
          <summary><![CDATA[Gets the current language; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          <sample><![CDATA[var currLang = i18n.getCurrentLanguage();]]></sample>
        </function>
        <function name="getCurrentTimeZone">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the current time zone.]]></return>
          <description><![CDATA[Gets the current time zone of the client; based on the current locale settings in the Servoy Client Locale preferences. For Servoy Web Clients the time zone is given by the browser (if it is possible to obtain it).]]></description>
          <summary><![CDATA[Gets the current time zone of the client; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          <sample><![CDATA[var currTimeZone = i18n.getCurrentTimeZone();]]></sample>
        </function>
        <function name="getDefaultDateFormat">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the default date format.]]></return>
          <description><![CDATA[Gets the current default date format; based on the current locale settings in the Servoy Client Locale preferences.]]></description>
          <summary><![CDATA[Gets the current default date format; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          <sample><![CDATA[var defaultDateFormat = i18n.getDefaultDateFormat();]]></sample>
        </function>
        <function name="getDefaultNumberFormat">
          <argumentsTypes/>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String representing the default number format.]]></return>
          <description><![CDATA[Gets the current default number format; based on the current locale settings in the Servoy Client Locale preferences.]]></description>
          <summary><![CDATA[Gets the current default number format; based on the current locale settings in the Servoy Client Locale preferences.]]></summary>
          <sample><![CDATA[var defaultNumberFormat = i18n.getDefaultNumberFormat();]]></sample>
        </function>
        <function name="getI18NMessage" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"/>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getI18NMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="java.lang.String" type="com.servoy.j2db.documentation.scripting.docs.String"><![CDATA[a String that is the message for the message key.]]></return>
          <description><![CDATA[Gets the real message (for the clients locale) for a specified message key. 
You can use parameter substitution by using {n}, where n is a index number of the value thats in the arguments array.]]></description>
          <summary><![CDATA[Gets the real message (for the clients locale) for a specified message key.]]></summary>
          <sample><![CDATA[// returns 'Welcome my_name in my solution'
// if the key 'mykey.username.text' is 'Welcome {0} in my solution'
i18n.getI18NMessage('mykey.username.text',new Array('my_name'))]]></sample>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message key]]></description>
            </parameter>
            <parameter name="dynamicValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;" optional="true">
              <description><![CDATA[Arguments array when using parameter substitution.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getLanguages">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[a JSDataSet with all the languages.]]></return>
          <description><![CDATA[Returns a dataset with rows that contains a language key (en) and the displayname (English) column.

See http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt for a list that could be returned.]]></description>
          <summary><![CDATA[Returns a dataset with rows that contains a language key (en) and the displayname (English) column.]]></summary>
          <sample><![CDATA[var set = i18n.getLanguages();
for(var i=1;i<=set.getMaxRowIndex();i++)
{
	application.output(set.getValue(i, 1) + " " + set.getValue(i, 2));
}]]></sample>
          <links>
            <link>
              <url>http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt</url>
            </link>
          </links>
        </function>
        <function name="getSystemMessages">
          <argumentsTypes/>
          <return typecode="com.servoy.j2db.dataprocessing.JSDataSet" type="com.servoy.j2db.dataprocessing.JSDataSet"><![CDATA[a JSDataSet with all the system messages.]]></return>
          <description><![CDATA[Returns a dataset with rows that contains 3 columns: 'key' (i18n key), 'reference' (reference text for that key) and 'locale ([CURRENT_LOCALE])' (where [CURRENT_LOCALE] is the current language) - with the system messages of servoy. 
This means all servoy messages, with all available translations.]]></description>
          <summary><![CDATA[Returns a dataset with rows that contains 3 columns: 'key' (i18n key), 'reference' (reference text for that key) and 'locale ([CURRENT_LOCALE])' (where [CURRENT_LOCALE] is the current language) - with the system messages of servoy.]]></summary>
          <sample><![CDATA[var set = i18n.getSystemMessages();
for(var i=1;i<=set.getMaxRowIndex();i++)
{
	application.output(set.getValue(i, 1) + " " + set.getValue(i, 2)+ " " + set.getValue(i, 3));
}]]></sample>
        </function>
        <function name="getTimeZoneOffset">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return typecode="int" type="com.servoy.j2db.documentation.scripting.docs.Number"><![CDATA[an int representing the time zone's offset from UTC.]]></return>
          <description><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></description>
          <summary><![CDATA[Returns the offset (in milliseconds) of this time zone from UTC for the current date or at the specified date.]]></summary>
          <sample><![CDATA[var timeZoneOffset = i18n.getTimeZoneOffset('America/Los_Angeles');]]></sample>
          <parameters>
            <parameter name="timezone">
              <description><![CDATA[The time zone to get the offset for.]]></description>
            </parameter>
            <parameter name="date" optional="true">
              <description><![CDATA[The date in the time zone (default current date). Needed in case daylight saving time/GMT offset changes are used in the time zone.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTimeZones">
          <argumentsTypes/>
          <return typecode="[Ljava.lang.String;" type="com.servoy.j2db.documentation.scripting.docs.String[]"><![CDATA[an Array with all the timezones.]]></return>
          <description><![CDATA[Returns an array of known timezones.]]></description>
          <summary><![CDATA[Returns an array of known timezones.]]></summary>
          <sample><![CDATA[var timeZones = i18n.getTimeZones();]]></sample>
        </function>
        <function name="setI18NMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Sets the value of i18n key for client scope,if value null the setting is removed. 
All forms not yet loaded will change (execute this in solution startup or first form)]]></description>
          <summary><![CDATA[Sets the value of i18n key for client scope,if value null the setting is removed.]]></summary>
          <sample><![CDATA[//sets the value of i18n key for client scope; if value null the setting is removed
//Warning: already created form elements with i18n text lookup will not change,
//so call this method in the solution startup method or in methods from first form

i18n.setI18NMessage('mykey.username.text','my_name')]]></sample>
          <parameters>
            <parameter name="i18nKey" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message key]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[They value for the message key.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setI18NMessagesFilter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.
So that you can have multiple default values and multiple values per locale for one key.]]></description>
          <summary><![CDATA[Call this if you want to add a filter for a column (created by you) in the i18n table.]]></summary>
          <sample><![CDATA[// Puts i18n in filter mode - this allows you to have multiple default/per locale
// values for one key and to use one of them based on the filter parameters.
// Let's say you added a new column "message_variant" to your i18n table.
// Now you can have keys that will translate to a language differently depending on the used variant
// For example you have 2 rows in you table for key X, language EN, different values and different "message_variant" (let's say 1 and 2)
// If you want the solution to use the first variant, you will have to call:
i18n.setI18NMessagesFilter('message_variant', '1')

// ATTENTION: if you use setI18NMessagesFilter(...) it is not recommended to use the i18n Dialog (especially before the filter is applied through JS).]]></sample>
          <parameters>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The column name that is the filter column in the i18n table.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The filter value.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLocale">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return typecode="void" type="void"/>
          <description><![CDATA[Set/Overwrite the locale for this client.
All forms not yet loaded will change (execute this in solution startup or first form).

The language must be a lowercase 2 letter code defined by ISO-649.
see http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt
The country must be an upper case 2 letter code defined by IS-3166
see http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html 

NOTE: For more information on i18n, see the chapter on Internationalization (i18n) in the Servoy Developer User's Guide, beginning with the Introduction to i18n]]></description>
          <summary><![CDATA[Set/Overwrite the locale for this client.]]></summary>
          <sample><![CDATA[//Warning: already created form elements with i18n text lookup will not change,
//so call this method in the solution startup method or in methods from first form

i18n.setLocale('en','US');]]></sample>
          <parameters>
            <parameter name="language" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The lowercase 2 letter code]]></description>
            </parameter>
            <parameter name="country" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The upper case 2 letter code.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
  </runtime>
</servoydoc>
