<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoydoc>
  <beans>
    <object publicName="Binding" qualifiedName="com.servoy.extensions.beans.dbtreeview.Binding">
      <functions>
        <function name="setCallBackInfo">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set callback method for node selection and double click]]></description>
          <summary><![CDATA[Set callback method for node selection and double click]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setCallBackInfo(globals.node_selected, 'node_id');]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="returnDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setCheckBoxValueDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set checkbox value dataprovider. Dataprovider returns INTEGER (0 or 1) or STRING (false or true)]]></description>
          <summary><![CDATA[Set checkbox value dataprovider.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setCheckBoxValueDataprovider('comment_text');]]></sample>
          <parameters>
            <parameter name="checkBoxValueDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setChildSortDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the dataprovider name to retrieve column name and sort order for the child nodes.\nThe provided data must be a string of form : column_name_used_for_sort sort_order(asc or desc)]]></description>
          <summary><![CDATA[Set the dataprovider name to retrieve column name and sort order for the child nodes.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'customers');
binding.setChildSortDataprovider('company_sort');]]></sample>
          <parameters>
            <parameter name="childSortDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setConfigurationDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set configuration dataprovider. Dataprovider must be MEDIA type and returns a configuration object]]></description>
          <summary><![CDATA[Set configuration dataprovider.]]></summary>
          <sample><![CDATA[var config = new Object();
config.text = 'my_text';
config.nRelation = 'my_n_relation';
config.mRelation = 'my_m_relation';
config.childSort = 'my_sort_field';
config.fontType = 'my_font';
config.toolTipText = 'my_tooltip';
config.hasCheckBox = 'true';
config.checkBoxValue = 'true';]]></sample>
          <parameters>
            <parameter name="configurationDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setFontTypeDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the dataprovider name to retrieve the node font from]]></description>
          <summary><![CDATA[Set the dataprovider name to retrieve the node font from]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setFontTypeDataprovider('bean_font');]]></sample>
          <parameters>
            <parameter name="fontTypeDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setHasCheckBoxDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set has checkbox flag dataprovider. Dataprovider returns INTEGER (0 / 1 / 2) or STRING (false / true / disabled) for (does not have / have / have but disabled)]]></description>
          <summary><![CDATA[Set has checkbox flag dataprovider.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setHasCheckBoxDataprovider('hasCheckBox');]]></sample>
          <parameters>
            <parameter name="hasCheckBoxDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setImageMediaDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the dataprovider name to retrieve the node image from (blob column)]]></description>
          <summary><![CDATA[Set the dataprovider name to retrieve the node image from (blob column)]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'customers');
binding.setImageMediaDataprovider('company_icon');]]></sample>
          <parameters>
            <parameter name="imageMediaDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setImageURLDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the dataprovider name to retrieve the node image from (via url)]]></description>
          <summary><![CDATA[Set the dataprovider name to retrieve the node image from (via url)]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setImageURLDataprovider('order_icon');]]></sample>
          <parameters>
            <parameter name="imageURLDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMRelationDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set m-relation dataprovider. Dataprovider returns the name of the m-relation]]></description>
          <summary><![CDATA[Set m-relation dataprovider.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setMRelationDataprovider('m_relation');]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set m-relation name]]></description>
          <summary><![CDATA[Set m-relation name]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setMRelationName('m_relation_name');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMethodToCallOnCheckBoxChange">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to call on check box status change]]></description>
          <summary><![CDATA[Set method to call on check box status change]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setMethodToCallOnCheckBoxChange(onCheckBoxChangeMethod,'orderdate');]]></sample>
          <parameters>
            <parameter name="methodToCallOnCheckBoxChange" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="returnDataproviderOnCheckBoxChange" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMethodToCallOnClick">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to call on click.\nThe callback will be called with the following arguments : returnDataprovider, tableName, mouseX, mouseY]]></description>
          <summary><![CDATA[Set method to call on click.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setMethodToCallOnClick(onClickMethod,'orderid');]]></sample>
          <parameters>
            <parameter name="methodToCallOnClick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="returnDataproviderOnClick" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMethodToCallOnDoubleClick">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to call on double click.\nThe callback will be called with the following arguments : returnDataprovider, tableName, mouseX, mouseY]]></description>
          <summary><![CDATA[Set method to call on double click.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setMethodToCallOnDoubleClick(doubleClickMethod,'orderid');]]></sample>
          <parameters>
            <parameter name="methodToCallOnDoubleClick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="returnDataproviderOnDoubleClick" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMethodToCallOnRightClick">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to call on right click.\nThe callback will be called with the following arguments : returnDataprovider, tableName, mouseX, mouseY]]></description>
          <summary><![CDATA[Set method to call on right click.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setMethodToCallOnRightClick(rightClickMethod,'orderid');]]></sample>
          <parameters>
            <parameter name="methodToCallOnRightClick" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="returnDataproviderOnRightClick" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setNRelationDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set n-relation dataprovider. Dataprovider returns the name of the n-relation]]></description>
          <summary><![CDATA[Set n-relation dataprovider.]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setNRelationDataprovider('n_relation');]]></sample>
          <parameters>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setNRelationInfos">
          <argumentsTypes>
            <argumentType typecode="[Lcom.servoy.extensions.beans.dbtreeview.RelationInfo;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set n-relation infos (array of RelationInfo objects created using tree.createRelationInfo() for having multiple child relations for one node)]]></description>
          <summary><![CDATA[Set n-relation infos (array of RelationInfo objects created using tree.]]></summary>
          <sample><![CDATA[var company_relations = new Array();
company_relations[0] = tree.createRelationInfo();
company_relations[0].setLabel('Employees');
company_relations[0].setNRelationName('companies_to_employees');
company_relations[1] = tree.createRelationInfo();
company_relations[1].setLabel('Customers');
company_relations[1].setNRelationName('companies_to_customers');
binding.setNRelationInfos(company_relations);]]></sample>
          <parameters>
            <parameter name="relationInfos" type="com.servoy.extensions.beans.dbtreeview.RelationInfo[]" typecode="[Lcom.servoy.extensions.beans.dbtreeview.RelationInfo;"/>
          </parameters>
        </function>
        <function name="setNRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set n-relation name]]></description>
          <summary><![CDATA[Set n-relation name]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), controller.getTableName());
binding.setNRelationName('n_relation_name');]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setTextDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set text dataprovider]]></description>
          <summary><![CDATA[Set text dataprovider]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'orders');
binding.setTextDataprovider('orderid');]]></sample>
          <parameters>
            <parameter name="textDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setToolTipTextDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the dataprovider name to retrieve the node tooltiptext from]]></description>
          <summary><![CDATA[Set the dataprovider name to retrieve the node tooltiptext from]]></summary>
          <sample><![CDATA[var binding = elements.dbtreeview.createBinding(controller.getServerName(), 'customers');
binding.setToolTipTextDataprovider('companyname');]]></sample>
          <parameters>
            <parameter name="toolTipTextDataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Column" qualifiedName="com.servoy.extensions.beans.dbtreeview.table.Column">
      <functions>
        <function name="setDataprovider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set column dataprovider]]></description>
          <summary><![CDATA[Set column dataprovider]]></summary>
          <sample><![CDATA[column.setDataprovider('fieldName');]]></sample>
          <parameters>
            <parameter name="fieldName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set column header text]]></description>
          <summary><![CDATA[Set column header text]]></summary>
          <sample><![CDATA[column.setHeader('header text');]]></sample>
          <parameters>
            <parameter name="header" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object extendsComponent="com.servoy.extensions.beans.dbtreeview.SwingDBTreeView" publicName="DB Tree Table View" qualifiedName="com.servoy.extensions.beans.dbtreeview.table.SwingDBTreeTableView">
      <properties>
        <property name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the background color]]></return>
          <description><![CDATA[Property for getting/setting the background color of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the background color of the bean.]]></summary>
          <sample><![CDATA[%%elementName%%.bgcolor = "#FFFFFF";
var x = %%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the enabled state of the bean]]></return>
          <description><![CDATA[Property for getting/setting the enabled state of the bean]]></description>
          <summary><![CDATA[Property for getting/setting the enabled state of the bean]]></summary>
          <sample><![CDATA[var b = %%elementName%%.enabled;
if (b) %%elementName%%.enabled = false;]]></sample>
        </property>
        <property name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Property for getting/setting the foreground color of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the foreground color of the bean.]]></summary>
          <sample><![CDATA[%%elementName%%.fgcolor = "#000000";
var y = %%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="selectionPath">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Get/Set the selection (path), array with pk records values (only single pk key supported)]]></description>
          <summary><![CDATA[Get/Set the selection (path), array with pk records values (only single pk key supported)]]></summary>
          <sample><![CDATA[%%elementName%%.selectionPath = new Array(14,24,45,67);
var currentSelectionArray = %%elementName%%.selectionPath;]]></sample>
        </property>
        <property name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the tooltip text of the bean]]></return>
          <description><![CDATA[Property for getting/setting the text of the bean's tooltip]]></description>
          <summary><![CDATA[Property for getting/setting the text of the bean's tooltip]]></summary>
          <sample><![CDATA[%%elementName%%.toolTipText = 'Hello world!';]]></sample>
        </property>
        <property name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the transparent state of the bean]]></return>
          <description><![CDATA[Property for getting/setting the transparent or opaque state of the bean]]></description>
          <summary><![CDATA[Property for getting/setting the transparent or opaque state of the bean]]></summary>
          <sample><![CDATA[var t = %%elementName%%.transparent;
if (!t) %%elementName%%.transparent = true;]]></sample>
        </property>
        <property name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the visibility of the bean]]></return>
          <description><![CDATA[Property for getting/setting the visibility of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the visibility of the bean.]]></summary>
          <sample><![CDATA[var v = %%elementName%%.visible;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addRoots">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The number of added root nodes]]></return>
          <description><![CDATA[Add foundset to the list of foundsets used to create the tree's root nodes.\nNote: the bean will use a clone of the foundset, so any changes on the foundset parameter will be ignored in the tree.]]></description>
          <summary><![CDATA[Add foundset to the list of foundsets used to create the tree's root nodes.]]></summary>
          <sample><![CDATA[var addedRootNodes = %%elementName%%.addRoots(foundset);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="bindNodeChildSortDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[use Binding.setChildSortDataprovider(childSortDataprovider)]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeFontTypeDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setFontTypeDataprovider(fontTypeDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeImageMediaDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setImageMediaDataprovider(imageMediaDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeImageURLDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setImageURLDataprovider(imageURLDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeTooltipTextDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setToolTipTextDataprovider(toolTipTextDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function name="createBinding" varargs="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.beans.dbtreeview.Binding" typecode="com.servoy.extensions.beans.dbtreeview.Binding"><![CDATA[Binding object for a database table]]></return>
          <description><![CDATA[Create and add binding object for a database table used to set data bindings for nodes.]]></description>
          <summary><![CDATA[Create and add binding object for a database table used to set data bindings for nodes.]]></summary>
          <sample><![CDATA[var companies_binding = %%elementName%%.createBinding('example_data', 'companies');
companies_binding.setTextDataprovider('company_name');
companies_binding.setNRelationName('companies_to_companies');
companies_binding.setImageURLDataprovider('type_icon');
companies_binding.setChildSortDataprovider('company_sort');]]></sample>
          <parameters>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function name="createColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.beans.dbtreeview.table.Column" typecode="com.servoy.extensions.beans.dbtreeview.table.Column"><![CDATA[Column object]]></return>
          <description><![CDATA[Create and add new column to the tree table]]></description>
          <summary><![CDATA[Create and add new column to the tree table]]></summary>
          <sample><![CDATA[%%elementName%%.createColumn('servername', 'tablename', 'header text', 'tablefieldname', 150);]]></sample>
          <parameters>
            <parameter name="servername" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tablename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="header" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fieldname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createColumn">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.beans.dbtreeview.table.Column" typecode="com.servoy.extensions.beans.dbtreeview.table.Column"><![CDATA[Column object]]></return>
          <description><![CDATA[Create and add new column to the tree table]]></description>
          <summary><![CDATA[Create and add new column to the tree table]]></summary>
          <sample><![CDATA[%%elementName%%.createColumn('servername', 'tablename', 'header text', 'tablefieldname', 150);]]></sample>
          <parameters>
            <parameter name="servername" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tablename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="header" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fieldname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="preferredWidth" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="createRelationInfo">
          <argumentsTypes/>
          <return type="com.servoy.extensions.beans.dbtreeview.RelationInfo" typecode="com.servoy.extensions.beans.dbtreeview.RelationInfo"><![CDATA[RelationInfo object]]></return>
          <description><![CDATA[Create relation info object used to set multiple child relations for a tree node]]></description>
          <summary><![CDATA[Create relation info object used to set multiple child relations for a tree node]]></summary>
          <sample><![CDATA[var company_relations = new Array();
company_relations[0] = %%elementName%%.createRelationInfo();
company_relations[0].setLabel('Employees');
company_relations[0].setNRelationName('companies_to_employees');
company_relations[1] = %%elementName%%.createRelationInfo();
company_relations[1].setLabel('Customers');
company_relations[1].setNRelationName('companies_to_customers');
companies_binding.setNRelationInfos(company_relations);]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height]]></return>
          <description><![CDATA[Returns the height of the tree.]]></description>
          <summary><![CDATA[Returns the height of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x coordinate]]></return>
          <description><![CDATA[Get the x coordinate of the location of the tree.]]></description>
          <summary><![CDATA[Get the x coordinate of the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y coordinate]]></return>
          <description><![CDATA[Get the y coordinate of the location of the tree.]]></description>
          <summary><![CDATA[Get the y coordinate of the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of the tree.]]></description>
          <summary><![CDATA[Returns the name of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width]]></return>
          <description><![CDATA[Returns the width of the tree.]]></description>
          <summary><![CDATA[Returns the width of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="isNodeExpanded">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if the node is expanded, False otherwise]]></return>
          <description><![CDATA[Check the path (array with pk records values (only single pk key supported)) expanded status]]></description>
          <summary><![CDATA[Check the path (array with pk records values (only single pk key supported)) expanded status]]></summary>
          <sample><![CDATA[var pathArray = new Array(14,24,45,67);
%%elementName%%.isNodeExpanded(pathArray);]]></sample>
          <parameters>
            <parameter name="nodePath" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="refresh">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Refresh the tree display]]></description>
          <summary><![CDATA[Refresh the tree display]]></summary>
          <sample><![CDATA[%%elementName%%.refresh();]]></sample>
        </function>
        <function name="removeAllColumns">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all columns but the tree column from the tree table]]></description>
          <summary><![CDATA[Remove all columns but the tree column from the tree table]]></summary>
          <sample><![CDATA[%%elementName%%.removeAllColumns();]]></sample>
        </function>
        <function name="removeAllRoots">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all root foundsets]]></description>
          <summary><![CDATA[Remove all root foundsets]]></summary>
          <sample><![CDATA[%%elementName%%.removeAllRoots();]]></sample>
        </function>
        <function deprecated="true" name="setCallBackInfo">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setCallBackInfo(f,returnDataprovider)]]></deprecated>
          <sample/>
        </function>
        <function name="setExpandNode">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Expand/collapse the path, array with pk records values (only single pk key supported)]]></description>
          <summary><![CDATA[Expand/collapse the path, array with pk records values (only single pk key supported)]]></summary>
          <sample><![CDATA[var pathArray = new Array(14,24,45,67);
%%elementName%%.setExpandNode(pathArray, true);]]></sample>
          <parameters>
            <parameter name="nodePath" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="expand_collapse" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the specified font as the font of the tree.]]></description>
          <summary><![CDATA[Sets the specified font as the font of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setFont('Times New Roman, 1, 22');]]></sample>
          <parameters>
            <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the location of the tree.]]></description>
          <summary><![CDATA[Sets the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setLocation(120,80);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function deprecated="true" name="setMRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setMRelationName(name) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="setNRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setNRelationName(name) instead]]></deprecated>
          <sample/>
        </function>
        <function name="setNodeLevelVisible">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the level of visible nodes (expand or collapse to certain level)]]></description>
          <summary><![CDATA[Set the level of visible nodes (expand or collapse to certain level)]]></summary>
          <sample><![CDATA[%%elementName%%.setNodeLevelVisible(scopes.globals.g_treeview_level, (scopes.globals.g_treeview_expand == 1 ? true : false));]]></sample>
          <parameters>
            <parameter name="level" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="setOnDrag">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called when a drag is started on the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called when a drag is started on the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDrag(onDrag);]]></sample>
          <parameters>
            <parameter name="fOnDrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDragEnd">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called when a drag of on the tree is ended. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called when a drag of on the tree is ended.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDragEnd(onDragEnd);]]></sample>
          <parameters>
            <parameter name="fOnDragEnd" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDragOver">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called during a drag over the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called during a drag over the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDragOver(onDragOver);]]></sample>
          <parameters>
            <parameter name="fOnDragOver" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDrop">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called on a drop on the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called on a drop on the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDrop(onDrop);]]></sample>
          <parameters>
            <parameter name="fOnDrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function deprecated="true" name="setRoots">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></description>
          <summary><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></summary>
          <deprecated><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></deprecated>
          <sample/>
        </function>
        <function name="setRowHeight">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set row height]]></description>
          <summary><![CDATA[Set row height]]></summary>
          <sample><![CDATA[%%elementName%%.setRowHeight(40);]]></sample>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the size of the tree.]]></description>
          <summary><![CDATA[Sets the size of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setSize(400,300);]]></sample>
          <parameters>
            <parameter name="w" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="h" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setTreeColumnHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the header text for the tree column]]></description>
          <summary><![CDATA[Set the header text for the tree column]]></summary>
          <sample><![CDATA[%%elementName%%.setTreeColumnHeader('Tree Column Header');]]></sample>
          <parameters>
            <parameter name="treeColumnHeader" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setTreeColumnPreferredWidth">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the preferred width in pixels for the tree column]]></description>
          <summary><![CDATA[Set the preferred width in pixels for the tree column]]></summary>
          <sample><![CDATA[%%elementName%%.setTreeColumnPreferredWidth(200);]]></sample>
          <parameters>
            <parameter name="preferredWidth" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="DB Tree View" qualifiedName="com.servoy.extensions.beans.dbtreeview.SwingDBTreeView">
      <properties>
        <property name="bgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the background color]]></return>
          <description><![CDATA[Property for getting/setting the background color of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the background color of the bean.]]></summary>
          <sample><![CDATA[%%elementName%%.bgcolor = "#FFFFFF";
var x = %%elementName%%.bgcolor;]]></sample>
        </property>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the enabled state of the bean]]></return>
          <description><![CDATA[Property for getting/setting the enabled state of the bean]]></description>
          <summary><![CDATA[Property for getting/setting the enabled state of the bean]]></summary>
          <sample><![CDATA[var b = %%elementName%%.enabled;
if (b) %%elementName%%.enabled = false;]]></sample>
        </property>
        <property name="fgcolor">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Property for getting/setting the foreground color of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the foreground color of the bean.]]></summary>
          <sample><![CDATA[%%elementName%%.fgcolor = "#000000";
var y = %%elementName%%.fgcolor;]]></sample>
        </property>
        <property name="selectionPath">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Get/Set the selection (path), array with pk records values (only single pk key supported)]]></description>
          <summary><![CDATA[Get/Set the selection (path), array with pk records values (only single pk key supported)]]></summary>
          <sample><![CDATA[%%elementName%%.selectionPath = new Array(14,24,45,67);
var currentSelectionArray = %%elementName%%.selectionPath;]]></sample>
        </property>
        <property name="toolTipText">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the tooltip text of the bean]]></return>
          <description><![CDATA[Property for getting/setting the text of the bean's tooltip]]></description>
          <summary><![CDATA[Property for getting/setting the text of the bean's tooltip]]></summary>
          <sample><![CDATA[%%elementName%%.toolTipText = 'Hello world!';]]></sample>
        </property>
        <property name="transparent">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the transparent state of the bean]]></return>
          <description><![CDATA[Property for getting/setting the transparent or opaque state of the bean]]></description>
          <summary><![CDATA[Property for getting/setting the transparent or opaque state of the bean]]></summary>
          <sample><![CDATA[var t = %%elementName%%.transparent;
if (!t) %%elementName%%.transparent = true;]]></sample>
        </property>
        <property name="visible">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[the visibility of the bean]]></return>
          <description><![CDATA[Property for getting/setting the visibility of the bean.]]></description>
          <summary><![CDATA[Property for getting/setting the visibility of the bean.]]></summary>
          <sample><![CDATA[var v = %%elementName%%.visible;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addRoots">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The number of added root nodes]]></return>
          <description><![CDATA[Add foundset to the list of foundsets used to create the tree's root nodes.\nNote: the bean will use a clone of the foundset, so any changes on the foundset parameter will be ignored in the tree.]]></description>
          <summary><![CDATA[Add foundset to the list of foundsets used to create the tree's root nodes.]]></summary>
          <sample><![CDATA[var addedRootNodes = %%elementName%%.addRoots(foundset);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="bindNodeChildSortDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[use Binding.setChildSortDataprovider(childSortDataprovider)]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeFontTypeDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setFontTypeDataprovider(fontTypeDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeImageMediaDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setImageMediaDataprovider(imageMediaDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeImageURLDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setImageURLDataprovider(imageURLDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="bindNodeTooltipTextDataProvider">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setToolTipTextDataprovider(toolTipTextDataprovider) instead]]></deprecated>
          <sample/>
        </function>
        <function name="createBinding" varargs="true">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.beans.dbtreeview.Binding" typecode="com.servoy.extensions.beans.dbtreeview.Binding"><![CDATA[Binding object for a database table]]></return>
          <description><![CDATA[Create and add binding object for a database table used to set data bindings for nodes.]]></description>
          <summary><![CDATA[Create and add binding object for a database table used to set data bindings for nodes.]]></summary>
          <sample><![CDATA[var companies_binding = %%elementName%%.createBinding('example_data', 'companies');
companies_binding.setTextDataprovider('company_name');
companies_binding.setNRelationName('companies_to_companies');
companies_binding.setImageURLDataprovider('type_icon');
companies_binding.setChildSortDataprovider('company_sort');]]></sample>
          <parameters>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function name="createRelationInfo">
          <argumentsTypes/>
          <return type="com.servoy.extensions.beans.dbtreeview.RelationInfo" typecode="com.servoy.extensions.beans.dbtreeview.RelationInfo"><![CDATA[RelationInfo object]]></return>
          <description><![CDATA[Create relation info object used to set multiple child relations for a tree node]]></description>
          <summary><![CDATA[Create relation info object used to set multiple child relations for a tree node]]></summary>
          <sample><![CDATA[var company_relations = new Array();
company_relations[0] = %%elementName%%.createRelationInfo();
company_relations[0].setLabel('Employees');
company_relations[0].setNRelationName('companies_to_employees');
company_relations[1] = %%elementName%%.createRelationInfo();
company_relations[1].setLabel('Customers');
company_relations[1].setNRelationName('companies_to_customers');
companies_binding.setNRelationInfos(company_relations);]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The height]]></return>
          <description><![CDATA[Returns the height of the tree.]]></description>
          <summary><![CDATA[Returns the height of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getHeight();]]></sample>
        </function>
        <function name="getLocationX">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The x coordinate]]></return>
          <description><![CDATA[Get the x coordinate of the location of the tree.]]></description>
          <summary><![CDATA[Get the x coordinate of the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getLocationX();]]></sample>
        </function>
        <function name="getLocationY">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The y coordinate]]></return>
          <description><![CDATA[Get the y coordinate of the location of the tree.]]></description>
          <summary><![CDATA[Get the y coordinate of the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getLocationY();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of the tree.]]></description>
          <summary><![CDATA[Returns the name of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getName();]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"><![CDATA[The width]]></return>
          <description><![CDATA[Returns the width of the tree.]]></description>
          <summary><![CDATA[Returns the width of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.getWidth();]]></sample>
        </function>
        <function name="isNodeExpanded">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[True if the node is expanded, False otherwise]]></return>
          <description><![CDATA[Check the path (array with pk records values (only single pk key supported)) expanded status]]></description>
          <summary><![CDATA[Check the path (array with pk records values (only single pk key supported)) expanded status]]></summary>
          <sample><![CDATA[var pathArray = new Array(14,24,45,67);
%%elementName%%.isNodeExpanded(pathArray);]]></sample>
          <parameters>
            <parameter name="nodePath" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="refresh">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Refresh the tree display]]></description>
          <summary><![CDATA[Refresh the tree display]]></summary>
          <sample><![CDATA[%%elementName%%.refresh();]]></sample>
        </function>
        <function name="removeAllRoots">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all root foundsets]]></description>
          <summary><![CDATA[Remove all root foundsets]]></summary>
          <sample><![CDATA[%%elementName%%.removeAllRoots();]]></sample>
        </function>
        <function deprecated="true" name="setCallBackInfo">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setCallBackInfo(f,returnDataprovider)]]></deprecated>
          <sample/>
        </function>
        <function name="setExpandNode">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Expand/collapse the path, array with pk records values (only single pk key supported)]]></description>
          <summary><![CDATA[Expand/collapse the path, array with pk records values (only single pk key supported)]]></summary>
          <sample><![CDATA[var pathArray = new Array(14,24,45,67);
%%elementName%%.setExpandNode(pathArray, true);]]></sample>
          <parameters>
            <parameter name="nodePath" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="expand_collapse" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="setFont">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the specified font as the font of the tree.]]></description>
          <summary><![CDATA[Sets the specified font as the font of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setFont('Times New Roman, 1, 22');]]></sample>
          <parameters>
            <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the location of the tree.]]></description>
          <summary><![CDATA[Sets the location of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setLocation(120,80);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function deprecated="true" name="setMRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setMRelationName(name) instead]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="setNRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, store this in a compatibility Binding instance]]></description>
          <summary><![CDATA[for compatibility, store this in a compatibility Binding instance]]></summary>
          <deprecated><![CDATA[use Binding.setNRelationName(name) instead]]></deprecated>
          <sample/>
        </function>
        <function name="setNodeLevelVisible">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the level of visible nodes (expand or collapse to certain level)]]></description>
          <summary><![CDATA[Set the level of visible nodes (expand or collapse to certain level)]]></summary>
          <sample><![CDATA[%%elementName%%.setNodeLevelVisible(scopes.globals.g_treeview_level, (scopes.globals.g_treeview_expand == 1 ? true : false));]]></sample>
          <parameters>
            <parameter name="level" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="setOnDrag">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called when a drag is started on the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called when a drag is started on the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDrag(onDrag);]]></sample>
          <parameters>
            <parameter name="fOnDrag" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDragEnd">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called when a drag of on the tree is ended. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called when a drag of on the tree is ended.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDragEnd(onDragEnd);]]></sample>
          <parameters>
            <parameter name="fOnDragEnd" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDragOver">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called during a drag over the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called during a drag over the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDragOver(onDragOver);]]></sample>
          <parameters>
            <parameter name="fOnDragOver" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setOnDrop">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set method to be called on a drop on the tree. For more details about the method arguments and return value check the same property of a form]]></description>
          <summary><![CDATA[Set method to be called on a drop on the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setOnDrop(onDrop);]]></sample>
          <parameters>
            <parameter name="fOnDrop" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function deprecated="true" name="setRoots">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></description>
          <summary><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></summary>
          <deprecated><![CDATA[for compatibility, just call addRoots,createBinding (store in compatibility Bindings instance) with passed info]]></deprecated>
          <sample/>
        </function>
        <function name="setRowHeight">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set row height]]></description>
          <summary><![CDATA[Set row height]]></summary>
          <sample><![CDATA[%%elementName%%.setRowHeight(40);]]></sample>
          <parameters>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the size of the tree.]]></description>
          <summary><![CDATA[Sets the size of the tree.]]></summary>
          <sample><![CDATA[%%elementName%%.setSize(400,300);]]></sample>
          <parameters>
            <parameter name="w" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="h" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="RelationInfo" qualifiedName="com.servoy.extensions.beans.dbtreeview.RelationInfo" scriptingName="RelationInfo">
      <functions>
        <function name="setLabel">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the label of a relation info object used to set multiple child relations for a tree node.]]></description>
          <summary><![CDATA[Sets the label of a relation info object used to set multiple child relations for a tree node.]]></summary>
          <sample><![CDATA[var companies_binding = elements.myDbTreeView.createBinding('example_data', 'companies');
var company_relations = new Array();
company_relations[0] = elements.myDbTreeView.createRelationInfo();
company_relations[0].setLabel('Employees');
company_relations[0].setNRelationName('companies_to_employees');
companies_binding.setNRelationInfos(company_relations);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setNRelationName">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the name of a relation info object used to set multiple child relations for a tree node.]]></description>
          <summary><![CDATA[Sets the name of a relation info object used to set multiple child relations for a tree node.]]></summary>
          <sample><![CDATA[var companies_binding = elements.myDbTreeView.createBinding('example_data', 'companies');
var company_relations = new Array();
company_relations[0] = elements.myDbTreeView.createRelationInfo();
company_relations[0].setLabel('Employees');
company_relations[0].setNRelationName('companies_to_employees');
companies_binding.setNRelationInfos(company_relations);]]></sample>
          <parameters>
            <parameter name="relationName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
  </beans>
  <plugins>
    <object publicName="AenovaProvider" qualifiedName="com.servoy.extensions.plugins.aenova.client.AenovaProvider">
      <functions>
        <function name="getEdithandler" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.aenova.EditHandler" typecode="com.servoy.extensions.plugins.aenova.EditHandler"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="AmortizationCalculation" qualifiedName="com.servoy.extensions.plugins.amortization.AmortizationCalculation">
      <constants>
        <constant name="NUMBER_UNLIMITED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify an unlimited number of repeated events.]]></description>
          <summary><![CDATA[The numeric constant used to identify an unlimited number of repeated events.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_ANNUALY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify an annual period.]]></description>
          <summary><![CDATA[The numeric constant used to identify an annual period.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_BI_ANNUALLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a bi-annual period (twice every year).]]></description>
          <summary><![CDATA[The numeric constant used to identify a bi-annual period (twice every year).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_BI_MONTHLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a bi-monthly period (twice every month).
TODO: this period is not supported yet.]]></description>
          <summary><![CDATA[The numeric constant used to identify a bi-monthly period (twice every month).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_DAILY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a daily period.]]></description>
          <summary><![CDATA[The numeric constant used to identify a daily period.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_FOUR_MONTHLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a four-monthly period (once every four months).]]></description>
          <summary><![CDATA[The numeric constant used to identify a four-monthly period (once every four months).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_FOUR_WEEKLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a four-weekly period (once every four weeks).]]></description>
          <summary><![CDATA[The numeric constant used to identify a four-weekly period (once every four weeks).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_MONTHLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a monthly period.]]></description>
          <summary><![CDATA[The numeric constant used to identify a monthly period.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_NONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify that there is no period.]]></description>
          <summary><![CDATA[The numeric constant used to identify that there is no period.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_QUARTERLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a quarterly period (once every three months).]]></description>
          <summary><![CDATA[The numeric constant used to identify a quarterly period (once every three months).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_TWO_MONTHLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a two-monthly period (once every two months).]]></description>
          <summary><![CDATA[The numeric constant used to identify a two-monthly period (once every two months).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_TWO_WEEKLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a two-weekly period (once every two weeks).]]></description>
          <summary><![CDATA[The numeric constant used to identify a two-weekly period (once every two weeks).]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="PERIOD_WEEKLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify a weekly period.]]></description>
          <summary><![CDATA[The numeric constant used to identify a weekly period.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
        <constant name="STARTDAY_NORMAL">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The numeric constant used to identify that the same start day should be used as
the day of the month of the starting date of the event.]]></description>
          <summary><![CDATA[The numeric constant used to identify that the same start day should be used as
the day of the month of the starting date of the event.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
        </constant>
      </constants>
      <functions>
        <function name="addCompoundPeriodChange">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a compound period change.]]></description>
          <summary><![CDATA[Adds a compound period change.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="newPeriod" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addLoan">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a loan.]]></description>
          <summary><![CDATA[Adds a loan.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addLoan">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a loan.]]></description>
          <summary><![CDATA[Adds a loan.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addLoan">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a loan.]]></description>
          <summary><![CDATA[Adds a loan.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addLoan">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a loan.]]></description>
          <summary><![CDATA[Adds a loan.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addPayment">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a payment.]]></description>
          <summary><![CDATA[Adds a payment.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addPayment">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a payment.]]></description>
          <summary><![CDATA[Adds a payment.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addPayment">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a payment.]]></description>
          <summary><![CDATA[Adds a payment.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addPayment">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Adds a payment.]]></description>
          <summary><![CDATA[Adds a payment.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addRateChange">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Sets a new interest rate.]]></description>
          <summary><![CDATA[Sets a new interest rate.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
          <parameters>
            <parameter name="newRate" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="calculateAmortizationSchedule">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Calculates the amortization schedule.]]></description>
          <summary><![CDATA[Calculates the amortization schedule.]]></summary>
          <sample><![CDATA[plugins.amortization.calculateAmortizationSchedule();]]></sample>
        </function>
        <function name="getAmortizationSchedule">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          <description><![CDATA[Gets the amortization schedule as a JSDataSet.]]></description>
          <summary><![CDATA[Gets the amortization schedule as a JSDataSet.]]></summary>
          <sample><![CDATA[plugins.amortization.getAmortizationSchedule();]]></sample>
        </function>
        <function name="getError">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the error that remains when solving for the unknown.
Please note that the error should be less or equal to 1E-8 - otherwise, the solveForUnknown value is incorrect.]]></description>
          <summary><![CDATA[Returns the error that remains when solving for the unknown.]]></summary>
          <sample><![CDATA[var c = plugins.amortization.newCalculation();
// sets the rate to -1 for unknown.
c.addRateChange(-1, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
var lastDate = null;
var period = 12;
var number_count = 5;
var startday = 31;
c.addPayment(500, new Date(2005, 1, 28), lastDate, period,number_count, startday);
// solves for the interest rate.
c.solveForUnknown();
// gets the interest rate and the error in the calculation.
// which should be small (otherwise the calculation did
// not converge for some reason.
var r = c.getUnknown();
var e = c.getError();]]></sample>
        </function>
        <function name="getEvents">
          <argumentsTypes/>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          <description><![CDATA[Returns all the amortization events - such as rate changes, loan events, payment events, compounding period changes.]]></description>
          <summary><![CDATA[Returns all the amortization events - such as rate changes, loan events, payment events, compounding period changes.]]></summary>
          <sample><![CDATA[plugins.amortization.getEvents();]]></sample>
        </function>
        <function name="getRestBalance">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Gets the rest balance after the amortization schedule.]]></description>
          <summary><![CDATA[Gets the rest balance after the amortization schedule.]]></summary>
          <sample><![CDATA[var rb = plugins.amortization.getRestBalance();]]></sample>
        </function>
        <function name="getUnknown">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the solveForUnknown value.]]></description>
          <summary><![CDATA[Returns the solveForUnknown value.]]></summary>
          <sample><![CDATA[plugins.amortization.getUnknown();]]></sample>
        </function>
        <function name="isValidPeriod">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the period is valid, or false if the period is not valid.]]></description>
          <summary><![CDATA[Returns true if the period is valid, or false if the period is not valid.]]></summary>
          <sample><![CDATA[var v_period = plugins.amortization.isValidPeriod(12);]]></sample>
          <parameters>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="roundMoney">
          <argumentsTypes>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Rounds a number up to the nearest cents.]]></description>
          <summary><![CDATA[Rounds a number up to the nearest cents.]]></summary>
          <sample><![CDATA[//rounds the number up to 34.35
var rm = plugins.amortization.roundMoney(34.349384);]]></sample>
          <parameters>
            <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          </parameters>
        </function>
        <function name="solveForUnknown">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if successful or false if the call failed.]]></description>
          <summary><![CDATA[Returns true if successful or false if the call failed.]]></summary>
          <sample><![CDATA[plugins.amortization.solveForUnknown();]]></sample>
        </function>
        <function name="sortEvents">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sorts the amortization events ascending by date.]]></description>
          <summary><![CDATA[Sorts the amortization events ascending by date.]]></summary>
          <sample><![CDATA[plugins.amortization.sortEvents();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Attachment" qualifiedName="com.servoy.extensions.plugins.mail.client.Attachment" scriptingName="Attachment">
      <functions>
        <function name="getData">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Returns a byte array with the content of this attachment.]]></description>
          <summary><![CDATA[Returns a byte array with the content of this attachment.]]></summary>
          <sample><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
        </function>
        <function name="getMimeType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the Mime type of this attachment.]]></description>
          <summary><![CDATA[Returns the Mime type of this attachment.]]></summary>
          <sample><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of this attachment.]]></description>
          <summary><![CDATA[Returns the name of this attachment.]]></summary>
          <sample><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
        </function>
        <function name="isEmbedded">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if this attachment is embedded, false otherwise. Attachments become embedded 
if they are references through tags from the body text of the message.]]></description>
          <summary><![CDATA[Returns true if this attachment is embedded, false otherwise.]]></summary>
          <sample><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="CheckBox" qualifiedName="com.servoy.extensions.plugins.window.menu.CheckBox">
      <properties>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="methodArguments">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Set arguments that are sent to the callback method.]]></description>
          <summary><![CDATA[Set arguments that are sent to the callback method.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
          <summary><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="selected">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
          <summary><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
          <summary><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
      </properties>
      <functions>
        <function name="doClick">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
          <summary><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function) and #setSelected(boolean).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the checkbox]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the checkbox]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the checkbox]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the checkbox]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the checkbox]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[feedback method]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for marking as selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments to the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the checkbox]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if this item is visible, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setAccelerator">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setAlign">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Sets the alignment of the checkbox.]]></description>
          <summary><![CDATA[Sets the alignment of the checkbox.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a checkbox
var entry = menu.addCheckBox("menu entry", feedback);
// alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// enable alignment of the new entry
entry.setAlign(true);]]></sample>
          <parameters>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="setArguments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBackgroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setForegroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setIcon">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="setMnemonic">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Set the item visible.]]></description>
          <summary><![CDATA[Set the item visible.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="ComPortWriterProvider" qualifiedName="com.servoy.extensions.plugins.serialport.ComPortWriterProvider">
      <functions>
        <function name="closePort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Close a port]]></description>
          <summary><![CDATA[Close a port]]></summary>
          <sample><![CDATA[var ok = plugins.serialport.closePort('COM1');]]></sample>
          <parameters>
            <parameter name="portname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="installLibs">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Install req. libs (needed once, servoy restart req!)]]></description>
          <summary><![CDATA[Install req.]]></summary>
          <sample><![CDATA[var ok = plugins.serialport.installLibs('c:/Program Files/Java/jre1.6.0_07');]]></sample>
          <parameters>
            <parameter name="jdk_install_directory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="openPort">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Open a port]]></description>
          <summary><![CDATA[Open a port]]></summary>
          <sample><![CDATA[var ok = plugins.serialport.openPort('COM1',9600);]]></sample>
          <parameters>
            <parameter name="portname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="speed" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="write">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Write data to the com port]]></description>
          <summary><![CDATA[Write data to the com port]]></summary>
          <sample><![CDATA[var ok = plugins.serialport.write('COM1','hello world');]]></sample>
          <parameters>
            <parameter name="portname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="data" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[bytearray/string]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Cookie" qualifiedName="com.servoy.extensions.plugins.http.Cookie">
      <functions>
        <function name="getComment">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the cookie comment.]]></description>
          <summary><![CDATA[Returns the cookie comment.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getComment();]]></sample>
        </function>
        <function name="getDomain">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the cookie domain.]]></description>
          <summary><![CDATA[Returns the cookie domain.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var domain = cookie.getDomain();]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the cookie name.]]></description>
          <summary><![CDATA[Returns the cookie name.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var name = cookie.getName();]]></sample>
        </function>
        <function name="getPath">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the cookie path.]]></description>
          <summary><![CDATA[Returns the cookie path.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getPath();]]></sample>
        </function>
        <function name="getSecure">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns the cookie secure attribute.]]></description>
          <summary><![CDATA[Returns the cookie secure attribute.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getSecure();]]></sample>
        </function>
        <function name="getValue">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the cookie value.]]></description>
          <summary><![CDATA[Returns the cookie value.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('cookieName')
var value = cookie.getValue();]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="DeleteRequest" qualifiedName="com.servoy.extensions.plugins.http.DeleteRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="DialogableProvider" qualifiedName="com.servoy.extensions.plugins.dialogable.DialogableProvider">
      <functions>
        <function name="closeDialog" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <parameters>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="retval" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="showFormInDialog" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <parameters>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="FMP" qualifiedName="com.servoy.extensions.plugins.fmp.FMP">
      <functions>
        <function name="FV">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[FutureValue.
FV(paymentPerPeriod,interestRatePerPeriod,nrOfPeriods]]></description>
          <summary><![CDATA[FutureValue.]]></summary>
          <sample><![CDATA[//Pay 500 a month, 
//interest rate is 9,6 % a year, 
//for a period of 60 months)
var result = plugins.fmp.FV( 500, .096 / 12, 60)]]></sample>
          <parameters>
            <parameter name="payment" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="rate" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="periods" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="PMT">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Payment.
PMT(principalAmount,interestRatePerMonth,nrOfMonths]]></description>
          <summary><![CDATA[Payment.]]></summary>
          <sample><![CDATA[//Principal amount is 10000, 
//interest rate is 5,4 % a year, 
//with 36 payment terms(months))
//result is the payment per month, needed to meet the principal amount. 
var result = plugins.fmp.PMT( 10000, .054/12, 36)]]></sample>
          <parameters>
            <parameter name="loanAmount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="rate" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="periods" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="PV">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[PresentValue.
PV(paymentPerPeriod,interestRatePerPeriod,nrOfPeriods]]></description>
          <summary><![CDATA[PresentValue.]]></summary>
          <sample><![CDATA[//Pay 100 a month, 
//interest rate is 7 % a year, 
//for a period of 1 year)
//result is the Present Value
var result = plugins.fmp.PV( 100, .07/12, 12)]]></sample>
          <parameters>
            <parameter name="payment" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="rate" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="periods" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="date" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <parameters>
            <parameter name="month" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="day" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="year" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="dateToText">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a text type from a date.
EXAMPLE: "Due on: " & dateToText(dateField)
//returns "Due on: 12/17/2001" if dateField = 12/17/2001]]></description>
          <summary><![CDATA[Returns a text type from a date.]]></summary>
          <sample><![CDATA[plugins.fmp.dateToText(12,23,2001); //returns "12/23/2001"]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="day">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number in range from 1 through 31.
EXAMPLE: "day(dateField);]]></description>
          <summary><![CDATA[Returns a number in range from 1 through 31.]]></summary>
          <sample><![CDATA[plugins.fmp.day(DateField); //returns a number in range 1 through 31.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="dayName">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a textString which is the name of a weekday.
EXAMPLE: "dayName(dateField);]]></description>
          <summary><![CDATA[Returns a textString which is the name of a weekday.]]></summary>
          <sample><![CDATA[plugins.fmp.dayName(DateField); //returns a textString representing the name of a weekday.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="dayOfWeek">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number. 1=Sunday, 2=Monday etc..
EXAMPLE: "dayOfWeek(dateField);]]></description>
          <summary><![CDATA[Returns a number.]]></summary>
          <sample><![CDATA[plugins.fmp.dayOfWeek(DateField); //returns a number. 1=Sunday, 2=Monday ect.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="dayOfYear">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number. 1=first day of year, 365=last day of year..
EXAMPLE: "dayOfYear(dateField);]]></description>
          <summary><![CDATA[Returns a number.]]></summary>
          <sample><![CDATA[plugins.fmp.dayOfYear(DateField); //returns a number. 1=first day of year, 365=last day of year.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="exact">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns 1 if String2 equals String1. Else returns 0]]></description>
          <summary><![CDATA[Returns 1 if String2 equals String1.]]></summary>
          <sample><![CDATA[plugins.fmp.exact("testing","test");//returns 0]]></sample>
          <parameters>
            <parameter name="text1" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="text2" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="hour">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number representing the hour of the time.
EXAMPLE: "hour(13:45:23); //returns 13]]></description>
          <summary><![CDATA[Returns a number representing the hour of the time.]]></summary>
          <sample><![CDATA[plugins.fmp.hour(13:45:23); //returns 13.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="integer">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the number without any digits to the right of the decimal point.
EXAMPLE: integer(2.73) //returns "2"]]></description>
          <summary><![CDATA[Returns the number without any digits to the right of the decimal point.]]></summary>
          <sample><![CDATA[plugins.fmp.integer(2.74); //returns "2"]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
          </parameters>
        </function>
        <function name="left">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the number of characters, starting from the left 
EXAMPLE: left("this is a test",6);//returns "this i"]]></description>
          <summary><![CDATA[Returns the number of characters, starting from the left 
EXAMPLE: left("this is a test",6);//returns "this i"]]></summary>
          <sample><![CDATA[plugins.fmp.left("this is a test",6);//returns "this i"]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="leftWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the number of words, starting from the left 
EXAMPLE: leftWords("this is a test",2);//returns "this is"]]></description>
          <summary><![CDATA[Returns the number of words, starting from the left 
EXAMPLE: leftWords("this is a test",2);//returns "this is"]]></summary>
          <sample><![CDATA[plugins.fmp.leftWords("this is a test",3);//returns "this is a".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="length" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="lower">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns all characters in lower case 
EXAMPLE: plugins.fmp.lower("This Is a test",3);
//returns "this is a text".]]></description>
          <summary><![CDATA[Returns all characters in lower case 
EXAMPLE: plugins.]]></summary>
          <sample><![CDATA[plugins.fmp.lower("This Is a test",3);//returns "this is a text".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="middle">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a substring from the original string. 
number1 represents the starting character. 
number2 represents the size. 
EXAMPLE: plugins.fmp.middle("plugins.fmp.middle("this is a test",2,3);//returns "his".]]></description>
          <summary><![CDATA[Returns a substring from the original string.]]></summary>
          <sample><![CDATA[plugins.fmp.middle("this is a test",2,3);//returns "his ".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="i_length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="middleWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a substring from the original string. 
number1 represents the starting word. 
number2 represents the number of words. 
EXAMPLE: plugins.fmp.middleWords("this is a test",2,2);//returns "is a".]]></description>
          <summary><![CDATA[Returns a substring from the original string.]]></summary>
          <sample><![CDATA[plugins.fmp.middleWords("this is a test",2,2);//returns "is a ".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="i_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="minute">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number representing the minutes of the time.
EXAMPLE: "minutes(13:45:23); //returns 45]]></description>
          <summary><![CDATA[Returns a number representing the minutes of the time.]]></summary>
          <sample><![CDATA[plugins.fmp.minute(13:45:23); //returns 45.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="mod">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
            <argumentType typecode="java.lang.Double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the remainder after number is divided by divisor.
EXAMPLE: mod(17,4) //returns 1]]></description>
          <summary><![CDATA[Returns the remainder after number is divided by divisor.]]></summary>
          <sample><![CDATA[plugins.fmp.mod(17,4); //returns "1"]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
            <parameter name="d_divisor" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
          </parameters>
        </function>
        <function name="month">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number in range from 1 through 12.
EXAMPLE: "month(dateField);]]></description>
          <summary><![CDATA[Returns a number in range from 1 through 12.]]></summary>
          <sample><![CDATA[plugins.fmp.month(DateField); //returns a number in range 1 through 12.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="monthName">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a textString which is the name of a month.
EXAMPLE: "monthName(dateField);]]></description>
          <summary><![CDATA[Returns a textString which is the name of a month.]]></summary>
          <sample><![CDATA[plugins.fmp.monthName(DateField); //returns a textString representing the name of a month.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="numToText">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the supplied number as Text.
EXAMPLE: "this is a textstring with nr "+ numToText(5)
// returns: "this is a textstring with nr 5"]]></description>
          <summary><![CDATA[Returns the supplied number as Text.]]></summary>
          <sample><![CDATA[plugins.fmp.numToText(5);  //returns textString "5"]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
          </parameters>
        </function>
        <function name="patternCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the number of times String2 appears in String1. 
EXAMPLE: patternCount("this is a test","is"),returns 2]]></description>
          <summary><![CDATA[Returns the number of times String2 appears in String1.]]></summary>
          <sample><![CDATA[plugins.fmp.patternCount("this is a test","is");//returns 2.]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="search" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="position">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[String1 = original text. 
String2 = search text. 
number1 = starting point. 
number2 = number of occurences. 
EXAMPLE: position("this is a test","is",5,1),returns 6.
6 is the position of "is", after you start looking from position 5.]]></description>
          <summary><![CDATA[String1 = original text.]]></summary>
          <sample><![CDATA[plugins.fmp.position("this is a test","is",5,1);//returns 6.]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="search" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="i_occurence" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="proper">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns all words starting with Capitals 
EXAMPLE: proper("This is A test"),returns "This Is  A Test".]]></description>
          <summary><![CDATA[Returns all words starting with Capitals 
EXAMPLE: proper("This is A test"),returns "This Is  A Test".]]></summary>
          <sample><![CDATA[plugins.fmp.proper("This is A test");//returns "This Is A Test".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="replace">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[String1 = original text. 
number1 = starting point. 
number2 = size of the text to be replaced. 
String1 = replacement text. 
EXAMPLE: replace(plugins.fmp.replace("this is a test",6,2,"was"),returns "this was a test".]]></description>
          <summary><![CDATA[String1 = original text.]]></summary>
          <sample><![CDATA[plugins.fmp.replace("this is a test",6,2,"was");//returns "this was a test".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="i_size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="replace" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="right">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the number of characters, starting from the right]]></description>
          <summary><![CDATA[Returns the number of characters, starting from the right]]></summary>
          <sample><![CDATA[plugins.fmp.right("this is a test",6);//returns "a test".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_pos" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="rightWords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the number of words, starting from the right]]></description>
          <summary><![CDATA[Returns the number of words, starting from the right]]></summary>
          <sample><![CDATA[plugins.fmp.rightWords("this is a test",3);//returns "is a test".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="i_words" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="round">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the number rounded off to the specified number(precision) of decimal places.
A negative precision drops the digits to zero, to the right of the decimal point, .
SAMPLE1: round(27.75) //returns 27.8
SAMPLE2: round(27435.34,-2) //returns 27400]]></description>
          <summary><![CDATA[Returns the number rounded off to the specified number(precision) of decimal places.]]></summary>
          <sample><![CDATA[plugins.fmp.round(27.75,1); //returns 27.8]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
            <parameter name="i_digits" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="seconds">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number representing the seconds of the time.
EXAMPLE: "seconds(13:45:23); //returns 23]]></description>
          <summary><![CDATA[Returns a number representing the seconds of the time.]]></summary>
          <sample><![CDATA[plugins.fmp.seconds(13:45:23); //returns 23.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="sign">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns:
-1 when the number is negative
0 when the number is zero
1 when the number is positive]]></description>
          <summary><![CDATA[Returns:
-1 when the number is negative
0 when the number is zero
1 when the number is positive]]></summary>
          <sample><![CDATA[plugins.fmp.sign(-3); //returns -1]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
          </parameters>
        </function>
        <function name="substitute">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[String1 = original text. 
String2 = search text. 
String3 = replacement text. 
EXAMPLE: substitute("these are test 1 and test 2","test","cow")
returns these are cow 1 and cow 2".]]></description>
          <summary><![CDATA[String1 = original text.]]></summary>
          <sample><![CDATA[plugins.fmp.substitute("these are test 1 and test 2.","test","cow");//returns "these are cow 1 and cow 2.".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="search" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="replace" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="textToDate">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns a Date.
IMPORTANT: text should be entered in format "mm/dd/yyyy!"
EXAMPLE: textToDate("11/24/2002")]]></description>
          <summary><![CDATA[Returns a Date.]]></summary>
          <sample><![CDATA[plugins.fmp.textToDate("11/24/2002");]]></sample>
          <parameters>
            <parameter name="datetime" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="textToNum">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Filters characters from a String.
EXAMPLE: textToNum("fg65gf567") returns "65567".]]></description>
          <summary><![CDATA[Filters characters from a String.]]></summary>
          <sample><![CDATA[plugins.fmp.textToNum("fg65gf567"); //returns "65567".]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="textToTime">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns a (Date)Time.
IMPORTANT: text should be entered in format "hh:mm" !
EXAMPLE: textToDate("11/24/2002")]]></description>
          <summary><![CDATA[Returns a (Date)Time.]]></summary>
          <sample><![CDATA[plugins.fmp.textToTime("15:03");]]></sample>
          <parameters>
            <parameter name="time" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="time">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
            <argumentType typecode="java.lang.Double"/>
            <argumentType typecode="java.lang.Double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns datatype time.
EXAMPLE: "time(23,45,23); //returns 23:45:23number1 = hoursnumber2 = minutesnumber3 = seconds]]></description>
          <summary><![CDATA[Returns datatype time.]]></summary>
          <sample><![CDATA[plugins.fmp.time(23,45,23); //returns 23:45:23]]></sample>
          <parameters>
            <parameter name="h" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
            <parameter name="m" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
          </parameters>
        </function>
        <function name="timeToText">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a textString from data type Time.
EXAMPLE: "time(23:45:23); //returns "23:45:23"(textString)]]></description>
          <summary><![CDATA[Returns a textString from data type Time.]]></summary>
          <sample><![CDATA[Returns a textString from data type Time.
EXAMPLE: "time(23:45:23); //returns "23:45:23"(textString)]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="today">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns the current date.
EXAMPLE: "today();]]></description>
          <summary><![CDATA[Returns the current date.]]></summary>
          <sample><![CDATA[plugins.fmp.today(); //returns current date.]]></sample>
        </function>
        <function name="trim">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the String without leading or trailing spaces]]></description>
          <summary><![CDATA[Returns the String without leading or trailing spaces]]></summary>
          <sample><![CDATA[plugins.fmp.trim("   text   ");//returns "text"]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="truncate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Double"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the number truncated to the specified number(precision) of decimal places
Discarded digits are not evaluated(rounded).
EXAMPLE: truncate(27.757, 2) //returns 27.75
EXAMPLE:2: round(27435.34,-2) //returns 27400]]></description>
          <summary><![CDATA[Returns the number truncated to the specified number(precision) of decimal places
Discarded digits are not evaluated(rounded).]]></summary>
          <sample><![CDATA[plugins.fmp.truncate(16.749, 2); //returns 16.74]]></sample>
          <parameters>
            <parameter name="d_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Double"/>
            <parameter name="i_digits" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="upper">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns all characters in UPPERCASE]]></description>
          <summary><![CDATA[Returns all characters in UPPERCASE]]></summary>
          <sample><![CDATA[plugins.fmp.upper("23we465rgf");//returns "23WE465RGF"]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="weekofYear">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number. 1=first week of year, 52=last day of year..
EXAMPLE: "weekOfYear(dateField);]]></description>
          <summary><![CDATA[Returns a number.]]></summary>
          <sample><![CDATA[?]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="weekofYearFiscal">
          <argumentsTypes>
            <argumentType typecode="java.lang.Integer"/>
            <argumentType typecode="java.lang.Integer"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns week of year, depending on which day(starting day) you choose as start of the first week
starting day: 1=Sunday, 2=Monday etc.
weekOfYearFiscal(Date(1,1,2000),1) returns 52
weekOfYearFiscal(Date(1,1,2001),1) returns 1
weekOfYearFiscal(Date(1,1,2001),5) returns 53]]></description>
          <summary><![CDATA[Returns week of year, depending on which day(starting day) you choose as start of the first week
starting day: 1=Sunday, 2=Monday etc.]]></summary>
          <sample><![CDATA[?]]></sample>
          <parameters>
            <parameter name="i_d" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
            <parameter name="i_start" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Integer"/>
          </parameters>
        </function>
        <function name="wordCount">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the number of words in the String]]></description>
          <summary><![CDATA[Returns the number of words in the String]]></summary>
          <sample><![CDATA[plugins.fmp.wordCount("this is a test");//returns "4"]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="year">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns a number representing the year of the date.
EXAMPLE: "year(dateField);]]></description>
          <summary><![CDATA[Returns a number representing the year of the date.]]></summary>
          <sample><![CDATA[plugins.fmp.year(DateField); //returns a number representing the year of the date.]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="GetRequest" qualifiedName="com.servoy.extensions.plugins.http.GetRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="HTTP_STATUS" qualifiedName="com.servoy.extensions.plugins.http.HTTP_STATUS">
      <constants>
        <constant name="SC_ACCEPTED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>202 Accepted</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>202 Accepted</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_BAD_GATEWAY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>502 Bad Gateway</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>502 Bad Gateway</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_BAD_REQUEST">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>400 Bad Request</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>400 Bad Request</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_CONFLICT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>409 Conflict</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>409 Conflict</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_CONTINUE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>100 Continue</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>100 Continue</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_CREATED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>201 Created</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>201 Created</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_EXPECTATION_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>417 Expectation Failed</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>417 Expectation Failed</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_FAILED_DEPENDENCY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>424 Failed Dependency</tt> (WebDAV - RFC 2518)]]></description>
          <summary><![CDATA[<tt>424 Failed Dependency</tt> (WebDAV - RFC 2518)]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_FORBIDDEN">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>403 Forbidden</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>403 Forbidden</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_GATEWAY_TIMEOUT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>504 Gateway Timeout</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>504 Gateway Timeout</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_GONE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>410 Gone</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>410 Gone</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_HTTP_VERSION_NOT_SUPPORTED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>505 HTTP Version Not Supported</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>505 HTTP Version Not Supported</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_INSUFFICIENT_SPACE_ON_RESOURCE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Static constant for a 419 error.
<tt>419 Insufficient Space on Resource</tt>
(WebDAV - draft-ietf-webdav-protocol-05?)
or <tt>419 Proxy Reauthentication Required</tt>
(HTTP/1.1 drafts?)]]></description>
          <summary><![CDATA[Static constant for a 419 error.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_INSUFFICIENT_STORAGE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>507 Insufficient Storage</tt> (WebDAV - RFC 2518)]]></description>
          <summary><![CDATA[<tt>507 Insufficient Storage</tt> (WebDAV - RFC 2518)]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_INTERNAL_SERVER_ERROR">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>500 Server Error</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>500 Server Error</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_LENGTH_REQUIRED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>411 Length Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>411 Length Required</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_LOCKED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>423 Locked</tt> (WebDAV - RFC 2518)]]></description>
          <summary><![CDATA[<tt>423 Locked</tt> (WebDAV - RFC 2518)]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_METHOD_FAILURE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Static constant for a 420 error.
<tt>420 Method Failure</tt>
(WebDAV - draft-ietf-webdav-protocol-05?)]]></description>
          <summary><![CDATA[Static constant for a 420 error.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_METHOD_NOT_ALLOWED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>405 Method Not Allowed</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>405 Method Not Allowed</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_MOVED_PERMANENTLY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>301 Moved Permanently</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>301 Moved Permanently</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_MOVED_TEMPORARILY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>302 Moved Temporarily</tt> (Sometimes <tt>Found</tt>) (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>302 Moved Temporarily</tt> (Sometimes <tt>Found</tt>) (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_MULTIPLE_CHOICES">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>300 Mutliple Choices</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>300 Mutliple Choices</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_MULTI_STATUS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
OK</tt> (HTTP/1.1 - draft-ietf-http-v11-spec-rev-01?)]]></description>
          <summary><![CDATA[<tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
OK</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NON_AUTHORITATIVE_INFORMATION">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>203 Non Authoritative Information</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>203 Non Authoritative Information</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NOT_ACCEPTABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>406 Not Acceptable</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>406 Not Acceptable</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NOT_FOUND">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>404 Not Found</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>404 Not Found</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NOT_IMPLEMENTED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>501 Not Implemented</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>501 Not Implemented</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NOT_MODIFIED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>304 Not Modified</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>304 Not Modified</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_NO_CONTENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>204 No Content</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>204 No Content</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_OK">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>200 OK</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>200 OK</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_PARTIAL_CONTENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>206 Partial Content</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>206 Partial Content</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_PAYMENT_REQUIRED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>402 Payment Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>402 Payment Required</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_PRECONDITION_FAILED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>412 Precondition Failed</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>412 Precondition Failed</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_PROCESSING">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>102 Processing</tt> (WebDAV - RFC 2518)]]></description>
          <summary><![CDATA[<tt>102 Processing</tt> (WebDAV - RFC 2518)]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_PROXY_AUTHENTICATION_REQUIRED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>407 Proxy Authentication Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>407 Proxy Authentication Required</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_REQUESTED_RANGE_NOT_SATISFIABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>416 Requested Range Not Satisfiable</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>416 Requested Range Not Satisfiable</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_REQUEST_TIMEOUT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>408 Request Timeout</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>408 Request Timeout</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_REQUEST_TOO_LONG">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>413 Request Entity Too Large</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>413 Request Entity Too Large</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_REQUEST_URI_TOO_LONG">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>414 Request-URI Too Long</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>414 Request-URI Too Long</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_RESET_CONTENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>205 Reset Content</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>205 Reset Content</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_SEE_OTHER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>303 See Other</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>303 See Other</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_SERVICE_UNAVAILABLE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>503 Service Unavailable</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>503 Service Unavailable</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_SWITCHING_PROTOCOLS">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>101 Switching Protocols</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>101 Switching Protocols</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_TEMPORARY_REDIRECT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>307 Temporary Redirect</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>307 Temporary Redirect</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_UNAUTHORIZED">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>401 Unauthorized</tt> (HTTP/1.0 - RFC 1945)]]></description>
          <summary><![CDATA[<tt>401 Unauthorized</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_UNPROCESSABLE_ENTITY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>422 Unprocessable Entity</tt> (WebDAV - RFC 2518)]]></description>
          <summary><![CDATA[<tt>422 Unprocessable Entity</tt> (WebDAV - RFC 2518)]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_UNSUPPORTED_MEDIA_TYPE">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>415 Unsupported Media Type</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>415 Unsupported Media Type</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
        <constant name="SC_USE_PROXY">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[<tt>305 Use Proxy</tt> (HTTP/1.1 - RFC 2616)]]></description>
          <summary><![CDATA[<tt>305 Use Proxy</tt> (HTTP/1.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="HeadRequest" qualifiedName="com.servoy.extensions.plugins.http.HeadRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="HttpClient" qualifiedName="com.servoy.extensions.plugins.http.HttpClient">
      <functions>
        <function name="createDeleteRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.DeleteRequest" typecode="com.servoy.extensions.plugins.http.DeleteRequest"/>
          <description><![CDATA[Creates a new delete request (a request to delete a resource on server).]]></description>
          <summary><![CDATA[Creates a new delete request (a request to delete a resource on server).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createDeleteRequest('http://www.servoy.com/delete.me');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createGetRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.GetRequest" typecode="com.servoy.extensions.plugins.http.GetRequest"/>
          <description><![CDATA[Creates a new get request (retrieves whatever information is stored on specified url).
If this url is a https ssl encrypted url which certificates are not in the java certificate store.
(Like a self signed certificate or a none existing root certificate)
Then for a smart client a dialog will be given, to give the user the ability to accept this certificate for the next time.
For a Web or Headless client the system administrator does have to add that certificate (chain) to the java install on the server.
See http://letmehelpyougeeks.blogspot.nl/2009/07/adding-servers-certificate-to-javas.html]]></description>
          <summary><![CDATA[Creates a new get request (retrieves whatever information is stored on specified url).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createHeadRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.HeadRequest" typecode="com.servoy.extensions.plugins.http.HeadRequest"/>
          <description><![CDATA[Creates a new head request (similar to get request, must not contain body content).]]></description>
          <summary><![CDATA[Creates a new head request (similar to get request, must not contain body content).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createHeadRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok
var header = response.getResponseHeaders('last-modified');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createOptionsRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.OptionsRequest" typecode="com.servoy.extensions.plugins.http.OptionsRequest"/>
          <description><![CDATA[Creates a new options request (a request for information about communication options).]]></description>
          <summary><![CDATA[Creates a new options request (a request for information about communication options).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createOptionsRequest('http://www.servoy.com');
var methods = request.getAllowedMethods(request.executeRequest());]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createPostRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.PostRequest" typecode="com.servoy.extensions.plugins.http.PostRequest"/>
          <description><![CDATA[Create a new post request ( Origin server should accept/process the submitted data.)
If this url is a https ssl encrypted url which certificates are not in the java certificate store.
(Like a self signed certificate or a none existing root certificate)
Then for a smart client a dialog will be given, to give the user the ability to accept this certificate for the next time.
For a Web or Headless client the system administrator does have to add that certificate (chain) to the java install on the server.
See http://letmehelpyougeeks.blogspot.nl/2009/07/adding-servers-certificate-to-javas.html]]></description>
          <summary><![CDATA[Create a new post request ( Origin server should accept/process the submitted data.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(globals.twitterUserName, globals.twitterPassword).getStatusCode(); // httpCode 200 is ok]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createPutRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.PutRequest" typecode="com.servoy.extensions.plugins.http.PutRequest"/>
          <description><![CDATA[Creates a new put request (similar to post request, contains information to be submitted).]]></description>
          <summary><![CDATA[Creates a new put request (similar to post request, contains information to be submitted).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createPutRequest('http://jakarta.apache.org');
request.setFile('UploadMe.gif');
var httpCode = putRequest.executeRequest().getStatusCode() // httpCode 200 is ok]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createTraceRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.TraceRequest" typecode="com.servoy.extensions.plugins.http.TraceRequest"/>
          <description><![CDATA[Creates a new trace request (debug request, server will just echo back).]]></description>
          <summary><![CDATA[Creates a new trace request (debug request, server will just echo back).]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Cookie" typecode="com.servoy.extensions.plugins.http.Cookie"/>
          <description><![CDATA[Get a cookie by name.]]></description>
          <summary><![CDATA[Get a cookie by name.]]></summary>
          <sample><![CDATA[var cookie = client.getCookie('JSESSIONID');
if (cookie != null)
{
	// do something
}
else
	client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getCookies">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Cookie[]" typecode="[Lcom.servoy.extensions.plugins.http.Cookie;"/>
          <description><![CDATA[Get all cookies from this client.]]></description>
          <summary><![CDATA[Get all cookies from this client.]]></summary>
          <sample><![CDATA[var cookies = client.getHttpClientCookies()]]></sample>
        </function>
        <function name="setClientProxyCredentials">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set proxy credentials.]]></description>
          <summary><![CDATA[Set proxy credentials.]]></summary>
          <sample><![CDATA[client.setClientProxyCredentials('my_proxy_username','my_proxy_password');]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the this client.]]></description>
          <summary><![CDATA[Add cookie to the this client.]]></summary>
          <sample><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the cookie]]></description>
            </parameter>
            <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the value of the cookie]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the this client.]]></description>
          <summary><![CDATA[Add cookie to the this client.]]></summary>
          <sample><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the cookie]]></description>
            </parameter>
            <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the value of the cookie]]></description>
            </parameter>
            <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the domain]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the this client.]]></description>
          <summary><![CDATA[Add cookie to the this client.]]></summary>
          <sample><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the cookie]]></description>
            </parameter>
            <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the value of the cookie]]></description>
            </parameter>
            <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the domain]]></description>
            </parameter>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the this client.]]></description>
          <summary><![CDATA[Add cookie to the this client.]]></summary>
          <sample><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the cookie]]></description>
            </parameter>
            <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the value of the cookie]]></description>
            </parameter>
            <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the domain]]></description>
            </parameter>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path]]></description>
            </parameter>
            <parameter name="maxAge" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[maximum age of cookie]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the this client.]]></description>
          <summary><![CDATA[Add cookie to the this client.]]></summary>
          <sample><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the cookie]]></description>
            </parameter>
            <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the value of the cookie]]></description>
            </parameter>
            <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the domain]]></description>
            </parameter>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path]]></description>
            </parameter>
            <parameter name="maxAge" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[maximum age of cookie]]></description>
            </parameter>
            <parameter name="secure" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true if it is a secure cookie, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTimeout">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></description>
          <summary><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></summary>
          <sample><![CDATA[client.setTimeout(1000)]]></sample>
          <parameters>
            <parameter name="msTimeout"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSAuthenticateRequest" qualifiedName="com.servoy.extensions.plugins.openid.JSAuthenticateRequest">
      <functions>
        <function name="addAttributeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add attribute request]]></description>
          <summary><![CDATA[Add attribute request]]></summary>
          <sample><![CDATA[authenticateRequest.addAttributeRequest('email','http://axschema.org/contact/email',true);]]></sample>
          <parameters>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="schemaURI" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="required" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="execute">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description/>
          <sample><![CDATA[var authenticateRequest = plugins.openid.createAuthenticateRequest('https://www.google.com/accounts/o8/id',openIDLoginCallback);
authenticateRequest.addAttributeRequest('email','http://axschema.org/contact/email',true);
//see http://www.axschema.org/types/ for more attributes, not all are supported by all providers!
authenticateRequest.execute();

//sample
//function openIDLoginCallback(identifier,authenticateResult)
//{
//	var ok = false;
//	if (identifier)
//	{
//		var id = identifier.substring(identifier.lastIndexOf('=')+1)
//		application.output('id:'+id)
//		var email = authenticateResult.getAttributeValue('email')
//		application.output('email:'+email)
//		ok = security.login(email, id, ['Administrators'])
//	}
//	if (!ok)
//	{
//		application.output('Login failed')
//	}
//}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSAuthenticateResult" qualifiedName="com.servoy.extensions.plugins.openid.JSAuthenticateResult">
      <functions>
        <function name="getAttributeValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get attribute value]]></description>
          <summary><![CDATA[Get attribute value]]></summary>
          <sample><![CDATA[var email = authenticateResult.getAttributeValue('email')]]></sample>
          <parameters>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getAttributeValues">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Get an array of attribute values]]></description>
          <summary><![CDATA[Get an array of attribute values]]></summary>
          <sample><![CDATA[var namesArray = authenticateResult.getAttributeValues('names')
for (var i = 0; i < namesArray.length; i++) { 
	application.output(namesArray[i]); 
}]]></sample>
          <parameters>
            <parameter name="alias" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSClient" qualifiedName="com.servoy.extensions.plugins.headlessclient.JSClient">
      <constants>
        <constant name="CALLBACK_EVENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></description>
          <summary><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
        </constant>
        <constant name="CALLBACK_EXCEPTION_EVENT">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occurred.]]></description>
          <summary><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occurred.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
        </constant>
      </constants>
      <functions>
        <function name="getClientID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Gets the id of the client.

This client id can be used to find the client from the headless client plugin.
Note that this client id is not the same id as the id displayed on the Aplicationb Server admin page.]]></description>
          <summary><![CDATA[Gets the id of the client.]]></summary>
          <sample><![CDATA[var headlessClient = plugins.headlessclient.createClient("someSolution", "user", "pass", null);
var clientID = headlessClient.getClientID()
....
headlessClient = plugins.headlessclient.getClient(clientID);
if (headlessClient != null && headlessClient.isValid()) {
	 headlessClient.queueMethod(null, "someRemoteMethod", null, callback);
}]]></sample>
        </function>
        <function name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value for the data-provider.]]></return>
          <description><![CDATA[Get a data-provider value.]]></description>
          <summary><![CDATA[Get a data-provider value.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
          <parameters>
            <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the data-provider name as seen in Servoy]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value of the data-provider.]]></return>
          <description><![CDATA[Get a data-provider value.]]></description>
          <summary><![CDATA[Get a data-provider value.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
          <parameters>
            <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The context of the given method; null if it is global method or a form name for a form method.]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the data-provider name as seen in Servoy.]]></description>
            </parameter>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[if this is specified, the data-provider's value will only be returned if the specified method is running in this headless client because the currently running client requested it to. Otherwise undefined is returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isValid">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[returns true if this client is still valid/usable.]]></description>
          <summary><![CDATA[returns true if this client is still valid/usable.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
        </function>
        <function name="queueMethod">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Queues a method call on the remote server. The callback method will be called when the method is executed on the server
and the return value is given as the JSEvent.data object with the JSEvent.getType() value of JSClient.CALLBACK_EVENT. 
If an exception is thrown somewhere then the callback method will be called with
the exception as the JSEvent data object with the JSEvent.getType() value of JSClient.CALLBACK_EXCEPTION_EVENT
The second argument that is give back is the JSClient instance that did the call.]]></description>
          <summary><![CDATA[Queues a method call on the remote server.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          <parameters>
            <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method.]]></description>
            </parameter>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The method name.]]></description>
            </parameter>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[The arguments that should be passed to the method.]]></description>
            </parameter>
            <parameter name="notifyCallBackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[The callback method that is called when the execution is finished.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change.]]></return>
          <description><![CDATA[Set a data-provider value.]]></description>
          <summary><![CDATA[Set a data-provider value.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
          <parameters>
            <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method.]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the data-provider name as seen in Servoy.]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setDataProviderValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change]]></return>
          <description><![CDATA[Set a data-provider value.]]></description>
          <summary><![CDATA[Set a data-provider value.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
          <parameters>
            <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
            </parameter>
            <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the data-provider name as seen in Servoy]]></description>
            </parameter>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the value to set]]></description>
            </parameter>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[if this is specified, the data-provider's value will only be set if the specified method is running in this headless client because the currently running client requested it to. Otherwise the value is not set into the data-provider and undefined is returned.]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="shutDown">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #shutdown(boolean)]]></deprecated>
          <sample/>
        </function>
        <function name="shutdown">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[closes the client.]]></description>
          <summary><![CDATA[closes the client.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
        </function>
        <function name="shutdown">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[closes the client.]]></description>
          <summary><![CDATA[closes the client.]]></summary>
          <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          <parameters>
            <parameter name="force" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSClientInformation" qualifiedName="com.servoy.extensions.plugins.maintenance.JSClientInformation">
      <functions>
        <function name="getApplicationType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[The type of the application started by this client.]]></description>
          <summary><![CDATA[The type of the application started by this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getClientID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The ID of this client.]]></description>
          <summary><![CDATA[The ID of this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function deprecated="true" name="getClientId">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[As of release 5.2, replaced by #getClientID().]]></deprecated>
          <sample/>
        </function>
        <function name="getHostAddress">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The host address of this client.]]></description>
          <summary><![CDATA[The host address of this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getHostIdentifier">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The host identifier of this client.]]></description>
          <summary><![CDATA[The host identifier of this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getHostName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The host name of this client.]]></description>
          <summary><![CDATA[The host name of this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getIdleTime">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[The time and date since the user has been idle.]]></description>
          <summary><![CDATA[The time and date since the user has been idle.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getLoginTime">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[The time and date the user logged into the system.]]></description>
          <summary><![CDATA[The time and date the user logged into the system.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getUserName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The name of the user who is logged in at this client.]]></description>
          <summary><![CDATA[The name of the user who is logged in at this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function name="getUserUID">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The ID of the user who is logged in at this client.]]></description>
          <summary><![CDATA[The ID of the user who is logged in at this client.]]></summary>
          <sample><![CDATA[var clients = plugins.maintenance.getConnectedClients();
application.output('There are ' + clients.length + ' connected clients.');
for (var i = 0; i < clients.length; i++)
{
	var client = clients[i];
	application.output('Client details:');
	application.output('	ID: ' + client.getClientID());
	application.output('	Application type: ' + client.getApplicationType());
	application.output('	Host address: ' + client.getHostAddress());
	application.output('	Host identifier: ' + client.getHostIdentifier());
	application.output('	Host name: ' + client.getHostName());
	application.output('	User name: ' + client.getUserName());
	application.output('	Used UID: ' + client.getUserUID());
	application.output('	User login time and date: ' + client.getLoginTime());
	application.output('	User idle since: ' + client.getIdleTime());
}]]></sample>
        </function>
        <function deprecated="true" name="getUserUid">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[As of release 5.2, replaced by #getUserUID().]]></deprecated>
          <sample/>
        </function>
      </functions>
    </object>
    <object publicName="JSFile" qualifiedName="com.servoy.extensions.plugins.file.JSFile" scriptingName="JSFile">
      <functions>
        <function name="canRead">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file exists and is readable (has access to it) - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file exists and is readable (has access to it) - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="canWrite">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file exists and can be modified - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file exists and can be modified - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="createNewFile">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Creates the file on disk if needed. Returns true if the file (name) did not already exists and had to be created - for remote, use the streamFilesToServer to stream a file.]]></description>
          <summary><![CDATA[Creates the file on disk if needed.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
if (!f.exists())
	f.createNewFile();]]></sample>
        </function>
        <function name="deleteFile">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Deletes the file from the disk if possible. Returns true if the file could be deleted. If the file is a directory, then it must be empty in order to be deleted - works on remote files too.]]></description>
          <summary><![CDATA[Deletes the file from the disk if possible.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/story.txt');
if (f && f.exists())
	f.deleteFile();]]></sample>
        </function>
        <function name="exists">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file/directory exists on the filesystem - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file/directory exists on the filesystem - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="getAbsoluteFile">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Returns a JSFile instance that corresponds to the absolute form of this pathname - works on remote files too.]]></description>
          <summary><![CDATA[Returns a JSFile instance that corresponds to the absolute form of this pathname - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
        </function>
        <function name="getAbsolutePath">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String representation of the absolute form of this pathname - works on remote files too.]]></description>
          <summary><![CDATA[Returns a String representation of the absolute form of this pathname - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="getBytes">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Gets the contents (bytes) for the file data.]]></description>
          <summary><![CDATA[Gets the contents (bytes) for the file data.]]></summary>
          <sample><![CDATA[var theFile = plugins.file.showFileOpenDialog();
application.output('The file size in bytes: ' + theFile.getBytes());]]></sample>
        </function>
        <function name="getContentType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the contenttype of this file, like for example 'application/pdf' - works on remote files too.]]></description>
          <summary><![CDATA[Returns the contenttype of this file, like for example 'application/pdf' - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of the file. The name consists in the last part of the file path - works on remote files too.]]></description>
          <summary><![CDATA[Returns the name of the file.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="getParent">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the String representation of the path of the parent of this file - works on remote files too.]]></description>
          <summary><![CDATA[Returns the String representation of the path of the parent of this file - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
        </function>
        <function name="getParentFile">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Returns a JSFile instance that corresponds to the parent of this file - works on remote files too.]]></description>
          <summary><![CDATA[Returns a JSFile instance that corresponds to the parent of this file - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
        </function>
        <function name="getPath">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String holding the path to the file - works on remote files too.]]></description>
          <summary><![CDATA[Returns a String holding the path to the file - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="isAbsolute">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the path is absolute. The path is absolute if it starts with '/' on Unix/Linux/MacOS or has a driver letter on Windows - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the path is absolute.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="isDirectory">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file is a directory - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file is a directory - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="isFile">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file is a file and not a regular file - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file is a file and not a regular file - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="isHidden">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the file is hidden (a file system attribute) - works on remote files too.]]></description>
          <summary><![CDATA[Returns true if the file is hidden (a file system attribute) - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function deprecated="true" name="js_delete">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description/>
          <deprecated><![CDATA[Replaced by #deleteFile().]]></deprecated>
          <sample/>
        </function>
        <function name="lastModified">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns the time/date of the last modification on the file - works on remote files too.]]></description>
          <summary><![CDATA[Returns the time/date of the last modification on the file - works on remote files too.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
        <function name="list">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Returns an array of strings naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></description>
          <summary><![CDATA[Returns an array of strings naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></summary>
          <sample><![CDATA[var d = plugins.file.convertToJSFile('plugins');
// or for a remote file:
// var d = plugins.convertToRemoteJSFile('/plugins');
var names = d.list();
application.output('Names:');
for (var i=0; i<names.length; i++)
	application.output(names[i]);
var files = d.listFiles();
application.output('Absolute paths:');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
        </function>
        <function name="listFiles">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFiles naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></description>
          <summary><![CDATA[Returns an array of JSFiles naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></summary>
          <sample><![CDATA[var d = plugins.file.convertToJSFile('plugins');
// or for a remote file:
// var d = plugins.convertToRemoteJSFile('/plugins');
var names = d.list();
application.output('Names:');
for (var i=0; i<names.length; i++)
	application.output(names[i]);
var files = d.listFiles();
application.output('Absolute paths:');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
        </function>
        <function name="mkdir">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Creates a directory on disk if possible. Returns true if a new directory was created - for remote, use the streamFilesToServer to create the directory instead.]]></description>
          <summary><![CDATA[Creates a directory on disk if possible.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('one/two/three/four');
f.mkdirs(); // Create all four levels of folders in one step.
var g = plugins.file.convertToJSFile('one/two/three/four/five');
g.mkdir(); // This will work because all parent folders are already created.]]></sample>
        </function>
        <function name="mkdirs">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Creates a directory on disk, together with all its parent directories, if possible. Returns true if the hierarchy of directories is created - for remote, use the streamFilesToServer to create the directories instead.]]></description>
          <summary><![CDATA[Creates a directory on disk, together with all its parent directories, if possible.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('one/two/three/four');
f.mkdirs(); // Create all four levels of folders in one step.
var g = plugins.file.convertToJSFile('one/two/three/four/five');
g.mkdir(); // This will work because all parent folders are already created.]]></sample>
        </function>
        <function name="renameTo">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Renames the file to a different name. Returns true if the file could be renamed - works on remote files too.]]></description>
          <summary><![CDATA[Renames the file to a different name.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
f.renameTo('otherstory.txt');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/story.txt');
// f.renameTo('/otherstory.txt');]]></sample>
          <parameters>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="setBytes" since="5.2.5">
          <argumentsTypes>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the operation worked]]></return>
          <description><![CDATA[Set the content of the file (local or remote) to the bytes provided<br/>
Will not create a new file if one doesn't exist]]></description>
          <summary><![CDATA[Set the content of the file (local or remote) to the bytes provided<br/>
Will not create a new file if one doesn't exist]]></summary>
          <sample><![CDATA[var file = plugins.file.convertToJSFile('/pathTo/file.jpg');
// or for a remote file:
// var file = plugins.file.convertToRemoteJSFile('/remotePathTo/file.jpg');
var success = file.setBytes(blobDataProvider, true);]]></sample>
          <parameters>
            <parameter name="bytes" type="byte[]" typecode="[B">
              <description><![CDATA[the data]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBytes" since="5.2.5">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the operation worked]]></return>
          <description><![CDATA[Set the content of the file (local or remote) to the bytes provided]]></description>
          <summary><![CDATA[Set the content of the file (local or remote) to the bytes provided]]></summary>
          <sample><![CDATA[var file = plugins.file.convertToJSFile('/pathTo/file.jpg');
// or for a remote file:
// var file = plugins.file.convertToRemoteJSFile('/remotePathTo/file.jpg');
var success = file.setBytes(blobDataProvider, true);]]></sample>
          <parameters>
            <parameter name="bytes" type="byte[]" typecode="[B">
              <description><![CDATA[the data]]></description>
            </parameter>
            <parameter name="createFile" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true to create a file if it doesn't exist]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setLastModified">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Sets the date/time of the last modification on the file.]]></description>
          <summary><![CDATA[Sets the date/time of the last modification on the file.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
f.createNewFile();
// Make the file look old.
f.setLastModified(new Date(1999, 5, 21));]]></sample>
          <parameters>
            <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="setReadOnly">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Sets the readonly attribute of the file/directory. Returns true on success.]]></description>
          <summary><![CDATA[Sets the readonly attribute of the file/directory.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('invoice.txt');
plugins.file.writeTXTFile(f, 'important data that should not be changed');
f.setReadOnly();]]></sample>
        </function>
        <function name="size">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the size in bytes of the file. Returns 0 if the file does not exist on disk - works on remote files too.]]></description>
          <summary><![CDATA[Returns the size in bytes of the file.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="JSImage" qualifiedName="com.servoy.extensions.plugins.images.JSImage">
      <functions>
        <function name="flip">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Flips the image verticaly (type param=0) or horizontaly (type param=1). A new JSImage is returned.]]></description>
          <summary><![CDATA[Flips the image verticaly (type param=0) or horizontaly (type param=1).]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
image = image.flip(0);//flip vertically
var bytes = image.getData();//gets the image bytes
plugins.file.writeFile('filename',bytes);//saves the image bytes]]></sample>
          <parameters>
            <parameter name="type" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getContentType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Gets the contenttype (image/jpeg) of this image.]]></description>
          <summary><![CDATA[Gets the contenttype (image/jpeg) of this image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file);
var width = image.getWidth();
var height = image.getHeight();
var contentType = image.getContentType();]]></sample>
        </function>
        <function name="getData">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Gets the bytes of this image, so that they can be saved to disk or stored the database.]]></description>
          <summary><![CDATA[Gets the bytes of this image, so that they can be saved to disk or stored the database.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
image = image.resize(200,200);//resizes it to 200,200
var bytes = image.getData();//gets the image bytes
plugins.file.writeFile('filename',bytes);//saves the image bytes]]></sample>
        </function>
        <function name="getHeight">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets the height of this image.]]></description>
          <summary><![CDATA[Gets the height of this image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file);
var width = image.getWidth();
var height = image.getHeight();
var contentType = image.getContentType();]]></sample>
        </function>
        <function name="getMetaDataDescription">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Gets the description of a metadata property from the image. Currently only jpg is supported.]]></description>
          <summary><![CDATA[Gets the description of a metadata property from the image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
// get the available metadata properties from the image, currently only jpg is supported
var propertiesArray = image.getMetaDataProperties();
for(var i=0;i<propertiesArray.length;i++)
{
	var property = propertiesArray[i]
	application.output("property: " + property);
	application.output("description (string): " + image.getMetaDataDescription(property))
	application.output("real object: " + image.getMetaDataObject(property))
}
// Thumbnail data is stored under property 'Exif - Thumbnail Data', extract that and set it in a dataprovider
thumbnail = image.getMetaDataObject("Exif - Thumbnail Data"); // gets thumbnail data from the image]]></sample>
          <parameters>
            <parameter name="property" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getMetaDataObject">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the real object of a metadata property from the image. Currently only jpg is supported.]]></description>
          <summary><![CDATA[Gets the real object of a metadata property from the image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
// get the available metadata properties from the image, currently only jpg is supported
var propertiesArray = image.getMetaDataProperties();
for(var i=0;i<propertiesArray.length;i++)
{
	var property = propertiesArray[i]
	application.output("property: " + property);
	application.output("description (string): " + image.getMetaDataDescription(property))
	application.output("real object: " + image.getMetaDataObject(property))
}
// Thumbnail data is stored under property 'Exif - Thumbnail Data', extract that and set it in a dataprovider
thumbnail = image.getMetaDataObject("Exif - Thumbnail Data"); // gets thumbnail data from the image]]></sample>
          <parameters>
            <parameter name="property" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getMetaDataProperties">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Gets the available metadata properties from the image. Currently only jpg is supported.]]></description>
          <summary><![CDATA[Gets the available metadata properties from the image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
// get the available metadata properties from the image, currently only jpg is supported
var propertiesArray = image.getMetaDataProperties();
for(var i=0;i<propertiesArray.length;i++)
{
	var property = propertiesArray[i]
	application.output("property: " + property);
	application.output("description (string): " + image.getMetaDataDescription(property))
	application.output("real object: " + image.getMetaDataObject(property))
}
// Thumbnail data is stored under property 'Exif - Thumbnail Data', extract that and set it in a dataprovider
thumbnail = image.getMetaDataObject("Exif - Thumbnail Data"); // gets thumbnail data from the image]]></sample>
        </function>
        <function name="getWidth">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets the width of this image.]]></description>
          <summary><![CDATA[Gets the width of this image.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file);
var width = image.getWidth();
var height = image.getHeight();
var contentType = image.getContentType();]]></sample>
        </function>
        <function name="resize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Resizes the image to the width/height given, keeping aspect ratio. A new JSImage is returned.]]></description>
          <summary><![CDATA[Resizes the image to the width/height given, keeping aspect ratio.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
image = image.resize(200,200);//resizes it to 200,200
var bytes = image.getData();//gets the image bytes
plugins.file.writeFile('filename',bytes);//saves the image bytes]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="rotate">
          <argumentsTypes>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Rotates the image the number of degrees that is given. A new JSImage is returned.]]></description>
          <summary><![CDATA[Rotates the image the number of degrees that is given.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray_or_file_or_filename);//loads the image
image = image.rotate(90);//rotate the image 90 degrees
var bytes = image.getData();//gets the image bytes
plugins.file.writeFile('filename',bytes);//saves the image bytes]]></sample>
          <parameters>
            <parameter name="degrees" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSInsetList" qualifiedName="com.servoy.extensions.plugins.mobile.JSInsetList" servoyMobile="true"/>
    <object publicName="JSList" qualifiedName="com.servoy.extensions.plugins.mobile.JSList" servoyMobile="true">
      <functions>
        <function name="getForm" servoyMobile="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.scripting.solutionmodel.JSForm"><![CDATA[the list's form.]]></return>
          <description><![CDATA[Returns the list's form.]]></description>
          <summary><![CDATA[Returns the list's form.]]></summary>
          <sample><![CDATA[newFormList.getForm().dataprovider = formList.getForm().dataprovider;]]></sample>
        </function>
      </functions>
    </object>
    <object deprecated="true" publicName="JSMenuItem" qualifiedName="com.servoy.extensions.plugins.window.menu.JSMenuItem">
      <constants>
        <constant name="ALIGN_CENTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
        <constant name="ALIGN_LEFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
        <constant name="ALIGN_RIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="methodArguments">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Set arguments that are sent to the callback method.]]></description>
          <summary><![CDATA[Set arguments that are sent to the callback method.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
          <summary><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="selected">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
          <summary><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
          <summary><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
      </properties>
      <functions>
        <function name="doClick">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
          <summary><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setAccelerator">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function deprecated="true" name="setArguments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBackgroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setForegroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setIcon">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="setMnemonic">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the item visible.]]></description>
          <summary><![CDATA[Set the item visible.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSPacket" qualifiedName="com.servoy.extensions.plugins.udp.JSPacket" scriptingName="JSPacket">
      <properties>
        <property name="index">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the current position in the byte array of the packet. The next read/write operation will occur at this position.
This is a 0 based index.]]></description>
          <summary><![CDATA[Returns the current position in the byte array of the packet.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </property>
      </properties>
      <functions>
        <function name="getByteArray">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Returns the content of the package into a byte array.]]></description>
          <summary><![CDATA[Returns the content of the package into a byte array.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		var bytes = packet.getByteArray();
		application.output('received a packet of length: ' + bytes.length);
		for (var i=0; i<bytes.length; i++)
			application.output(bytes[i]);
		}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="getHost">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of the host that sent the packet.]]></description>
          <summary><![CDATA[Returns the name of the host that sent the packet.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="getLength">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the length of the packet in bytes.]]></description>
          <summary><![CDATA[Returns the length of the packet in bytes.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="getPort">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the port where the packet originated from.]]></description>
          <summary><![CDATA[Returns the port where the packet originated from.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="readByte">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index. Advances the index with one position.]]></description>
          <summary><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="readInt">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Reads a 32 bits int value from the packet, starting from the current index. Advances the index with 4 positions.]]></description>
          <summary><![CDATA[Reads a 32 bits int value from the packet, starting from the current index.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="readShort">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Reads a 32 bits short value from the packet, starting from the current index. Advances the index with 2 positions.]]></description>
          <summary><![CDATA[Reads a 32 bits short value from the packet, starting from the current index.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="readUTF">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Reads a UTF-8 string from the packet, starting from the current index. If an argument is specified, then it represents the length (in UTF-8 encoded bytes, not characters) of the string to read. If no argument is specified, then first a 32 bits (4 byte) int is read from the packet and that will be the byte length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
          <summary><![CDATA[Reads a UTF-8 string from the packet, starting from the current index.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
        </function>
        <function name="readUTF">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Reads a UTF-8 string from the packet, starting from the current index. If an argument is specified, then it represents the length (in UTF-8 encoded bytes, not characters) of the string to read. If no argument is specified, then first a 32 bits (4 byte) int is read from the packet and that will be the byte length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
          <summary><![CDATA[Reads a UTF-8 string from the packet, starting from the current index.]]></summary>
          <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          <parameters>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="writeByte">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Writes one byte into the packet, at the current index. The index is advanced with one position.]]></description>
          <summary><![CDATA[Writes one byte into the packet, at the current index.]]></summary>
          <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="writeBytes">
          <argumentsTypes>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Writes an array of bytes into the packet, at the current index. The index is advanced with a number of positions equal to the length of the written array.]]></description>
          <summary><![CDATA[Writes an array of bytes into the packet, at the current index.]]></summary>
          <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
          <parameters>
            <parameter name="bytes" type="byte[]" typecode="[B"/>
          </parameters>
        </function>
        <function name="writeInt">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Writes a 32 bits int into the packet, at the current index. The index is advances with 4 positions.]]></description>
          <summary><![CDATA[Writes a 32 bits int into the packet, at the current index.]]></summary>
          <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="writeShort">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Writes a 16 bits short value into the packet, at the current index. The index is advances with 2 positions.]]></description>
          <summary><![CDATA[Writes a 16 bits short value into the packet, at the current index.]]></summary>
          <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
          <parameters>
            <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="writeUTF">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Writes an UTF-8 encoded string into the packet, at the current index. First the length of the string is written on 4 bytes, then the string is written. The index is advanced with a number of positions equal to the length of the string plus 4.]]></description>
          <summary><![CDATA[Writes an UTF-8 encoded string into the packet, at the current index.]]></summary>
          <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
          <parameters>
            <parameter name="string" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="JSProgressMonitor" qualifiedName="com.servoy.extensions.plugins.file.JSProgressMonitor">
      <functions>
        <function name="cancel">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Cancels the transfer process.]]></description>
          <summary><![CDATA[Cancels the transfer process.]]></summary>
          <sample><![CDATA[monitor.cancel();]]></sample>
        </function>
        <function name="getCurrentBytesToTransfer">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the number of bytes to transfer for the current file.]]></description>
          <summary><![CDATA[Returns the number of bytes to transfer for the current file.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getCurrentFileIndex">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the index of the current file being transferred.]]></description>
          <summary><![CDATA[Returns the index of the current file being transferred.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getCurrentTransferredBytes">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the number of bytes already transferred for the current file.]]></description>
          <summary><![CDATA[Returns the number of bytes already transferred for the current file.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getCurrentTransferredFileName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the name of the current file being transferred.]]></description>
          <summary><![CDATA[Returns the name of the current file being transferred.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getTotalBytesToTransfer">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the total bytes to transfer to or from the server (sum of all the files size)]]></description>
          <summary><![CDATA[Returns the total bytes to transfer to or from the server (sum of all the files size)]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getTotalFilesToTransfer">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the total number of files to transfer.]]></description>
          <summary><![CDATA[Returns the total number of files to transfer.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="getTotalTransferredBytes">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the total bytes already transferred (for all files)]]></description>
          <summary><![CDATA[Returns the total bytes already transferred (for all files)]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="isCanceled">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the process was canceled.]]></description>
          <summary><![CDATA[Returns true if the process was canceled.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="isFinished">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the process is finished.]]></description>
          <summary><![CDATA[Returns true if the process is finished.]]></summary>
          <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
        </function>
        <function name="setProgressCallBack">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="float"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[this for chaining]]></return>
          <description><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values. Can use an optional delay (for testing purpose in developer).]]></description>
          <summary><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values.]]></summary>
          <sample><![CDATA[// call the progressCallbackFuntion every 2 and a half seconds (with a delay of 200ms in developer):
monitor.setProgressCallBack(progressCallbackFunction, 2.5, (application.isInDeveloper() ? 200 : 0));]]></sample>
          <parameters>
            <parameter name="function" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the Function to call back at the specified interval]]></description>
            </parameter>
            <parameter name="interval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the interval (in seconds) to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setProgressCallBack">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="float"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[this for chaining]]></return>
          <description><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values. Can use an optional delay (for testing purpose in developer).]]></description>
          <summary><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values.]]></summary>
          <sample><![CDATA[// call the progressCallbackFuntion every 2 and a half seconds (with a delay of 200ms in developer):
monitor.setProgressCallBack(progressCallbackFunction, 2.5, (application.isInDeveloper() ? 200 : 0));]]></sample>
          <parameters>
            <parameter name="function" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the Function to call back at the specified interval]]></description>
            </parameter>
            <parameter name="interval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
              <description><![CDATA[the interval (in seconds) to use]]></description>
            </parameter>
            <parameter name="delay" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[adds a delay for testing purpose in Developer]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="LANGUAGES" qualifiedName="com.servoy.extensions.plugins.spellcheck.LANGUAGES">
      <constants>
        <constant name="DUTCH">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying the Dutch language.]]></description>
          <summary><![CDATA[Constant for specifying the Dutch language.]]></summary>
          <sample><![CDATA[plugins.spellcheck.checkTextComponent('textInDutch', plugins.spellcheck.LANGUAGES.DUTCH);]]></sample>
        </constant>
        <constant name="ENGLISH">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying the English language.]]></description>
          <summary><![CDATA[Constant for specifying the English language.]]></summary>
          <sample><![CDATA[plugins.spellcheck.checkTextComponent('textInEnglish', plugins.spellcheck.LANGUAGES.ENGLISH);]]></sample>
        </constant>
        <constant name="GERMAN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying the German language.]]></description>
          <summary><![CDATA[Constant for specifying the German language.]]></summary>
          <sample><![CDATA[plugins.spellcheck.checkTextComponent('textInGerman', plugins.spellcheck.LANGUAGES.GERMAN);]]></sample>
        </constant>
        <constant name="ITALIAN">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying the Italian language.]]></description>
          <summary><![CDATA[Constant for specifying the Italian language.]]></summary>
          <sample><![CDATA[plugins.spellcheck.checkTextComponent('textInItalian', plugins.spellcheck.LANGUAGES.ITALIAN);]]></sample>
        </constant>
        <constant name="SPANISH">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying the Spanish language.]]></description>
          <summary><![CDATA[Constant for specifying the Spanish language.]]></summary>
          <sample><![CDATA[plugins.spellcheck.checkTextComponent('textInSpanish', plugins.spellcheck.LANGUAGES.SPANISH);]]></sample>
        </constant>
      </constants>
    </object>
    <object publicName="MailMessage" qualifiedName="com.servoy.extensions.plugins.mail.client.MailMessage">
      <functions>
        <function name="getAttachments">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
          <description><![CDATA[Returns an array of Attachment instances corresponding to the attachments of this message.]]></description>
          <summary><![CDATA[Returns an array of Attachment instances corresponding to the attachments of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getCCAddresses">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with all addresses present in the CC field of this message.]]></description>
          <summary><![CDATA[Returns a String with all addresses present in the CC field of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getFromAddresses">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with all addresses present in the From field of this message.]]></description>
          <summary><![CDATA[Returns a String with all addresses present in the From field of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getHeaders">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with all headers of this message.]]></description>
          <summary><![CDATA[Returns a String with all headers of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getHtmlMsg">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with the HTML content of this message.]]></description>
          <summary><![CDATA[Returns a String with the HTML content of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getPlainMsg">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with the plain content of this message.]]></description>
          <summary><![CDATA[Returns a String with the plain content of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function deprecated="true" name="getReceivedDate">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns a Date instace corresponding to the moment when the message was received.]]></description>
          <summary><![CDATA[Returns a Date instace corresponding to the moment when the message was received.]]></summary>
          <deprecated><![CDATA[No longer supported. Try using  #getHeaders() for approximate results.]]></deprecated>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getRecipientAddresses">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with all addresses in the To field of this message.]]></description>
          <summary><![CDATA[Returns a String with all addresses in the To field of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getReplyAddresses">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with all addresses in the Reply-To field of this message.]]></description>
          <summary><![CDATA[Returns a String with all addresses in the Reply-To field of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getSentDate">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns a Date instance corresponding to the moment when this message was sent.]]></description>
          <summary><![CDATA[Returns a Date instance corresponding to the moment when this message was sent.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
        <function name="getSubject">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns a String with the subject of this message.]]></description>
          <summary><![CDATA[Returns a String with the subject of this message.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Menu" qualifiedName="com.servoy.extensions.plugins.window.menu.Menu">
      <properties>
        <property name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Retrieve/set the text.]]></description>
          <summary><![CDATA[Retrieve/set the text.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
        </property>
      </properties>
      <functions>
        <function name="addCheckBox">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox.]]></description>
          <summary><![CDATA[Add a checkbox.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the checkbox]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox with given name.]]></description>
          <summary><![CDATA[Add a checkbox with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the checkbox]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the checkbox]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="addItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenuItem(String,Function,Object,String,Boolean,Integer).]]></deprecated>
          <sample/>
        </function>
        <function name="addMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu at the end.]]></description>
          <summary><![CDATA[Add a submenu at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
        </function>
        <function name="addMenu">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Add a submenu at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the submenu]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenu">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu with given name.]]></description>
          <summary><![CDATA[Add a submenu with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the submenu; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item.]]></description>
          <summary><![CDATA[Add a menu item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the menu item]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item with given name.]]></description>
          <summary><![CDATA[Add a menu item with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the menu item]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the menu item]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radio button.]]></description>
          <summary><![CDATA[Add a radio button.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the radio button]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radio button with given name.]]></description>
          <summary><![CDATA[Add a radio button with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of radio button]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of radio button]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioGroup">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a radiogroup for radiobuttons. A radiogroup groups together all radiobuttons that are added
after the group is added. From all radiobuttons that belong to the same radiogroup only one can be
checked at a time.

If no radiogroup is added, one is created automatically when the first radiobutton is added.]]></description>
          <summary><![CDATA[Add a radiogroup for radiobuttons.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addSeparator">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
          <summary><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
        </function>
        <function name="addSeparator">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
          <summary><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index at which to add the separator]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="addSubMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenu(String).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="addSubMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenu(Number).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index at which to add the submenu]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="doClick">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Script the selection (emulate a mouse click) of the menu.]]></description>
          <summary><![CDATA[Script the selection (emulate a mouse click) of the menu.]]></summary>
          <sample><![CDATA[// retrieve the File menu
var menubar = plugins.window.getMenuBar();
var menu = menubar.getMenu(0);
// simulate a click on the File menu
menu.doClick();]]></sample>
        </function>
        <function name="getCheckBox">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Get the checkbox at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the checkbox at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the element based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getItem">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.AbstractMenuItem"/>
          <description><![CDATA[Get the item at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the item at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getItemCount">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Get the number of items in the menu.]]></description>
          <summary><![CDATA[Get the number of items in the menu.]]></summary>
          <sample><![CDATA[// REMARK: indexes start at 0, disabled items, non visible items and seperators are counted also
// REMARK: this is especially important when getting items by the index
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// remove the last item
menu.removeItem(menu.getItemCount() - 1);]]></sample>
        </function>
        <function name="getItemIndexByText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Retrieve the index of the item by text.]]></description>
          <summary><![CDATA[Retrieve the index of the item by text.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description><![CDATA[Get the submenu at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the submenu at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getRadioButton">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function deprecated="true" name="getSubMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getMenu().]]></deprecated>
          <sample/>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="removeAllItems">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all items from the menu.]]></description>
          <summary><![CDATA[Remove all items from the menu.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
        </function>
        <function name="removeItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove the item(s) at the selected index/indices.]]></description>
          <summary><![CDATA[Remove the item(s) at the selected index/indices.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of one or moe indexes corresponding to items to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean) and #setMnemonic(String).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the text of the menu or a menu object]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String) and #setMnemonic(String).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic for this menu]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean) and #setMnemonic(String).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic for this menu]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setEnabled">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the the selected menu enabled or disabled.]]></description>
          <summary><![CDATA[Set the the selected menu enabled or disabled.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setIcon">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the icon of the menu.]]></description>
          <summary><![CDATA[Set the icon of the menu.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setMnemonic">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the mnemonic of the selected menu.]]></description>
          <summary><![CDATA[Set the mnemonic of the selected menu.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="MenuBar" qualifiedName="com.servoy.extensions.plugins.window.menu.MenuBar">
      <functions>
        <function name="addMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description><![CDATA[Add a menu to the menubar.]]></description>
          <summary><![CDATA[Add a menu to the menubar.]]></summary>
          <sample><![CDATA[// Note: method addMenu only works in the smart client.

// when you don't define an index the menu will be added at the last
// positon of the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the text of the menu
menu.text = "add menu";
// set the mnemonic key
menu.setMnemonic("a");
// add another menu at a specific position in the menubar
var another_menu = menubar.addMenu(2);
another_menu.text = "another menu";
another_menu.setMnemonic("t")
// REMARK: normally you would add menu items, checkboxes etc in the same method
// this example will show no menu items for now!
// IMPORTANT: Working with menu's on developer and client can differ]]></sample>
        </function>
        <function name="addMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description><![CDATA[Add a menu to the menubar.]]></description>
          <summary><![CDATA[Add a menu to the menubar.]]></summary>
          <sample><![CDATA[// Note: method addMenu only works in the smart client.

// when you don't define an index the menu will be added at the last
// positon of the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the text of the menu
menu.text = "add menu";
// set the mnemonic key
menu.setMnemonic("a");
// add another menu at a specific position in the menubar
var another_menu = menubar.addMenu(2);
another_menu.text = "another menu";
another_menu.setMnemonic("t")
// REMARK: normally you would add menu items, checkboxes etc in the same method
// this example will show no menu items for now!
// IMPORTANT: Working with menu's on developer and client can differ]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description><![CDATA[Get the menu at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the menu at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// Note: method getMenu only works in the smart client.

var menubar = plugins.window.getMenuBar();
// get the menu at index 2
// indexes start at 0 (zero) so index 2 is in fact position 3
var menu = menubar.getMenu(2);
// set the text of the menu at the chose position
menu.text = "get menu";
// set the mnemonic key
menu.setMnemonic("g");
// disable the menu
menu.setEnabled(false);
// REMARK: we actually changed an original menu! As a result resetting the
// menubar will NOT reset the above changes. We need to reset the menu 
// manually the following way:
// get the menu
//var menu = menubar.getMenu(2);
// reset the values to default
// notice we use an i18n message here the same way you would use it with
// standard Servoy methods and plugins
//menu.text = "i18n:servoy.menuitem.showAll";
//menu.setEnabled(true);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getMenuCount">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Get the number of (top level) menu's.]]></description>
          <summary><![CDATA[Get the number of (top level) menu's.]]></summary>
          <sample><![CDATA[// Note: method getMenuCount only works in the smart client.

// add a new menu before the last menu
var menubar = plugins.window.getMenuBar();
var count = menubar.getMenuCount();
var menu = menubar.addMenu(count-1);
menu.text = 'new menu';]]></sample>
        </function>
        <function name="getMenuIndexByText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Retrieve the index of the item by text.]]></description>
          <summary><![CDATA[Retrieve the index of the item by text.]]></summary>
          <sample><![CDATA[// Note: method getMenuIndexByText only works in the smart client.

var menubar = plugins.window.getMenuBar();
// find the index of the View menu
var idx = menubar.getMenuIndexByText("View");
// add a menu before the View menu
var menu = menubar.addMenu(idx);
menu.text = "new menu";]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="removeAllMenus">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all menus from the menubar.]]></description>
          <summary><![CDATA[Remove all menus from the menubar.]]></summary>
          <sample><![CDATA[// Note: method removeAllMenus only works in the smart client.

// Potentially dangerous because all accelerator (short) keys
// will be deleted also (including the quit item)
var menubar = plugins.window.getMenuBar();
menubar.removeAllMenus();]]></sample>
        </function>
        <function name="removeMenu">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove the menu(s) at the selected index/indices.]]></description>
          <summary><![CDATA[Remove the menu(s) at the selected index/indices.]]></summary>
          <sample><![CDATA[// Note: method removeMenu only works in the smart client.

var menubar = plugins.window.getMenuBar();
// To remove the last menu in the menubar we count the number of menu's in the menubar
// because the index starts at 0 we have to substract 1 from the counted menu's
// to actually remove the last menu from the menubar
var index = menubar.getMenuCount() - 1;
menubar.removeMenu(index);

// To remove the last 3 (three) menu's from the menubar we
// can do that by adding additional indexes to the method
// and delimit them with a comma.
index = menubar.getMenuCount() - 1;
menubar.removeMenu(index, index-1, index-2);
 
// For 'security' reasons it is best to ALWAYS remove the menu with the last index
// first to avoid index out of range issues and other issues
// EXAMPLE: when you first remove the menu at index 2 and then the menu at index 4
// you actually remove the menu at index 2 and index 5
// after removing the menu at index 2 all other menu's moved one index to the left
// so the menu at index 4 moved to index 3 and the menu at index 5 moved to index 4 etc.]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of one or more indexes corresponding to menus to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="reset">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Reset the menubar to the default.]]></description>
          <summary><![CDATA[Reset the menubar to the default.]]></summary>
          <sample><![CDATA[// Note: method removeMenu only works in the smart client.

// When the menubar settings are solution specific it is advised to reset
// the bar to its default settings when closing the solution.
// Another reason is that when a client/developer is started first the
// plugin will save the current settings in memory.
// REMARK: Don't manipulate standard Servoy menuitems but remove
// them and create new ones! Due to the way menuitems are managed by java it is not
// possible to reset a menuitem anymore.
var menubar = plugins.window.getMenuBar();
// add a menu
var menu = menubar.addMenu();
menu.text = "new menu";
// reset the menubar, the newly added menu will dissapear
menubar.reset();]]></sample>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show/hide the menu bar]]></description>
          <summary><![CDATA[Show/hide the menu bar]]></summary>
          <sample><![CDATA[// Note: method setVisible only works in the smart client.

// hide the menu bar
var menubar = plugins.window.getMenuBar();
menubar.setVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="validate">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Obsolete method, no longer needed.]]></deprecated>
          <sample/>
        </function>
      </functions>
    </object>
    <object publicName="MenuItem" qualifiedName="com.servoy.extensions.plugins.window.menu.MenuItem">
      <constants>
        <constant name="ALIGN_CENTER">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
        <constant name="ALIGN_LEFT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
        <constant name="ALIGN_RIGHT">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></description>
          <summary><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
        </constant>
      </constants>
      <properties>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="methodArguments">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Set arguments that are sent to the callback method.]]></description>
          <summary><![CDATA[Set arguments that are sent to the callback method.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
          <summary><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="selected">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
          <summary><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
          <summary><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
      </properties>
      <functions>
        <function name="doClick">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
          <summary><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setAccelerator">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function deprecated="true" name="setArguments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBackgroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setForegroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setIcon">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="setMnemonic">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description><![CDATA[Set the item visible.]]></description>
          <summary><![CDATA[Set the item visible.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="OptionsRequest" qualifiedName="com.servoy.extensions.plugins.http.OptionsRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAllowedMethods">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.http.Response"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Returns the supported HTTP Request operations as a String Array]]></description>
          <summary><![CDATA[Returns the supported HTTP Request operations as a String Array]]></summary>
          <sample><![CDATA[var supportedOperations = request.getAllowedMethods()
application.output(supportedOperations.join(','));]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Polynomial" qualifiedName="com.servoy.extensions.plugins.amortization.Polynomial" scriptingName="Polynomial">
      <functions>
        <function name="addPolynomial">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds another polynomial to this polynomial.]]></description>
          <summary><![CDATA[Adds another polynomial to this polynomial.]]></summary>
          <sample><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
          <parameters>
            <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </parameters>
        </function>
        <function name="addTerm">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a term to this polynomial.]]></description>
          <summary><![CDATA[Adds a term to this polynomial.]]></summary>
          <sample><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
          <parameters>
            <parameter name="coefficient" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="exponent" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="findRoot">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Finds a root of this polynomial using Newton's method, starting from an initial search value, and with a given precision.]]></description>
          <summary><![CDATA[Finds a root of this polynomial using Newton's method, starting from an initial search value, and with a given precision.]]></summary>
          <sample><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
          <parameters>
            <parameter name="startValue" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="error" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="iterations" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getDerivative">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          <description><![CDATA[Returns a polynomial that holds the derivative of this polynomial.]]></description>
          <summary><![CDATA[Returns a polynomial that holds the derivative of this polynomial.]]></summary>
          <sample><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
        </function>
        <function name="getDerivativeValue">
          <argumentsTypes>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the value of the derivative of this polynomial in a certain point.]]></description>
          <summary><![CDATA[Returns the value of the derivative of this polynomial in a certain point.]]></summary>
          <sample><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          </parameters>
        </function>
        <function name="getValue">
          <argumentsTypes>
            <argumentType typecode="double"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          <description><![CDATA[Returns the value of this polynomial in a certain point.]]></description>
          <summary><![CDATA[Returns the value of this polynomial in a certain point.]]></summary>
          <sample><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
          </parameters>
        </function>
        <function name="multiplyByPolynomial">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Multiplies this polynomial with another polynomial.]]></description>
          <summary><![CDATA[Multiplies this polynomial with another polynomial.]]></summary>
          <sample><![CDATA[// Model the quadratic equation (x+1)*(x+2) = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(1, 1);
eq.addTerm(1, 0);
var eq2 = plugins.amortization.newPolynomial();
eq2.addTerm(1, 1);
eq2.addTerm(2, 0);
eq.multiplyByPolynomial(eq2);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));]]></sample>
          <parameters>
            <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </parameters>
        </function>
        <function name="multiplyByTerm">
          <argumentsTypes>
            <argumentType typecode="double"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Multiples this polynomial with a term.]]></description>
          <summary><![CDATA[Multiples this polynomial with a term.]]></summary>
          <sample><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
          <parameters>
            <parameter name="coefficient" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <parameter name="exponent" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setToZero">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets this polynomial to zero.]]></description>
          <summary><![CDATA[Sets this polynomial to zero.]]></summary>
          <sample><![CDATA[var eq = plugins.amortization.newPolynomial();
eq.addTerm(2, 3);
application.output(eq.getValue(1.1));
eq.setToZero();
application.output(eq.getValue(1.1));]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="Popup" qualifiedName="com.servoy.extensions.plugins.window.menu.Popup">
      <functions>
        <function name="addCheckBox">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox.]]></description>
          <summary><![CDATA[Add a checkbox.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the checkbox]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox with given name.]]></description>
          <summary><![CDATA[Add a checkbox with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the checkbox]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
          <description><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the checkbox mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the checkbox]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="addItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenuItem(String,Function,Object,String,Boolean,Integer).]]></deprecated>
          <sample/>
        </function>
        <function name="addMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu at the end.]]></description>
          <summary><![CDATA[Add a submenu at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
        </function>
        <function name="addMenu">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Add a submenu at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the submenu]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenu">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
          <description><![CDATA[Add a submenu with given name.]]></description>
          <summary><![CDATA[Add a submenu with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the submenu; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item.]]></description>
          <summary><![CDATA[Add a menu item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the menu item]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item with given name.]]></description>
          <summary><![CDATA[Add a menu item with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the menu item]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addMenuItem">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
          <description><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the menu item mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of the menu item]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radio button.]]></description>
          <summary><![CDATA[Add a radio button.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the index at which to add the radio button]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radio button with given name.]]></description>
          <summary><![CDATA[Add a radio button with given name.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of radio button]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
          <description><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
          <summary><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
            </parameter>
            <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback function]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the radio button mnemonic]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[the enabled state of radio button]]></description>
            </parameter>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[the alignment type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addRadioGroup">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a radiogroup for radiobuttons. A radiogroup groups together all radiobuttons that are added
after the group is added. From all radiobuttons that belong to the same radiogroup only one can be
checked at a time.

If no radiogroup is added, one is created automatically when the first radiobutton is added.]]></description>
          <summary><![CDATA[Add a radiogroup for radiobuttons.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
        </function>
        <function name="addSeparator">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
          <summary><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
        </function>
        <function name="addSeparator">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
          <summary><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index at which to add the separator]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="addSubMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenu(String).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="addSubMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addMenu(Number).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index at which to add the submenu]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getCheckBox">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description><![CDATA[Get the checkbox at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the checkbox at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the element based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
          <sample><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getItem">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.AbstractMenuItem"/>
          <description><![CDATA[Get the item at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the item at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getItemCount">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Get the number of items in the menu.]]></description>
          <summary><![CDATA[Get the number of items in the menu.]]></summary>
          <sample><![CDATA[// REMARK: indexes start at 0, disabled items, non visible items and seperators are counted also
// REMARK: this is especially important when getting items by the index
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// remove the last item
menu.removeItem(menu.getItemCount() - 1);]]></sample>
        </function>
        <function name="getItemIndexByText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Retrieve the index of the item by text.]]></description>
          <summary><![CDATA[Retrieve the index of the item by text.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description><![CDATA[Get the submenu at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the submenu at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getRadioButton">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></description>
          <summary><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function deprecated="true" name="getSubMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getMenu().]]></deprecated>
          <sample/>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified element client property key.]]></description>
          <summary><![CDATA[Sets the value for the specified element client property key.]]></summary>
          <sample><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="removeAllItems">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all items from the menu.]]></description>
          <summary><![CDATA[Remove all items from the menu.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
        </function>
        <function name="removeItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove the item(s) at the selected index/indices.]]></description>
          <summary><![CDATA[Remove the item(s) at the selected index/indices.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of one or moe indexes corresponding to items to remove]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="show">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show the popup at the mouse coordinates (Smart client only).]]></description>
          <summary><![CDATA[Show the popup at the mouse coordinates (Smart client only).]]></summary>
          <sample><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
        </function>
        <function name="show">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show the popup above the specified element.]]></description>
          <summary><![CDATA[Show the popup above the specified element.]]></summary>
          <sample><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent"/>
          </parameters>
        </function>
        <function name="show">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show the popup above the specified element, adding x an y values relative to the element.]]></description>
          <summary><![CDATA[Show the popup above the specified element, adding x an y values relative to the element.]]></summary>
          <sample><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent"/>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="show">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show the popup at x an y coordinates.]]></description>
          <summary><![CDATA[Show the popup at x an y coordinates.]]></summary>
          <sample><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="PostRequest" qualifiedName="com.servoy.extensions.plugins.http.PostRequest">
      <functions>
        <function name="addFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a file to the post.]]></description>
          <summary><![CDATA[Add a file to the post.]]></summary>
          <sample><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
          <parameters>
            <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="jsFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="addFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a file to the post.]]></description>
          <summary><![CDATA[Add a file to the post.]]></summary>
          <sample><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
          <parameters>
            <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="jsFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="addFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a file to the post.]]></description>
          <summary><![CDATA[Add a file to the post.]]></summary>
          <sample><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
          <parameters>
            <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fileLocation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addParameter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a parameter to the post.]]></description>
          <summary><![CDATA[Add a parameter to the post.]]></summary>
          <sample><![CDATA[poster.addParameter('name','value')
poster.addParameter(null,'value') //sets the content to post]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="doPost">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description/>
          <deprecated><![CDATA[Replaced by #executeRequest(String,String)]]></deprecated>
          <sample><![CDATA[//null
var httpCode = poster.doPost()]]></sample>
          <parameters>
            <parameter name="username" optional="true"/>
            <parameter name="password" optional="true"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="getPageData">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get the result page data after a post.]]></description>
          <summary><![CDATA[Get the result page data after a post.]]></summary>
          <deprecated><![CDATA[Replaced by #executeRequest(String,String)]]></deprecated>
          <sample><![CDATA[var pageData = poster.getPageData()]]></sample>
        </function>
        <function name="setBodyContent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the body of the request.]]></description>
          <summary><![CDATA[Set the body of the request.]]></summary>
          <sample><![CDATA[method.setBodyContent(content)]]></sample>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setCharset">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the charset used when posting. If this is null or not called it will use the default charset (UTF-8).]]></description>
          <summary><![CDATA[Set the charset used when posting.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',scopes.globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(scopes.globals.twitterUserName, scopes.globals.twitterPassword).getStatusCode() // httpCode 200 is ok]]></sample>
          <parameters>
            <parameter name="charset"/>
          </parameters>
        </function>
        <function deprecated="true" name="setEncoding">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setCharset(String)]]></deprecated>
          <sample/>
        </function>
      </functions>
    </object>
    <object publicName="PrinterJobProvider" qualifiedName="com.servoy.extensions.plugins.batchprintjob.PrinterJobProvider">
      <constants>
        <constant name="capablePrintServices" undocumented="true">
          <return type="javax.print.PrintService[]" typecode="[Ljavax.print.PrintService;"/>
        </constant>
      </constants>
      <functions>
        <function name="closeCurrentBatchJob" undocumented="true">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
        </function>
        <function name="getNewBatchJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob"/>
          <description><![CDATA[Get a printer job.]]></description>
          <summary><![CDATA[Get a printer job.]]></summary>
          <sample><![CDATA[var _theJob = plugins.batchprintjob.getNewBatchJob(null) 
//null for using default printer
//first page with sales conditions
forms.batchprintjob.controller.print( true, false,  _theJob)
//following pages, with the offer data and items
forms.offers_print5.controller.print( false, true,  _theJob)
plugins.batchprintjob.closeCurrentBatchJob()]]></sample>
          <parameters>
            <parameter name="preferredPrinterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="ProgressableProvider" qualifiedName="com.servoy.extensions.plugins.progressable.ProgressableProvider">
      <functions>
        <function name="showProgress" undocumented="true">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.progressable.ProgressableMonitor" typecode="com.servoy.extensions.plugins.progressable.ProgressableMonitor"/>
        </function>
        <function name="showProgress" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.progressable.ProgressableMonitor" typecode="com.servoy.extensions.plugins.progressable.ProgressableMonitor"/>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="PutRequest" qualifiedName="com.servoy.extensions.plugins.http.PutRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBodyContent">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the body of the request.]]></description>
          <summary><![CDATA[Set the body of the request.]]></summary>
          <sample><![CDATA[method.setBodyContent(content)]]></sample>
          <parameters>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setCharset">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the charset used when posting. If this is null or not called it will use the default charset (UTF-8).]]></description>
          <summary><![CDATA[Set the charset used when posting.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',scopes.globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(scopes.globals.twitterUserName, scopes.globals.twitterPassword).getStatusCode() // httpCode 200 is ok]]></sample>
          <parameters>
            <parameter name="charset"/>
          </parameters>
        </function>
        <function name="setFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Set a file to put.]]></description>
          <summary><![CDATA[Set a file to put.]]></summary>
          <sample><![CDATA[putRequest.setFile('c:/temp/manual_01a.doc')]]></sample>
          <parameters>
            <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="RadioButton" qualifiedName="com.servoy.extensions.plugins.window.menu.RadioButton">
      <properties>
        <property name="enabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="methodArguments">
          <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          <description><![CDATA[Set arguments that are sent to the callback method.]]></description>
          <summary><![CDATA[Set arguments that are sent to the callback method.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="name">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
          <summary><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="selected">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
          <summary><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
        <property name="text">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
          <summary><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
        </property>
      </properties>
      <functions>
        <function name="doClick">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
          <summary><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
        </function>
        <function name="getClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
          <summary><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="putClientProperty">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
          <parameters>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (text,function,selected...).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the button]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the button]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the button]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic for this button]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the button]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic for this button]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the button]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the button]]></description>
            </parameter>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for selected, false otherwise]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the feedback method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the icon for the button]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the accelerator key binding]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic for this button]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for enabled, false otherwise]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for visible, false otherwise]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="set">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the method]]></description>
            </parameter>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
            </parameter>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setAccelerator">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setAlign">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the alignment of the radiobutton.]]></description>
          <summary><![CDATA[Sets the alignment of the radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a checkbox
var entry = menu.addCheckBox("menu entry", feedback);
// alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// enable alignment of the new entry
entry.setAlign(true);]]></sample>
          <parameters>
            <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="setArguments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setBackgroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setForegroundColor">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setIcon">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="setMethod">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="setMnemonic">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
          <summary><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description><![CDATA[Set the item visible.]]></description>
          <summary><![CDATA[Set the item visible.]]></summary>
          <sample><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="Response" qualifiedName="com.servoy.extensions.plugins.http.Response">
      <functions>
        <function name="getCharset">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get the charset of the response body.]]></description>
          <summary><![CDATA[Get the charset of the response body.]]></summary>
          <sample><![CDATA[var charset = response.getCharset();]]></sample>
        </function>
        <function name="getMediaData">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Get the content of response as binary data. It also supports gzip-ed content.]]></description>
          <summary><![CDATA[Get the content of response as binary data.]]></summary>
          <sample><![CDATA[var mediaData = response.getMediaData();]]></sample>
        </function>
        <function name="getResponseBody">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get the content of the response as String.]]></description>
          <summary><![CDATA[Get the content of the response as String.]]></summary>
          <sample><![CDATA[var pageData = response.getResponseBody();]]></sample>
        </function>
        <function name="getResponseHeaders">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="com.servoy.j2db.scripting.JSMap"/>
          <description><![CDATA[Gets the headers of the response as name/value arrays.]]></description>
          <summary><![CDATA[Gets the headers of the response as name/value arrays.]]></summary>
          <sample><![CDATA[var allHeaders = response.getResponseHeaders();
var header;

for (header in allHeaders) application.output(header + ': ' + allHeaders[header]);]]></sample>
        </function>
        <function name="getResponseHeaders">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="com.servoy.j2db.scripting.JSMap"/>
          <description><![CDATA[Gets the headers of the response as name/value arrays.]]></description>
          <summary><![CDATA[Gets the headers of the response as name/value arrays.]]></summary>
          <sample><![CDATA[var contentLength = response.getResponseHeaders("Content-Length");]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getStatusCode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets the status code of the response, the list of the possible values is in HTTP_STATUS constants.]]></description>
          <summary><![CDATA[Gets the status code of the response, the list of the possible values is in HTTP_STATUS constants.]]></summary>
          <sample><![CDATA[var status = response.getStatusCode();// compare with HTTP_STATUS constants]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="SolutionHelper" qualifiedName="com.servoy.extensions.plugins.mobile.SolutionHelper" servoyMobile="true">
      <constants>
        <constant name="ICON_ALERT" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_BACK" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_CHECK" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_DELETE" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_DOWN" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_FORWARD" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_GEAR" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Constant for specifying a predefined icon type for a button.]]></description>
          <summary><![CDATA[Constant for specifying a predefined icon type for a button.]]></summary>
          <sample><![CDATA[plugins.mobile.solutionHelper.setIconType(myJSButton, plugins.mobile.SolutionHelper.ICON_...);]]></sample>
        </constant>
        <constant name="ICON_GRID" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_HOME" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_INFO" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_LEFT" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_MINUS" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_PLUS" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_REFRESH" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_RIGHT" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_SEARCH" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_STAR" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
        <constant name="ICON_UP" servoyMobile="true">
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <sample/>
        </constant>
      </constants>
      <functions>
        <function name="createInsetList" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobile.JSInsetList" typecode="com.servoy.extensions.plugins.mobile.JSInsetList"><![CDATA[the newly created inset list.]]></return>
          <description><![CDATA[Creates a new inset list mobile component in the given form. The inset list will be populated based on the given datasource and relation.]]></description>
          <summary><![CDATA[Creates a new inset list mobile component in the given form.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create an inset list
var insetList = plugins.mobile.solutionHelper.createInsetList(f,8,"accountmanager_to_companies","Companies","company_name");
insetList.subtextDataProviderID = "company_description";
insetList.onAction = f.newMethod("function buttonPressed() { plugins.dialogs.showWarningDialog('Title', 'inset list clicked','OK'); }");]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[the form that will contain the new inset list.]]></description>
            </parameter>
            <parameter name="yLocation" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the vertical location of the inset list in the form's components list.]]></description>
            </parameter>
            <parameter name="relationName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the relation used to show data, just like it would happen in a related tab-panel.]]></description>
            </parameter>
            <parameter name="headerText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the title (header text) for the inset list.]]></description>
            </parameter>
            <parameter name="textDataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the dataprovider that will be used to populate the main text area of the list's items.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createListForm" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobile.JSList" typecode="com.servoy.extensions.plugins.mobile.JSList"><![CDATA[the newly created list form.]]></return>
          <description><![CDATA[Creates a new list form, similar to an inset list but without the inset list's header and relation.
The result will be an independent form which behaves like a mobile list.]]></description>
          <summary><![CDATA[Creates a new list form, similar to an inset list but without the inset list's header and relation.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a button to go to it on the main form
b = f.newButton("Show created list form",0,9,10,10,
	f.newMethod("function showListForm() { forms.created_by_sm_2.controller.show(); }"));
// create the actual list form
var list = plugins.mobile.solutionHelper.createListForm('created_by_sm_2', databaseManager.getDataSource("udm","contacts"),"name_first");
list.onAction = solutionModel.getForm('created_by_sm_2').newMethod("function goBack() { history.back(); }");]]></sample>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the new form's name.]]></description>
            </parameter>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the list will be populated based on this datasource.]]></description>
            </parameter>
            <parameter name="textDataProviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[can be null; it's a convenience argument for setting the dataprovider that will be used to populate the main text area of the list's items.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAllFooterComponents" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.base.solutionmodel.IBaseSMComponent[]" typecode="[Lcom.servoy.base.solutionmodel.IBaseSMComponent;"/>
          <description><![CDATA[Gets all components from form footer.]]></description>
          <summary><![CDATA[Gets all components from form footer.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var components = plugins.mobile.solutionHelper.getAllFooterComponents(f);]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAllInsetLists" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobile.JSInsetList[]" typecode="[Lcom.servoy.extensions.plugins.mobile.JSInsetList;"/>
          <description><![CDATA[Gets all insets lists from specified form.]]></description>
          <summary><![CDATA[Gets all insets lists from specified form.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var insetLists = plugins.mobile.solutionHelper.getAllInsetLists(f);]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The form.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getAllListForms" servoyMobile="true">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.mobile.JSList[]" typecode="[Lcom.servoy.extensions.plugins.mobile.JSList;"/>
          <description><![CDATA[Gets all list forms from solution.]]></description>
          <summary><![CDATA[Gets all list forms from solution.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var listForms = plugins.mobile.solutionHelper.getAllListForms(f);]]></sample>
        </function>
        <function name="getHeaderLabel" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
          <description><![CDATA[Gets header label from specified form.]]></description>
          <summary><![CDATA[Gets header label from specified form.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var label = plugins.mobile.solutionHelper.getHeaderLabel(f);]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The parent form to look for label.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getHeaderSize" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets the header size of a label.
<p> The number matches the heading tags h1 to h6 as used in html.]]></description>
          <summary><![CDATA[Gets the header size of a label.]]></summary>
          <sample><![CDATA[var lbl = f.newLabel("Big text",0,0,10,10);
var oldHeaderSize = plugins.mobile.solutionHelper.getHeaderSize(lbl);
plugins.mobile.solutionHelper.setHeaderSize(lbl, 1);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel">
              <description><![CDATA[the label.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getIconType" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Gets the predefined icon set on a button.]]></description>
          <summary><![CDATA[Gets the predefined icon set on a button.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="button" type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton">
              <description><![CDATA[the button.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getInsetList" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobile.JSInsetList" typecode="com.servoy.extensions.plugins.mobile.JSInsetList"><![CDATA[the existing inset list, or null if it does not exist.]]></return>
          <description><![CDATA[Returns an existing inset list.]]></description>
          <summary><![CDATA[Returns an existing inset list.]]></summary>
          <sample><![CDATA[var insetList = plugins.mobile.solutionHelper.getInsetList(solutionModel.getForm('created_by_sm_1'), 'il1');]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[the form that contains the inset list.]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the inset list's name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getLeftHeaderButton" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
          <description><![CDATA[Gets header button from left on specified form.]]></description>
          <summary><![CDATA[Gets header button from left on specified form.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var button = plugins.mobile.solutionHelper.getLeftHeaderButton(f);]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The parent form to look for button.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getListForm" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobile.JSList" typecode="com.servoy.extensions.plugins.mobile.JSList"><![CDATA[the existing list form, or null if it does not exist.]]></return>
          <description><![CDATA[Returns an existing list form.]]></description>
          <summary><![CDATA[Returns an existing list form.]]></summary>
          <sample><![CDATA[var list = plugins.mobile.solutionHelper.getListForm('created_by_sm_2');]]></sample>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the form's name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRightHeaderButton" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
          </argumentsTypes>
          <return type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
          <description><![CDATA[Gets header button from right on specified form.]]></description>
          <summary><![CDATA[Gets header button from right on specified form.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
var button = plugins.mobile.solutionHelper.getRightHeaderButton(f);]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[The parent form to look for button.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTitleDataProvider" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns "titleDataProvider" property's value for the given component.]]></description>
          <summary><![CDATA[Returns "titleDataProvider" property's value for the given component.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTitleDisplaysTags" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns "titleDisplaysTags" property's value for the given component.]]></description>
          <summary><![CDATA[Returns "titleDisplaysTags" property's value for the given component.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getTitleText" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns "titleText" property's value for the given component.]]></description>
          <summary><![CDATA[Returns "titleText" property's value for the given component.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="groupComponents" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Please use setTitleXYZ() and getTitleXYZ() to access component title properties.

Groups two components to be shown together as a 'mobile' field. For example you can group a label and a text field, a label and a checkbox,
a label and another label and so on.

Fields created in Servoy Developer are usually grouped components (see text fields, radio fields, ...), consisting of a label and an actual field.
If you want to get the same effect using solution helper, create a label and a field of desired type, and group them using this method.
The properties that currently appear in form editor as "titleXYZ" for the compound fields (titleText, titleDataProvider, ...) are actually the attributes of the label component (text, dataProvider, ...).]]></deprecated>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a compound mobile field made of a label and a text field
var lbl = f.newLabel("compound",0,7,10,10);
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.groupComponents(lbl, fld);]]></sample>
          <parameters>
            <parameter name="c1" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the first component.]]></description>
            </parameter>
            <parameter name="c2" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the second component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isRadioFieldHorizontal" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMField"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Checks the direction of the radio field. If it is horizontal, it returns true.]]></description>
          <summary><![CDATA[Checks the direction of the radio field.]]></summary>
          <sample><![CDATA[var radioF = f.getField('my_radio_field');
if (radioF != null && plugins.mobile.solutionHelper.isRadioFieldHorizontal(lbl)) {
	plugins.mobile.solutionHelper.setRadioFieldHorizontal(radioF, false);
}]]></sample>
          <parameters>
            <parameter name="radioField" type="com.servoy.base.solutionmodel.IBaseSMField" typecode="com.servoy.base.solutionmodel.IBaseSMField">
              <description><![CDATA[the field of radio type.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="isTitleVisible" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns "titleVisible" property's value for the given component.]]></description>
          <summary><![CDATA[Returns "titleVisible" property's value for the given component.]]></summary>
          <sample><![CDATA[// create a label with invisible title (so it's a single label using the available space)
var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
var l = f.newLabel("First name",1,7,10,10);

plugins.mobile.solutionHelper.setTitleVisible(l, false);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel">
              <description><![CDATA[the label component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="markFooterItem" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Makes a component shown in the footer. Footer items are arranged from left to right according to their 'x' location.]]></description>
          <summary><![CDATA[Makes a component shown in the footer.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the component.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="markHeaderText" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Makes a label show centered in the header, as title.]]></description>
          <summary><![CDATA[Makes a label show centered in the header, as title.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel">
              <description><![CDATA[the label to be used.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="markLeftHeaderButton" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Makes a button show on the left side of the header, in the left of the title.]]></description>
          <summary><![CDATA[Makes a button show on the left side of the header, in the left of the title.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="button" type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton">
              <description><![CDATA[the button.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="markRightHeaderButton" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Makes a button show on the left side of the header, in the left of the title.]]></description>
          <summary><![CDATA[Makes a button show on the left side of the header, in the left of the title.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="button" type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton">
              <description><![CDATA[the button.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeInsetList" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMForm"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Removes inset list from specified form.]]></description>
          <summary><![CDATA[Removes inset list from specified form.]]></summary>
          <sample><![CDATA[var f = solutionModel.getForm('test');
plugins.mobile.solutionHelper.removeInsetList(f,'myinsetlist');]]></sample>
          <parameters>
            <parameter name="form" type="com.servoy.base.solutionmodel.IBaseSMForm" typecode="com.servoy.base.solutionmodel.IBaseSMForm">
              <description><![CDATA[Parent form.]]></description>
            </parameter>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Inset List name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setHeaderSize" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the header size on a label. Valid values are between 1 to 6,
default value is 4. If an invalid value is specified, it will be ignored.
<p> The numbers match the heading tags h1 to h6 as used in html.]]></description>
          <summary><![CDATA[Sets the header size on a label.]]></summary>
          <sample><![CDATA[var lbl = f.newLabel("Big text",0,0,10,10);
var oldHeaderSize = plugins.mobile.solutionHelper.getHeaderSize(lbl);
plugins.mobile.solutionHelper.setHeaderSize(lbl, 1);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel">
              <description><![CDATA[the label.]]></description>
            </parameter>
            <parameter name="headerSize" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[size of the header, value between 1 to 6.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setIconType" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMButton"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets one of the predefined icon on a button. Use ICON_... constants for iconType.]]></description>
          <summary><![CDATA[Sets one of the predefined icon on a button.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
          <parameters>
            <parameter name="button" type="com.servoy.base.solutionmodel.IBaseSMButton" typecode="com.servoy.base.solutionmodel.IBaseSMButton">
              <description><![CDATA[the button.]]></description>
            </parameter>
            <parameter name="iconType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[one of the ICON_... constants.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setRadioFieldHorizontal" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMField"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the 'horizontal' property of a radio(s) field. If the field is not of type radio, it does nothing.]]></description>
          <summary><![CDATA[Sets the 'horizontal' property of a radio(s) field.]]></summary>
          <sample><![CDATA[var radioF = f.getField('my_radio_field');
if (radioF != null && plugins.mobile.solutionHelper.isRadioFieldHorizontal(lbl)) {
	plugins.mobile.solutionHelper.setRadioFieldHorizontal(radioF, false);
}]]></sample>
          <parameters>
            <parameter name="radioField" type="com.servoy.base.solutionmodel.IBaseSMField" typecode="com.servoy.base.solutionmodel.IBaseSMField">
              <description><![CDATA[the field of radio type.]]></description>
            </parameter>
            <parameter name="horizontal" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for horizontal, false for default.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTitleDataProvider" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the "titleDataProvider" property of a component (fields and labels support titles). That is applied to a (visually) separate "title" label that is grouped with the component.

Fields created in Servoy Developer are usually components with title (see text fields, radio fields, ...), consisting of a label and an actual field.
If you want to get the same effect using solution helper you can use the setTitleXYZ(...) methods.]]></description>
          <summary><![CDATA[Sets the "titleDataProvider" property of a component (fields and labels support titles).]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
            <parameter name="dataProvider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the title's dataProvider property value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTitleDisplaysTags" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the "titleDisplaysTags" property of a component (fields and labels support titles). That is applied to a (visually) separate "title" label that is grouped with the component.

Fields created in Servoy Developer are usually components with title (see text fields, radio fields, ...), consisting of a label and an actual field.
If you want to get the same effect using solution helper you can use the setTitleXYZ(...) methods.]]></description>
          <summary><![CDATA[Sets the "titleDisplaysTags" property of a component (fields and labels support titles).]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
            <parameter name="displaysTags" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the title's displaysTags property value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTitleText" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMComponent"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the "titleText" property of a component (fields and labels support titles). That is applied to a (visually) separate "title" label that is grouped with the component.

Fields created in Servoy Developer are usually components with title (see text fields, radio fields, ...), consisting of a label and an actual field.
If you want to get the same effect using solution helper you can use the setTitleXYZ(...) methods.]]></description>
          <summary><![CDATA[Sets the "titleText" property of a component (fields and labels support titles).]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
// create a mobile textt field with title
var fld = f.newTextField("name_first",1,7,10,10);
plugins.mobile.solutionHelper.setTitleText(fld, "First Name");
//plugins.mobile.solutionHelper.setTitleDataProvider(fld, null);
//plugins.mobile.solutionHelper.setTitleDisplaysTags(fld, false);]]></sample>
          <parameters>
            <parameter name="component" type="com.servoy.base.solutionmodel.IBaseSMComponent" typecode="com.servoy.base.solutionmodel.IBaseSMComponent">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
            <parameter name="titleText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the title's titleText property value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setTitleVisible" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="com.servoy.base.solutionmodel.IBaseSMLabel"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the "titleVisible" property of a label. That is applied to a (visually) separate "title" label that is grouped with the component.

A label created in Servoy Developer also has a title, so it's actually a group consisting of a title label and a main label.
If you want to get the same effect using solution helper you can use the setTitleXYZ(...) methods.]]></description>
          <summary><![CDATA[Sets the "titleVisible" property of a label.]]></summary>
          <sample><![CDATA[// create a label with invisible title (so it's a single label using the available space)
var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);
var l = f.newLabel("First name",1,7,10,10);

plugins.mobile.solutionHelper.setTitleVisible(l, false);]]></sample>
          <parameters>
            <parameter name="label" type="com.servoy.base.solutionmodel.IBaseSMLabel" typecode="com.servoy.base.solutionmodel.IBaseSMLabel">
              <description><![CDATA[the field or label component.]]></description>
            </parameter>
            <parameter name="titleVisible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[the title's titleVisible property value to be set.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="TestProvider" qualifiedName="com.servoy.extensions.plugins.test.TestProvider">
      <functions>
        <function name="blabla">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[run a test]]></description>
          <summary><![CDATA[run a test]]></summary>
          <sample><![CDATA[plugins.test.blabla();]]></sample>
        </function>
        <function name="testGetDesignTimeProperty" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="elementName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="testGetElements">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Get elements names from form]]></description>
          <summary><![CDATA[Get elements names from form]]></summary>
          <sample/>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="testLoadRecords">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Load form with new foundset with column compare.]]></description>
          <summary><![CDATA[Load form with new foundset with column compare.]]></summary>
          <sample/>
          <parameters>
            <parameter name="formName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="datasource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="columnName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="testSetValuelistItems" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="testSetValuelistItems" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="displayValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="realValues" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="testSolutionModelCreateFormWithButton" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.scripting.solutionmodel.JSForm" typecode="com.servoy.j2db.solutionmodel.ISMForm"/>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="dataSource" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="styleName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="show_in_menu" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="buttonName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.scripting.solutionmodel.JSMethod" typecode="com.servoy.j2db.scripting.solutionmodel.JSMethod"/>
          </parameters>
        </function>
        <function name="testSolutionModelModifyExistingGlobalMethod" undocumented="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <parameters>
            <parameter name="scopeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="code" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="ToolBar" qualifiedName="com.servoy.extensions.plugins.window.menu.swing.ToolBar">
      <functions>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addButton">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Button to the toolbar.]]></description>
          <summary><![CDATA[Add a Button to the toolbar.]]></summary>
          <sample><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a CheckBox to the toolbar.]]></description>
          <summary><![CDATA[Add a CheckBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a CheckBox to the toolbar.]]></description>
          <summary><![CDATA[Add a CheckBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a CheckBox to the toolbar.]]></description>
          <summary><![CDATA[Add a CheckBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a CheckBox to the toolbar.]]></description>
          <summary><![CDATA[Add a CheckBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addCheckBox">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a CheckBox to the toolbar.]]></description>
          <summary><![CDATA[Add a CheckBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addComboBox">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a ComboBox to the toolbar.]]></description>
          <summary><![CDATA[Add a ComboBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function name="addComboBox">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a ComboBox to the toolbar.]]></description>
          <summary><![CDATA[Add a ComboBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addComboBox">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a ComboBox to the toolbar.]]></description>
          <summary><![CDATA[Add a ComboBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addComboBox">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a ComboBox to the toolbar.]]></description>
          <summary><![CDATA[Add a ComboBox to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addField">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Field to the toolbar.]]></description>
          <summary><![CDATA[Add a Field to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addField">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Field to the toolbar.]]></description>
          <summary><![CDATA[Add a Field to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addField">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Field to the toolbar.]]></description>
          <summary><![CDATA[Add a Field to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addField">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Field to the toolbar.]]></description>
          <summary><![CDATA[Add a Field to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addField">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Field to the toolbar.]]></description>
          <summary><![CDATA[Add a Field to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
          <parameters>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="addSeparator">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Add a Separator to the toolbar.]]></description>
          <summary><![CDATA[Add a Separator to the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_0");
// add a button 
toolbar.addButton("button", feedback_button);
// add a separator
toolbar.addSeparator();
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);]]></sample>
        </function>
        <function name="enableItem">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Enable/disable the item at the specified index.]]></description>
          <summary><![CDATA[Enable/disable the item at the specified index.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// disable the button
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.enableItem(1, false);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="removeAllItems">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove all Buttons, Checkboxes etc. from the toolbar.]]></description>
          <summary><![CDATA[Remove all Buttons, Checkboxes etc.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove all items from the toolbar
toolbar.removeAllItems();]]></sample>
        </function>
        <function name="removeItem">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove a Button, CheckBox, ComboBox from the toolbar.]]></description>
          <summary><![CDATA[Remove a Button, CheckBox, ComboBox from the toolbar.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove the first item (the button in this case) from the toolbar
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.removeItem(1);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="selectCheckBox">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the CheckBox selection.]]></description>
          <summary><![CDATA[Set the CheckBox selection.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox
toolbar.addCheckBox("checkbox 1", feedback_checkbox);
// add another checkbox
toolbar.addCheckBox("checkbox 2", feedback_checkbox);
// set the selection of the checkboxes
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.selectCheckBox(1, false);
toolbar.selectCheckBox(2, true);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="selectComboBox">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Select a row of the ComboBox via the index.]]></description>
          <summary><![CDATA[Select a row of the ComboBox via the index.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a combobox
toolbar.addComboBox(feedback_combobox, 1, ["one", "two", "three"]);
// add another combobox
toolbar.addComboBox(feedback_combobox, 2, [1, 2, 3, 4, 5]);
// set the selection of the comboboxes
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.selectComboBox(1, 0); // entry "one" will be selected in the first combobox
toolbar.selectComboBox(2, 3); // entry 4 will be selected in the second combobox]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="selection" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setFieldText">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set a (default) text of the field at the given index.]]></description>
          <summary><![CDATA[Set a (default) text of the field at the given index.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a field
toolbar.addField(feedback_field, "field one");
// add another field
toolbar.addField(feedback_field , "field_two");
// set the text of the fields
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.setFieldText(1, "new text 1");
toolbar.setFieldText(2, "new text 2");]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="validate">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[You need to call this method after adding or removing items to/from the toolbar.]]></description>
          <summary><![CDATA[You need to call this method after adding or removing items to/from the toolbar.]]></summary>
          <deprecated><![CDATA[Obsolete method, no longer needed.]]></deprecated>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove the first item (the button in this case) from the toolbar
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.removeItem(1);]]></sample>
        </function>
        <function name="visibleItem">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Make the item at the specified index visible/invisible.]]></description>
          <summary><![CDATA[Make the item at the specified index visible/invisible.]]></summary>
          <sample><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// make the first item (the button) invisible
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.visibleItem(1, false);]]></sample>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="TraceRequest" qualifiedName="com.servoy.extensions.plugins.http.TraceRequest">
      <functions>
        <function name="addHeader">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add a header to the request.]]></description>
          <summary><![CDATA[Add a header to the request.]]></summary>
          <sample><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
          <parameters>
            <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeAsyncRequest">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
          <summary><![CDATA[Execute the request method asynchronous.]]></summary>
          <sample><![CDATA[var response = method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
          <parameters>
            <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called after response is received]]></description>
            </parameter>
            <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[callbackMethod to be called if request errors out]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeRequest">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
        </function>
        <function name="executeRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
          <description><![CDATA[Execute the request method.]]></description>
          <summary><![CDATA[Execute the request method.]]></summary>
          <sample><![CDATA[var response = method.executeRequest()]]></sample>
          <parameters>
            <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user name]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="XmlNode" qualifiedName="com.servoy.extensions.plugins.xmlreader.XmlNode">
      <functions>
        <function name="getAttributeNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Return all the attribute names of the current node.]]></description>
          <summary><![CDATA[Return all the attribute names of the current node.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString("<root attr1='value1' attr2='value2'/>")
rootNode = nodes[0];
attributes = rootNode.getAttributeNames();
application.output(attributes[0])
application.output(attributes[1])
val1 = rootNode.getAttributeValue('attr1');
application.output(val1)]]></sample>
        </function>
        <function name="getAttributeValue">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Return the value of the named attribute.]]></description>
          <summary><![CDATA[Return the value of the named attribute.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString("<root attr1='value1' attr2='value2'/>")
rootNode = nodes[0];
attributes = rootNode.getAttributeNames();
application.output(attributes[0])
application.output(attributes[1])
val1 = rootNode.getAttributeValue('attr1');
application.output(val1)]]></sample>
          <parameters>
            <parameter name="attributeName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getChildNodes">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.xmlreader.XmlNode[]" typecode="[Lcom.servoy.extensions.plugins.xmlreader.XmlNode;"/>
          <description><![CDATA[Return the child nodes of the current node.]]></description>
          <summary><![CDATA[Return the child nodes of the current node.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString('<father><child1>John</child1><child2>Mary</child2></father>');
application.output(nodes[0].getName())
application.output(nodes[0].getTextValue())
application.output(nodes[0].getType())
childs = nodes[0].getChildNodes()
application.output(childs[0].getName())
application.output(childs[0].getTextValue())
application.output(childs[0].getType())
subChilds = childs[0].getChildNodes()
application.output(subChilds[0].getName())
application.output(subChilds[0].getTextValue())
application.output(subChilds[0].getType())]]></sample>
        </function>
        <function name="getName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Return the name of the XML node element.]]></description>
          <summary><![CDATA[Return the name of the XML node element.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString('<father><child1>John</child1><child2>Mary</child2></father>');
application.output(nodes[0].getName())
application.output(nodes[0].getTextValue())
application.output(nodes[0].getType())
childs = nodes[0].getChildNodes()
application.output(childs[0].getName())
application.output(childs[0].getTextValue())
application.output(childs[0].getType())
subChilds = childs[0].getChildNodes()
application.output(subChilds[0].getName())
application.output(subChilds[0].getTextValue())
application.output(subChilds[0].getType())]]></sample>
        </function>
        <function name="getTextValue">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Return the text-value of the XML node element.]]></description>
          <summary><![CDATA[Return the text-value of the XML node element.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString('<father><child1>John</child1><child2>Mary</child2></father>');
application.output(nodes[0].getName())
application.output(nodes[0].getTextValue())
application.output(nodes[0].getType())
childs = nodes[0].getChildNodes()
application.output(childs[0].getName())
application.output(childs[0].getTextValue())
application.output(childs[0].getType())
subChilds = childs[0].getChildNodes()
application.output(subChilds[0].getName())
application.output(subChilds[0].getTextValue())
application.output(subChilds[0].getType())]]></sample>
        </function>
        <function name="getType">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Return the type of the XML node element.]]></description>
          <summary><![CDATA[Return the type of the XML node element.]]></summary>
          <sample><![CDATA[nodes = plugins.XmlReader.readXmlDocumentFromString('<father><child1>John</child1><child2>Mary</child2></father>');
application.output(nodes[0].getName())
application.output(nodes[0].getTextValue())
application.output(nodes[0].getType())
childs = nodes[0].getChildNodes()
application.output(childs[0].getName())
application.output(childs[0].getTextValue())
application.output(childs[0].getType())
subChilds = childs[0].getChildNodes()
application.output(subChilds[0].getName())
application.output(subChilds[0].getTextValue())
application.output(subChilds[0].getType())]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="XmlReader" qualifiedName="com.servoy.extensions.plugins.xmlreader.XmlReaderProvider" scriptingName="plugins.XmlReader">
      <functions>
        <function deprecated="true" name="readXmlDocument">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.xmlreader.XmlNode[]" typecode="[Lcom.servoy.extensions.plugins.xmlreader.XmlNode;"/>
          <description/>
          <deprecated><![CDATA[Replaced by #readXmlDocumentFromString(String) and #readXmlDocumentFromFile(Object)]]></deprecated>
          <sample/>
        </function>
        <function name="readXmlDocumentFromFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.xmlreader.XmlNode[]" typecode="[Lcom.servoy.extensions.plugins.xmlreader.XmlNode;"/>
          <description><![CDATA[Reads an XML document from a file.]]></description>
          <summary><![CDATA[Reads an XML document from a file.]]></summary>
          <sample><![CDATA[// specifies a reference to a file containing valid XML
var xmlNodes = plugins.XmlReader.readXmlDocumentFromFile('c:/test.xml');
var childNodes = xmlNodes[0].getChildNodes();
// shows a dialog to open an xml file, then reads the file
var xmlFile = plugins.file.showFileOpenDialog(1);
var xmlNodes = plugins.XmlReader.readXmlDocumentFromFile(xmlFile);
var childNodes = xmlNodes[0].getChildNodes();]]></sample>
          <parameters>
            <parameter name="argument" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="readXmlDocumentFromString">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.xmlreader.XmlNode[]" typecode="[Lcom.servoy.extensions.plugins.xmlreader.XmlNode;"/>
          <description><![CDATA[Reads an XML document from a string.]]></description>
          <summary><![CDATA[Reads an XML document from a string.]]></summary>
          <sample><![CDATA[var xmlString = '<books><book price="44.95">' +
'<title>Core Java 1.5</title>' +
'<author>Piet Klerksen</author>' +
'<nrPages>1487</nrPages>' +
'</book>' +
'<book price="59.95">' +
'<title>Developing with Servoy</title>' +
'<author>Cheryl Owens and others</author><nrPages>492</nrPages></book></books>';
var xmlNodes = plugins.XmlReader.readXmlDocumentFromString(xmlString);]]></sample>
          <parameters>
            <parameter name="argument" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="agent" qualifiedName="com.servoy.extensions.plugins.agent.DummyAgentImpl" scriptingName="plugins.agent">
      <properties>
        <property name="x">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets or sets the x position of the agent.]]></description>
          <summary><![CDATA[Gets or sets the x position of the agent.]]></summary>
          <sample><![CDATA[//move the agent diagonaly
plugins.agent.x = plugins.agent.x-10;
plugins.agent.y = plugins.agent.y-10;]]></sample>
        </property>
        <property name="y">
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Gets or sets the y position of the agent.]]></description>
          <summary><![CDATA[Gets or sets the y position of the agent.]]></summary>
          <sample><![CDATA[//move the agent diagonaly
plugins.agent.x = plugins.agent.x-10;
plugins.agent.y = plugins.agent.y-10;]]></sample>
        </property>
      </properties>
      <functions>
        <function deprecated="true" name="hide">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Hides the agent.]]></description>
          <summary><![CDATA[Hides the agent.]]></summary>
          <deprecated><![CDATA[Replaced by #setVisible(boolean)]]></deprecated>
          <sample><![CDATA[plugins.agent.hide();]]></sample>
        </function>
        <function name="setBalloonSize">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the size of the balloon.]]></description>
          <summary><![CDATA[Sets the size of the balloon.]]></summary>
          <sample><![CDATA[plugins.agent.setBalloonSize(width,height)]]></sample>
          <parameters>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setImageURL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets a new image for the agent.]]></description>
          <summary><![CDATA[Sets a new image for the agent.]]></summary>
          <sample><![CDATA[plugins.agent.setImageURL("url")]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setLocation">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets the location of the agent.]]></description>
          <summary><![CDATA[Sets the location of the agent.]]></summary>
          <sample><![CDATA[plugins.agent.setLocation(100,100);]]></sample>
          <parameters>
            <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="setVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show/hides the agent.]]></description>
          <summary><![CDATA[Show/hides the agent.]]></summary>
          <sample><![CDATA[plugins.agent.setVisible(true);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="show">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Shows the agent.]]></description>
          <summary><![CDATA[Shows the agent.]]></summary>
          <deprecated><![CDATA[Replaced by #setVisible(boolean)]]></deprecated>
          <sample><![CDATA[plugins.agent.show();]]></sample>
        </function>
        <function name="speak">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Makes the agent speak.]]></description>
          <summary><![CDATA[Makes the agent speak.]]></summary>
          <sample><![CDATA[plugins.agent.speak('hello nerd');]]></sample>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="amortization" qualifiedName="com.servoy.extensions.plugins.amortization.AmortizationProvider" scriptingName="plugins.amortization">
      <functions>
        <function name="newCalculation">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.amortization.AmortizationCalculation" typecode="com.servoy.extensions.plugins.amortization.AmortizationCalculation"/>
          <description><![CDATA[Creates a new amortization calculation.]]></description>
          <summary><![CDATA[Creates a new amortization calculation.]]></summary>
          <sample><![CDATA[// Calculate the interest rate for an amortization schedule
// with a loan of 2000 dollars  on January 1, 2005, and 5
// monthly payments of 500 dollars starting on Febuary 28th,
// payments made on the last day of each month.

// Get a new amortization calculation.
var c = plugins.amortization.newCalculation();

// Set the rate to -1 for unknown.
c.addRateChange(-1, new Date(2005, 0, 1));

// Set the compounding period to monthly.
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));

// Add the loan and the payments to the schedule.
c.addLoan(2000, new Date(2005, 0, 1));
var lastDate = null;
var period = 12;
//valid periods are:
//PERIOD_ANNUALY : 1
//PERIOD_BI_ANNUALLY : 2
//PERIOD_DAILY : 365
//PERIOD_FOUR_MONTHLY : 3
//PERIOD_FOUR_WEEKLY : 13
//PERIOD_MONTHLY : 12
//PERIOD_QUARTERLY : 4
//PERIOD_TWO_MONTHLY : 6
//PERIOD_TWO_WEEKLY : 26
//PERIOD_WEEKLY : 52
var number_count = 5;
var startday = 31;
c.addPayment(500, new Date(2005, 1, 28), lastDate, period, number_count, startday);

// Solve for the interest rate.
c.solveForUnknown();
// Get the interest rate and the error in the calculation.
// which should be small (otherwise the calculation did
// not converge for some reason.
var r = c.getUnknown();
var e = c.getError();

// When there are no unknowns you can calculate the
// actual amortization schedule.

// Same as before, use the calculated interest rate.
var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);

// Calculate the actual amortization schedule.
c.calculateAmortizationSchedule();

// Get the amortization schedule (which is a JSDataSet) and
// convert it to html. This way you can put it on a label.
// As a JSDataSet you can just get the values stored in
// the rows and columns to use in your script.
var s = "<html>" + c.getAmortizationSchedule().getAsHTML();

// Get the rest balance, which is the amount left over after
// the amortization schedule. In our case (since we calculated
// the rate to have nothing left, it should amount to no more
// than 1 or 2 cents due to rounding).
var rb = c.getRestBalance();]]></sample>
        </function>
        <function name="newPolynomial">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          <description><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></description>
          <summary><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></summary>
          <sample><![CDATA[// create a new polynomial
var p = plugins.amortization.newPolynomial();

// make the polynomial -4*x^2 + 9
p.addTerm(-4, 2); // -4*x^2
p.addTerm(9, 0); // 9

// find the roots
var r1 = p.findRoot(1, 5E-15, 100);
var r2 = p.findRoot(-1, 5E-15, 100);

// get the derivative
q = p.getDerivative();

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"derivative: " + q + "\n" +
	"value in 2: " + p.getValue(2) + "\n" +
	"derivative in 2: " + p.getDerivativeValue(2) + "\n" +
	"root near 1: " + r1 + "\n" +
	"root near -1: " + r2,
	"Ok"
);

// set q to zero
q.setToZero();

// make a copy of p, then add 1 and multiply by 3*x^2
var s = plugins.amortization.newPolynomial(p);
s.addTerm(1, 0); // add 1
s.multiplyByTerm(3, 2); // mulitply by 3*x^2

// make a copy of s and add p
var t = plugins.amortization.newPolynomial(s);
t.addPolynomial(p);

// make a copy of s and multiply by p
var u = plugins.amortization.newPolynomial(s);
u.multiplyByPolynomial(p);

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"polynomial: " + s + "\n" +
	"sum: " + t + "\n" +
	"sum in 2: " + p.getValue(2) + " + " + s.getValue(2) + " = " + t.getValue(2) + "\n" +
	"product: " + u + "\n" +
	"product in 2: " + p.getValue(2) + " * " + s.getValue(2) + " = " + u.getValue(2) + "\n",
	"Ok"
);]]></sample>
        </function>
        <function name="newPolynomial">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          <description><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></description>
          <summary><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></summary>
          <sample><![CDATA[// create a new polynomial
var p = plugins.amortization.newPolynomial();

// make the polynomial -4*x^2 + 9
p.addTerm(-4, 2); // -4*x^2
p.addTerm(9, 0); // 9

// find the roots
var r1 = p.findRoot(1, 5E-15, 100);
var r2 = p.findRoot(-1, 5E-15, 100);

// get the derivative
q = p.getDerivative();

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"derivative: " + q + "\n" +
	"value in 2: " + p.getValue(2) + "\n" +
	"derivative in 2: " + p.getDerivativeValue(2) + "\n" +
	"root near 1: " + r1 + "\n" +
	"root near -1: " + r2,
	"Ok"
);

// set q to zero
q.setToZero();

// make a copy of p, then add 1 and multiply by 3*x^2
var s = plugins.amortization.newPolynomial(p);
s.addTerm(1, 0); // add 1
s.multiplyByTerm(3, 2); // mulitply by 3*x^2

// make a copy of s and add p
var t = plugins.amortization.newPolynomial(s);
t.addPolynomial(p);

// make a copy of s and multiply by p
var u = plugins.amortization.newPolynomial(s);
u.multiplyByPolynomial(p);

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"polynomial: " + s + "\n" +
	"sum: " + t + "\n" +
	"sum in 2: " + p.getValue(2) + " + " + s.getValue(2) + " = " + t.getValue(2) + "\n" +
	"product: " + u + "\n" +
	"product in 2: " + p.getValue(2) + " * " + s.getValue(2) + " = " + u.getValue(2) + "\n",
	"Ok"
);]]></sample>
          <parameters>
            <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
          </parameters>
        </function>
        <function name="nextDate">
          <argumentsTypes>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description/>
          <sample><![CDATA[//Helper method to get the next date when a period is given;
//valid periods are:
//PERIOD_ANNUALY : 1
//PERIOD_BI_ANNUALLY : 2
//PERIOD_BI_MONTHLY : 365
//PERIOD_FOUR_MONTHLY : 3
//PERIOD_FOUR_WEEKLY : 13
//PERIOD_MONTHLY : 12
//PERIOD_QUARTERLY : 4
//PERIOD_TWO_MONTHLY : 6
//PERIOD_TWO_WEEKLY : 26
//PERIOD_WEEKLY : 52
var a_next_date = plugins.amortization.nextDate(new Date(2005, 1, 28),12,31);

//Sample to calculate intervals between 2 dates;
var startday = 31;
var d_start = new Date(2005, 1, 28)
var d_end = new Date(2005, 11, 20)
var allDates = new Array();
var next = d_start;
//loop over months
while (next.getTime() < d_end.getTime())
{
	next = plugins.amortization.nextDate(next,12,startday)
	allDates[allDates.length] = next;
}
if (allDates.length > 0) allDates.length = allDates.length-1 //clear was one to far
//now check how many days are left
if (allDates.length > 0)
{
	next = allDates[allDates.length-1]
}
else
{
	next = d_start;
}
var days = 0;
//loop over days
while (next.getTime() < d_end.getTime() || next.getDate() < d_end.getDate())
{
	next = plugins.amortization.nextDate(next,365,startday)
	days++;
}
//add total days
allDates[allDates.length] = '(and) '+days+' days'
//make array textual to show
application.output( allDates.join('\n') );]]></sample>
          <parameters>
            <parameter name="start_date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="dialogs" qualifiedName="com.servoy.extensions.plugins.dialog.DialogProvider" scriptingName="plugins.dialogs" servoyMobile="true">
      <functions>
        <function deprecated="true" name="showDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by #showWarningDialog(String,String,String[]).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="showDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by #showWarningDialog(String,String,String[]).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
            <parameter name="buttonsText" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array of button texts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showErrorDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showErrorDialog('Title', 'Value not allowed','OK');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
            <parameter name="buttonsText" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array of button texts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showInfoDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showInfoDialog('Title', 'Value not allowed','OK');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
            <parameter name="buttonsText" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array of button texts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showInputDialog">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows an input dialog where the user can enter data. Returns the entered data, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows an input dialog where the user can enter data.]]></summary>
          <sample><![CDATA[//show input dialog ,returns nothing when canceled 
var typedInput = plugins.dialogs.showInputDialog('Specify','Your name');]]></sample>
        </function>
        <function name="showInputDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows an input dialog where the user can enter data. Returns the entered data, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows an input dialog where the user can enter data.]]></summary>
          <sample><![CDATA[//show input dialog ,returns nothing when canceled 
var typedInput = plugins.dialogs.showInputDialog('Specify','Your name');]]></sample>
          <parameters>
            <parameter name="dialog_title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="showInputDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows an input dialog where the user can enter data. Returns the entered data, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows an input dialog where the user can enter data.]]></summary>
          <sample><![CDATA[//show input dialog ,returns nothing when canceled 
var typedInput = plugins.dialogs.showInputDialog('Specify','Your name');]]></sample>
          <parameters>
            <parameter name="dialog_title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="showInputDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows an input dialog where the user can enter data. Returns the entered data, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows an input dialog where the user can enter data.]]></summary>
          <sample><![CDATA[//show input dialog ,returns nothing when canceled 
var typedInput = plugins.dialogs.showInputDialog('Specify','Your name');]]></sample>
          <parameters>
            <parameter name="dialog_title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="initialValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="showQuestionDialog" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showQuestionDialog('Title', 'Value not allowed','OK');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showQuestionDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showQuestionDialog('Title', 'Value not allowed','OK');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
            <parameter name="buttonsText" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array of button texts.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showSelectDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a selection dialog, where the user can select an entry from a list of options. Returns the selected entry, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows a selection dialog, where the user can select an entry from a list of options.]]></summary>
          <sample><![CDATA[//show select,returns nothing when canceled 
var selectedValue = plugins.dialogs.showSelectDialog('Select','please select a name','jan','johan','sebastiaan');
//also possible to pass array with options
//var selectedValue = plugins.dialogs.showSelectDialog('Select','please select a name', new Array('jan','johan','sebastiaan'));]]></sample>
          <parameters>
            <parameter name="dialog_title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="optionArray" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="showSelectDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a selection dialog, where the user can select an entry from a list of options. Returns the selected entry, or nothing when canceled.]]></description>
          <summary><![CDATA[Shows a selection dialog, where the user can select an entry from a list of options.]]></summary>
          <sample><![CDATA[//show select,returns nothing when canceled 
var selectedValue = plugins.dialogs.showSelectDialog('Select','please select a name','jan','johan','sebastiaan');
//also possible to pass array with options
//var selectedValue = plugins.dialogs.showSelectDialog('Select','please select a name', new Array('jan','johan','sebastiaan'));]]></sample>
          <parameters>
            <parameter name="dialog_title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="msg" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="options" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function name="showWarningDialog" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showWarningDialog('Title', 'Value not allowed');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showWarningDialog" varargs="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></description>
          <summary><![CDATA[Shows a message dialog with the specified title, message and a customizable set of buttons.]]></summary>
          <sample><![CDATA[//show dialog
var thePressedButton = plugins.dialogs.showWarningDialog('Title', 'Value not allowed','OK');]]></sample>
          <parameters>
            <parameter name="dialogTitle" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
            <parameter name="dialogMessage" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog message.]]></description>
            </parameter>
            <parameter name="buttonsText" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[Array of button texts.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="excelxport" qualifiedName="com.servoy.extensions.plugins.excelxport.Enabler" scriptingName="plugins.excelxport">
      <properties>
        <property name="exportEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable the export feature of this plugin.]]></description>
          <summary><![CDATA[Enable the export feature of this plugin.]]></summary>
          <sample><![CDATA[plugins.excelxport.exportEnabled = true;
var isEnabled = plugins.excelxport.exportEnabled;]]></sample>
        </property>
        <property name="importEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable the import feature of this plugin.]]></description>
          <summary><![CDATA[Enable the import feature of this plugin.]]></summary>
          <sample><![CDATA[plugins.excelxport.importEnabled = true;
var isEnabled = plugins.excelxport.importEnabled;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="excelExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Export to Excel data]]></description>
          <summary><![CDATA[Export to Excel data]]></summary>
          <sample><![CDATA[//export in new byte array
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name']);
//export by adding to templateXLS in default (new) 'Servoy Data' worksheet
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS);
//export by adding to templateXLS, in 'mySheet' worksheet, starting at default(1/1) row/column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet');
//export by adding to templateXLS, in 'mySheet' worksheet, starting at 3rd row and 5th column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet',3,5);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset on which to export]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="excelExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Export to Excel data]]></description>
          <summary><![CDATA[Export to Excel data]]></summary>
          <sample><![CDATA[//export in new byte array
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name']);
//export by adding to templateXLS in default (new) 'Servoy Data' worksheet
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS);
//export by adding to templateXLS, in 'mySheet' worksheet, starting at default(1/1) row/column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet');
//export by adding to templateXLS, in 'mySheet' worksheet, starting at 3rd row and 5th column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet',3,5);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset on which to export]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="templateXLS" type="byte[]" typecode="[B">
              <description><![CDATA[the xls template to export in]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="excelExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Export to Excel data]]></description>
          <summary><![CDATA[Export to Excel data]]></summary>
          <sample><![CDATA[//export in new byte array
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name']);
//export by adding to templateXLS in default (new) 'Servoy Data' worksheet
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS);
//export by adding to templateXLS, in 'mySheet' worksheet, starting at default(1/1) row/column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet');
//export by adding to templateXLS, in 'mySheet' worksheet, starting at 3rd row and 5th column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet',3,5);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset on which to export]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="templateXLS" type="byte[]" typecode="[B">
              <description><![CDATA[the xls template to export in]]></description>
            </parameter>
            <parameter name="sheetName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the worksheet]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="excelExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Export to Excel data]]></description>
          <summary><![CDATA[Export to Excel data]]></summary>
          <sample><![CDATA[//export in new byte array
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name']);
//export by adding to templateXLS in default (new) 'Servoy Data' worksheet
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS);
//export by adding to templateXLS, in 'mySheet' worksheet, starting at default(1/1) row/column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet');
//export by adding to templateXLS, in 'mySheet' worksheet, starting at 3rd row and 5th column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet',3,5);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset on which to export]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="templateXLS" type="byte[]" typecode="[B">
              <description><![CDATA[the xls template to export in]]></description>
            </parameter>
            <parameter name="sheetName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the worksheet]]></description>
            </parameter>
            <parameter name="startRow" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[row in the foundset at which to start the export]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="excelExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Export to Excel data]]></description>
          <summary><![CDATA[Export to Excel data]]></summary>
          <sample><![CDATA[//export in new byte array
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name']);
//export by adding to templateXLS in default (new) 'Servoy Data' worksheet
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS);
//export by adding to templateXLS, in 'mySheet' worksheet, starting at default(1/1) row/column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet');
//export by adding to templateXLS, in 'mySheet' worksheet, starting at 3rd row and 5th column
var bytes = plugins.excelxport.excelExport(forms.form1.foundset, ['id','name'],templateXLS, 'mySheet',3,5);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset on which to export]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="templateXLS" type="byte[]" typecode="[B">
              <description><![CDATA[the xls template to export in]]></description>
            </parameter>
            <parameter name="sheetName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the worksheet]]></description>
            </parameter>
            <parameter name="startRow" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[row in the foundset at which to start the export]]></description>
            </parameter>
            <parameter name="startColumn" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[column in the foundset at which to start the export]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="file" qualifiedName="com.servoy.extensions.plugins.file.FileProvider" scriptingName="plugins.file">
      <functions>
        <function name="appendToTXTFile" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if appending worked]]></return>
          <description><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></description>
          <summary><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></summary>
          <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to append to the file]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="appendToTXTFile" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if appending worked]]></return>
          <description><![CDATA[Appends a string given in parameter to a file, using the specified encoding.]]></description>
          <summary><![CDATA[Appends a string given in parameter to a file, using the specified encoding.]]></summary>
          <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to append to the file]]></description>
            </parameter>
            <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the encoding to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="appendToTXTFile" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if appending worked]]></return>
          <description><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></description>
          <summary><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></summary>
          <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to append to the file]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="appendToTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description/>
          <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to append to the file]]></description>
            </parameter>
            <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the encoding to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="convertStringToJSFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[returns a JSFile for the given string]]></description>
          <summary><![CDATA[returns a JSFile for the given string]]></summary>
          <deprecated><![CDATA[Replaced by #convertToJSFile(Object).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="convertToJSFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"><![CDATA[JSFile]]></return>
          <description><![CDATA[Returns a JSFile instance corresponding to an alternative representation of a file (for example a string).]]></description>
          <summary><![CDATA[Returns a JSFile instance corresponding to an alternative representation of a file (for example a string).]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile("story.txt");
if (f.canRead())
	application.output("File can be read.");]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="convertToRemoteJSFile" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"><![CDATA[the JSFile]]></return>
          <description><![CDATA[Convenience return to get a JSFile representation of a server file based on its path.]]></description>
          <summary><![CDATA[Convenience return to get a JSFile representation of a server file based on its path.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToRemoteJSFile('/story.txt');
if (f && f.canRead())
	application.output('File can be read.');]]></sample>
          <parameters>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path representing a file on the server (should start with "/")]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="copyFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Copies the source file to the destination file. Returns true if the copy succeeds, false if any error occurs.]]></description>
          <summary><![CDATA[Copies the source file to the destination file.]]></summary>
          <sample><![CDATA[// Copy based on file names.
if (!plugins.file.copyFile("story.txt", "story.txt.copy"))
	application.output("Copy failed.");
// Copy based on JSFile instances.
var f = plugins.file.createFile("story.txt");
var fcopy = plugins.file.createFile("story.txt.copy2");
if (!plugins.file.copyFile(f, fcopy))
	application.output("Copy failed.");]]></sample>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="copyFolder">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[success boolean]]></return>
          <description><![CDATA[Copies the sourcefolder to the destination folder, recursively. Returns true if the copy succeeds, false if any error occurs.]]></description>
          <summary><![CDATA[Copies the sourcefolder to the destination folder, recursively.]]></summary>
          <sample><![CDATA[// Copy folder based on names.
if (!plugins.file.copyFolder("stories", "stories_copy"))
	application.output("Folder copy failed.");
// Copy folder based on JSFile instances.
var d = plugins.file.createFile("stories");
var dcopy = plugins.file.createFile("stories_copy_2");
if (!plugins.file.copyFolder(d, dcopy))
	application.output("Folder copy failed.");]]></sample>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="createFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Creates a JSFile instance. Does not create the file on disk.]]></description>
          <summary><![CDATA[Creates a JSFile instance.]]></summary>
          <sample><![CDATA[// Create the JSFile instance based on the file name.
var f = plugins.file.createFile("newfile.txt");
// Create the file on disk.
if (!f.createNewFile())
	application.output("The file could not be created.");]]></sample>
          <parameters>
            <parameter name="targetFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="createFolder">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Creates a folder on disk. Returns true if the folder is successfully created, false if any error occurs.]]></description>
          <summary><![CDATA[Creates a folder on disk.]]></summary>
          <sample><![CDATA[var d = plugins.file.convertToJSFile("newfolder");
if (!plugins.file.createFolder(d))
	application.output("Folder could not be created.");]]></sample>
          <parameters>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="createTempFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Creates a temporary file on disk. A prefix and an extension are specified and they will be part of the file name.]]></description>
          <summary><![CDATA[Creates a temporary file on disk.]]></summary>
          <sample><![CDATA[var tempFile = plugins.file.createTempFile('myfile','.txt');
application.output('Temporary file created as: ' + tempFile.getAbsolutePath());
plugins.file.writeTXTFile(tempFile, 'abcdefg');]]></sample>
          <parameters>
            <parameter name="prefix" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="suffix" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="deleteFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Removes a file from disk. Returns true on success, false otherwise.]]></description>
          <summary><![CDATA[Removes a file from disk.]]></summary>
          <sample><![CDATA[if (plugins.file.deleteFile('story.txt'))
	application.output('File deleted.');]]></sample>
          <parameters>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="deleteFolder">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Deletes a folder from disk recursively. Returns true on success, false otherwise. If the second parameter is set to true, then a warning will be issued to the user before actually removing the folder.]]></description>
          <summary><![CDATA[Deletes a folder from disk recursively.]]></summary>
          <sample><![CDATA[if (plugins.file.deleteFolder('stories', true))
	application.output('Folder deleted.');]]></sample>
          <parameters>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="showWarning" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="getDefaultUploadLocation">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the location as canonical path]]></return>
          <description><![CDATA[Returns the default upload location path of the server.]]></description>
          <summary><![CDATA[Returns the default upload location path of the server.]]></summary>
          <sample><![CDATA[// get the (server-side) default upload location path:
var serverPath = plugins.file.getDefaultUploadLocation();]]></sample>
        </function>
        <function name="getDesktopFolder">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Returns a JSFile instance that corresponds to the Desktop folder of the currently logged in user.]]></description>
          <summary><![CDATA[Returns a JSFile instance that corresponds to the Desktop folder of the currently logged in user.]]></summary>
          <sample><![CDATA[var d = plugins.file.getDesktopFolder();
application.output('desktop folder is: ' + d.getAbsolutePath());]]></sample>
        </function>
        <function name="getDiskList">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an Array of JSFile instances correponding to the file system root folders.]]></description>
          <summary><![CDATA[Returns an Array of JSFile instances correponding to the file system root folders.]]></summary>
          <sample><![CDATA[var roots = plugins.file.getDiskList();
for (var i = 0; i < roots.length; i++)
	application.output(roots[i].getAbsolutePath());]]></sample>
        </function>
        <function name="getFileSize">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
          <description><![CDATA[Returns the size of the specified file.]]></description>
          <summary><![CDATA[Returns the size of the specified file.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
application.output('file size: ' + plugins.file.getFileSize(f));]]></sample>
          <parameters>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile object.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
            <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=locked, 2=nonlocked]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File path.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
          <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
            <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=locked, 2=nonlocked]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="getHomeDirectory">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getHomeFolder().]]></deprecated>
          <sample/>
        </function>
        <function name="getHomeFolder">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Returns a JSFile instance corresponding to the home folder of the logged in used.]]></description>
          <summary><![CDATA[Returns a JSFile instance corresponding to the home folder of the logged in used.]]></summary>
          <sample><![CDATA[var d = plugins.file.getHomeFolder();
application.output('home folder: ' + d.getAbsolutePath());]]></sample>
        </function>
        <function name="getModificationDate">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          <description><![CDATA[Returns the modification date of a file.]]></description>
          <summary><![CDATA[Returns the modification date of a file.]]></summary>
          <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
application.output('last changed: ' + plugins.file.getModificationDate(f));]]></sample>
          <parameters>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="getRemoteFolderContents" since="Servoy 5.2.1">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Folder as JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Folder as JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Folder as JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Folder as JSFile object.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
            <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=locked, 2=nonlocked]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Folder path.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Folder path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Folder path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Folder path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRemoteFolderContents">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
          <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
          <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
          <parameters>
            <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Folder path.]]></description>
            </parameter>
            <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[Filter or array of filters for files in folder.]]></description>
            </parameter>
            <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=files, 2=dirs]]></description>
            </parameter>
            <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=visible, 2=nonvisible]]></description>
            </parameter>
            <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[1=locked, 2=nonlocked]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="getRemoteList" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Retrieves an array of files/folders from the server]]></description>
          <summary><![CDATA[Retrieves an array of files/folders from the server]]></summary>
          <deprecated><![CDATA[Replaced by #getRemoteFolderContents(Object,Object,Number,Number,Number).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="serverPath" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the path of a remote directory (relative to the defaultFolder)]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="getRemoteList" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
          <description><![CDATA[Retrieves an array of files/folders from the server]]></description>
          <summary><![CDATA[Retrieves an array of files/folders from the server]]></summary>
          <deprecated><![CDATA[Replaced by #getRemoteFolderContents(Object,Object,Number,Number,Number).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="serverPath" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[a JSFile or String with the path of a remote directory (relative to the defaultFolder)]]></description>
            </parameter>
            <parameter name="filesOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[if true only files will be retrieve, if false, files and folders will be retrieved]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="moveFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Moves the file from the source to the destination place. Returns true on success, false otherwise.]]></description>
          <summary><![CDATA[Moves the file from the source to the destination place.]]></summary>
          <sample><![CDATA[// Move file based on names.
if (!plugins.file.moveFile('story.txt','story.txt.new'))
	application.output('File move failed.');
// Move file based on JSFile instances.
var f = plugins.file.convertToJSFile('story.txt.new');
var fmoved = plugins.file.convertToJSFile('story.txt');
if (!plugins.file.moveFile(f, fmoved))
	application.output('File move back failed.');]]></sample>
          <parameters>
            <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="readFile">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
          <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
        </function>
        <function name="readFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
          <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="long"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
          <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile.]]></description>
            </parameter>
            <parameter name="size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long">
              <description><![CDATA[Number of bytes to read.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
          <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="long"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
          <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path.]]></description>
            </parameter>
            <parameter name="size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long">
              <description><![CDATA[Number of bytes to read.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readTXTFile">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Read all content from a text file.]]></summary>
          <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
        </function>
        <function name="readTXTFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Read all content from a text file.]]></summary>
          <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readTXTFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Read all content from a text file.]]></summary>
          <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Read all content from a text file.]]></summary>
          <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="readTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
          <summary><![CDATA[Read all content from a text file.]]></summary>
          <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showDirectorySelectDialog">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a directory selector dialog.]]></description>
          <summary><![CDATA[Shows a directory selector dialog.]]></summary>
          <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
        </function>
        <function name="showDirectorySelectDialog">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a directory selector dialog.]]></description>
          <summary><![CDATA[Shows a directory selector dialog.]]></summary>
          <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="directory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Default directory as JSFile.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showDirectorySelectDialog">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a directory selector dialog.]]></description>
          <summary><![CDATA[Shows a directory selector dialog.]]></summary>
          <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="directory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[Default directory as JSFile.]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showDirectorySelectDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a directory selector dialog.]]></description>
          <summary><![CDATA[Shows a directory selector dialog.]]></summary>
          <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="directory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default directory as file path.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showDirectorySelectDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a directory selector dialog.]]></description>
          <summary><![CDATA[Shows a directory selector dialog.]]></summary>
          <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="directory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Default directory as file path.]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder; null=default/previous]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder, null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder, null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The tile of the dialog]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile instance of default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder; null=default/previous]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder, null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder, null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[A filter or array of filters on the folder files.]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The tile of the dialog]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
              <description><![CDATA[true/false]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Path to default folder,null=default/previous]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
              <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
            </parameter>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileOpenDialog">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
          <summary><![CDATA[Shows a file open dialog.]]></summary>
          <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,mycallbackfunction,'Select some nice files')]]></sample>
          <parameters>
            <parameter name="callbackfunction" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[A function that takes the (JSFile) array of the selected files as first argument]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileSaveDialog">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a file save dialog.]]></description>
          <summary><![CDATA[Shows a file save dialog.]]></summary>
          <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
        </function>
        <function name="showFileSaveDialog">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a file save dialog.]]></description>
          <summary><![CDATA[Shows a file save dialog.]]></summary>
          <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="fileNameDir" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile to save.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileSaveDialog">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a file save dialog.]]></description>
          <summary><![CDATA[Shows a file save dialog.]]></summary>
          <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="fileNameDir" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile to save]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileSaveDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a file save dialog.]]></description>
          <summary><![CDATA[Shows a file save dialog.]]></summary>
          <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="fileNameDir" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File (give as file path) to save.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFileSaveDialog">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
          <description><![CDATA[Shows a file save dialog.]]></description>
          <summary><![CDATA[Shows a file save dialog.]]></summary>
          <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
          <parameters>
            <parameter name="fileNameDir" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[File to save (specified as file path)]]></description>
            </parameter>
            <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Dialog title.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesFromServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Stream 1 or more file from the server to the client.]]></description>
          <summary><![CDATA[Stream 1 or more file from the server to the client.]]></summary>
          <sample><![CDATA[// transfer all the files of a chosen server folder to a directory on the client
var dir = plugins.file.showDirectorySelectDialog();
if (dir) {
	var list = plugins.file.getRemoteFolderContents('/images/user1/', null, 1);
	if (list) {
		var monitor = plugins.file.streamFilesFromServer(dir, list, callbackFunction);
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed into (can be a String path a JSFile) or an Array of these]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the files on the server that will be transfered to the client, can be a String or a String[]]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesFromServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Stream 1 or more files from the server to the client, the callback method is invoked after every file, with as argument
the filename that was transfered. An extra second exception parameter can be given if an exception did occur.]]></description>
          <summary><![CDATA[Stream 1 or more files from the server to the client, the callback method is invoked after every file, with as argument
the filename that was transfered.]]></summary>
          <sample><![CDATA[// transfer all the files of a chosen server folder to a directory on the client
var dir = plugins.file.showDirectorySelectDialog();
if (dir) {
	var list = plugins.file.getRemoteFolderContents('/images/user1/', null, 1);
	if (list) {
		var monitor = plugins.file.streamFilesFromServer(dir, list, callbackFunction);
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed into (can be a String path or a JSFile) or an Array of these]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the files on the server that will be transfered to the client, can be a JSFile or JSFile[], a String or String[]]]></description>
            </parameter>
            <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the Function to be called back at the end of the process (for every file); the callback function is invoked with argument the filename that was transfered; an extra second exception parameter can be given if an exception occured]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesToServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Overloaded method, only defines file(s) to be streamed]]></description>
          <summary><![CDATA[Overloaded method, only defines file(s) to be streamed]]></summary>
          <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed (can be a String path or a JSFile) or an Array of these]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesToServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></description>
          <summary><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></summary>
          <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed (can be a String path or a JSFile) or an Array of these]]></description>
            </parameter>
            <parameter name="o" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[can be a JSFile or JSFile[], a String or String[], representing the file name(s) to use on the server]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesToServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Overloaded method, defines file(s) to be streamed, a callback function and file name(s) to use on the server]]></description>
          <summary><![CDATA[Overloaded method, defines file(s) to be streamed, a callback function and file name(s) to use on the server]]></summary>
          <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed (can be a String path or a JSFile) or an Array of these)]]></description>
            </parameter>
            <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[can be a JSFile or JSFile[], a String or String[], representing the file name(s) to use on the server]]></description>
            </parameter>
            <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the Function to be called back at the end of the process (for every file); the callback function is invoked with argument the filename that was transfered; an extra second exception parameter can be given if an exception occured]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="streamFilesToServer" since="Servoy 5.2">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
          <description><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></description>
          <summary><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></summary>
          <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file(s) to be streamed (can be a String path or a JSFile) or an Array of these]]></description>
            </parameter>
            <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the Function to be called back at the end of the process (for every file); the callback function is invoked with argument the filename that was transfered; an extra second exception parameter can be given if an exception occured]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a binary file. (Web Enabled: file parameter can be a string 'mypdffile.pdf' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a binary file.]]></summary>
          <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the data to be written]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a binary file. (Web Enabled: file parameter can be a string 'mypdffile.pdf' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a binary file.]]></summary>
          <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the data to be written]]></description>
            </parameter>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mime type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description/>
          <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the data to be written]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a binary file. (Web Enabled: file parameter can be a string 'mypdffile.pdf' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a binary file.]]></summary>
          <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
          <parameters>
            <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the data to be written]]></description>
            </parameter>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the mime type]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[JSFile]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Content type (used only on web).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The file path.]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The file path.]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeTXTFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into a text file.]]></summary>
          <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The file path.]]></description>
            </parameter>
            <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Text to be written.]]></description>
            </parameter>
            <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Charset name.]]></description>
            </parameter>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[Content type (used only on web).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeXMLFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into an XML file.]]></summary>
          <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the xml data to write]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeXMLFile">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into an XML file.]]></summary>
          <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile">
              <description><![CDATA[a local JSFile]]></description>
            </parameter>
            <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the xml data to write]]></description>
            </parameter>
            <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified encoding]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeXMLFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into an XML file.]]></summary>
          <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the xml data to write]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="writeXMLFile">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
          <summary><![CDATA[Writes data into an XML file.]]></summary>
          <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
          <parameters>
            <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file path as a String]]></description>
            </parameter>
            <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the xml data to write]]></description>
            </parameter>
            <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the specified encoding]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="headlessclient" qualifiedName="com.servoy.extensions.plugins.headlessclient.HeadlessClientProvider" scriptingName="plugins.headlessclient">
      <functions>
        <function name="createClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
          <description><![CDATA[Creates a headless client on the server that will open the given solution.
The clientId of this client can be stored in the database to be shared between clients so that that specific client can be used 
over multiply clients later on or picked up later on by this client. (Even after restart of this client) 

NOTE: in the developer this will only load the solution in debug mode when it is the current active solution or a module of the active solution;
you can load any solution from the workspace when you pass "nodebug" as last argument in the arguments list (it should still use the same resources project).
But then you won't be able to debug it, breakpoints won't hit.]]></description>
          <summary><![CDATA[Creates a headless client on the server that will open the given solution.]]></summary>
          <sample><![CDATA[// Creates a headless client that will open the given solution.
var headlessClient = plugins.headlessclient.createClient("someSolution", "user", "pass", null);
if (headlessClient != null && headlessClient.isValid()) { 
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	headlessClient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          <parameters>
            <parameter name="solutionName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="solutionOpenMethodArgs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="getClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
          <description><![CDATA[Gets an existing headless client for the given client uuid.]]></description>
          <summary><![CDATA[Gets an existing headless client for the given client uuid.]]></summary>
          <sample><![CDATA[// Gets an existing headless client for the given client uuid.
var headlessClient = plugins.headlessclient.getClient("clientID");
if (headlessClient != null && headlessClient.isValid()) {
	 headlessClient.queueMethod(null, "someRemoteMethod", null, callback);
}]]></sample>
          <parameters>
            <parameter name="clientID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getOrCreateClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"><![CDATA[An existing JSClient or the JSClient that is created.]]></return>
          <description><![CDATA[This will try to get a existing client by the given id if that client is already created for that specific solution;
it will create a headless client on the server that will open the given solution if it didn't exists yet.

If the client does exist but it is not loaded with that solution an exception will be thrown.

NOTE: in the developer this will only load the solution in debug mode when it is the current active solution or a module of the active solution;
you can load any solution from the workspace when you pass "nodebug" as last argument in the arguments list (it should still use the same resources project).
But then you won't be able to debug it, breakpoints won't hit.]]></description>
          <summary><![CDATA[This will try to get a existing client by the given id if that client is already created for that specific solution;
it will create a headless client on the server that will open the given solution if it didn't exists yet.]]></summary>
          <sample><![CDATA[// Creates a headless client that will open the given solution.
var storedSolutionSpecificID = "aaaabbbbccccc1111";
var headlessClient = plugins.headlessclient.getOrCreateClient(storedSolutionSpecificID, "someSolution", "user", "pass", null);
if (headlessClient != null && headlessClient.isValid()) { 
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	headlessClient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          <parameters>
            <parameter name="clientId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The id of the client if it already exists, or it will be the id of the client if it will be created.]]></description>
            </parameter>
            <parameter name="solutionname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The solution to load]]></description>
            </parameter>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The user name that is used to login to the solution]]></description>
            </parameter>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The password for the user]]></description>
            </parameter>
            <parameter name="solutionOpenMethodArgs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[The arguments that will be passed to the solution open method.]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="http" qualifiedName="com.servoy.extensions.plugins.http.HttpProvider" scriptingName="plugins.http">
      <functions>
        <function deprecated="true" name="createHttpClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Get or create an http client.]]></description>
          <summary><![CDATA[Get or create an http client.]]></summary>
          <deprecated><![CDATA[Replaced by #createNewHttpClient().]]></deprecated>
          <sample><![CDATA[var client = plugins.http.createHttpClient();]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createNewHttpClient">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.http.HttpClient" typecode="com.servoy.extensions.plugins.http.HttpClient"/>
          <description><![CDATA[Create an http client (like a web browser with session binding) usable todo multiple request/posts in same server session.]]></description>
          <summary><![CDATA[Create an http client (like a web browser with session binding) usable todo multiple request/posts in same server session.]]></summary>
          <sample><![CDATA[var client = plugins.http.createNewHttpClient();]]></sample>
        </function>
        <function deprecated="true" name="deleteHttpClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Delete a named http client.]]></description>
          <summary><![CDATA[Delete a named http client.]]></summary>
          <deprecated><![CDATA[Obsolete method, HttpClient mechanism has changed.]]></deprecated>
          <sample><![CDATA[plugins.http.deleteHttpClient('mybrowser');]]></sample>
          <parameters>
            <parameter name="http_clientname"/>
          </parameters>
        </function>
        <function deprecated="true" name="getHttpClientCookie">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Cookie" typecode="com.servoy.extensions.plugins.http.Cookie"/>
          <description><![CDATA[Get cookie object from the specified client.]]></description>
          <summary><![CDATA[Get cookie object from the specified client.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
          <sample><![CDATA[var cookie = plugins.http.getHttpClientCookie('clientName', 'JSESSIONID');
if (cookie != null)
{
	// do something
}
else
	plugins.http.setHttpClientCookie('clientName', 'JSESSIONID', 'abc', 'localhost', '/', -1, false)]]></sample>
          <parameters>
            <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getHttpClientCookies">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.Cookie[]" typecode="[Lcom.servoy.extensions.plugins.http.Cookie;"/>
          <description><![CDATA[Returns a Cookie array with all the cookies set on the specified client.]]></description>
          <summary><![CDATA[Returns a Cookie array with all the cookies set on the specified client.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
          <sample><![CDATA[var cookies = plugins.http.getHttpClientCookies('clientName')]]></sample>
          <parameters>
            <parameter name="clientName"/>
          </parameters>
        </function>
        <function deprecated="true" name="getLastPageCharset">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get the charset of the last page received with getPageData(...)]]></description>
          <summary><![CDATA[Get the charset of the last page received with getPageData(.]]></summary>
          <deprecated><![CDATA[Obsolete method.]]></deprecated>
          <sample><![CDATA[var a = plugins.http.getPageData('http://www.google.com.hk');
var charset = plugins.http.getLastPageCharset();
var success = plugins.file.writeTXTFile('someFilePath', a, charset);
if (!success) plugins.dialogs.showWarningDialog('Warning', 'Could not write file', 'OK');]]></sample>
        </function>
        <function deprecated="true" name="getLastPageEncoding">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Obsolete method.]]></deprecated>
          <sample/>
        </function>
        <function name="getMediaData">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Get media (binary data) such as images in a variable. It also supports gzip-ed content.
If this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
          <summary><![CDATA[Get media (binary data) such as images in a variable.]]></summary>
          <sample><![CDATA[var image_byte_array = plugins.http.getMediaData('http://www.cnn.com/cnn.gif');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getMediaData">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Get media (binary data) such as images in a variable. It also supports gzip-ed content.
If this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
          <summary><![CDATA[Get media (binary data) such as images in a variable.]]></summary>
          <deprecated><![CDATA[Obsolete method.]]></deprecated>
          <sample><![CDATA[var image_byte_array = plugins.http.getMediaData('http://www.cnn.com/cnn.gif');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getPageData">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get all page html in a variable, if this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
          <summary><![CDATA[Get all page html in a variable, if this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></summary>
          <sample><![CDATA[// get data using a default connection
var pageData = plugins.http.getPageData('http://www.cnn.com');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getPageData">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get all page html in a variable (authentication only works with http client usage). A http client will be created/used.]]></description>
          <summary><![CDATA[Get all page html in a variable (authentication only works with http client usage).]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.createGetRequest(String)]]></deprecated>
          <sample><![CDATA[// create an http client and use it to get the data
var pageData = plugins.http.getPageData('http://www.cnn.com','myclient');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="httpClientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getPageData">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get all page html in a variable (authentication only works with http client usage). If name is provided a http client will be created/used.]]></description>
          <summary><![CDATA[Get all page html in a variable (authentication only works with http client usage).]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.createGetRequest(String)]]></deprecated>
          <sample><![CDATA[// create an http client and use it to get the data
var pageData = plugins.http.getPageData('http://www.admin.com','myclient','myuser','secret');]]></sample>
          <parameters>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="httpClientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getPoster">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.http.PostRequest" typecode="com.servoy.extensions.plugins.http.PostRequest"/>
          <description><![CDATA[Get poster object to do http (file) posts. If posting files, it will post multipart!]]></description>
          <summary><![CDATA[Get poster object to do http (file) posts.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient#createPostRequest(String).]]></deprecated>
          <sample><![CDATA[var poster = plugins.http.getPoster('http://www.abc.com/apply_form.jsp');
var didAddParam = poster.addParameter('myParamName','myValue');
var didAddFile = poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc');
var httpCode = poster.doPost('username','mypassword'); //httpCode 200 is ok
//var httpCode = poster.doPost('username','mypassword'); //use if authentication is needed
var pageData = poster.getPageData()]]></sample>
          <parameters>
            <parameter name="url"/>
            <parameter name="http_clientname" optional="true"/>
          </parameters>
        </function>
        <function deprecated="true" name="put">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Put a file at the specified URL.]]></description>
          <summary><![CDATA[Put a file at the specified URL.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.createPutRequest(String)]]></deprecated>
          <sample><![CDATA[var fileAdded = plugins.http.put('clientName', 'http://www.abc.com/put_stuff.jsp', 'manual.doc', 'c:/temp/manual_01a.doc')]]></sample>
          <parameters>
            <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="put">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Put a file at the specified URL, using authentication.]]></description>
          <summary><![CDATA[Put a file at the specified URL, using authentication.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.createPutRequest(String)]]></deprecated>
          <sample><![CDATA[var fileAdded = plugins.http.put('clientName', 'http://www.abc.com/put_stuff.jsp', 'manual.doc', 'c:/temp/manual_01a.doc', 'user', 'password')]]></sample>
          <parameters>
            <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="setClientProxyCredentials">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the proxy username and password. Used for named http clients (else use implicit java data).]]></description>
          <summary><![CDATA[Set the proxy username and password.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.setClientProxyCredentials(String,String)]]></deprecated>
          <sample><![CDATA[plugins.http.setClientProxyCredentials('my_proxy_username','my_proxy_password');]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="setClientProxyUserNamePassword">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Set the proxy username and password. Used for named http clients (else use implicit java data).]]></description>
          <summary><![CDATA[Set the proxy username and password.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient.setClientProxyCredentials(String,String)]]></deprecated>
          <sample><![CDATA[plugins.http.setClientProxyUserNamePassword('my_proxy_username','my_proxy_password');]]></sample>
          <parameters>
            <parameter name="username"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="setHttpClientCookie">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Add cookie to the specified client.]]></description>
          <summary><![CDATA[Add cookie to the specified client.]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
          <sample><![CDATA[var cookieSet = plugins.http.setHttpClientCookie('clientName', 'JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
          <parameters>
            <parameter name="clientName"/>
            <parameter name="cookieName"/>
            <parameter name="cookieValue"/>
            <parameter name="domain" optional="true"/>
            <parameter name="path" optional="true"/>
            <parameter name="maxAge" optional="true"/>
            <parameter name="secure" optional="true"/>
          </parameters>
        </function>
        <function deprecated="true" name="setTimeout">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></description>
          <summary><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></summary>
          <deprecated><![CDATA[Replaced by HttpClient#setTimeout(Object[]).]]></deprecated>
          <sample><![CDATA[plugins.http.setTimeout(1000,'client_name')]]></sample>
          <parameters>
            <parameter name="msTimeout"/>
            <parameter name="http_clientname" optional="true"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="images" qualifiedName="com.servoy.extensions.plugins.images.ImageProvider" scriptingName="plugins.images">
      <functions>
        <function deprecated="true" name="createJPGImage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Creates a javascript image from the given bean/applet/form_element.]]></description>
          <summary><![CDATA[Creates a javascript image from the given bean/applet/form_element.]]></summary>
          <deprecated><![CDATA[Replaced by #getImage(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[bean/imageObj/element]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="createJPGImage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Creates a javascript image from the given bean/applet/form_element.]]></description>
          <summary><![CDATA[Creates a javascript image from the given bean/applet/form_element.]]></summary>
          <deprecated><![CDATA[Replaced by #getImage(Object)]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="object" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[bean/imageObj/element]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="getImage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.images.JSImage" typecode="com.servoy.extensions.plugins.images.JSImage"/>
          <description><![CDATA[Get a javascript image/resource object for the given file/bytearray/bean/applet/form_element.]]></description>
          <summary><![CDATA[Get a javascript image/resource object for the given file/bytearray/bean/applet/form_element.]]></summary>
          <sample><![CDATA[var image = plugins.images.getImage(byteArray);
var height = image.getHeight();
var contentType = image.getContentType();
var scaled_image = image.resize(30, 30);

var snapshot_image = plugins.images.getImage(forms.companyReports.elements.employeesChartBean);
var tempFile = plugins.file.createTempFile('bean_snapshot','.jpg')
plugins.file.writeFile(tempFile, snapshot_image.getData())
application.setStatusText('Wrote file: '+tempFile)]]></sample>
          <parameters>
            <parameter name="object" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[file/byte_array/bean/applet/form_element]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="mail" qualifiedName="com.servoy.extensions.plugins.mail.client.MailProvider" scriptingName="plugins.mail">
      <functions>
        <function name="createBinaryAttachment">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
          <description><![CDATA[Creates a binary attachment object.]]></description>
          <summary><![CDATA[Creates a binary attachment object.]]></summary>
          <sample><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('logo1.gif',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createBinaryAttachment('logo2.gif',plugins.file.readFile('c:/temp/another_logo.gif'));
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.org>', 'subject', 'msgText',null,null,new Array(attachment1,attachment2));
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="binarydata" type="byte[]" typecode="[B"/>
          </parameters>
        </function>
        <function name="createBinaryAttachment">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
          <description><![CDATA[Creates a binary attachment object.]]></description>
          <summary><![CDATA[Creates a binary attachment object.]]></summary>
          <sample><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('logo1.gif',plugins.file.readFile('c:/temp/a_logo.gif', 'image/gif'));
var attachment2 = plugins.mail.createBinaryAttachment('logo2.gif',plugins.file.readFile('c:/temp/another_logo.gif', 'image/gif'));
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.org>', 'subject', 'msgText',null,null,new Array(attachment1,attachment2));
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="binarydata" type="byte[]" typecode="[B"/>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createTextAttachment">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
          <description><![CDATA[Creates a text based attachment objec with the default 'text/plain' mimetype]]></description>
          <summary><![CDATA[Creates a text based attachment objec with the default 'text/plain' mimetype]]></summary>
          <sample><![CDATA[var attachment = plugins.mail.createTextAttachment('readme.html','<html>bla bla bla');
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.com>', 'subject', 'msgText',null,null,attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="textdata" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="createTextAttachment">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
          <description><![CDATA[Creates a text based attachment object.]]></description>
          <summary><![CDATA[Creates a text based attachment object.]]></summary>
          <sample><![CDATA[var attachment = plugins.mail.createTextAttachment('readme.html','<html>bla bla bla', 'text/html');
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.com>', 'subject', 'msgText',null,null,attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="textdata" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="getLastSendMailException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getLastSendMailExceptionMsg()]]></deprecated>
          <sample/>
        </function>
        <function name="getLastSendMailExceptionMsg">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Get the exception that occurred in the last sendMail attempt (null if no exception occurred).]]></description>
          <summary><![CDATA[Get the exception that occurred in the last sendMail attempt (null if no exception occurred).]]></summary>
          <sample><![CDATA[var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.org', 'John Cobb <from_me@example.com>', 'subject', 'my message',null,'unnamed@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert',plugins.mail.getLastSendMailExceptionMsg(),'OK');
}]]></sample>
        </function>
        <function name="getMailMessage">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage" typecode="com.servoy.extensions.plugins.mail.client.MailMessage"/>
          <description><![CDATA[Helper method, returns MailMessage object from binary or 7bits string.]]></description>
          <summary><![CDATA[Helper method, returns MailMessage object from binary or 7bits string.]]></summary>
          <sample><![CDATA[var msg = plugins.mail.getMailMessage(myBlob);
if (msg != null) //if is null error occurred!
{
	application.output(msg.getFromAddresses())
}]]></sample>
          <parameters>
            <parameter name="binaryblob/string"/>
          </parameters>
        </function>
        <function name="getPlainMailAddresses">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Helper method to only get the plain addresses.]]></description>
          <summary><![CDATA[Helper method to only get the plain addresses.]]></summary>
          <sample><![CDATA[var plainArray = plugins.mail.getPlainMailAddresses('John Cobb <from_me@example.com>,Pete Cobb<from_pete@example.com>');
application.output(plainArray[0]) //will return 'from_me@example.com']]></sample>
          <parameters>
            <parameter name="addressesString"/>
          </parameters>
        </function>
        <function name="isValidEmailAddress">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Checks whether the given e-mail address is valid or not.]]></description>
          <summary><![CDATA[Checks whether the given e-mail address is valid or not.]]></summary>
          <sample><![CDATA[plugins.mail.isValidEmailAddress("me@example.com");]]></sample>
          <parameters>
            <parameter name="email" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="receiveMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description><![CDATA[Receive mails from pop3 account.]]></description>
          <summary><![CDATA[Receive mails from pop3 account.]]></summary>
          <sample><![CDATA[var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
		application.output(msg.getHtmlMsg())
		application.output(msg.getPlainMsg())
		var attachments = msg.getAttachments()
		if (attachments != null) 
		{
			for (var j = 0 ; j < attachments.length ; j++)
			{
				var attachment = attachments[j]
				application.output(attachment.getName())
				var attachmentDataByteArray = attachment.getData()
				//write attachmentDataByteArray to a file...
			}
		}
	}
}]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="receiveMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description><![CDATA[Receive mails from pop3 account.]]></description>
          <summary><![CDATA[Receive mails from pop3 account.]]></summary>
          <sample><![CDATA[var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  0);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
          </parameters>
        </function>
        <function name="receiveMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description><![CDATA[Receive mails from pop3 account.]]></description>
          <summary><![CDATA[Receive mails from pop3 account.]]></summary>
          <sample><![CDATA[//it is also possible to first receive the headers and later receive a full message with particular 'sentdate'
//var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  0,  theSentDateObjectFormPreviousHeaderLoading);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="receiveMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description><![CDATA[Receive mails from pop3 account.]]></description>
          <summary><![CDATA[Receive mails from pop3 account.]]></summary>
          <sample><![CDATA[//it is also possible to first receive the headers and later receive a full message
var receiveMode = 0;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var pop3Host = 'myserver.com';  
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  receiveMode,  null, pop3Host);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
		application.output(msg.getHtmlMsg())
		application.output(msg.getPlainMsg())
		var attachments = msg.getAttachments()
		if (attachments != null) 
		{
			for (var j = 0 ; j < attachments.length ; j++)
			{
				var attachment = attachments[j]
				application.output(attachment.getName())
				var attachmentDataByteArray = attachment.getData()
				//write attachmentDataByteArray to a file...
			}
		}
	}
}]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="pop3Host" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="receiveMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Number"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description><![CDATA[Receive mails from pop3 account.]]></description>
          <summary><![CDATA[Receive mails from pop3 account.]]></summary>
          <sample><![CDATA[var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS

var properties = new Array();
properties[0] = 'mail.pop3.port=995';
properties[1] = 'mail.pop3.ssl.enable=true';
properties[2] = 'mail.pop3.host=myserver.com';
properties[3] = 'mail.pop3.user=user@myserver.com';

var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  receiveMode,  null, properties);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
          <parameters>
            <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="properties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          </parameters>
        </function>
        <function deprecated="true" name="recieveMail">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
          <description/>
          <deprecated><![CDATA[Replaced by #receiveMail(String,String,Boolean,Number,Date,String[])]]></deprecated>
          <sample/>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>,replyTo@example.com', 'subject', msgText);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,'cc1@example.com,cc2@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
              <description><![CDATA[A single attachment]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
              <description><![CDATA[A single attachment]]></description>
            </parameter>
            <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The smtp host]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
              <description><![CDATA[A single attachment]]></description>
            </parameter>
            <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[An array of properties]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',[attachment1,attachment2]);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
              <description><![CDATA[The attachments]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
              <description><![CDATA[The attachments]]></description>
            </parameter>
            <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The smtp host]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendMail">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
          <summary><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
          <sample><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
          <parameters>
            <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A string with 1 address or multiply seperated by a comma.]]></description>
            </parameter>
            <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[A address string with optional a reply address seperated by a comma.]]></description>
            </parameter>
            <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The subject of the mail]]></description>
            </parameter>
            <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[The message text]]></description>
            </parameter>
            <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[One or more addresses seperated by a comma]]></description>
            </parameter>
            <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
              <description><![CDATA[The attachments]]></description>
            </parameter>
            <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[An array of properties]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="maintenance" qualifiedName="com.servoy.extensions.plugins.maintenance.MaintenanceProvider" scriptingName="plugins.maintenance">
      <functions>
        <function name="getConnectedClients">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.maintenance.JSClientInformation[]" typecode="[Lcom.servoy.extensions.plugins.maintenance.JSClientInformation;"/>
          <description><![CDATA[Returns an array of JSClientInformation elements describing the clients connected to the server.]]></description>
          <summary><![CDATA[Returns an array of JSClientInformation elements describing the clients connected to the server.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Returns an array of JSClientInformation elements describing the clients connected to the server.
var clients = plugins.maintenance.getConnectedClients();
application.output("There are " + clients.length + " connected clients.");
for (var i = 0; i < clients.length; i++)
	application.output("Client has clientId '" + clients[i].getClientId() + "' and has connected from host '" + clients[i].getHostAddress() + "'.");]]></sample>
        </function>
        <function name="getDataModelClonesFrom">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with names of all database servers that have property DataModelCloneFrom equal to the parameter.]]></description>
          <summary><![CDATA[Retrieves a list with names of all database servers that have property DataModelCloneFrom equal to the parameter.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with names of all database servers that have property DataModelCloneFrom equal to the parameter.
var serverNames = plugins.maintenance.getDataModelClonesFrom('my_server');
for (var i=0; i<serverNames.length; i++)
	application.output("Process server " + i + ": " + serverNames[i]);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getServer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSServer" typecode="com.servoy.j2db.dataprocessing.JSServer"/>
          <description><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
By default both optional arguments have the value false.]]></description>
          <summary><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
//If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
//Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
//If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
//By default both optional arguments have the value false.
var server = plugins.maintenance.getServer("example_data");
if (server) {
	var tableNames = server.getTableNames();
	application.output("There are " + tableNames.length + " tables.");
	for (var i=0; i<tableNames.length; i++)
		application.output("Table " + i + ": " + tableNames[i]);
}
else {
	plugins.dialogs.showInfoDialog("Attention","Server 'example_data' cannot be found.","OK");
}]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getServer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSServer" typecode="com.servoy.j2db.dataprocessing.JSServer"/>
          <description><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
By default both optional arguments have the value false.]]></description>
          <summary><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
//If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
//Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
//If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
//By default both optional arguments have the value false.
var server = plugins.maintenance.getServer("example_data");
if (server) {
	var tableNames = server.getTableNames();
	application.output("There are " + tableNames.length + " tables.");
	for (var i=0; i<tableNames.length; i++)
		application.output("Table " + i + ": " + tableNames[i]);
}
else {
	plugins.dialogs.showInfoDialog("Attention","Server 'example_data' cannot be found.","OK");
}]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="getServer">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSServer" typecode="com.servoy.j2db.dataprocessing.JSServer"/>
          <description><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
By default both optional arguments have the value false.]]></description>
          <summary><![CDATA[Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves an instance of JSServer corresponding to the server with the name specified through the "serverName" argument.
//If the optional argument "mustBeEnabled" is set to true, then the JSServer instance is returned only if the server is active.
//Similarly, if the "mustBeValid" optional argument is set to true, then the JSServer instance is returned only if the server is valid.
//If the specified server is not found, or if it does not meet the requirements imposed by the optional arguments, then null is returned.
//By default both optional arguments have the value false.
var server = plugins.maintenance.getServer("example_data");
if (server) {
	var tableNames = server.getTableNames();
	application.output("There are " + tableNames.length + " tables.");
	for (var i=0; i<tableNames.length; i++)
		application.output("Table " + i + ": " + tableNames[i]);
}
else {
	plugins.dialogs.showInfoDialog("Attention","Server 'example_data' cannot be found.","OK");
}]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="mustBeValid" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="getServerNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
and "includeDuplicates" arguments have the value true.]]></description>
          <summary><![CDATA[Retrieves a list with the names of all available database servers.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
//optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
//argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
//servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
//and "includeDuplicates" arguments have the value true.
var serverNames = plugins.maintenance.getServerNames();
application.output("There are " + serverNames.length + " servers.");
for (var i=0; i<serverNames.length; i++)
	application.output("Server " + i + ": " + serverNames[i]);]]></sample>
        </function>
        <function name="getServerNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
and "includeDuplicates" arguments have the value true.]]></description>
          <summary><![CDATA[Retrieves a list with the names of all available database servers.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
//optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
//argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
//servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
//and "includeDuplicates" arguments have the value true.
var serverNames = plugins.maintenance.getServerNames();
application.output("There are " + serverNames.length + " servers.");
for (var i=0; i<serverNames.length; i++)
	application.output("Server " + i + ": " + serverNames[i]);]]></sample>
          <parameters>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="getServerNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
and "includeDuplicates" arguments have the value true.]]></description>
          <summary><![CDATA[Retrieves a list with the names of all available database servers.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
//optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
//argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
//servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
//and "includeDuplicates" arguments have the value true.
var serverNames = plugins.maintenance.getServerNames();
application.output("There are " + serverNames.length + " servers.");
for (var i=0; i<serverNames.length; i++)
	application.output("Server " + i + ": " + serverNames[i]);]]></sample>
          <parameters>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="mustBeValid" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="getServerNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
and "includeDuplicates" arguments have the value true.]]></description>
          <summary><![CDATA[Retrieves a list with the names of all available database servers.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
//optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
//argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
//servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
//and "includeDuplicates" arguments have the value true.
var serverNames = plugins.maintenance.getServerNames();
application.output("There are " + serverNames.length + " servers.");
for (var i=0; i<serverNames.length; i++)
	application.output("Server " + i + ": " + serverNames[i]);]]></sample>
          <parameters>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="mustBeValid" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="sort" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="getServerNames">
          <argumentsTypes>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
            <argumentType typecode="java.lang.Boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
and "includeDuplicates" arguments have the value true.]]></description>
          <summary><![CDATA[Retrieves a list with the names of all available database servers.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Retrieves a list with the names of all available database servers. The returned list will contain only enabled servers if the "mustBeEnabled"
//optional argument is set to true. The list will contain only valid servers if the "mustBeValid" argument is set to true. If the "sort" optional
//argument is set to true, then the list will be sorted alphabetically. If the "includeDuplicates" optional argument is set to false, then duplicate
//servers will appear only once in the list. By default, the "mustBeEnabled" and the "mustBeValid" arguments have the value false, while the "sort"
//and "includeDuplicates" arguments have the value true.
var serverNames = plugins.maintenance.getServerNames();
application.output("There are " + serverNames.length + " servers.");
for (var i=0; i<serverNames.length; i++)
	application.output("Server " + i + ": " + serverNames[i]);]]></sample>
          <parameters>
            <parameter name="mustBeEnabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="mustBeValid" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="sort" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            <parameter name="includeDuplicates" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
          </parameters>
        </function>
        <function name="isInMaintenanceMode">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns true if the server is in maintenance mode, false otherwise.]]></description>
          <summary><![CDATA[Returns true if the server is in maintenance mode, false otherwise.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Returns true if the server is in maintenance mode, false otherwise.
if (plugins.maintenance.isInMaintenanceMode())
	application.output("Server is in maintenance mode.");
else
	application.output("Server is not in maintenance mode.");]]></sample>
        </function>
        <function name="sendMessageToAllClients">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sends a message to all connected clients.]]></description>
          <summary><![CDATA[Sends a message to all connected clients.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Sends a message to all connected clients.
plugins.maintenance.sendMessageToAllClients("Hello, all clients!");]]></sample>
          <parameters>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="sendMessageToClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Sends a message to a specific client, identified by its clientId. The clientIds are retrieved by calling the getConnectedClients method.]]></description>
          <summary><![CDATA[Sends a message to a specific client, identified by its clientId.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Sends a message to a specific client, identified by its clientId. The clientIds are retrieved by calling the getConnectedClients method.
var clients = plugins.maintenance.getConnectedClients();
for (var i=0; i<clients.length; i++)
	plugins.maintenance.sendMessageToClient(clients[i].getClientId(), "Hello, client " + clients[i].getClientId() + "!");]]></sample>
          <parameters>
            <parameter name="clientId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="message" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="setMaintenanceMode">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Puts the server into/out of maintenance mode, depending on the boolean parameter that is specified (if the parameter is true, then the server will be put into maintenance mode; if the parameter is false, then the server will be put out of maintenance mode).]]></description>
          <summary><![CDATA[Puts the server into/out of maintenance mode, depending on the boolean parameter that is specified (if the parameter is true, then the server will be put into maintenance mode; if the parameter is false, then the server will be put out of maintenance mode).]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Puts the server into/out of maintenance mode, depending on the boolean parameter that is specified (if the parameter is true, then the server will be put into maintenance mode; if the parameter is false, then the server will be put out of maintenance mode).
plugins.maintenance.setMaintenanceMode(!plugins.maintenance.isInMaintenanceMode());]]></sample>
          <parameters>
            <parameter name="maintenanceMode" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="shutDownAllClients">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Shuts down all connected clients. This method returns immediately, it does not wait until the client shuts down.]]></description>
          <summary><![CDATA[Shuts down all connected clients.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Shuts down all connected clients. This method returns immediately, it does not wait until the client shuts down.
plugins.maintenance.shutDownAllClients();]]></sample>
        </function>
        <function name="shutDownClient">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Shuts down a specific client, identified by its clientId. The clientIds are retrieved by calling the getConnectedClients method. This method returns immediately, it does not wait until the client shuts down.]]></description>
          <summary><![CDATA[Shuts down a specific client, identified by its clientId.]]></summary>
          <sample><![CDATA[// WARNING: maintenance plugin is only meant to run during solution import using before or after import hook(so not from Smart/Web client)
//Shuts down a specific client, identified by its clientId. The clientIds are retrieved by calling the getConnectedClients method. This method returns immediately, it does not wait until the client shuts down.
var clients = plugins.maintenance.getConnectedClients();
for (var i=0; i<clients.length; i++)
	plugins.maintenance.shutDownClient(clients[i].getClientId());]]></sample>
          <parameters>
            <parameter name="clientId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="mobile" qualifiedName="com.servoy.extensions.plugins.mobile.MobileMockupProvider" scriptingName="plugins.mobile" servoyMobile="true">
      <properties>
        <property name="solutionHelper" servoyMobile="true">
          <return type="com.servoy.extensions.plugins.mobile.SolutionHelper" typecode="com.servoy.extensions.plugins.mobile.SolutionHelper"/>
          <description><![CDATA[Mobile helper is used as a complementary tool to solution model.
Components/solution structure in mobile client needs special tags which are not supported by solution model API,
but this mobile helper can be used to apply them. For example a button can be the right header button or the left header button and so on.]]></description>
          <summary><![CDATA[Mobile helper is used as a complementary tool to solution model.]]></summary>
          <sample><![CDATA[var f = solutionModel.newForm("created_by_sm_1","udm","contacts",null,false,100,380);

var backMethod;
var b = f.newButton("back",0,0,10,10,backMethod = f.newMethod("function goBack() { history.back(); }"));
plugins.mobile.solutionHelper.markLeftHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_BACK);

b = f.newButton("doSomething",0,0,10,10,f.newMethod("function goForward() { globals.doSomething(); }"));
plugins.mobile.solutionHelper.markRightHeaderButton(b);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_FORWARD);

var lbl = f.newLabel("Generated form",0,0,10,10);
plugins.mobile.solutionHelper.markHeaderText(lbl);

b = f.newButton("ok",0,0,10,10,backMethod);
plugins.mobile.solutionHelper.setIconType(b,plugins.mobile.SolutionHelper.ICON_CHECK);
plugins.mobile.solutionHelper.markFooterItem(b);]]></sample>
        </property>
      </properties>
      <functions>
        <function name="call" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Initiate a phone call]]></description>
          <summary><![CDATA[Initiate a phone call]]></summary>
          <sample><![CDATA[plugins.mobile.call("+490111111")]]></sample>
          <parameters>
            <parameter name="telNumber" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[telephone number to call]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="email" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Initiate an email sending]]></description>
          <summary><![CDATA[Initiate an email sending]]></summary>
          <sample><![CDATA[plugins.mobile.email("support@servoy.com")]]></sample>
          <parameters>
            <parameter name="emailAddress" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[destination email address]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getCurrentPosition" servoyMobile="true">
          <argumentsTypes>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Wrapper function around HTML5 getCurrentPosition. Method will call successCallback method with a Position object parameter if GPS position was retrieved. Otherwise will call errorHandler with an error parameter. This method has dummy implementation in developer. 
NOTE: For options you can specify (a) Accuracy of the returned location information (b) Timeout for retrieving the location information and (c) Use of cached location information]]></description>
          <summary><![CDATA[Wrapper function around HTML5 getCurrentPosition.]]></summary>
          <sample><![CDATA[plugins.mobile.getCurrentPosition(forms.myform.showLocation,scopes.globals.errorHandler,{timeout:5000});]]></sample>
          <parameters>
            <parameter name="successCallback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[Method to be called if the coordinates are retrieved.]]></description>
            </parameter>
            <parameter name="errorHandler" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[Method to be called if an error occurs while retrieving GPS coordinates. Can be null.]]></description>
            </parameter>
            <parameter name="options" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[JSON string with different options that are supported by HTML5 function (accuracy, timeout, caching).]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getUsedStorageSpace" servoyMobile="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Retrieves amount of used bytes from browser local storage. The storage amount depends on used browser, but, from specification, the browser should allow at least 5MB of local storage. Note: Some browsers take two bytes per character.]]></description>
          <summary><![CDATA[Retrieves amount of used bytes from browser local storage.]]></summary>
          <sample><![CDATA[var usedSpace = plugins.mobile.getUsedStorageSpace()]]></sample>
        </function>
        <function name="isOnline" servoyMobile="true">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Returns whether mobile device is online. Returns true in developer implementation.]]></description>
          <summary><![CDATA[Returns whether mobile device is online.]]></summary>
          <sample><![CDATA[plugins.mobile.isOnline()]]></sample>
        </function>
        <function name="syncData" servoyMobile="true">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Synchronizes data between Mobile Client and Servoy Application Server.]]></description>
          <summary><![CDATA[Synchronizes data between Mobile Client and Servoy Application Server.]]></summary>
          <sample><![CDATA[plugins.mobile.syncData()]]></sample>
        </function>
      </functions>
    </object>
    <object publicName="mobileservice" qualifiedName="com.servoy.extensions.plugins.mobileservice.MobileProvider" scriptingName="plugins.mobileservice">
      <functions>
        <function name="createOfflineDataDescription">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.mobileservice.dto.OfflineDataDescription" typecode="com.servoy.extensions.plugins.mobileservice.dto.OfflineDataDescription"/>
          <description><![CDATA[Create a descriptive model for offline data.]]></description>
          <summary><![CDATA[Create a descriptive model for offline data.]]></summary>
          <sample><![CDATA[plugins.mobile.getOfflineFoundSetData(foundset,null);]]></sample>
        </function>
        <function name="createOfflineDataDescription">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.mobileservice.dto.OfflineDataDescription" typecode="com.servoy.extensions.plugins.mobileservice.dto.OfflineDataDescription"/>
          <description><![CDATA[Create a descriptive model for offline data.]]></description>
          <summary><![CDATA[Create a descriptive model for offline data.]]></summary>
          <sample><![CDATA[plugins.mobile.getOfflineFoundSetData(foundset,null);]]></sample>
          <parameters>
            <parameter name="prefix" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[specified prefix]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getRowDescriptions">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="org.json.JSONArray" typecode="org.json.JSONArray"/>
          <description><![CDATA[This method returns the description of rows as a json array object.]]></description>
          <summary><![CDATA[This method returns the description of rows as a json array object.]]></summary>
          <sample><![CDATA[//@type {Array<Object>}
//var idsArray = ...
foundset.loadAllRecords();
var json = plugins.mobileservice.getRowDescriptions(foundset, idsArray)]]></sample>
          <parameters>
            <parameter name="fs" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSetInternal">
              <description><![CDATA[the foundset]]></description>
            </parameter>
            <parameter name="pks" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of pks]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="openid" qualifiedName="com.servoy.extensions.plugins.openid.OpenIDProvider" scriptingName="plugins.openid">
      <functions>
        <function name="createAuthenticateRequest">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.openid.JSAuthenticateRequest" typecode="com.servoy.extensions.plugins.openid.JSAuthenticateRequest"/>
          <description><![CDATA[Redirect to openID provider to login, callback method will receive answer.]]></description>
          <summary><![CDATA[Redirect to openID provider to login, callback method will receive answer.]]></summary>
          <sample><![CDATA[var authenticateRequest = plugins.openid.createAuthenticateRequest('https://www.google.com/accounts/o8/id',openIDLoginCallback);
authenticateRequest.addAttributeRequest('email','http://axschema.org/contact/email',true);
//see http://www.axschema.org/types/ for more attributes, not all are supported by all providers!
authenticateRequest.execute();

//sample
//function openIDLoginCallback(identifier,authenticateResult)
//{
//	var ok = false;
//	if (identifier)
//	{
//		var id = identifier.substring(identifier.lastIndexOf('=')+1)
//		application.output('id:'+id)
//		var email = authenticateResult.getAttributeValue('email')
//		application.output('email:'+email)
//		ok = security.login(email, id, ['Administrators'])
//	}
//	if (!ok)
//	{
//		application.output('Login failed')
//	}
//}]]></sample>
          <parameters>
            <parameter name="identifier" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="pdf_output" qualifiedName="com.servoy.extensions.plugins.pdf_output.PDFProvider" scriptingName="plugins.pdf_output">
      <functions>
        <function name="addMetaData">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="org.mozilla.javascript.Scriptable"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with metaData added]]></return>
          <description><![CDATA[Add metadata to the PDF, like Author]]></description>
          <summary><![CDATA[Add metadata to the PDF, like Author]]></summary>
          <sample><![CDATA[// Add metadata to the PDF, like Author
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var metaData = { Author: 'Servoy' };
	pdfResult = %%elementName%%.addMetaData(data, metaData);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="metaData" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="org.mozilla.javascript.Scriptable">
              <description><![CDATA[a JavaScript object (Scriptable) that contains the metadata as property/value pairs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="combinePDFDocuments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Combine multiple PDF docs into one.]]></description>
          <summary><![CDATA[Combine multiple PDF docs into one.]]></summary>
          <sample><![CDATA[pdf_blob_column = combinePDFDocuments(new Array(pdf_blob1,pdf_blob2,pdf_blob3));]]></sample>
          <parameters>
            <parameter name="pdf_docs_bytearrays" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of documents to combine]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="combineProtectedPDFDocuments">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Combine multiple protected PDF docs into one.]]></description>
          <summary><![CDATA[Combine multiple protected PDF docs into one.]]></summary>
          <sample><![CDATA[pdf_blob_column = combineProtectedPDFDocuments(new Array(pdf_blob1,pdf_blob2,pdf_blob3), new Array(pdf_blob1_pass,pdf_blob2_pass,pdf_blob3_pass));]]></sample>
          <parameters>
            <parameter name="pdf_docs_bytearrays" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the array of documents to combine]]></description>
            </parameter>
            <parameter name="pdf_docs_passwords" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[an array of passwords to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="convertPDFFormToPDFDocument">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Convert a PDF form to a PDF document.]]></description>
          <summary><![CDATA[Convert a PDF form to a PDF document.]]></summary>
          <sample><![CDATA[var pdfform = plugins.file.readFile('c:/temp/1040a-form.pdf');
//var field_values = plugins.file.readFile('c:/temp/1040a-data.fdf');//read adobe fdf values or
var field_values = new Array()//construct field values
field_values[0] = 'f1-1=John C.J.'
field_values[1] = 'f1-2=Longlasting'
var result_pdf_doc = plugins.pdf_output.convertPDFFormToPDFDocument(pdfform, field_values)
if (result_pdf_doc != null)
{
	plugins.file.writeFile('c:/temp/1040a-flatten.pdf', result_pdf_doc)
}]]></sample>
          <parameters>
            <parameter name="pdf_form" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF Form to convert]]></description>
            </parameter>
            <parameter name="field_values" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the values to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="convertProtectedPDFFormToPDFDocument">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Convert a protected PDF form to a PDF document.]]></description>
          <summary><![CDATA[Convert a protected PDF form to a PDF document.]]></summary>
          <sample><![CDATA[var pdfform = plugins.file.readFile('c:/temp/1040a-form.pdf');
//var field_values = plugins.file.readFile('c:/temp/1040a-data.fdf');//read adobe fdf values or
var field_values = new Array()//construct field values
field_values[0] = 'f1-1=John C.J.'
field_values[1] = 'f1-2=Longlasting'
var result_pdf_doc = plugins.pdf_output.convertProtectedPDFFormToPDFDocument(pdfform, 'pdf_password', field_values)
if (result_pdf_doc != null)
{
	plugins.file.writeFile('c:/temp/1040a-flatten.pdf', result_pdf_doc)
}]]></sample>
          <parameters>
            <parameter name="pdf_form" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF Form to convert]]></description>
            </parameter>
            <parameter name="pdf_password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the password to use]]></description>
            </parameter>
            <parameter name="field_values" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the field values to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="encrypt">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
          <description><![CDATA[Add password protection and security options to the PDF]]></description>
          <summary><![CDATA[Add password protection and security options to the PDF]]></summary>
          <sample><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the owner password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="encrypt">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
          <description><![CDATA[Add password protection and security options to the PDF]]></description>
          <summary><![CDATA[Add password protection and security options to the PDF]]></summary>
          <sample><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the owner password]]></description>
            </parameter>
            <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="encrypt">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
          <description><![CDATA[Add password protection and security options to the PDF]]></description>
          <summary><![CDATA[Add password protection and security options to the PDF]]></summary>
          <sample><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the owner password]]></description>
            </parameter>
            <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
            <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow assembly permission]]></description>
            </parameter>
            <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow copy permission]]></description>
            </parameter>
            <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow degraded printing permission]]></description>
            </parameter>
            <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow fill in permission]]></description>
            </parameter>
            <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify annotations permission]]></description>
            </parameter>
            <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify contents permission]]></description>
            </parameter>
            <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow printing permission]]></description>
            </parameter>
            <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow screen readers permission]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="encrypt">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
          <description><![CDATA[Add password protection and security options to the PDF]]></description>
          <summary><![CDATA[Add password protection and security options to the PDF]]></summary>
          <sample><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the owner password]]></description>
            </parameter>
            <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
            <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow assembly permission]]></description>
            </parameter>
            <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow copy permission]]></description>
            </parameter>
            <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow degraded printing permission]]></description>
            </parameter>
            <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow fill in permission]]></description>
            </parameter>
            <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify annotations permission]]></description>
            </parameter>
            <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify contents permission]]></description>
            </parameter>
            <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow printing permission]]></description>
            </parameter>
            <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow screen readers permission]]></description>
            </parameter>
            <parameter name="is128bit" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to use 128-bit encryption]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="encrypt">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="org.mozilla.javascript.Scriptable"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
          <description><![CDATA[Add password protection and security options to the PDF]]></description>
          <summary><![CDATA[Add password protection and security options to the PDF]]></summary>
          <sample><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the owner password]]></description>
            </parameter>
            <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the user password]]></description>
            </parameter>
            <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow assembly permission]]></description>
            </parameter>
            <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow copy permission]]></description>
            </parameter>
            <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow degraded printing permission]]></description>
            </parameter>
            <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow fill in permission]]></description>
            </parameter>
            <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify annotations permission]]></description>
            </parameter>
            <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow modify contents permission]]></description>
            </parameter>
            <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow printing permission]]></description>
            </parameter>
            <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to set the allow screen readers permission]]></description>
            </parameter>
            <parameter name="is128bit" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to use 128-bit encryption]]></description>
            </parameter>
            <parameter name="metaData" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="org.mozilla.javascript.Scriptable">
              <description><![CDATA[a JavaScript object (Scriptable) that contains the metadata as property/value pairs]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="endMetaPrintJob">
          <argumentsTypes/>
          <return type="byte[]" typecode="[B"/>
          <description><![CDATA[Ends a previously started meta print job. For meta print jobs that were stored in memory, not in a file on disk, also returns the content of the generated PDF document.]]></description>
          <summary><![CDATA[Ends a previously started meta print job.]]></summary>
          <sample><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
        </function>
        <function name="getPDFPrinter">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob"/>
          <description><![CDATA[Returns a PDF printer that can be used in print calls. Returns the last started meta print job.]]></description>
          <summary><![CDATA[Returns a PDF printer that can be used in print calls.]]></summary>
          <sample><![CDATA[//to print current record without printdialog to pdf file in temp dir.
controller.print(true,false,plugins.pdf_output.getPDFPrinter());]]></sample>
        </function>
        <function name="getPDFPrinter">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob"/>
          <description><![CDATA[Returns a PDF printer that can be used in print calls. The PDF printer that generates a PDF into the specified file is returned.]]></description>
          <summary><![CDATA[Returns a PDF printer that can be used in print calls.]]></summary>
          <sample><![CDATA[//to print current record without printdialog to pdf file in temp dir.
controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="getPagesPrinted">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the number of pages printed by the last print call done in the context of a meta print job.]]></description>
          <summary><![CDATA[Returns the number of pages printed by the last print call done in the context of a meta print job.]]></summary>
          <sample><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
        </function>
        <function name="getTotalPagesPrinted">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Returns the total number of pages printed in the context of a meta print job. Call this method before ending the meta print job.]]></description>
          <summary><![CDATA[Returns the total number of pages printed in the context of a meta print job.]]></summary>
          <sample><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
        </function>
        <function name="insertFontDirectory">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description><![CDATA[Add a directory that should be searched for fonts. Call this only in the context of an active meta print job.]]></description>
          <summary><![CDATA[Add a directory that should be searched for fonts.]]></summary>
          <sample><![CDATA[//Insert font directories for font embedding.
//You must create an MetaPrintJob before using it.
plugins.pdf_output.insertFontDirectory('c:/Windows/Fonts');
plugins.pdf_output.insertFontDirectory('c:/WinNT/Fonts');
plugins.pdf_output.insertFontDirectory('/Library/Fonts');]]></sample>
          <parameters>
            <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="numberPages">
          <argumentsTypes>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with numbered pages]]></return>
          <description><![CDATA[Add pages numbers to a PDF]]></description>
          <summary><![CDATA[Add pages numbers to a PDF]]></summary>
          <sample><![CDATA[// Add pages numbers to a PDF
var unNumberedFile = plugins.file.showFileOpenDialog();
if (unNumberedFile) {
	var data = plugins.file.readFile(unNumberedFile);
	pageNumberedPdf = %%elementName%%.numberPages(data, 12, 520, 30, 'Courier', '#ff0033');
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="numberPages">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with numbered pages]]></return>
          <description><![CDATA[Add pages numbers to a PDF]]></description>
          <summary><![CDATA[Add pages numbers to a PDF]]></summary>
          <sample><![CDATA[// Add pages numbers to a PDF
var unNumberedFile = plugins.file.showFileOpenDialog();
if (unNumberedFile) {
	var data = plugins.file.readFile(unNumberedFile);
	pageNumberedPdf = %%elementName%%.numberPages(data, 12, 520, 30, 'Courier', '#ff0033');
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="fontSize" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the font size to use]]></description>
            </parameter>
            <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x location of the numbers]]></description>
            </parameter>
            <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y location of the numbers]]></description>
            </parameter>
            <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font to use]]></description>
            </parameter>
            <parameter name="hexColor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font color to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlay">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add some PDF based content over a PDF]]></description>
          <summary><![CDATA[Add some PDF based content over a PDF]]></summary>
          <sample><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="forOverlay" type="byte[]" typecode="[B">
              <description><![CDATA[a PDF to use as overlay]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlay">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add some PDF based content over a PDF]]></description>
          <summary><![CDATA[Add some PDF based content over a PDF]]></summary>
          <sample><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="forOverlay" type="byte[]" typecode="[B">
              <description><![CDATA[a PDF to use as overlay]]></description>
            </parameter>
            <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether the overlay will be put over the content]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlay">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add some PDF based content over a PDF]]></description>
          <summary><![CDATA[Add some PDF based content over a PDF]]></summary>
          <sample><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="forOverlay" type="byte[]" typecode="[B">
              <description><![CDATA[a PDF to use as overlay]]></description>
            </parameter>
            <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether the overlay will be put over the content]]></description>
            </parameter>
            <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of page numbers to put the overlay on]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlay">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="[B"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add some PDF based content over a PDF]]></description>
          <summary><![CDATA[Add some PDF based content over a PDF]]></summary>
          <sample><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="forOverlay" type="byte[]" typecode="[B">
              <description><![CDATA[a PDF to use as overlay]]></description>
            </parameter>
            <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of page numbers to put the overlay on]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlayText">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add text over every page at a 45 degree angle]]></description>
          <summary><![CDATA[Add text over every page at a 45 degree angle]]></summary>
          <sample><![CDATA[// Add text over every page at a 45 degree angle\m
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	modifiedPdf = %%elementName%%.overlayText(data, 'DRAFT', 230, 430, true, 32, 'Helvetica', '#33ff33');
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to use for the overlay]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="overlayText">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
          <description><![CDATA[Add text over every page at a 45 degree angle]]></description>
          <summary><![CDATA[Add text over every page at a 45 degree angle]]></summary>
          <sample><![CDATA[// Add text over every page at a 45 degree angle\m
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	modifiedPdf = %%elementName%%.overlayText(data, 'DRAFT', 230, 430, true, 32, 'Helvetica', '#33ff33');
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the text to use for the overlay]]></description>
            </parameter>
            <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x location of the overlay]]></description>
            </parameter>
            <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y location of the overlay]]></description>
            </parameter>
            <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to put the overlay over the content]]></description>
            </parameter>
            <parameter name="fontSize" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the font size to use]]></description>
            </parameter>
            <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font to use]]></description>
            </parameter>
            <parameter name="hexColor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the font color to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="startMetaPrintJob">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Used for printing multiple things into the same PDF document. Starts a meta print job and all print calls made before ending the meta print job will be done into the same PDF document. The PDF document is stored in memory and can be retrieved when ending the meta print job and can be saved, for example, into a dataprovider.]]></description>
          <summary><![CDATA[Used for printing multiple things into the same PDF document.]]></summary>
          <sample><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
        </function>
        <function name="startMetaPrintJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Used for printing multiple things into the same PDF document. Starts a meta print job and all print calls made before ending the meta print job will be done into the same PDF document. The PDF document is generated in a File specified by the filename.]]></description>
          <summary><![CDATA[Used for printing multiple things into the same PDF document.]]></summary>
          <sample><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
          <parameters>
            <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the file name]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="watermark">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
          <description><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
          <summary><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
          <sample><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path of an image to use]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="watermark">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
          <description><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
          <summary><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
          <sample><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path of an image to use]]></description>
            </parameter>
            <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x location of the image]]></description>
            </parameter>
            <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y location of the image]]></description>
            </parameter>
            <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to put over the content]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="watermark">
          <argumentsTypes>
            <argumentType typecode="[B"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="boolean"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
          <description><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
          <summary><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
          <sample><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B">
              <description><![CDATA[the PDF]]></description>
            </parameter>
            <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the path of an image to use]]></description>
            </parameter>
            <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the x location of the image]]></description>
            </parameter>
            <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the y location of the image]]></description>
            </parameter>
            <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[whether to put over the content]]></description>
            </parameter>
            <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[an array of pages where to apply the watermark]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="rawSQL" qualifiedName="com.servoy.extensions.plugins.rawSQL.RawSQLProvider" scriptingName="plugins.rawSQL">
      <functions>
        <function deprecated="true" name="convertUUIDToBytes">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="byte[]" typecode="[B"/>
          <description/>
          <deprecated><![CDATA[Replaced by application#getUUID(String)]]></deprecated>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var uuid = application.getNewUUID();
plugins.rawSQL.executeSQL(databaseManager.getDataSourceServerName(controller.getDataSource()), 'employees', 'insert into employees (employees_id, creation_date) values (?, ?)', [plugins.rawSQL.convertUUIDToBytes(uuid), new Date()]);]]></sample>
        </function>
        <function deprecated="true" name="convertUUIDToString">
          <argumentsTypes>
            <argumentType typecode="[B"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by application#getUUID(byte[])]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="data" type="byte[]" typecode="[B"/>
          </parameters>
        </function>
        <function name="executeSQL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Execute any SQL, returns true if successful.]]></description>
          <summary><![CDATA[Execute any SQL, returns true if successful.]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var country = 'NL'
var done = plugins.rawSQL.executeSQL("example_data","employees","update employees set country = ?", [country])
if (done)
{
	//flush is required when changes are made in db
	plugins.rawSQL.flushAllClientsCache("example_data","employees")
}
else
{
	var msg = plugins.rawSQL.getException().getMessage(); //see exception node for more info about the exception obj
	plugins.dialogs.showErrorDialog('Error',  'SQL exception: '+msg,  'Ok')
}

// Note that when this function is used to create a new table in the database, this table will only be seen by
// the Servoy Application Server when the table name starts with 'temp_', otherwise a server restart is needed.]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the server]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the table]]></description>
            </parameter>
            <parameter name="sql" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the sql query to execute]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeSQL">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Execute any SQL, returns true if successful.]]></description>
          <summary><![CDATA[Execute any SQL, returns true if successful.]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var country = 'NL'
var done = plugins.rawSQL.executeSQL("example_data","employees","update employees set country = ?", [country])
if (done)
{
	//flush is required when changes are made in db
	plugins.rawSQL.flushAllClientsCache("example_data","employees")
}
else
{
	var msg = plugins.rawSQL.getException().getMessage(); //see exception node for more info about the exception obj
	plugins.dialogs.showErrorDialog('Error',  'SQL exception: '+msg,  'Ok')
}

// Note that when this function is used to create a new table in the database, this table will only be seen by
// the Servoy Application Server when the table name starts with 'temp_', otherwise a server restart is needed.]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the server]]></description>
            </parameter>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the table]]></description>
            </parameter>
            <parameter name="sql" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the sql query to execute]]></description>
            </parameter>
            <parameter name="sql_args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[the arguments for the query]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="executeStoredProcedure">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
            <argumentType typecode="[I"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.JSDataSet"/>
          <description><![CDATA[Execute a stored procedure.]]></description>
          <summary><![CDATA[Execute a stored procedure.]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var maxReturnedRows = 10; //useful to limit number of rows
var procedure_declaration = '{?=calculate_interest_rate(?)}'
// define the direction, a 0 for input data, a 1 for output data
var typesArray = [1, 0];
// define the types and values, a value for input data, a sql-type for output data
var args = [java.sql.Types.NUMERIC, 3000]
// A dataset is returned, when no output-parameters defined, the last select-result in the procedure will be returned.
// When one or more output-parameters are defined, the dataset will contain 1 row with the output data.
var dataset = plugins.rawSQL.executeStoredProcedure(databaseManager.getDataSourceServerName(controller.getDataSource()), procedure_declaration, args, typesArray, maxReturnedRows);
var interest_rate = dataset.getValue(1, 1);]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="procedureDeclaration" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <parameter name="inOutDirectionality" type="com.servoy.j2db.documentation.scripting.docs.Number[]" typecode="[I"/>
            <parameter name="maxNumberOfRowsToRetrieve" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="flushAllClientsCache">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Flush cached database data. Use with extreme care, its affecting the performance of clients!]]></description>
          <summary><![CDATA[Flush cached database data.]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var country = 'NL'
var done = plugins.rawSQL.executeSQL("example_data","employees","update employees set country = ?", [country])
if (done)
{
	//flush is required when changes are made in db
	plugins.rawSQL.flushAllClientsCache("example_data","employees")
}
else
{
	var msg = plugins.rawSQL.getException().getMessage(); //see exception node for more info about the exception obj
	plugins.dialogs.showErrorDialog('Error',  'SQL exception: '+msg,  'Ok')
}

// Note that when this function is used to create a new table in the database, this table will only be seen by
// the Servoy Application Server when the table name starts with 'temp_', otherwise a server restart is needed.]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getException">
          <argumentsTypes/>
          <return type="com.servoy.j2db.util.ServoyException" typecode="java.lang.Exception"/>
          <description><![CDATA[If the result from a function was false, it will return the exception object.]]></description>
          <summary><![CDATA[If the result from a function was false, it will return the exception object.]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var country = 'NL'
var done = plugins.rawSQL.executeSQL("example_data","employees","update employees set country = ?", [country])
if (done)
{
	//flush is required when changes are made in db
	plugins.rawSQL.flushAllClientsCache("example_data","employees")
}
else
{
	var msg = plugins.rawSQL.getException().getMessage(); //see exception node for more info about the exception obj
	plugins.dialogs.showErrorDialog('Error',  'SQL exception: '+msg,  'Ok')
}

// Note that when this function is used to create a new table in the database, this table will only be seen by
// the Servoy Application Server when the table name starts with 'temp_', otherwise a server restart is needed.]]></sample>
        </function>
        <function deprecated="true" name="getExceptionMsg">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getException().]]></deprecated>
          <sample/>
        </function>
        <function name="notifyDataChange">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Notify clients about changes in records, based on pk(s). Use with extreme care, its affecting the performance of clients!]]></description>
          <summary><![CDATA[Notify clients about changes in records, based on pk(s).]]></summary>
          <sample><![CDATA[/**************************************************************************** 
WARNING! You can cause data loss or serious data integrity compromises!
You should have a THOROUGH understanding of both SQL and your backend
database (and other interfaces that may use that backend) BEFORE YOU USE
ANY OF THESE COMMANDS.
You should also READ THE DOCUMENTATION BEFORE USING ANY OF THESE COMMANDS

Note that when server names have been switched (databasemanager.switchServer),the 
real server names must be used here, plugins.rawSQL is not transparent to switched servers.
****************************************************************************/

var action = SQL_ACTION_TYPES.DELETE_ACTION //pks deleted
//var action = SQL_ACTION_TYPES.INSERT_ACTION //pks inserted
//var action = SQL_ACTION_TYPES.UPDATE_ACTION //pks updates
var pksdataset = databaseManager.convertToDataSet(new Array(12,15,16,21))
var ok = plugins.rawSQL.notifyDataChange(databaseManager.getDataSourceServerName(controller.getDataSource()), 'employees', pksdataset,action)]]></sample>
          <parameters>
            <parameter name="serverName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="tableName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="pksDataset" type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <parameter name="action" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="scheduler" qualifiedName="com.servoy.extensions.plugins.scheduler.SchedulerProvider" scriptingName="plugins.scheduler">
      <functions>
        <function name="addCronJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a cron job to the scheduler. A cron job must have at least one minute between each execution (otherwise it won't execute).]]></description>
          <summary><![CDATA[Adds a cron job to the scheduler.]]></summary>
          <sample><![CDATA[// see: http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html for more info
// add a job that runs every 20 minutes after the hour (0,20,40)
plugins.scheduler.addCronJob('20mins','0 0/20 * * * ?',method)
// add a job that runs every day at 23:30 between now and 5 days from now
var dateNow = new Date();
var date5Days = new Date(dateNow.getTime()+5*24*60*60*1000);
plugins.scheduler.addCronJob('23:30','0 30 23 ? * *',method,dateNow,date5Days)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="cronTimings" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
          <links>
            <link>
              <url>http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html</url>
            </link>
          </links>
        </function>
        <function name="addCronJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a cron job to the scheduler. A cron job must have at least one minute between each execution (otherwise it won't execute).]]></description>
          <summary><![CDATA[Adds a cron job to the scheduler.]]></summary>
          <sample><![CDATA[// see: http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html for more info
// add a job that runs every 20 minutes after the hour (0,20,40)
plugins.scheduler.addCronJob('20mins','0 0/20 * * * ?',method)
// add a job that runs every day at 23:30 between now and 5 days from now
var dateNow = new Date();
var date5Days = new Date(dateNow.getTime()+5*24*60*60*1000);
plugins.scheduler.addCronJob('23:30','0 30 23 ? * *',method,dateNow,date5Days)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="cronTimings" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addCronJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a cron job to the scheduler. A cron job must have at least one minute between each execution (otherwise it won't execute).]]></description>
          <summary><![CDATA[Adds a cron job to the scheduler.]]></summary>
          <sample><![CDATA[// see: http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html for more info
// add a job that runs every 20 minutes after the hour (0,20,40)
plugins.scheduler.addCronJob('20mins','0 0/20 * * * ?',method)
// add a job that runs every day at 23:30 between now and 5 days from now
var dateNow = new Date();
var date5Days = new Date(dateNow.getTime()+5*24*60*60*1000);
plugins.scheduler.addCronJob('23:30','0 30 23 ? * *',method,dateNow,date5Days)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="cronTimings" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="endDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addCronJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a cron job to the scheduler. A cron job must have at least one minute between each execution (otherwise it won't execute).]]></description>
          <summary><![CDATA[Adds a cron job to the scheduler.]]></summary>
          <sample><![CDATA[// see: http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html for more info
// add a job that runs every 20 minutes after the hour (0,20,40)
plugins.scheduler.addCronJob('20mins','0 0/20 * * * ?',method)
// add a job that runs every day at 23:30 between now and 5 days from now
var dateNow = new Date();
var date5Days = new Date(dateNow.getTime()+5*24*60*60*1000);
plugins.scheduler.addCronJob('23:30','0 30 23 ? * *',method,dateNow,date5Days)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="cronTimings" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="endDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="repeatInterval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[ms]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="repeatInterval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[ms]]></description>
            </parameter>
            <parameter name="repeatCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.util.Date"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="repeatInterval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[ms]]></description>
            </parameter>
            <parameter name="repeatCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="endDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="repeatInterval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[ms]]></description>
            </parameter>
            <parameter name="repeatCount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <parameter name="endDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="addJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.util.Date"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Adds a job to the scheduler.]]></description>
          <summary><![CDATA[Adds a job to the scheduler.]]></summary>
          <sample><![CDATA[// add a job that runs at the given date (20 seconds in the future)
// and repeats that every 20 seconds for 40 times or the enddate is reached (0 for no repeats = just one call)
var startDate = new Date();
startDate.setTime(startDate.getTime()+20000);
var endDate = new Date(startDate.getTime()+100000);
plugins.scheduler.addJob('in20seconds',startDate,method,20000,40,endDate)]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="startDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="getCurrentJobNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Returns an array with the current jobs.]]></description>
          <summary><![CDATA[Returns an array with the current jobs.]]></summary>
          <sample><![CDATA[plugins.scheduler.getCurrentJobNames()]]></sample>
        </function>
        <function name="getLastRunJobName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Returns the last job run from the scheduler.]]></description>
          <summary><![CDATA[Returns the last job run from the scheduler.]]></summary>
          <sample><![CDATA[plugins.scheduler.getLastRunJobName();]]></sample>
        </function>
        <function deprecated="true" name="getLastRunnedJobName">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getLastRunJobName().]]></deprecated>
          <sample/>
        </function>
        <function name="removeJob">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Removes a job from the scheduler.]]></description>
          <summary><![CDATA[Removes a job from the scheduler.]]></summary>
          <sample><![CDATA[// removes a job 'myjob' from the scheduler
plugins.scheduler.removeJob('myjob');]]></sample>
          <parameters>
            <parameter name="jobname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="serialize" qualifiedName="com.servoy.extensions.plugins.serialize.SerializeProvider" scriptingName="plugins.serialize">
      <functions>
        <function name="fromJSON">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          <description><![CDATA[Deserialize from JSON text to an object.]]></description>
          <summary><![CDATA[Deserialize from JSON text to an object.]]></summary>
          <sample><![CDATA[var org_array = new Array('A1','F1','Paris-Dakar');
var string_data = plugins.serialize.toJSON(org_array);
var new_array = plugins.serialize.fromJSON(string_data);
application.output(new_array.join('#'));]]></sample>
          <parameters>
            <parameter name="data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="toJSON">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Serialize an object to JSON text.]]></description>
          <summary><![CDATA[Serialize an object to JSON text.]]></summary>
          <sample><![CDATA[var org_array = new Array('A1','F1','Paris-Dakar');
var string_data = plugins.serialize.toJSON(org_array);
var new_array = plugins.serialize.fromJSON(string_data);
application.output(new_array.join('#'));]]></sample>
          <parameters>
            <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="spellcheck" qualifiedName="com.servoy.extensions.plugins.spellcheck.SpellCheckClientProvider" scriptingName="plugins.spellcheck">
      <functions>
        <function name="checkTextComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Spellcheck the form element/component.]]></description>
          <summary><![CDATA[Spellcheck the form element/component.]]></summary>
          <sample><![CDATA[// The desired spellcheck provider and language are set via the SpellCheck Preference Page, in the Client Preferences.
// Spellchecking currently works in SmartClient only.
plugins.spellcheck.checkTextComponent(forms.actionDetails.elements.actionText);
// Optionally, the language can be sent as an argument to the function.
// The language string is provided from the language constants class, as in the sample below
// NOTE: the optional language, if provided, overrides the Preference Panel page setting, of the current SpellCheck provider (RapidSpell/Google).
// plugins.spellcheck.checkTextComponent(textInDutch, SpellCheck_Languages.DUTCH);]]></sample>
          <parameters>
            <parameter name="textComponent" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
          </parameters>
        </function>
        <function name="checkTextComponent">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Spellcheck the form element/component.]]></description>
          <summary><![CDATA[Spellcheck the form element/component.]]></summary>
          <sample><![CDATA[// The desired spellcheck provider and language are set via the SpellCheck Preference Page, in the Client Preferences.
// Spellchecking currently works in SmartClient only.
plugins.spellcheck.checkTextComponent(forms.actionDetails.elements.actionText);
// Optionally, the language can be sent as an argument to the function.
// The language string is provided from the language constants class, as in the sample below
// NOTE: the optional language, if provided, overrides the Preference Panel page setting, of the current SpellCheck provider (RapidSpell/Google).
// plugins.spellcheck.checkTextComponent(textInDutch, SpellCheck_Languages.DUTCH);]]></sample>
          <parameters>
            <parameter name="textComponent" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <parameter name="language" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="textxport" qualifiedName="com.servoy.extensions.plugins.tabxport.Enabler" scriptingName="plugins.textxport">
      <properties>
        <property name="exportEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable the export feature of this plugin.]]></description>
          <summary><![CDATA[Enable the export feature of this plugin.]]></summary>
          <sample><![CDATA[plugins.textxport.exportEnabled = true;
var isEnabled = plugins.textxport.exportEnabled;]]></sample>
        </property>
        <property name="importEnabled">
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Enable the import feature of this plugin.]]></description>
          <summary><![CDATA[Enable the import feature of this plugin.]]></summary>
          <sample><![CDATA[plugins.textxport.importEnabled = true;
var isEnabled = plugins.textxport.importEnabled;]]></sample>
        </property>
      </properties>
      <functions>
        <function name="textExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Export to text 'separated value' data (*.tab/*.csv)]]></description>
          <summary><![CDATA[Export to text 'separated value' data (*.]]></summary>
          <sample><![CDATA[//export with default separator(tab) and no header
var dataToBeWritten = plugins.textxport.textExport(forms.form1.foundset,['id','name']);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset to export with]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="textExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Export to text 'separated value' data (*.tab/*.csv)]]></description>
          <summary><![CDATA[Export to text 'separated value' data (*.]]></summary>
          <sample><![CDATA[//export with ';' separator and no header
var dataToBeWritten = plugins.textxport.textExport(forms.form1.foundset,['id','name'],';');]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset to export with]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the separator of the data]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="textExport">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.dataprocessing.IFoundSet"/>
            <argumentType typecode="[Ljava.lang.String;"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          <description><![CDATA[Export to text 'separated value' data (*.tab/*.csv)]]></description>
          <summary><![CDATA[Export to text 'separated value' data (*.]]></summary>
          <sample><![CDATA[//export with ';' separator and header
var dataToBeWritten = plugins.textxport.textExport(forms.form1.foundset,['id','name'],';',true);]]></sample>
          <parameters>
            <parameter name="foundSet" type="com.servoy.j2db.dataprocessing.FoundSet" typecode="com.servoy.j2db.dataprocessing.IFoundSet">
              <description><![CDATA[the foundset to export with]]></description>
            </parameter>
            <parameter name="dataProviderIds" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
              <description><![CDATA[the ids of the dataproviders]]></description>
            </parameter>
            <parameter name="separator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the separator of the data]]></description>
            </parameter>
            <parameter name="exportHeader" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
              <description><![CDATA[true for exporting with the table header, false for not]]></description>
            </parameter>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="udp" qualifiedName="com.servoy.extensions.plugins.udp.UDPProvider" scriptingName="plugins.udp">
      <functions>
        <function name="createNewPacket">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          <description><![CDATA[Create a new empty packet.]]></description>
          <summary><![CDATA[Create a new empty packet.]]></summary>
          <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')//writes UTF
packet.writeInt(12348293)//writes 4 bytes
packet.writeShort(14823)//writes 2 bytes
packet.writeByte(123)//writes 1 byte]]></sample>
        </function>
        <function name="getReceivedPacket">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          <description><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></description>
          <summary><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></summary>
          <sample><![CDATA[var packet = null
while( ( packet = plugins.udp.getReceivedPacket() ) != null)
{
	var text = packet.readUTF()
	var count = packet.readInt()
}]]></sample>
        </function>
        <function deprecated="true" name="getRecievedPacket">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          <description/>
          <deprecated><![CDATA[Replaced by #getReceivedPacket().]]></deprecated>
          <sample/>
        </function>
        <function name="sendPacket">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a packet.]]></description>
          <summary><![CDATA[Send a packet.]]></summary>
          <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.sendPacket('10.0.0.1',packet)]]></sample>
          <parameters>
            <parameter name="destIpOrHostname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the ip of the destination or the hostname]]></description>
            </parameter>
            <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket">
              <description><![CDATA[the JSPacket to send]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="sendPacket">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Send a packet on another port.]]></description>
          <summary><![CDATA[Send a packet on another port.]]></summary>
          <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.sendPacket('10.0.0.1',packet, 4321)]]></sample>
          <parameters>
            <parameter name="destIpOrHostname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the ip of the destination or the hostname]]></description>
            </parameter>
            <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket">
              <description><![CDATA[the JSPacket to send]]></description>
            </parameter>
            <parameter name="port" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the port on which to send the packet]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="startSocket">
          <argumentsTypes>
            <argumentType typecode="int"/>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Start a UDP socket for a port.]]></description>
          <summary><![CDATA[Start a UDP socket for a port.]]></summary>
          <sample><![CDATA[plugins.udp.startSocket(1234,my_packet_process_method)]]></sample>
          <parameters>
            <parameter name="port_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the local port that this UDP socket will bind to.]]></description>
            </parameter>
            <parameter name="method_to_call_when_packet_received_and_buffer_is_empty" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[when the socket receives one or more packages, it calls this method once.
The method will no longer be called even if new packages are received - until a call to UDPProvider#js_getReceivedPacket() returns null. So you should
consume all available packets before you expect this method to be called again.]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="stopSocket">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Stop the UDP socket for a port.]]></description>
          <summary><![CDATA[Stop the UDP socket for a port.]]></summary>
          <sample><![CDATA[plugins.udp.stopSocket()]]></sample>
        </function>
        <function name="testPacket">
          <argumentsTypes>
            <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></description>
          <summary><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></summary>
          <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.testPacket(packet)]]></sample>
          <parameters>
            <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
          </parameters>
        </function>
      </functions>
    </object>
    <object publicName="window" qualifiedName="com.servoy.extensions.plugins.window.WindowProvider" scriptingName="plugins.window">
      <functions>
        <function deprecated="true" name="addMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#addMenu().]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="addMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#addMenu().]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[the index at which to add the menu]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="addServoyToolBar">
          <argumentsTypes>
            <argumentType typecode="javax.swing.JComponent"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="javax.swing.JToolBar" typecode="javax.swing.JToolBar"/>
          <description/>
          <deprecated><![CDATA[Replaced by #addToolBar(String).]]></deprecated>
          <sample/>
        </function>
        <function name="addToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
          <description><![CDATA[Add a toolbar.]]></description>
          <summary><![CDATA[Add a toolbar.]]></summary>
          <sample><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
          <description><![CDATA[Add a toolbar.]]></description>
          <summary><![CDATA[Add a toolbar.]]></summary>
          <sample><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="addToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
          <description><![CDATA[Add a toolbar.]]></description>
          <summary><![CDATA[Add a toolbar.]]></summary>
          <sample><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="addToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
          <description><![CDATA[Add a toolbar.]]></description>
          <summary><![CDATA[Add a toolbar.]]></summary>
          <sample><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          </parameters>
        </function>
        <function name="cancelFormPopup">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Close the current form popup panel without assigning a value to the configured data provider.]]></description>
          <summary><![CDATA[Close the current form popup panel without assigning a value to the configured data provider.]]></summary>
          <sample><![CDATA[//Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
//do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
        </function>
        <function name="closeFormPopup">
          <argumentsTypes>
            <argumentType typecode="java.lang.Object"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Close the current form popup panel and assign the value to the configured data provider.]]></description>
          <summary><![CDATA[Close the current form popup panel and assign the value to the configured data provider.]]></summary>
          <sample><![CDATA[//Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
//do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
          <parameters>
            <parameter name="retval" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[return value for data provider]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="createCheckboxMenuItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
          <description/>
          <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="createMenuItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
          <description/>
          <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          <sample/>
        </function>
        <function name="createPopupMenu">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
          <description><![CDATA[Creates a new popup menu that can be populated with items and displayed.]]></description>
          <summary><![CDATA[Creates a new popup menu that can be populated with items and displayed.]]></summary>
          <sample><![CDATA[// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("an entry", feedback);

if (event.getSource()) {
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}]]></sample>
        </function>
        <function deprecated="true" name="createRadioButtonMenuItem">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
          <description/>
          <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          <sample/>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
            </parameter>
            <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[only triggers the shortcut when on this form]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
            </parameter>
            <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[only triggers the shortcut when on this form]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
            </parameter>
            <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[only triggers the shortcut when on this form]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="createShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="org.mozilla.javascript.Function"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Create a shortcut.]]></description>
          <summary><![CDATA[Create a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
              <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
            </parameter>
            <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[only triggers the shortcut when on this form]]></description>
            </parameter>
            <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
          </parameters>
        </function>
        <function deprecated="true" name="getMenu">
          <argumentsTypes>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#getMenu(int).]]></deprecated>
          <sample/>
        </function>
        <function name="getMenuBar">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.MenuBar" typecode="com.servoy.extensions.plugins.window.menu.MenuBar"/>
          <description><![CDATA[Get the menubar of the main window, or of a named window.]]></description>
          <summary><![CDATA[Get the menubar of the main window, or of a named window.]]></summary>
          <sample><![CDATA[// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// retrieve the menubar of the new window
var menubar = plugins.window.getMenuBar("windowName");
// add a new menu to the menubar, with an item in it
var menu = menubar.addMenu();
menu.text = "New Menu";
menu.addMenuItem("an entry", feedback);
// retrieve the menubar of the main window
var mainMenubar = plugins.window.getMenuBar();
// add a new menu to the menubar of the main window
var menuMain = mainMenubar.addMenu();
menuMain.text = "New Menu in Main Menubar";
menuMain.addMenuItem("another entry", feedback);]]></sample>
        </function>
        <function name="getMenuBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.MenuBar" typecode="com.servoy.extensions.plugins.window.menu.MenuBar"/>
          <description><![CDATA[Get the menubar of the main window, or of a named window.]]></description>
          <summary><![CDATA[Get the menubar of the main window, or of a named window.]]></summary>
          <sample><![CDATA[// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// retrieve the menubar of the new window
var menubar = plugins.window.getMenuBar("windowName");
// add a new menu to the menubar, with an item in it
var menu = menubar.addMenu();
menu.text = "New Menu";
menu.addMenuItem("an entry", feedback);
// retrieve the menubar of the main window
var mainMenubar = plugins.window.getMenuBar();
// add a new menu to the menubar of the main window
var menuMain = mainMenubar.addMenu();
menuMain.text = "New Menu in Main Menubar";
menuMain.addMenuItem("another entry", feedback);]]></sample>
          <parameters>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the name of the window]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="getMenuCount">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#getMenuCount().]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="getMenuIndexByText">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#getMenuIndexByText(String).]]></deprecated>
          <sample/>
        </function>
        <function name="getToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
          <description><![CDATA[Get the toolbar from the toolbar panel by name.]]></description>
          <summary><![CDATA[Get the toolbar from the toolbar panel by name.]]></summary>
          <sample><![CDATA[// Note: method getToolBar only works in the smart client.

// the toolbar must first be create with a call to addToolbar
plugins.window.addToolBar("toolbar_0");

// get the toolbar at the panel by name
var toolbar = plugins.window.getToolBar("toolbar_0");
// add a button to the toolbar
toolbar.addButton("button", feedback_button);]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="getToolbarNames">
          <argumentsTypes/>
          <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
          <description><![CDATA[Get all toolbar names from the toolbar panel.]]></description>
          <summary><![CDATA[Get all toolbar names from the toolbar panel.]]></summary>
          <sample><![CDATA[// Note: method getToolbarNames only works in the smart client.

// create an array of toolbar names
var names = plugins.window.getToolbarNames();

// create an empty message variable
var message = "";

// loop through the array
for (var i = 0 ; i < names.length ; i++) {
	//add the name(s) to the message
	message += names[i] + "\n";
}

// show the message
plugins.dialogs.showInfoDialog("toolbar names", message);]]></sample>
        </function>
        <function name="maximize">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></description>
          <summary><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></summary>
          <sample><![CDATA[// maximize the main window:
plugins.window.maximize();

// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// maximize the window
plugins.window.maximize("windowName");]]></sample>
        </function>
        <function name="maximize">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></description>
          <summary><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></summary>
          <sample><![CDATA[// maximize the main window:
plugins.window.maximize();

// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// maximize the window
plugins.window.maximize("windowName");]]></sample>
          <parameters>
            <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="register">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description/>
          <deprecated><![CDATA[Obsolete method.]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="removeAllMenus">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#removeAllMenus().]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="removeMenu">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#removeMenu(int).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="removeServoyToolBar">
          <argumentsTypes>
            <argumentType typecode="javax.swing.JComponent"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #removeToolBar(String).]]></deprecated>
          <sample/>
        </function>
        <function name="removeShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Remove a shortcut.]]></description>
          <summary><![CDATA[Remove a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function name="removeShortcut">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          <description><![CDATA[Remove a shortcut.]]></description>
          <summary><![CDATA[Remove a shortcut.]]></summary>
          <sample><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTE: shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts careful to make sure they work in all clients.]]></sample>
          <parameters>
            <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[only triggers the shortcut when on this form]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="removeToolBar">
          <argumentsTypes>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Remove the toolbar from the toolbar panel.]]></description>
          <summary><![CDATA[Remove the toolbar from the toolbar panel.]]></summary>
          <sample><![CDATA[// Note: method removeToolBar only works in the smart client.

// the toolbar must first be create with a call to addToolbar
var toolbar = plugins.window.addToolBar("toolbar_0");

// add a button to the toolbar
toolbar.addButton("button", feedback_button);

// removing a toolbar from the toolbar panel is done by name
// the plugin checks the existence of the toolbar
// when the toolbar does not exist it will not throw an error though.
plugins.window.removeToolBar("toolbar_0");]]></sample>
          <parameters>
            <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
          </parameters>
        </function>
        <function deprecated="true" name="resetMenuBar">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#reset().]]></deprecated>
          <sample/>
        </function>
        <function name="setFullScreen">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Bring the window into/out of fullsceen mode.]]></description>
          <summary><![CDATA[Bring the window into/out of fullsceen mode.]]></summary>
          <sample><![CDATA[// active fullscreen mode 
plugins.window.setFullScreen(true);]]></sample>
          <parameters>
            <parameter name="full" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="setMenuVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by Menu#setVisible(boolean).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="setMouseOverPopup">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
          <description/>
          <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="setPopup">
          <argumentsTypes/>
          <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
          <description/>
          <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="setPopup">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
          <description/>
          <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          <sample/>
          <parameters>
            <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
              <description><![CDATA[array of arguments]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="setStatusBarVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show or hide the statusbar.]]></description>
          <summary><![CDATA[Show or hide the statusbar.]]></summary>
          <sample><![CDATA[// hide the statusbar
plugins.window.setStatusBarVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function name="setToolBarAreaVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show or hide the toolbar area.]]></description>
          <summary><![CDATA[Show or hide the toolbar area.]]></summary>
          <sample><![CDATA[// hide the toolbar area
plugins.window.setToolBarAreaVisible(false);]]></sample>
          <parameters>
            <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
          </parameters>
        </function>
        <function deprecated="true" name="setToolBarVisible">
          <argumentsTypes>
            <argumentType typecode="boolean"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #setToolBarAreaVisible(boolean).]]></deprecated>
          <sample/>
        </function>
        <function name="showFormPopup">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
            <argumentType typecode="com.servoy.j2db.IForm"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></description>
          <summary><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></summary>
          <sample><![CDATA[//Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
//do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
          <parameters>
            <parameter name="elementToShowRelatedTo" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent">
              <description><![CDATA[element to show related to or null to center in screen]]></description>
            </parameter>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.IForm">
              <description><![CDATA[the form to show]]></description>
            </parameter>
            <parameter name="scope" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the scope to put retval into]]></description>
            </parameter>
            <parameter name="dataproviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider of scope to fill]]></description>
            </parameter>
          </parameters>
        </function>
        <function name="showFormPopup">
          <argumentsTypes>
            <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
            <argumentType typecode="com.servoy.j2db.IForm"/>
            <argumentType typecode="java.lang.Object"/>
            <argumentType typecode="java.lang.String"/>
            <argumentType typecode="int"/>
            <argumentType typecode="int"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></description>
          <summary><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></summary>
          <sample><![CDATA[//Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
//do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
          <parameters>
            <parameter name="elementToShowRelatedTo" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent">
              <description><![CDATA[element to show related to or null to center in screen]]></description>
            </parameter>
            <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.IForm">
              <description><![CDATA[the form to show]]></description>
            </parameter>
            <parameter name="scope" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
              <description><![CDATA[the scope to put retval into]]></description>
            </parameter>
            <parameter name="dataproviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
              <description><![CDATA[the dataprovider of scope to fill]]></description>
            </parameter>
            <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[popup width]]></description>
            </parameter>
            <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
              <description><![CDATA[popup height]]></description>
            </parameter>
          </parameters>
        </function>
        <function deprecated="true" name="showPopupMenu">
          <argumentsTypes>
            <argumentType typecode="[Ljava.lang.Object;"/>
          </argumentsTypes>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          <sample/>
        </function>
        <function deprecated="true" name="validateMenuBar">
          <argumentsTypes/>
          <return type="void" typecode="void"/>
          <description/>
          <deprecated><![CDATA[Replaced by MenuBar#validate().]]></deprecated>
          <sample/>
        </function>
      </functions>
    </object>
  </plugins>
</servoydoc>
