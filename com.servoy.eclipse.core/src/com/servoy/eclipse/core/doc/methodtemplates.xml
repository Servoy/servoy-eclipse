<?xml version="1.0" encoding="UTF-8"?>

<!--This file is automatically generated. Don't bother editing it, because your changes will probably be lost at the next build.-->
<root>
  <event name="onActionMethodID">
    <methodtemplate name="onAction" addtodo="true">
      <description><![CDATA[Perform the element default action]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onAfterDeleteMethodID">
    <methodtemplate name="afterDeleteRecord" addtodo="true">
      <description><![CDATA[Record after-delete trigger]]></description>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that is deleted]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onAfterInsertMethodID">
    <methodtemplate name="afterInsertRecord" addtodo="true">
      <description><![CDATA[Record after-insert trigger]]></description>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that is inserted]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onAfterUpdateMethodID">
    <methodtemplate name="afterUpdateRecord" addtodo="true">
      <description><![CDATA[Record after-update trigger]]></description>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that is updated]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onCloseMethodID">
    <methodtemplate name="onSolutionClose" type="Boolean" addtodo="true">
      <description><![CDATA[Callback method for when solution is closed, force boolean argument tells if this is a force (not stopable) close or not.]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="force" type="Boolean"><![CDATA[if false then solution close can be stopped by returning false]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDataBroadcastMethodID">
    <methodtemplate name="onDataBroadcast" addtodo="true">
      <description><![CDATA[Callback method for data broadcast]]></description>
      <arguments>
        <methodargument name="dataSource" type="String"><![CDATA[table data source]]></methodargument>
        <methodargument name="action" type="Number"><![CDATA[see SQL_ACTION_TYPES constants]]></methodargument>
        <methodargument name="pks" type="JSDataSet"><![CDATA[affected primary keys]]></methodargument>
        <methodargument name="cached" type="Boolean"><![CDATA[data was cached]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDataChangeMethodID">
    <methodtemplate name="onDataChange" type="Boolean" addtodo="true">
      <description><![CDATA[Handle changed data]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="oldValue" type="Object"><![CDATA[old value]]></methodargument>
        <methodargument name="newValue" type="Object"><![CDATA[new value]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDeleteAllRecordsCmdMethodID">
    <methodtemplate name="deleteAllRecords" addtodo="true">
      <description><![CDATA[Perform delete all records]]></description>
      <code><![CDATA[controller.deleteAllRecords()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDeleteMethodID">
    <methodtemplate name="onRecordDelete" type="Boolean" addtodo="true">
      <description><![CDATA[Record pre-delete trigger
Validate the record to be deleted.
When false is returned the record will not be deleted in the database.
When an exception is thrown the record will also not be deleted in the database but it will be added to databaseManager.getFailedRecords(),
the thrown exception can be retrieved via record.exception.getValue().]]></description>
      <code><![CDATA[// throw exception to pass info to handler, will be returned in record.exception.getValue() when record.exception is a DataException
if (not_valid) throw 'cannot delete'

// return boolean to indicate success
return true]]></code>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that will be deleted]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDeleteRecordCmdMethodID">
    <methodtemplate name="deleteRecord" addtodo="true">
      <description><![CDATA[Perform delete record]]></description>
      <code><![CDATA[controller.deleteRecord()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDoubleClickMethodID">
    <methodtemplate name="onDoubleClick" addtodo="true">
      <description><![CDATA[Perform the element double-click action]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDragEndMethodID">
    <methodtemplate name="onDragEnd" type="Number">
      <description><![CDATA[Handle end of a drag]]></description>
      <arguments>
        <methodargument name="event" type="JSDNDEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDragMethodID">
    <methodtemplate name="onDrag" type="Number" addtodo="true">
      <description><![CDATA[Handle start of a drag, it can set the data that should be transfered and should return a constant which dragndrop mode/modes is/are supported

Should return a DRAGNDROP constant or a combination of 2 constants:
DRAGNDROP.MOVE if only a move can happen,
DRAGNDROP.COPY if only a copy can happen,
DRAGNDROP.MOVE|DRAGNDROP.COPY if a move or copy can happen,
DRAGNDROP.NONE if nothing is supported (drag should start).]]></description>
      <code><![CDATA[return DRAGNDROP.NONE]]></code>
      <arguments>
        <methodargument name="event" type="JSDNDEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDragOverMethodID">
    <methodtemplate name="onDragOver" type="Boolean" addtodo="true">
      <description><![CDATA[Handle a drag over. Determines of a drop is allowed in this location.

Return true is drop is allowed, otherwise false.]]></description>
      <code><![CDATA[if(event.getSource() && event.data){
   return true;
 }
 return false;]]></code>
      <arguments>
        <methodargument name="event" type="JSDNDEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDropMethodID">
    <methodtemplate name="onDrop" type="Boolean" addtodo="true">
      <description><![CDATA[Handle a drop]]></description>
      <code><![CDATA[return false]]></code>
      <arguments>
        <methodargument name="event" type="JSDNDEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onDuplicateRecordCmdMethodID">
    <methodtemplate name="duplicateRecord" addtodo="true">
      <description><![CDATA[Perform duplicate record]]></description>
      <code><![CDATA[controller.duplicateRecord(true)]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onElementFocusGainedMethodID">
    <methodtemplate name="onElementFocusGained" type="Boolean" addtodo="true">
      <description><![CDATA[Handle focus element gaining focus]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onElementFocusLostMethodID">
    <methodtemplate name="onElementFocusLost" type="Boolean" addtodo="true">
      <description><![CDATA[Handle focus element loosing focus]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onErrorMethodID">
    <methodtemplate name="onError" type="Boolean" addtodo="true">
      <description><![CDATA[Callback method for when an error occurred]]></description>
      <code><![CDATA[application.output('Exception Object: '+ex)
application.output('MSG: '+ex.getMessage())
if (ex instanceof ServoyException)
{
	application.output('is a ServoyException')
	application.output('Errorcode: '+ex.getErrorCode())
	if (ex.getErrorCode() == ServoyException.SAVE_FAILED)
	{
 		plugins.dialogs.showErrorDialog( 'Error',  'It seems you did not fill in a required field', 'OK');
 		//Get the failed records after a save
 		var array = databaseManager.getFailedRecords()
 		for( var i = 0 ; i < array.length ; i++ )
 		{
			var record = array[i];
			application.output(record.exception);
			if (record.exception instanceof DataException)
			{
				application.output('SQL: '+record.exception.getSQL())
				application.output('SQLState: '+record.exception.getSQLState())
				application.output('VendorErrorCode: '+record.exception.getVendorErrorCode())
			}
		}
		return false
	}
}
//if returns false or no return, error is not reported to client; if returns true error is reported
//by default error report means logging the error, in smart client an error dialog will also show up
return true]]></code>
      <arguments>
        <methodargument name="ex" type="Exception"><![CDATA[exception to handle]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onFindCmdMethodID">
    <methodtemplate name="startFind" addtodo="true">
      <description><![CDATA[Perform find]]></description>
      <code><![CDATA[controller.find()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onFocusGainedMethodID">
    <methodtemplate name="onFocusGained" type="Boolean" addtodo="true">
      <description><![CDATA[Handle focus element gaining focus]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onFocusLostMethodID">
    <methodtemplate name="onFocusLost" type="Boolean" addtodo="true">
      <description><![CDATA[Handle focus element loosing focus]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onHideMethodID">
    <methodtemplate name="onHide" type="Boolean" addtodo="true">
      <description><![CDATA[Handle hide window]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onInsertMethodID">
    <methodtemplate name="onRecordInsert" type="Boolean" addtodo="true">
      <description><![CDATA[Record pre-insert trigger
Validate the record to be inserted.
When false is returned the record will not be inserted in the database.
When an exception is thrown the record will also not be inserted in the database but it will be added to databaseManager.getFailedRecords(),
the thrown exception can be retrieved via record.exception.getValue().]]></description>
      <code><![CDATA[// throw exception to pass info to handler, will be returned in record.exception.getValue() when record.exception is a DataException
if (not_valid) throw 'cannot insert'

// return boolean to indicate success
return true]]></code>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that will be inserted]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onInvertRecordsCmdMethodID">
    <methodtemplate name="invertRecords" addtodo="true">
      <description><![CDATA[Perform invert records]]></description>
      <code><![CDATA[controller.invertRecords()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onLoadMethodID">
    <methodtemplate name="onLoad" addtodo="true">
      <description><![CDATA[Callback method when form is (re)loaded]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onNewRecordCmdMethodID">
    <methodtemplate name="newRecord" addtodo="true">
      <description><![CDATA[Perform create new record]]></description>
      <code><![CDATA[controller.newRecord(true)]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onNextRecordCmdMethodID">
    <methodtemplate name="nextRecord" addtodo="true">
      <description><![CDATA[Select next record]]></description>
      <code><![CDATA[controller.setSelectedIndex(controller.getSelectedIndex()+1)]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onOmitRecordCmdMethodID">
    <methodtemplate name="omitRecord" addtodo="true">
      <description><![CDATA[Perform omit record]]></description>
      <code><![CDATA[controller.omitRecord()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onOpenMethodID">
    <methodtemplate name="onSolutionOpen" addtodo="true">
      <description><![CDATA[Callback method for when solution is opened]]></description>
    </methodtemplate>
  </event>
  <event name="onPreviousRecordCmdMethodID">
    <methodtemplate name="previousRecord" addtodo="true">
      <description><![CDATA[Select previous record]]></description>
      <code><![CDATA[controller.setSelectedIndex(controller.getSelectedIndex()-1)]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onPrintPreviewCmdMethodID">
    <methodtemplate name="printPreview" addtodo="true">
      <description><![CDATA[Perform print preview]]></description>
      <code><![CDATA[controller.showPrintPreview(false, null, 100)]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onRecordEditStartMethodID">
    <methodtemplate name="onRecordEditStart" type="Boolean" addtodo="true">
      <description><![CDATA[Callback method form when editing is started]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onRecordEditStopMethodID">
    <methodtemplate name="onRecordEditStop" type="Boolean" addtodo="true">
      <description><![CDATA[Callback method form when editing is stopped]]></description>
      <code><![CDATA[return true]]></code>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record being saved]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onRecordSelectionMethodID">
    <methodtemplate name="onRecordSelection" addtodo="true">
      <description><![CDATA[Handle record selected]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onResizeMethodID">
    <methodtemplate name="onResize" addtodo="true">
      <description><![CDATA[Callback method when form is resized]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onRightClickMethodID">
    <methodtemplate name="onRightClick" addtodo="true">
      <description><![CDATA[Perform the element right-click action]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onSearchCmdMethodID">
    <methodtemplate name="onSearch" addtodo="true">
      <description><![CDATA[Perform search]]></description>
      <code><![CDATA[controller.search(clear, reduce)]]></code>
      <arguments>
        <methodargument name="clear" type="Boolean"><![CDATA[clear last results]]></methodargument>
        <methodargument name="reduce" type="Boolean"><![CDATA[reduce search]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onShowAllRecordsCmdMethodID">
    <methodtemplate name="showAllRecords" addtodo="true">
      <description><![CDATA[Perform show-all-records]]></description>
      <code><![CDATA[controller.loadAllRecords()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onShowMethodID">
    <methodtemplate name="onShow" addtodo="true">
      <description><![CDATA[Callback method for when form is shown]]></description>
      <arguments>
        <methodargument name="firstShow" type="Boolean"><![CDATA[form is shown first time after load]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onShowOmittedRecordsCmdMethodID">
    <methodtemplate name="showOmittedRecords" addtodo="true">
      <description><![CDATA[Perform show-omitted-records]]></description>
      <code><![CDATA[controller.loadOmittedRecords()]]></code>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onSortCmdMethodID">
    <methodtemplate name="onSort" addtodo="true">
      <description><![CDATA[Perform sort]]></description>
      <code><![CDATA[controller.sort(dataProviderID+(asc?' asc':' desc'), false)]]></code>
      <arguments>
        <methodargument name="dataProviderID" type="String"><![CDATA[element data provider]]></methodargument>
        <methodargument name="asc" type="Boolean"><![CDATA[sort ascending [true] or descending [false]]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onTabChangeMethodID">
    <methodtemplate name="onTabChange" addtodo="true">
      <description><![CDATA[Callback method when the user changes tab in a tab panel]]></description>
      <arguments>
        <methodargument name="previousIndex" type="Number"><![CDATA[index of tab shown before the change]]></methodargument>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onUnLoadMethodID">
    <methodtemplate name="onUnload" addtodo="true">
      <description><![CDATA[Callback method when form is destroyed]]></description>
      <arguments>
        <methodargument name="event" type="JSEvent"><![CDATA[the event that triggered the action]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="onUpdateMethodID">
    <methodtemplate name="onRecordUpdate" type="Boolean" addtodo="true">
      <description><![CDATA[Record pre-update trigger
Validate the record to be updated.
When false is returned the record will not be updated in the database.
When an exception is thrown the record will also not be updated in the database but it will be added to databaseManager.getFailedRecords(),
the thrown exception can be retrieved via record.exception.getValue().]]></description>
      <code><![CDATA[// throw exception to pass info to handler, will be returned in record.exception.getValue() when record.exception is a DataException
if (not_valid) throw 'cannot update'

// return boolean to indicate success
return true]]></code>
      <arguments>
        <methodargument name="record" type="JSRecord"><![CDATA[record that will be updated]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
  <event name="rowBGColorCalculation">
    <methodtemplate name="rowBGColorCalculation" type="Color" addtodo="true">
      <description><![CDATA[Calculate the row background color]]></description>
      <code><![CDATA[if (selected)
  return '#c4ffff';
else if (index % 2)
  return '#f4ffff';
else
  return '#FFFFFF';]]></code>
      <arguments>
        <methodargument name="index" type="Number"><![CDATA[row index]]></methodargument>
        <methodargument name="selected" type="Boolean"><![CDATA[is the row selected]]></methodargument>
        <methodargument name="elementType" type="String"><![CDATA[element type (not supported in webclient)]]></methodargument>
        <methodargument name="dataProviderID" type="String"><![CDATA[element data provider (not supported in webclient)]]></methodargument>
        <methodargument name="formName" type="String"><![CDATA[form name]]></methodargument>
        <methodargument name="record" type="JSRecord"><![CDATA[selected record]]></methodargument>
        <methodargument name="edited" type="Boolean"><![CDATA[is the record edited]]></methodargument>
      </arguments>
    </methodtemplate>
  </event>
</root>
